// Code generated by go-swagger; DO NOT EDIT.

package conversations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetConversationitemsParams creates a new GetConversationitemsParams object
// with the default values initialized.
func NewGetConversationitemsParams() *GetConversationitemsParams {
	var ()
	return &GetConversationitemsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetConversationitemsParamsWithTimeout creates a new GetConversationitemsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetConversationitemsParamsWithTimeout(timeout time.Duration) *GetConversationitemsParams {
	var ()
	return &GetConversationitemsParams{

		timeout: timeout,
	}
}

// NewGetConversationitemsParamsWithContext creates a new GetConversationitemsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetConversationitemsParamsWithContext(ctx context.Context) *GetConversationitemsParams {
	var ()
	return &GetConversationitemsParams{

		Context: ctx,
	}
}

// NewGetConversationitemsParamsWithHTTPClient creates a new GetConversationitemsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetConversationitemsParamsWithHTTPClient(client *http.Client) *GetConversationitemsParams {
	var ()
	return &GetConversationitemsParams{
		HTTPClient: client,
	}
}

/*GetConversationitemsParams contains all the parameters to send to the API endpoint
for the get conversationitems operation typically these are written to a http.Request
*/
type GetConversationitemsParams struct {

	/*CustomerID
	  Filter for conversation events for a specific customer. Either this or subscriber_id filter is mandatory if called by admin, reseller or subscriberadmin.

	*/
	CustomerID string
	/*Direction
	  Filter for conversation events with a specific direction. One of "in", "out". Voicemails are considered as incoming only.

	*/
	Direction string
	/*FaxNumberRewriteMode
	  Force the fax numbers normalization logic (available: 'default', 'extended').

	*/
	FaxNumberRewriteMode string
	/*From
	  Filter for conversation events starting greater or equal the specified time stamp.

	*/
	From string
	/*OrderBy
	  Order collection by a specific attribute.

	*/
	OrderBy string
	/*OrderByDirection
	  Direction which the collection should be ordered by. Possible values are: asc (default), desc.

	*/
	OrderByDirection string
	/*Page
	  Pagination page which should be displayed (default: 1)

	*/
	Page string
	/*Rows
	  Number of rows in one pagination page (default: 10)

	*/
	Rows string
	/*Status
	  todo

	*/
	Status string
	/*SubscriberID
	  Filter for conversation events of a specific subscriber. Either this or customer_id filter is mandatory if called by admin, reseller or subscriberadmin.

	*/
	SubscriberID string
	/*To
	  Filter for conversation events starting lower or equal the specified time stamp.

	*/
	To string
	/*Type
	  Filter for conversation events of given types ("call", "voicemail", "sms", "fax", "xmpp"). Multiple types can be included by concatenating type strings, eg. "?type=call-voicemial".

	*/
	Type string
	/*Tz
	  Format timestamp according to the optional time zone provided here, e.g. Europe/Berlin.

	*/
	Tz string
	/*UseOwnerTz
	  Format timestamp according to the filtered customer's/subscribers's inherited time zone.

	*/
	UseOwnerTz string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get conversationitems params
func (o *GetConversationitemsParams) WithTimeout(timeout time.Duration) *GetConversationitemsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get conversationitems params
func (o *GetConversationitemsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get conversationitems params
func (o *GetConversationitemsParams) WithContext(ctx context.Context) *GetConversationitemsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get conversationitems params
func (o *GetConversationitemsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get conversationitems params
func (o *GetConversationitemsParams) WithHTTPClient(client *http.Client) *GetConversationitemsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get conversationitems params
func (o *GetConversationitemsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCustomerID adds the customerID to the get conversationitems params
func (o *GetConversationitemsParams) WithCustomerID(customerID string) *GetConversationitemsParams {
	o.SetCustomerID(customerID)
	return o
}

// SetCustomerID adds the customerId to the get conversationitems params
func (o *GetConversationitemsParams) SetCustomerID(customerID string) {
	o.CustomerID = customerID
}

// WithDirection adds the direction to the get conversationitems params
func (o *GetConversationitemsParams) WithDirection(direction string) *GetConversationitemsParams {
	o.SetDirection(direction)
	return o
}

// SetDirection adds the direction to the get conversationitems params
func (o *GetConversationitemsParams) SetDirection(direction string) {
	o.Direction = direction
}

// WithFaxNumberRewriteMode adds the faxNumberRewriteMode to the get conversationitems params
func (o *GetConversationitemsParams) WithFaxNumberRewriteMode(faxNumberRewriteMode string) *GetConversationitemsParams {
	o.SetFaxNumberRewriteMode(faxNumberRewriteMode)
	return o
}

// SetFaxNumberRewriteMode adds the faxNumberRewriteMode to the get conversationitems params
func (o *GetConversationitemsParams) SetFaxNumberRewriteMode(faxNumberRewriteMode string) {
	o.FaxNumberRewriteMode = faxNumberRewriteMode
}

// WithFrom adds the from to the get conversationitems params
func (o *GetConversationitemsParams) WithFrom(from string) *GetConversationitemsParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the get conversationitems params
func (o *GetConversationitemsParams) SetFrom(from string) {
	o.From = from
}

// WithOrderBy adds the orderBy to the get conversationitems params
func (o *GetConversationitemsParams) WithOrderBy(orderBy string) *GetConversationitemsParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the get conversationitems params
func (o *GetConversationitemsParams) SetOrderBy(orderBy string) {
	o.OrderBy = orderBy
}

// WithOrderByDirection adds the orderByDirection to the get conversationitems params
func (o *GetConversationitemsParams) WithOrderByDirection(orderByDirection string) *GetConversationitemsParams {
	o.SetOrderByDirection(orderByDirection)
	return o
}

// SetOrderByDirection adds the orderByDirection to the get conversationitems params
func (o *GetConversationitemsParams) SetOrderByDirection(orderByDirection string) {
	o.OrderByDirection = orderByDirection
}

// WithPage adds the page to the get conversationitems params
func (o *GetConversationitemsParams) WithPage(page string) *GetConversationitemsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get conversationitems params
func (o *GetConversationitemsParams) SetPage(page string) {
	o.Page = page
}

// WithRows adds the rows to the get conversationitems params
func (o *GetConversationitemsParams) WithRows(rows string) *GetConversationitemsParams {
	o.SetRows(rows)
	return o
}

// SetRows adds the rows to the get conversationitems params
func (o *GetConversationitemsParams) SetRows(rows string) {
	o.Rows = rows
}

// WithStatus adds the status to the get conversationitems params
func (o *GetConversationitemsParams) WithStatus(status string) *GetConversationitemsParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the get conversationitems params
func (o *GetConversationitemsParams) SetStatus(status string) {
	o.Status = status
}

// WithSubscriberID adds the subscriberID to the get conversationitems params
func (o *GetConversationitemsParams) WithSubscriberID(subscriberID string) *GetConversationitemsParams {
	o.SetSubscriberID(subscriberID)
	return o
}

// SetSubscriberID adds the subscriberId to the get conversationitems params
func (o *GetConversationitemsParams) SetSubscriberID(subscriberID string) {
	o.SubscriberID = subscriberID
}

// WithTo adds the to to the get conversationitems params
func (o *GetConversationitemsParams) WithTo(to string) *GetConversationitemsParams {
	o.SetTo(to)
	return o
}

// SetTo adds the to to the get conversationitems params
func (o *GetConversationitemsParams) SetTo(to string) {
	o.To = to
}

// WithType adds the typeVar to the get conversationitems params
func (o *GetConversationitemsParams) WithType(typeVar string) *GetConversationitemsParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get conversationitems params
func (o *GetConversationitemsParams) SetType(typeVar string) {
	o.Type = typeVar
}

// WithTz adds the tz to the get conversationitems params
func (o *GetConversationitemsParams) WithTz(tz string) *GetConversationitemsParams {
	o.SetTz(tz)
	return o
}

// SetTz adds the tz to the get conversationitems params
func (o *GetConversationitemsParams) SetTz(tz string) {
	o.Tz = tz
}

// WithUseOwnerTz adds the useOwnerTz to the get conversationitems params
func (o *GetConversationitemsParams) WithUseOwnerTz(useOwnerTz string) *GetConversationitemsParams {
	o.SetUseOwnerTz(useOwnerTz)
	return o
}

// SetUseOwnerTz adds the useOwnerTz to the get conversationitems params
func (o *GetConversationitemsParams) SetUseOwnerTz(useOwnerTz string) {
	o.UseOwnerTz = useOwnerTz
}

// WriteToRequest writes these params to a swagger request
func (o *GetConversationitemsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param customer_id
	qrCustomerID := o.CustomerID
	qCustomerID := qrCustomerID
	if qCustomerID != "" {
		if err := r.SetQueryParam("customer_id", qCustomerID); err != nil {
			return err
		}
	}

	// query param direction
	qrDirection := o.Direction
	qDirection := qrDirection
	if qDirection != "" {
		if err := r.SetQueryParam("direction", qDirection); err != nil {
			return err
		}
	}

	// query param fax_number_rewrite_mode
	qrFaxNumberRewriteMode := o.FaxNumberRewriteMode
	qFaxNumberRewriteMode := qrFaxNumberRewriteMode
	if qFaxNumberRewriteMode != "" {
		if err := r.SetQueryParam("fax_number_rewrite_mode", qFaxNumberRewriteMode); err != nil {
			return err
		}
	}

	// query param from
	qrFrom := o.From
	qFrom := qrFrom
	if qFrom != "" {
		if err := r.SetQueryParam("from", qFrom); err != nil {
			return err
		}
	}

	// query param order_by
	qrOrderBy := o.OrderBy
	qOrderBy := qrOrderBy
	if qOrderBy != "" {
		if err := r.SetQueryParam("order_by", qOrderBy); err != nil {
			return err
		}
	}

	// query param order_by_direction
	qrOrderByDirection := o.OrderByDirection
	qOrderByDirection := qrOrderByDirection
	if qOrderByDirection != "" {
		if err := r.SetQueryParam("order_by_direction", qOrderByDirection); err != nil {
			return err
		}
	}

	// query param page
	qrPage := o.Page
	qPage := qrPage
	if qPage != "" {
		if err := r.SetQueryParam("page", qPage); err != nil {
			return err
		}
	}

	// query param rows
	qrRows := o.Rows
	qRows := qrRows
	if qRows != "" {
		if err := r.SetQueryParam("rows", qRows); err != nil {
			return err
		}
	}

	// query param status
	qrStatus := o.Status
	qStatus := qrStatus
	if qStatus != "" {
		if err := r.SetQueryParam("status", qStatus); err != nil {
			return err
		}
	}

	// query param subscriber_id
	qrSubscriberID := o.SubscriberID
	qSubscriberID := qrSubscriberID
	if qSubscriberID != "" {
		if err := r.SetQueryParam("subscriber_id", qSubscriberID); err != nil {
			return err
		}
	}

	// query param to
	qrTo := o.To
	qTo := qrTo
	if qTo != "" {
		if err := r.SetQueryParam("to", qTo); err != nil {
			return err
		}
	}

	// query param type
	qrType := o.Type
	qType := qrType
	if qType != "" {
		if err := r.SetQueryParam("type", qType); err != nil {
			return err
		}
	}

	// query param tz
	qrTz := o.Tz
	qTz := qrTz
	if qTz != "" {
		if err := r.SetQueryParam("tz", qTz); err != nil {
			return err
		}
	}

	// query param use_owner_tz
	qrUseOwnerTz := o.UseOwnerTz
	qUseOwnerTz := qrUseOwnerTz
	if qUseOwnerTz != "" {
		if err := r.SetQueryParam("use_owner_tz", qUseOwnerTz); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
