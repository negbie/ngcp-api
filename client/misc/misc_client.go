// Code generated by go-swagger; DO NOT EDIT.

package misc

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new misc API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for misc API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AdmincertsPost creates a new admin cert

TODO: Add Description
*/
func (a *Client) AdmincertsPost(params *AdmincertsPostParams) (*AdmincertsPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdmincertsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AdmincertsPost",
		Method:             "POST",
		PathPattern:        "/admincerts/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdmincertsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdmincertsPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AdmincertsPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ApplyrewritesPost creates a new apply rewrite

TODO: Add Description
*/
func (a *Client) ApplyrewritesPost(params *ApplyrewritesPostParams) (*ApplyrewritesPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewApplyrewritesPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApplyrewritesPost",
		Method:             "POST",
		PathPattern:        "/applyrewrites/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ApplyrewritesPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ApplyrewritesPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ApplyrewritesPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CallcontrolsPost creates a new call control

TODO: Add Description
*/
func (a *Client) CallcontrolsPost(params *CallcontrolsPostParams) (*CallcontrolsPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCallcontrolsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CallcontrolsPost",
		Method:             "POST",
		PathPattern:        "/callcontrols/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CallcontrolsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CallcontrolsPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CallcontrolsPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CallrecordingfilesByIDGet gets a specific call recording file

TODO: Add Description
*/
func (a *Client) CallrecordingfilesByIDGet(params *CallrecordingfilesByIDGetParams) (*CallrecordingfilesByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCallrecordingfilesByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CallrecordingfilesByIdGet",
		Method:             "GET",
		PathPattern:        "/callrecordingfiles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CallrecordingfilesByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CallrecordingfilesByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CallrecordingfilesByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FaxrecordingsByIDGet gets a specific fax recording

TODO: Add Description
*/
func (a *Client) FaxrecordingsByIDGet(params *FaxrecordingsByIDGetParams) (*FaxrecordingsByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFaxrecordingsByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FaxrecordingsByIdGet",
		Method:             "GET",
		PathPattern:        "/faxrecordings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FaxrecordingsByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FaxrecordingsByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for FaxrecordingsByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PartycallcontrolsPost creates a new party call control

TODO: Add Description
*/
func (a *Client) PartycallcontrolsPost(params *PartycallcontrolsPostParams) (*PartycallcontrolsPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPartycallcontrolsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PartycallcontrolsPost",
		Method:             "POST",
		PathPattern:        "/partycallcontrols/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PartycallcontrolsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PartycallcontrolsPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PartycallcontrolsPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PbxdeviceconfigfilesByIDGet gets a specific pbx device config file

TODO: Add Description
*/
func (a *Client) PbxdeviceconfigfilesByIDGet(params *PbxdeviceconfigfilesByIDGetParams) (*PbxdeviceconfigfilesByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPbxdeviceconfigfilesByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PbxdeviceconfigfilesByIdGet",
		Method:             "GET",
		PathPattern:        "/pbxdeviceconfigfiles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PbxdeviceconfigfilesByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PbxdeviceconfigfilesByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PbxdeviceconfigfilesByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PbxdevicefirmwarebinariesByIDGet gets a specific pbx device firmware binary

TODO: Add Description
*/
func (a *Client) PbxdevicefirmwarebinariesByIDGet(params *PbxdevicefirmwarebinariesByIDGetParams) (*PbxdevicefirmwarebinariesByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPbxdevicefirmwarebinariesByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PbxdevicefirmwarebinariesByIdGet",
		Method:             "GET",
		PathPattern:        "/pbxdevicefirmwarebinaries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PbxdevicefirmwarebinariesByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PbxdevicefirmwarebinariesByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PbxdevicefirmwarebinariesByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PbxdevicemodelimagesByIDGet gets a specific pbx device model image

TODO: Add Description
*/
func (a *Client) PbxdevicemodelimagesByIDGet(params *PbxdevicemodelimagesByIDGetParams) (*PbxdevicemodelimagesByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPbxdevicemodelimagesByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PbxdevicemodelimagesByIdGet",
		Method:             "GET",
		PathPattern:        "/pbxdevicemodelimages/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PbxdevicemodelimagesByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PbxdevicemodelimagesByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PbxdevicemodelimagesByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SoundfilerecordingsByIDGet gets a specific sound file recording

TODO: Add Description
*/
func (a *Client) SoundfilerecordingsByIDGet(params *SoundfilerecordingsByIDGetParams) (*SoundfilerecordingsByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSoundfilerecordingsByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SoundfilerecordingsByIdGet",
		Method:             "GET",
		PathPattern:        "/soundfilerecordings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SoundfilerecordingsByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SoundfilerecordingsByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SoundfilerecordingsByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TopupcashPost creates a new topup cash

TODO: Add Description
*/
func (a *Client) TopupcashPost(params *TopupcashPostParams) (*TopupcashPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTopupcashPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TopupcashPost",
		Method:             "POST",
		PathPattern:        "/topupcash/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TopupcashPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TopupcashPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TopupcashPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TopupvouchersPost creates a new topup voucher

TODO: Add Description
*/
func (a *Client) TopupvouchersPost(params *TopupvouchersPostParams) (*TopupvouchersPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTopupvouchersPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TopupvouchersPost",
		Method:             "POST",
		PathPattern:        "/topupvouchers/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TopupvouchersPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TopupvouchersPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TopupvouchersPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VoicemailrecordingsByIDGet gets a specific voicemail recording

TODO: Add Description
*/
func (a *Client) VoicemailrecordingsByIDGet(params *VoicemailrecordingsByIDGetParams) (*VoicemailrecordingsByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVoicemailrecordingsByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VoicemailrecordingsByIdGet",
		Method:             "GET",
		PathPattern:        "/voicemailrecordings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VoicemailrecordingsByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VoicemailrecordingsByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for VoicemailrecordingsByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
