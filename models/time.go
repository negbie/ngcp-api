// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Time Time
// swagger:model Time
type Time struct {

	// hour
	// Required: true
	Hour *string `json:"hour"`

	// mday
	// Required: true
	Mday *string `json:"mday"`

	// minute
	// Required: true
	Minute *string `json:"minute"`

	// month
	// Required: true
	Month *string `json:"month"`

	// wday
	// Required: true
	Wday *string `json:"wday"`

	// year
	// Required: true
	Year *string `json:"year"`
}

// Validate validates this time
func (m *Time) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHour(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMday(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinute(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWday(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateYear(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Time) validateHour(formats strfmt.Registry) error {

	if err := validate.Required("hour", "body", m.Hour); err != nil {
		return err
	}

	return nil
}

func (m *Time) validateMday(formats strfmt.Registry) error {

	if err := validate.Required("mday", "body", m.Mday); err != nil {
		return err
	}

	return nil
}

func (m *Time) validateMinute(formats strfmt.Registry) error {

	if err := validate.Required("minute", "body", m.Minute); err != nil {
		return err
	}

	return nil
}

func (m *Time) validateMonth(formats strfmt.Registry) error {

	if err := validate.Required("month", "body", m.Month); err != nil {
		return err
	}

	return nil
}

func (m *Time) validateWday(formats strfmt.Registry) error {

	if err := validate.Required("wday", "body", m.Wday); err != nil {
		return err
	}

	return nil
}

func (m *Time) validateYear(formats strfmt.Registry) error {

	if err := validate.Required("year", "body", m.Year); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Time) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Time) UnmarshalBinary(b []byte) error {
	var res Time
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
