// Code generated by go-swagger; DO NOT EDIT.

package balanceintervals

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetBalanceIntervalitemsParams creates a new GetBalanceIntervalitemsParams object
// with the default values initialized.
func NewGetBalanceIntervalitemsParams() *GetBalanceIntervalitemsParams {
	var ()
	return &GetBalanceIntervalitemsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetBalanceIntervalitemsParamsWithTimeout creates a new GetBalanceIntervalitemsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetBalanceIntervalitemsParamsWithTimeout(timeout time.Duration) *GetBalanceIntervalitemsParams {
	var ()
	return &GetBalanceIntervalitemsParams{

		timeout: timeout,
	}
}

// NewGetBalanceIntervalitemsParamsWithContext creates a new GetBalanceIntervalitemsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetBalanceIntervalitemsParamsWithContext(ctx context.Context) *GetBalanceIntervalitemsParams {
	var ()
	return &GetBalanceIntervalitemsParams{

		Context: ctx,
	}
}

// NewGetBalanceIntervalitemsParamsWithHTTPClient creates a new GetBalanceIntervalitemsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetBalanceIntervalitemsParamsWithHTTPClient(client *http.Client) *GetBalanceIntervalitemsParams {
	var ()
	return &GetBalanceIntervalitemsParams{
		HTTPClient: client,
	}
}

/*GetBalanceIntervalitemsParams contains all the parameters to send to the API endpoint
for the get balance intervalitems operation typically these are written to a http.Request
*/
type GetBalanceIntervalitemsParams struct {

	/*ContactID
	  Filter for contracts with a specific contact id

	*/
	ContactID string
	/*ExternalID
	  Filter for contracts with a specific external id

	*/
	ExternalID string
	/*OrderBy
	  Order collection by a specific attribute.

	*/
	OrderBy string
	/*OrderByDirection
	  Direction which the collection should be ordered by. Possible values are: asc (default), desc.

	*/
	OrderByDirection string
	/*Page
	  Pagination page which should be displayed (default: 1)

	*/
	Page string
	/*ResellerID
	  Filter for actual balance intervals of customers belonging to a specific reseller

	*/
	ResellerID string
	/*Rows
	  Number of rows in one pagination page (default: 10)

	*/
	Rows string
	/*Status
	  Filter for contracts with a specific status (except "terminated")

	*/
	Status string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get balance intervalitems params
func (o *GetBalanceIntervalitemsParams) WithTimeout(timeout time.Duration) *GetBalanceIntervalitemsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get balance intervalitems params
func (o *GetBalanceIntervalitemsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get balance intervalitems params
func (o *GetBalanceIntervalitemsParams) WithContext(ctx context.Context) *GetBalanceIntervalitemsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get balance intervalitems params
func (o *GetBalanceIntervalitemsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get balance intervalitems params
func (o *GetBalanceIntervalitemsParams) WithHTTPClient(client *http.Client) *GetBalanceIntervalitemsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get balance intervalitems params
func (o *GetBalanceIntervalitemsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContactID adds the contactID to the get balance intervalitems params
func (o *GetBalanceIntervalitemsParams) WithContactID(contactID string) *GetBalanceIntervalitemsParams {
	o.SetContactID(contactID)
	return o
}

// SetContactID adds the contactId to the get balance intervalitems params
func (o *GetBalanceIntervalitemsParams) SetContactID(contactID string) {
	o.ContactID = contactID
}

// WithExternalID adds the externalID to the get balance intervalitems params
func (o *GetBalanceIntervalitemsParams) WithExternalID(externalID string) *GetBalanceIntervalitemsParams {
	o.SetExternalID(externalID)
	return o
}

// SetExternalID adds the externalId to the get balance intervalitems params
func (o *GetBalanceIntervalitemsParams) SetExternalID(externalID string) {
	o.ExternalID = externalID
}

// WithOrderBy adds the orderBy to the get balance intervalitems params
func (o *GetBalanceIntervalitemsParams) WithOrderBy(orderBy string) *GetBalanceIntervalitemsParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the get balance intervalitems params
func (o *GetBalanceIntervalitemsParams) SetOrderBy(orderBy string) {
	o.OrderBy = orderBy
}

// WithOrderByDirection adds the orderByDirection to the get balance intervalitems params
func (o *GetBalanceIntervalitemsParams) WithOrderByDirection(orderByDirection string) *GetBalanceIntervalitemsParams {
	o.SetOrderByDirection(orderByDirection)
	return o
}

// SetOrderByDirection adds the orderByDirection to the get balance intervalitems params
func (o *GetBalanceIntervalitemsParams) SetOrderByDirection(orderByDirection string) {
	o.OrderByDirection = orderByDirection
}

// WithPage adds the page to the get balance intervalitems params
func (o *GetBalanceIntervalitemsParams) WithPage(page string) *GetBalanceIntervalitemsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get balance intervalitems params
func (o *GetBalanceIntervalitemsParams) SetPage(page string) {
	o.Page = page
}

// WithResellerID adds the resellerID to the get balance intervalitems params
func (o *GetBalanceIntervalitemsParams) WithResellerID(resellerID string) *GetBalanceIntervalitemsParams {
	o.SetResellerID(resellerID)
	return o
}

// SetResellerID adds the resellerId to the get balance intervalitems params
func (o *GetBalanceIntervalitemsParams) SetResellerID(resellerID string) {
	o.ResellerID = resellerID
}

// WithRows adds the rows to the get balance intervalitems params
func (o *GetBalanceIntervalitemsParams) WithRows(rows string) *GetBalanceIntervalitemsParams {
	o.SetRows(rows)
	return o
}

// SetRows adds the rows to the get balance intervalitems params
func (o *GetBalanceIntervalitemsParams) SetRows(rows string) {
	o.Rows = rows
}

// WithStatus adds the status to the get balance intervalitems params
func (o *GetBalanceIntervalitemsParams) WithStatus(status string) *GetBalanceIntervalitemsParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the get balance intervalitems params
func (o *GetBalanceIntervalitemsParams) SetStatus(status string) {
	o.Status = status
}

// WriteToRequest writes these params to a swagger request
func (o *GetBalanceIntervalitemsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param contact_id
	qrContactID := o.ContactID
	qContactID := qrContactID
	if qContactID != "" {
		if err := r.SetQueryParam("contact_id", qContactID); err != nil {
			return err
		}
	}

	// query param external_id
	qrExternalID := o.ExternalID
	qExternalID := qrExternalID
	if qExternalID != "" {
		if err := r.SetQueryParam("external_id", qExternalID); err != nil {
			return err
		}
	}

	// query param order_by
	qrOrderBy := o.OrderBy
	qOrderBy := qrOrderBy
	if qOrderBy != "" {
		if err := r.SetQueryParam("order_by", qOrderBy); err != nil {
			return err
		}
	}

	// query param order_by_direction
	qrOrderByDirection := o.OrderByDirection
	qOrderByDirection := qrOrderByDirection
	if qOrderByDirection != "" {
		if err := r.SetQueryParam("order_by_direction", qOrderByDirection); err != nil {
			return err
		}
	}

	// query param page
	qrPage := o.Page
	qPage := qrPage
	if qPage != "" {
		if err := r.SetQueryParam("page", qPage); err != nil {
			return err
		}
	}

	// query param reseller_id
	qrResellerID := o.ResellerID
	qResellerID := qrResellerID
	if qResellerID != "" {
		if err := r.SetQueryParam("reseller_id", qResellerID); err != nil {
			return err
		}
	}

	// query param rows
	qrRows := o.Rows
	qRows := qrRows
	if qRows != "" {
		if err := r.SetQueryParam("rows", qRows); err != nil {
			return err
		}
	}

	// query param status
	qrStatus := o.Status
	qStatus := qrStatus
	if qStatus != "" {
		if err := r.SetQueryParam("status", qStatus); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
