// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FaxserverSettings3 FaxserverSettings3
// swagger:model FaxserverSettings3
type FaxserverSettings3 struct {

	// active
	// Required: true
	Active *string `json:"active"`

	// destinations
	// Required: true
	Destinations []*Destination34 `json:"destinations"`

	// ecm
	// Required: true
	Ecm *string `json:"ecm"`

	// name
	// Required: true
	Name *string `json:"name"`

	// password
	// Required: true
	Password *string `json:"password"`

	// t38
	// Required: true
	T38 *string `json:"t38"`
}

// Validate validates this faxserver settings3
func (m *FaxserverSettings3) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEcm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateT38(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FaxserverSettings3) validateActive(formats strfmt.Registry) error {

	if err := validate.Required("active", "body", m.Active); err != nil {
		return err
	}

	return nil
}

func (m *FaxserverSettings3) validateDestinations(formats strfmt.Registry) error {

	if err := validate.Required("destinations", "body", m.Destinations); err != nil {
		return err
	}

	for i := 0; i < len(m.Destinations); i++ {
		if swag.IsZero(m.Destinations[i]) { // not required
			continue
		}

		if m.Destinations[i] != nil {
			if err := m.Destinations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("destinations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FaxserverSettings3) validateEcm(formats strfmt.Registry) error {

	if err := validate.Required("ecm", "body", m.Ecm); err != nil {
		return err
	}

	return nil
}

func (m *FaxserverSettings3) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *FaxserverSettings3) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	return nil
}

func (m *FaxserverSettings3) validateT38(formats strfmt.Registry) error {

	if err := validate.Required("t38", "body", m.T38); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FaxserverSettings3) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FaxserverSettings3) UnmarshalBinary(b []byte) error {
	var res FaxserverSettings3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
