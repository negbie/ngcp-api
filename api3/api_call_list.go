/*
 * NGCP API
 *
 * Sipwise NGCP API (role admin)
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ _context.Context
)

// CallListApiService CallListApi service
type CallListApiService service

// CalllistsGetOpts Optional parameters for the method 'CalllistsGet'
type CalllistsGetOpts struct {
    Tz optional.String
    UseOwnerTz optional.String
    SubscriberId optional.String
    CustomerId optional.String
    AliasField optional.String
    Status optional.String
    StatusNe optional.String
    RatingStatus optional.String
    RatingStatusNe optional.String
    Type_ optional.String
    TypeNe optional.String
    Direction optional.String
    StartGe optional.String
    StartLe optional.String
    InitGe optional.String
    InitLe optional.String
    CallId optional.String
    OwnCli optional.String
    OrderBy optional.String
    OrderByDirection optional.String
    Page optional.Int32
    Rows optional.Int32
}

/*
CalllistsGet Get CallList items
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *CalllistsGetOpts - Optional Parameters:
 * @param "Tz" (optional.String) -  Format start_time according to the optional time zone provided here, e.g. Europe/Berlin.
 * @param "UseOwnerTz" (optional.String) -  Format start_time according to the filtered customer's/subscribers's inherited time zone.
 * @param "SubscriberId" (optional.String) -  Filter for calls for a specific subscriber. Either this or customer_id is mandatory if called by admin, reseller or subscriberadmin to filter list down to a specific subscriber in order to properly determine the direction of calls.
 * @param "CustomerId" (optional.String) -  Filter for calls for a specific customer. Either this or subscriber_id is mandatory if called by admin, reseller or subscriberadmin to filter list down to a specific customer. For calls within the same customer_id, the direction will always be \"out\".
 * @param "AliasField" (optional.String) -  Set this parameter for example to \"gpp0\" if you store alias numbers in the gpp0 preference and want to have that value shown as other CLI for calls from or to such a local subscriber.
 * @param "Status" (optional.String) -  Filter for calls with a specific status. One of \"ok\", \"busy\", \"noanswer\", \"cancel\", \"offline\", \"timeout\", \"other\".
 * @param "StatusNe" (optional.String) -  Filter for calls not having a specific status. One of \"ok\", \"busy\", \"noanswer\", \"cancel\", \"offline\", \"timeout\", \"other\".
 * @param "RatingStatus" (optional.String) -  Filter for calls having a specific rating status. Comma separated list of \"ok\", \"unrated\", \"failed\".
 * @param "RatingStatusNe" (optional.String) -  Filter for calls not having a specific rating status. Comma separated list of \"ok\", \"unrated\", \"failed\".
 * @param "Type_" (optional.String) -  Filter for calls with a specific type. One of \"call\", \"cfu\", \"cfb\", \"cft\", \"cfna\", \"cfs\", \"cfr\".
 * @param "TypeNe" (optional.String) -  Filter for calls not having a specific type. One of \"call\", \"cfu\", \"cfb\", \"cft\", \"cfna\", \"cfs\", \"cfr\".
 * @param "Direction" (optional.String) -  Filter for calls with a specific direction. One of \"in\", \"out\".
 * @param "StartGe" (optional.String) -  Filter for calls starting greater or equal the specified time stamp.
 * @param "StartLe" (optional.String) -  Filter for calls starting lower or equal the specified time stamp.
 * @param "InitGe" (optional.String) -  Filter for calls initiated greater or equal the specified time stamp.
 * @param "InitLe" (optional.String) -  Filter for calls initiated lower or equal the specified time stamp.
 * @param "CallId" (optional.String) -  Filter for a particular call_id prefix and sort by call leg depth.
 * @param "OwnCli" (optional.String) -  Filter calls by a specific number that is a part of in or out calls.
 * @param "OrderBy" (optional.String) -  Order collection by a specific attribute.
 * @param "OrderByDirection" (optional.String) -  Direction which the collection should be ordered by. Possible values are: asc (default), desc.
 * @param "Page" (optional.Int32) -  Pagination page which should be displayed (default: 1)
 * @param "Rows" (optional.Int32) -  Number of rows in one pagination page (default: 10)
@return []CallList
*/
func (a *CallListApiService) CalllistsGet(ctx _context.Context, localVarOptionals *CalllistsGetOpts) ([]CallList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []CallList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/calllists/"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Tz.IsSet() {
		localVarQueryParams.Add("tz", parameterToString(localVarOptionals.Tz.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UseOwnerTz.IsSet() {
		localVarQueryParams.Add("use_owner_tz", parameterToString(localVarOptionals.UseOwnerTz.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SubscriberId.IsSet() {
		localVarQueryParams.Add("subscriber_id", parameterToString(localVarOptionals.SubscriberId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CustomerId.IsSet() {
		localVarQueryParams.Add("customer_id", parameterToString(localVarOptionals.CustomerId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AliasField.IsSet() {
		localVarQueryParams.Add("alias_field", parameterToString(localVarOptionals.AliasField.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Status.IsSet() {
		localVarQueryParams.Add("status", parameterToString(localVarOptionals.Status.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StatusNe.IsSet() {
		localVarQueryParams.Add("status_ne", parameterToString(localVarOptionals.StatusNe.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RatingStatus.IsSet() {
		localVarQueryParams.Add("rating_status", parameterToString(localVarOptionals.RatingStatus.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RatingStatusNe.IsSet() {
		localVarQueryParams.Add("rating_status_ne", parameterToString(localVarOptionals.RatingStatusNe.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TypeNe.IsSet() {
		localVarQueryParams.Add("type_ne", parameterToString(localVarOptionals.TypeNe.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Direction.IsSet() {
		localVarQueryParams.Add("direction", parameterToString(localVarOptionals.Direction.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartGe.IsSet() {
		localVarQueryParams.Add("start_ge", parameterToString(localVarOptionals.StartGe.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StartLe.IsSet() {
		localVarQueryParams.Add("start_le", parameterToString(localVarOptionals.StartLe.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.InitGe.IsSet() {
		localVarQueryParams.Add("init_ge", parameterToString(localVarOptionals.InitGe.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.InitLe.IsSet() {
		localVarQueryParams.Add("init_le", parameterToString(localVarOptionals.InitLe.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CallId.IsSet() {
		localVarQueryParams.Add("call_id", parameterToString(localVarOptionals.CallId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OwnCli.IsSet() {
		localVarQueryParams.Add("own_cli", parameterToString(localVarOptionals.OwnCli.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OrderBy.IsSet() {
		localVarQueryParams.Add("order_by", parameterToString(localVarOptionals.OrderBy.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OrderByDirection.IsSet() {
		localVarQueryParams.Add("order_by_direction", parameterToString(localVarOptionals.OrderByDirection.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Page.IsSet() {
		localVarQueryParams.Add("page", parameterToString(localVarOptionals.Page.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Rows.IsSet() {
		localVarQueryParams.Add("rows", parameterToString(localVarOptionals.Rows.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
CalllistsIdGet Get a specific CallList
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
@return CallList
*/
func (a *CallListApiService) CalllistsIdGet(ctx _context.Context, id int32) (CallList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CallList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/calllists/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(id, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
