// Code generated by go-swagger; DO NOT EDIT.

package misc

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new misc API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for misc API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateanewAdminCert(params *CreateanewAdminCertParams) (*CreateanewAdminCertCreated, error)

	CreateanewApplyRewrite(params *CreateanewApplyRewriteParams) (*CreateanewApplyRewriteCreated, error)

	CreateanewCallControl(params *CreateanewCallControlParams) (*CreateanewCallControlCreated, error)

	CreateanewPartyCallControl(params *CreateanewPartyCallControlParams) (*CreateanewPartyCallControlCreated, error)

	CreateanewTopupCash(params *CreateanewTopupCashParams) (*CreateanewTopupCashCreated, error)

	CreateanewTopupVoucher(params *CreateanewTopupVoucherParams) (*CreateanewTopupVoucherCreated, error)

	GetaspecificCallRecordingFile(params *GetaspecificCallRecordingFileParams) (*GetaspecificCallRecordingFileOK, error)

	GetaspecificFaxRecording(params *GetaspecificFaxRecordingParams) (*GetaspecificFaxRecordingOK, error)

	GetaspecificPbxDeviceConfigFile(params *GetaspecificPbxDeviceConfigFileParams) (*GetaspecificPbxDeviceConfigFileOK, error)

	GetaspecificPbxDeviceFirmwareBinary(params *GetaspecificPbxDeviceFirmwareBinaryParams) (*GetaspecificPbxDeviceFirmwareBinaryOK, error)

	GetaspecificPbxDeviceModelImage(params *GetaspecificPbxDeviceModelImageParams) (*GetaspecificPbxDeviceModelImageOK, error)

	GetaspecificSoundFileRecording(params *GetaspecificSoundFileRecordingParams) (*GetaspecificSoundFileRecordingOK, error)

	GetaspecificVoicemailRecording(params *GetaspecificVoicemailRecordingParams) (*GetaspecificVoicemailRecordingOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateanewAdminCert creates a new admin cert
*/
func (a *Client) CreateanewAdminCert(params *CreateanewAdminCertParams) (*CreateanewAdminCertCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateanewAdminCertParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateanewAdminCert",
		Method:             "POST",
		PathPattern:        "/admincerts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateanewAdminCertReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateanewAdminCertCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateanewAdminCert: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateanewApplyRewrite creates a new apply rewrite
*/
func (a *Client) CreateanewApplyRewrite(params *CreateanewApplyRewriteParams) (*CreateanewApplyRewriteCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateanewApplyRewriteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateanewApplyRewrite",
		Method:             "POST",
		PathPattern:        "/applyrewrites",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateanewApplyRewriteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateanewApplyRewriteCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateanewApplyRewrite: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateanewCallControl creates a new call control
*/
func (a *Client) CreateanewCallControl(params *CreateanewCallControlParams) (*CreateanewCallControlCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateanewCallControlParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateanewCallControl",
		Method:             "POST",
		PathPattern:        "/callcontrols",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateanewCallControlReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateanewCallControlCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateanewCallControl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateanewPartyCallControl creates a new party call control
*/
func (a *Client) CreateanewPartyCallControl(params *CreateanewPartyCallControlParams) (*CreateanewPartyCallControlCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateanewPartyCallControlParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateanewPartyCallControl",
		Method:             "POST",
		PathPattern:        "/partycallcontrols",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateanewPartyCallControlReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateanewPartyCallControlCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateanewPartyCallControl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateanewTopupCash creates a new topup cash
*/
func (a *Client) CreateanewTopupCash(params *CreateanewTopupCashParams) (*CreateanewTopupCashCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateanewTopupCashParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateanewTopupCash",
		Method:             "POST",
		PathPattern:        "/topupcash",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateanewTopupCashReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateanewTopupCashCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateanewTopupCash: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateanewTopupVoucher creates a new topup voucher
*/
func (a *Client) CreateanewTopupVoucher(params *CreateanewTopupVoucherParams) (*CreateanewTopupVoucherCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateanewTopupVoucherParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateanewTopupVoucher",
		Method:             "POST",
		PathPattern:        "/topupvouchers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateanewTopupVoucherReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateanewTopupVoucherCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateanewTopupVoucher: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificCallRecordingFile gets a specific call recording file
*/
func (a *Client) GetaspecificCallRecordingFile(params *GetaspecificCallRecordingFileParams) (*GetaspecificCallRecordingFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificCallRecordingFileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificCallRecordingFile",
		Method:             "GET",
		PathPattern:        "/callrecordingfiles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificCallRecordingFileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificCallRecordingFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificCallRecordingFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificFaxRecording gets a specific fax recording
*/
func (a *Client) GetaspecificFaxRecording(params *GetaspecificFaxRecordingParams) (*GetaspecificFaxRecordingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificFaxRecordingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificFaxRecording",
		Method:             "GET",
		PathPattern:        "/faxrecordings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificFaxRecordingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificFaxRecordingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificFaxRecording: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificPbxDeviceConfigFile gets a specific pbx device config file
*/
func (a *Client) GetaspecificPbxDeviceConfigFile(params *GetaspecificPbxDeviceConfigFileParams) (*GetaspecificPbxDeviceConfigFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificPbxDeviceConfigFileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificPbxDeviceConfigFile",
		Method:             "GET",
		PathPattern:        "/pbxdeviceconfigfiles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificPbxDeviceConfigFileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificPbxDeviceConfigFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificPbxDeviceConfigFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificPbxDeviceFirmwareBinary gets a specific pbx device firmware binary
*/
func (a *Client) GetaspecificPbxDeviceFirmwareBinary(params *GetaspecificPbxDeviceFirmwareBinaryParams) (*GetaspecificPbxDeviceFirmwareBinaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificPbxDeviceFirmwareBinaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificPbxDeviceFirmwareBinary",
		Method:             "GET",
		PathPattern:        "/pbxdevicefirmwarebinaries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificPbxDeviceFirmwareBinaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificPbxDeviceFirmwareBinaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificPbxDeviceFirmwareBinary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificPbxDeviceModelImage gets a specific pbx device model image
*/
func (a *Client) GetaspecificPbxDeviceModelImage(params *GetaspecificPbxDeviceModelImageParams) (*GetaspecificPbxDeviceModelImageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificPbxDeviceModelImageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificPbxDeviceModelImage",
		Method:             "GET",
		PathPattern:        "/pbxdevicemodelimages/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificPbxDeviceModelImageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificPbxDeviceModelImageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificPbxDeviceModelImage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificSoundFileRecording gets a specific sound file recording
*/
func (a *Client) GetaspecificSoundFileRecording(params *GetaspecificSoundFileRecordingParams) (*GetaspecificSoundFileRecordingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificSoundFileRecordingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificSoundFileRecording",
		Method:             "GET",
		PathPattern:        "/soundfilerecordings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificSoundFileRecordingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificSoundFileRecordingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificSoundFileRecording: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificVoicemailRecording gets a specific voicemail recording
*/
func (a *Client) GetaspecificVoicemailRecording(params *GetaspecificVoicemailRecordingParams) (*GetaspecificVoicemailRecordingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificVoicemailRecordingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificVoicemailRecording",
		Method:             "GET",
		PathPattern:        "/voicemailrecordings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificVoicemailRecordingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificVoicemailRecordingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificVoicemailRecording: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
