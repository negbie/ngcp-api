// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AdminsGet gets admin items

TODO: Add Description
*/
func (a *Client) AdminsGet(params *AdminsGetParams) (*AdminsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AdminsGet",
		Method:             "GET",
		PathPattern:        "/admins",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdminsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AdminsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AdminsPost creates a new admin

TODO: Add Description
*/
func (a *Client) AdminsPost(params *AdminsPostParams) (*AdminsPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AdminsPost",
		Method:             "POST",
		PathPattern:        "/admins/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdminsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminsPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AdminsPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BillingfeesGet gets billing fee items

TODO: Add Description
*/
func (a *Client) BillingfeesGet(params *BillingfeesGetParams) (*BillingfeesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingfeesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BillingfeesGet",
		Method:             "GET",
		PathPattern:        "/billingfees",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingfeesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillingfeesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BillingfeesGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BillingfeesPost creates a new billing fee

TODO: Add Description
*/
func (a *Client) BillingfeesPost(params *BillingfeesPostParams) (*BillingfeesPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingfeesPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BillingfeesPost",
		Method:             "POST",
		PathPattern:        "/billingfees/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingfeesPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillingfeesPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BillingfeesPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BillingnetworksGet gets billing network items

TODO: Add Description
*/
func (a *Client) BillingnetworksGet(params *BillingnetworksGetParams) (*BillingnetworksGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingnetworksGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BillingnetworksGet",
		Method:             "GET",
		PathPattern:        "/billingnetworks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingnetworksGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillingnetworksGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BillingnetworksGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BillingnetworksPost creates a new billing network

TODO: Add Description
*/
func (a *Client) BillingnetworksPost(params *BillingnetworksPostParams) (*BillingnetworksPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingnetworksPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BillingnetworksPost",
		Method:             "POST",
		PathPattern:        "/billingnetworks/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingnetworksPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillingnetworksPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BillingnetworksPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BillingprofilesGet gets billing profile items

TODO: Add Description
*/
func (a *Client) BillingprofilesGet(params *BillingprofilesGetParams) (*BillingprofilesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingprofilesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BillingprofilesGet",
		Method:             "GET",
		PathPattern:        "/billingprofiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingprofilesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillingprofilesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BillingprofilesGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BillingprofilesPost creates a new billing profile

TODO: Add Description
*/
func (a *Client) BillingprofilesPost(params *BillingprofilesPostParams) (*BillingprofilesPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingprofilesPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BillingprofilesPost",
		Method:             "POST",
		PathPattern:        "/billingprofiles/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingprofilesPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillingprofilesPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BillingprofilesPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BillingzonesGet gets billing zone items

TODO: Add Description
*/
func (a *Client) BillingzonesGet(params *BillingzonesGetParams) (*BillingzonesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingzonesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BillingzonesGet",
		Method:             "GET",
		PathPattern:        "/billingzones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingzonesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillingzonesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BillingzonesGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BillingzonesPost creates a new billing zone

TODO: Add Description
*/
func (a *Client) BillingzonesPost(params *BillingzonesPostParams) (*BillingzonesPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingzonesPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BillingzonesPost",
		Method:             "POST",
		PathPattern:        "/billingzones/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingzonesPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillingzonesPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BillingzonesPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CfbnumbersetsGet gets c f b number set items

TODO: Add Description
*/
func (a *Client) CfbnumbersetsGet(params *CfbnumbersetsGetParams) (*CfbnumbersetsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCfbnumbersetsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CfbnumbersetsGet",
		Method:             "GET",
		PathPattern:        "/cfbnumbersets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CfbnumbersetsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CfbnumbersetsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CfbnumbersetsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CfbnumbersetsPost creates a new c f b number set

TODO: Add Description
*/
func (a *Client) CfbnumbersetsPost(params *CfbnumbersetsPostParams) (*CfbnumbersetsPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCfbnumbersetsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CfbnumbersetsPost",
		Method:             "POST",
		PathPattern:        "/cfbnumbersets/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CfbnumbersetsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CfbnumbersetsPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CfbnumbersetsPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CfdestinationsetsGet gets c f destination set items

TODO: Add Description
*/
func (a *Client) CfdestinationsetsGet(params *CfdestinationsetsGetParams) (*CfdestinationsetsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCfdestinationsetsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CfdestinationsetsGet",
		Method:             "GET",
		PathPattern:        "/cfdestinationsets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CfdestinationsetsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CfdestinationsetsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CfdestinationsetsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CfdestinationsetsPost creates a new c f destination set

TODO: Add Description
*/
func (a *Client) CfdestinationsetsPost(params *CfdestinationsetsPostParams) (*CfdestinationsetsPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCfdestinationsetsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CfdestinationsetsPost",
		Method:             "POST",
		PathPattern:        "/cfdestinationsets/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CfdestinationsetsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CfdestinationsetsPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CfdestinationsetsPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CfsourcesetsGet gets c f source set items

TODO: Add Description
*/
func (a *Client) CfsourcesetsGet(params *CfsourcesetsGetParams) (*CfsourcesetsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCfsourcesetsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CfsourcesetsGet",
		Method:             "GET",
		PathPattern:        "/cfsourcesets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CfsourcesetsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CfsourcesetsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CfsourcesetsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CfsourcesetsPost creates a new c f source set

TODO: Add Description
*/
func (a *Client) CfsourcesetsPost(params *CfsourcesetsPostParams) (*CfsourcesetsPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCfsourcesetsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CfsourcesetsPost",
		Method:             "POST",
		PathPattern:        "/cfsourcesets/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CfsourcesetsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CfsourcesetsPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CfsourcesetsPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CftimesetsGet gets c f time set items

TODO: Add Description
*/
func (a *Client) CftimesetsGet(params *CftimesetsGetParams) (*CftimesetsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCftimesetsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CftimesetsGet",
		Method:             "GET",
		PathPattern:        "/cftimesets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CftimesetsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CftimesetsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CftimesetsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CftimesetsPost creates a new c f time set

TODO: Add Description
*/
func (a *Client) CftimesetsPost(params *CftimesetsPostParams) (*CftimesetsPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCftimesetsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CftimesetsPost",
		Method:             "POST",
		PathPattern:        "/cftimesets/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CftimesetsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CftimesetsPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CftimesetsPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContractsGet gets contract items

TODO: Add Description
*/
func (a *Client) ContractsGet(params *ContractsGetParams) (*ContractsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContractsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ContractsGet",
		Method:             "GET",
		PathPattern:        "/contracts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContractsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContractsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContractsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContractsPost creates a new contract

TODO: Add Description
*/
func (a *Client) ContractsPost(params *ContractsPostParams) (*ContractsPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContractsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ContractsPost",
		Method:             "POST",
		PathPattern:        "/contracts/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContractsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContractsPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContractsPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomercontactsGet gets customer contact items

TODO: Add Description
*/
func (a *Client) CustomercontactsGet(params *CustomercontactsGetParams) (*CustomercontactsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomercontactsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomercontactsGet",
		Method:             "GET",
		PathPattern:        "/customercontacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomercontactsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomercontactsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomercontactsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomercontactsPost creates a new customer contact

TODO: Add Description
*/
func (a *Client) CustomercontactsPost(params *CustomercontactsPostParams) (*CustomercontactsPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomercontactsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomercontactsPost",
		Method:             "POST",
		PathPattern:        "/customercontacts/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomercontactsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomercontactsPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomercontactsPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomerlocationsGet gets customer location items

TODO: Add Description
*/
func (a *Client) CustomerlocationsGet(params *CustomerlocationsGetParams) (*CustomerlocationsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerlocationsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomerlocationsGet",
		Method:             "GET",
		PathPattern:        "/customerlocations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerlocationsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerlocationsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomerlocationsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomerlocationsPost creates a new customer location

TODO: Add Description
*/
func (a *Client) CustomerlocationsPost(params *CustomerlocationsPostParams) (*CustomerlocationsPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerlocationsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomerlocationsPost",
		Method:             "POST",
		PathPattern:        "/customerlocations/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerlocationsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerlocationsPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomerlocationsPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomersGet gets customer items

TODO: Add Description
*/
func (a *Client) CustomersGet(params *CustomersGetParams) (*CustomersGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomersGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomersGet",
		Method:             "GET",
		PathPattern:        "/customers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomersGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomersGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomersGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomersPost creates a new customer

TODO: Add Description
*/
func (a *Client) CustomersPost(params *CustomersPostParams) (*CustomersPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomersPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomersPost",
		Method:             "POST",
		PathPattern:        "/customers/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomersPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomersPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomersPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainsGet gets domain items

TODO: Add Description
*/
func (a *Client) DomainsGet(params *DomainsGetParams) (*DomainsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DomainsGet",
		Method:             "GET",
		PathPattern:        "/domains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DomainsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainsPost creates a new domain

TODO: Add Description
*/
func (a *Client) DomainsPost(params *DomainsPostParams) (*DomainsPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DomainsPost",
		Method:             "POST",
		PathPattern:        "/domains/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainsPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DomainsPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EmailtemplatesGet gets email template items

TODO: Add Description
*/
func (a *Client) EmailtemplatesGet(params *EmailtemplatesGetParams) (*EmailtemplatesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmailtemplatesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmailtemplatesGet",
		Method:             "GET",
		PathPattern:        "/emailtemplates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailtemplatesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmailtemplatesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmailtemplatesGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EmailtemplatesPost creates a new email template

TODO: Add Description
*/
func (a *Client) EmailtemplatesPost(params *EmailtemplatesPostParams) (*EmailtemplatesPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmailtemplatesPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmailtemplatesPost",
		Method:             "POST",
		PathPattern:        "/emailtemplates/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailtemplatesPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmailtemplatesPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmailtemplatesPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EmergencymappingcontainersGet gets emergency mapping container items

TODO: Add Description
*/
func (a *Client) EmergencymappingcontainersGet(params *EmergencymappingcontainersGetParams) (*EmergencymappingcontainersGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmergencymappingcontainersGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmergencymappingcontainersGet",
		Method:             "GET",
		PathPattern:        "/emergencymappingcontainers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmergencymappingcontainersGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmergencymappingcontainersGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmergencymappingcontainersGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EmergencymappingcontainersPost creates a new emergency mapping container

TODO: Add Description
*/
func (a *Client) EmergencymappingcontainersPost(params *EmergencymappingcontainersPostParams) (*EmergencymappingcontainersPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmergencymappingcontainersPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmergencymappingcontainersPost",
		Method:             "POST",
		PathPattern:        "/emergencymappingcontainers/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmergencymappingcontainersPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmergencymappingcontainersPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmergencymappingcontainersPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EmergencymappingsGet gets emergency mapping items

TODO: Add Description
*/
func (a *Client) EmergencymappingsGet(params *EmergencymappingsGetParams) (*EmergencymappingsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmergencymappingsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmergencymappingsGet",
		Method:             "GET",
		PathPattern:        "/emergencymappings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmergencymappingsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmergencymappingsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmergencymappingsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EmergencymappingsPost creates a new emergency mapping

TODO: Add Description
*/
func (a *Client) EmergencymappingsPost(params *EmergencymappingsPostParams) (*EmergencymappingsPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmergencymappingsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmergencymappingsPost",
		Method:             "POST",
		PathPattern:        "/emergencymappings/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmergencymappingsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmergencymappingsPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmergencymappingsPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FaxesGet gets fax items

TODO: Add Description
*/
func (a *Client) FaxesGet(params *FaxesGetParams) (*FaxesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFaxesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FaxesGet",
		Method:             "GET",
		PathPattern:        "/faxes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FaxesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FaxesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for FaxesGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FaxesPost creates a new fax

TODO: Add Description
*/
func (a *Client) FaxesPost(params *FaxesPostParams) (*FaxesPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFaxesPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FaxesPost",
		Method:             "POST",
		PathPattern:        "/faxes/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FaxesPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FaxesPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for FaxesPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InterceptionsGet gets interception items

TODO: Add Description
*/
func (a *Client) InterceptionsGet(params *InterceptionsGetParams) (*InterceptionsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInterceptionsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "InterceptionsGet",
		Method:             "GET",
		PathPattern:        "/interceptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InterceptionsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InterceptionsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InterceptionsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InterceptionsPost creates a new interception

TODO: Add Description
*/
func (a *Client) InterceptionsPost(params *InterceptionsPostParams) (*InterceptionsPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInterceptionsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "InterceptionsPost",
		Method:             "POST",
		PathPattern:        "/interceptions/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InterceptionsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InterceptionsPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InterceptionsPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InvoicesGet gets invoice items

TODO: Add Description
*/
func (a *Client) InvoicesGet(params *InvoicesGetParams) (*InvoicesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInvoicesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "InvoicesGet",
		Method:             "GET",
		PathPattern:        "/invoices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InvoicesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InvoicesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InvoicesGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InvoicesPost creates a new invoice

TODO: Add Description
*/
func (a *Client) InvoicesPost(params *InvoicesPostParams) (*InvoicesPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInvoicesPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "InvoicesPost",
		Method:             "POST",
		PathPattern:        "/invoices/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InvoicesPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InvoicesPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InvoicesPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LnpcarriersGet gets lnp carrier items

TODO: Add Description
*/
func (a *Client) LnpcarriersGet(params *LnpcarriersGetParams) (*LnpcarriersGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLnpcarriersGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LnpcarriersGet",
		Method:             "GET",
		PathPattern:        "/lnpcarriers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LnpcarriersGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LnpcarriersGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LnpcarriersGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LnpcarriersPost creates a new lnp carrier

TODO: Add Description
*/
func (a *Client) LnpcarriersPost(params *LnpcarriersPostParams) (*LnpcarriersPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLnpcarriersPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LnpcarriersPost",
		Method:             "POST",
		PathPattern:        "/lnpcarriers/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LnpcarriersPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LnpcarriersPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LnpcarriersPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LnpnumbersGet gets lnp number items

TODO: Add Description
*/
func (a *Client) LnpnumbersGet(params *LnpnumbersGetParams) (*LnpnumbersGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLnpnumbersGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LnpnumbersGet",
		Method:             "GET",
		PathPattern:        "/lnpnumbers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LnpnumbersGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LnpnumbersGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LnpnumbersGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LnpnumbersPost creates a new lnp number

TODO: Add Description
*/
func (a *Client) LnpnumbersPost(params *LnpnumbersPostParams) (*LnpnumbersPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLnpnumbersPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LnpnumbersPost",
		Method:             "POST",
		PathPattern:        "/lnpnumbers/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LnpnumbersPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LnpnumbersPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LnpnumbersPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
NcoslevelsGet gets ncos level items

TODO: Add Description
*/
func (a *Client) NcoslevelsGet(params *NcoslevelsGetParams) (*NcoslevelsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNcoslevelsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NcoslevelsGet",
		Method:             "GET",
		PathPattern:        "/ncoslevels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NcoslevelsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NcoslevelsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NcoslevelsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
NcoslevelsPost creates a new ncos level

TODO: Add Description
*/
func (a *Client) NcoslevelsPost(params *NcoslevelsPostParams) (*NcoslevelsPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNcoslevelsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NcoslevelsPost",
		Method:             "POST",
		PathPattern:        "/ncoslevels/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NcoslevelsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NcoslevelsPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NcoslevelsPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
NcoslnpcarriersGet gets ncos lnp carrier items

TODO: Add Description
*/
func (a *Client) NcoslnpcarriersGet(params *NcoslnpcarriersGetParams) (*NcoslnpcarriersGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNcoslnpcarriersGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NcoslnpcarriersGet",
		Method:             "GET",
		PathPattern:        "/ncoslnpcarriers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NcoslnpcarriersGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NcoslnpcarriersGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NcoslnpcarriersGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
NcoslnpcarriersPost creates a new ncos lnp carrier

TODO: Add Description
*/
func (a *Client) NcoslnpcarriersPost(params *NcoslnpcarriersPostParams) (*NcoslnpcarriersPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNcoslnpcarriersPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NcoslnpcarriersPost",
		Method:             "POST",
		PathPattern:        "/ncoslnpcarriers/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NcoslnpcarriersPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NcoslnpcarriersPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NcoslnpcarriersPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
NcospatternsGet gets ncos pattern items

TODO: Add Description
*/
func (a *Client) NcospatternsGet(params *NcospatternsGetParams) (*NcospatternsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNcospatternsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NcospatternsGet",
		Method:             "GET",
		PathPattern:        "/ncospatterns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NcospatternsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NcospatternsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NcospatternsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
NcospatternsPost creates a new ncos pattern

TODO: Add Description
*/
func (a *Client) NcospatternsPost(params *NcospatternsPostParams) (*NcospatternsPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNcospatternsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NcospatternsPost",
		Method:             "POST",
		PathPattern:        "/ncospatterns/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NcospatternsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NcospatternsPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NcospatternsPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PbxdeviceconfigsGet gets pbx device config items

TODO: Add Description
*/
func (a *Client) PbxdeviceconfigsGet(params *PbxdeviceconfigsGetParams) (*PbxdeviceconfigsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPbxdeviceconfigsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PbxdeviceconfigsGet",
		Method:             "GET",
		PathPattern:        "/pbxdeviceconfigs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PbxdeviceconfigsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PbxdeviceconfigsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PbxdeviceconfigsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PbxdeviceconfigsPost creates a new pbx device config

TODO: Add Description
*/
func (a *Client) PbxdeviceconfigsPost(params *PbxdeviceconfigsPostParams) (*PbxdeviceconfigsPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPbxdeviceconfigsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PbxdeviceconfigsPost",
		Method:             "POST",
		PathPattern:        "/pbxdeviceconfigs/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PbxdeviceconfigsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PbxdeviceconfigsPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PbxdeviceconfigsPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PbxdevicefirmwaresGet gets pbx device firmware items

TODO: Add Description
*/
func (a *Client) PbxdevicefirmwaresGet(params *PbxdevicefirmwaresGetParams) (*PbxdevicefirmwaresGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPbxdevicefirmwaresGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PbxdevicefirmwaresGet",
		Method:             "GET",
		PathPattern:        "/pbxdevicefirmwares",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PbxdevicefirmwaresGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PbxdevicefirmwaresGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PbxdevicefirmwaresGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PbxdevicefirmwaresPost creates a new pbx device firmware

TODO: Add Description
*/
func (a *Client) PbxdevicefirmwaresPost(params *PbxdevicefirmwaresPostParams) (*PbxdevicefirmwaresPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPbxdevicefirmwaresPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PbxdevicefirmwaresPost",
		Method:             "POST",
		PathPattern:        "/pbxdevicefirmwares/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PbxdevicefirmwaresPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PbxdevicefirmwaresPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PbxdevicefirmwaresPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PbxdevicemodelsGet gets pbx device model items

TODO: Add Description
*/
func (a *Client) PbxdevicemodelsGet(params *PbxdevicemodelsGetParams) (*PbxdevicemodelsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPbxdevicemodelsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PbxdevicemodelsGet",
		Method:             "GET",
		PathPattern:        "/pbxdevicemodels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PbxdevicemodelsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PbxdevicemodelsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PbxdevicemodelsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PbxdevicemodelsPost creates a new pbx device model

TODO: Add Description
*/
func (a *Client) PbxdevicemodelsPost(params *PbxdevicemodelsPostParams) (*PbxdevicemodelsPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPbxdevicemodelsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PbxdevicemodelsPost",
		Method:             "POST",
		PathPattern:        "/pbxdevicemodels/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PbxdevicemodelsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PbxdevicemodelsPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PbxdevicemodelsPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PbxdeviceprofilesGet gets pbx device profile items

TODO: Add Description
*/
func (a *Client) PbxdeviceprofilesGet(params *PbxdeviceprofilesGetParams) (*PbxdeviceprofilesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPbxdeviceprofilesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PbxdeviceprofilesGet",
		Method:             "GET",
		PathPattern:        "/pbxdeviceprofiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PbxdeviceprofilesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PbxdeviceprofilesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PbxdeviceprofilesGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PbxdeviceprofilesPost creates a new pbx device profile

TODO: Add Description
*/
func (a *Client) PbxdeviceprofilesPost(params *PbxdeviceprofilesPostParams) (*PbxdeviceprofilesPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPbxdeviceprofilesPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PbxdeviceprofilesPost",
		Method:             "POST",
		PathPattern:        "/pbxdeviceprofiles/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PbxdeviceprofilesPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PbxdeviceprofilesPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PbxdeviceprofilesPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PbxdevicesGet gets pbx device items

TODO: Add Description
*/
func (a *Client) PbxdevicesGet(params *PbxdevicesGetParams) (*PbxdevicesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPbxdevicesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PbxdevicesGet",
		Method:             "GET",
		PathPattern:        "/pbxdevices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PbxdevicesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PbxdevicesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PbxdevicesGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PbxdevicesPost creates a new pbx device

TODO: Add Description
*/
func (a *Client) PbxdevicesPost(params *PbxdevicesPostParams) (*PbxdevicesPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPbxdevicesPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PbxdevicesPost",
		Method:             "POST",
		PathPattern:        "/pbxdevices/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PbxdevicesPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PbxdevicesPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PbxdevicesPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PeeringgroupsGet gets peering group items

TODO: Add Description
*/
func (a *Client) PeeringgroupsGet(params *PeeringgroupsGetParams) (*PeeringgroupsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeeringgroupsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PeeringgroupsGet",
		Method:             "GET",
		PathPattern:        "/peeringgroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PeeringgroupsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeeringgroupsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PeeringgroupsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PeeringgroupsPost creates a new peering group

TODO: Add Description
*/
func (a *Client) PeeringgroupsPost(params *PeeringgroupsPostParams) (*PeeringgroupsPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeeringgroupsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PeeringgroupsPost",
		Method:             "POST",
		PathPattern:        "/peeringgroups/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PeeringgroupsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeeringgroupsPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PeeringgroupsPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PeeringinboundrulesGet gets peering inbound rule items

TODO: Add Description
*/
func (a *Client) PeeringinboundrulesGet(params *PeeringinboundrulesGetParams) (*PeeringinboundrulesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeeringinboundrulesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PeeringinboundrulesGet",
		Method:             "GET",
		PathPattern:        "/peeringinboundrules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PeeringinboundrulesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeeringinboundrulesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PeeringinboundrulesGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PeeringinboundrulesPost creates a new peering inbound rule

TODO: Add Description
*/
func (a *Client) PeeringinboundrulesPost(params *PeeringinboundrulesPostParams) (*PeeringinboundrulesPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeeringinboundrulesPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PeeringinboundrulesPost",
		Method:             "POST",
		PathPattern:        "/peeringinboundrules/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PeeringinboundrulesPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeeringinboundrulesPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PeeringinboundrulesPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PeeringrulesGet gets peering rule items

TODO: Add Description
*/
func (a *Client) PeeringrulesGet(params *PeeringrulesGetParams) (*PeeringrulesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeeringrulesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PeeringrulesGet",
		Method:             "GET",
		PathPattern:        "/peeringrules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PeeringrulesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeeringrulesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PeeringrulesGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PeeringrulesPost creates a new peering rule

TODO: Add Description
*/
func (a *Client) PeeringrulesPost(params *PeeringrulesPostParams) (*PeeringrulesPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeeringrulesPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PeeringrulesPost",
		Method:             "POST",
		PathPattern:        "/peeringrules/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PeeringrulesPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeeringrulesPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PeeringrulesPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PeeringserversGet gets peering server items

TODO: Add Description
*/
func (a *Client) PeeringserversGet(params *PeeringserversGetParams) (*PeeringserversGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeeringserversGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PeeringserversGet",
		Method:             "GET",
		PathPattern:        "/peeringservers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PeeringserversGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeeringserversGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PeeringserversGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PeeringserversPost creates a new peering server

TODO: Add Description
*/
func (a *Client) PeeringserversPost(params *PeeringserversPostParams) (*PeeringserversPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeeringserversPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PeeringserversPost",
		Method:             "POST",
		PathPattern:        "/peeringservers/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PeeringserversPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeeringserversPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PeeringserversPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PhonebookentriesGet gets phonebook entry items

TODO: Add Description
*/
func (a *Client) PhonebookentriesGet(params *PhonebookentriesGetParams) (*PhonebookentriesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPhonebookentriesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PhonebookentriesGet",
		Method:             "GET",
		PathPattern:        "/phonebookentries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhonebookentriesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhonebookentriesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PhonebookentriesGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PhonebookentriesPost creates a new phonebook entry

TODO: Add Description
*/
func (a *Client) PhonebookentriesPost(params *PhonebookentriesPostParams) (*PhonebookentriesPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPhonebookentriesPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PhonebookentriesPost",
		Method:             "POST",
		PathPattern:        "/phonebookentries/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhonebookentriesPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhonebookentriesPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PhonebookentriesPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PreferencesmetaentriesGet gets preferences meta entry items

TODO: Add Description
*/
func (a *Client) PreferencesmetaentriesGet(params *PreferencesmetaentriesGetParams) (*PreferencesmetaentriesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPreferencesmetaentriesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PreferencesmetaentriesGet",
		Method:             "GET",
		PathPattern:        "/preferencesmetaentries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PreferencesmetaentriesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PreferencesmetaentriesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PreferencesmetaentriesGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PreferencesmetaentriesPost creates a new preferences meta entry

TODO: Add Description
*/
func (a *Client) PreferencesmetaentriesPost(params *PreferencesmetaentriesPostParams) (*PreferencesmetaentriesPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPreferencesmetaentriesPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PreferencesmetaentriesPost",
		Method:             "POST",
		PathPattern:        "/preferencesmetaentries/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PreferencesmetaentriesPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PreferencesmetaentriesPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PreferencesmetaentriesPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProfilepackagesGet gets profile package items

TODO: Add Description
*/
func (a *Client) ProfilepackagesGet(params *ProfilepackagesGetParams) (*ProfilepackagesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProfilepackagesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProfilepackagesGet",
		Method:             "GET",
		PathPattern:        "/profilepackages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProfilepackagesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProfilepackagesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProfilepackagesGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProfilepackagesPost creates a new profile package

TODO: Add Description
*/
func (a *Client) ProfilepackagesPost(params *ProfilepackagesPostParams) (*ProfilepackagesPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProfilepackagesPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProfilepackagesPost",
		Method:             "POST",
		PathPattern:        "/profilepackages/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProfilepackagesPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProfilepackagesPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProfilepackagesPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemindersGet gets reminder items

TODO: Add Description
*/
func (a *Client) RemindersGet(params *RemindersGetParams) (*RemindersGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemindersGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RemindersGet",
		Method:             "GET",
		PathPattern:        "/reminders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemindersGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemindersGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RemindersGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemindersPost creates a new reminder

TODO: Add Description
*/
func (a *Client) RemindersPost(params *RemindersPostParams) (*RemindersPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemindersPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RemindersPost",
		Method:             "POST",
		PathPattern:        "/reminders/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemindersPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemindersPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RemindersPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResellersGet gets reseller items

TODO: Add Description
*/
func (a *Client) ResellersGet(params *ResellersGetParams) (*ResellersGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResellersGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ResellersGet",
		Method:             "GET",
		PathPattern:        "/resellers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResellersGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResellersGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ResellersGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResellersPost creates a new reseller

TODO: Add Description
*/
func (a *Client) ResellersPost(params *ResellersPostParams) (*ResellersPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResellersPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ResellersPost",
		Method:             "POST",
		PathPattern:        "/resellers/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResellersPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResellersPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ResellersPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RewriterulesGet gets rewrite rule items

TODO: Add Description
*/
func (a *Client) RewriterulesGet(params *RewriterulesGetParams) (*RewriterulesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRewriterulesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RewriterulesGet",
		Method:             "GET",
		PathPattern:        "/rewriterules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RewriterulesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RewriterulesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RewriterulesGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RewriterulesPost creates a new rewrite rule

TODO: Add Description
*/
func (a *Client) RewriterulesPost(params *RewriterulesPostParams) (*RewriterulesPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRewriterulesPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RewriterulesPost",
		Method:             "POST",
		PathPattern:        "/rewriterules/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RewriterulesPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RewriterulesPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RewriterulesPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RewriterulesetsGet gets rewrite rule set items

TODO: Add Description
*/
func (a *Client) RewriterulesetsGet(params *RewriterulesetsGetParams) (*RewriterulesetsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRewriterulesetsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RewriterulesetsGet",
		Method:             "GET",
		PathPattern:        "/rewriterulesets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RewriterulesetsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RewriterulesetsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RewriterulesetsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RewriterulesetsPost creates a new rewrite rule set

TODO: Add Description
*/
func (a *Client) RewriterulesetsPost(params *RewriterulesetsPostParams) (*RewriterulesetsPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRewriterulesetsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RewriterulesetsPost",
		Method:             "POST",
		PathPattern:        "/rewriterulesets/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RewriterulesetsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RewriterulesetsPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RewriterulesetsPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RtcsessionsGet gets rtc session items

TODO: Add Description
*/
func (a *Client) RtcsessionsGet(params *RtcsessionsGetParams) (*RtcsessionsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRtcsessionsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RtcsessionsGet",
		Method:             "GET",
		PathPattern:        "/rtcsessions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RtcsessionsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RtcsessionsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RtcsessionsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RtcsessionsPost creates a new rtc session

TODO: Add Description
*/
func (a *Client) RtcsessionsPost(params *RtcsessionsPostParams) (*RtcsessionsPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRtcsessionsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RtcsessionsPost",
		Method:             "POST",
		PathPattern:        "/rtcsessions/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RtcsessionsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RtcsessionsPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RtcsessionsPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SmsGet gets s m s items

TODO: Add Description
*/
func (a *Client) SmsGet(params *SmsGetParams) (*SmsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSmsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SmsGet",
		Method:             "GET",
		PathPattern:        "/sms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SmsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SmsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SmsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SmsPost creates a new s m s

TODO: Add Description
*/
func (a *Client) SmsPost(params *SmsPostParams) (*SmsPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSmsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SmsPost",
		Method:             "POST",
		PathPattern:        "/sms/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SmsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SmsPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SmsPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SoundfilesGet gets sound file items

TODO: Add Description
*/
func (a *Client) SoundfilesGet(params *SoundfilesGetParams) (*SoundfilesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSoundfilesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SoundfilesGet",
		Method:             "GET",
		PathPattern:        "/soundfiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SoundfilesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SoundfilesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SoundfilesGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SoundfilesPost creates a new sound file

TODO: Add Description
*/
func (a *Client) SoundfilesPost(params *SoundfilesPostParams) (*SoundfilesPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSoundfilesPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SoundfilesPost",
		Method:             "POST",
		PathPattern:        "/soundfiles/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SoundfilesPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SoundfilesPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SoundfilesPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SoundsetsGet gets sound set items

TODO: Add Description
*/
func (a *Client) SoundsetsGet(params *SoundsetsGetParams) (*SoundsetsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSoundsetsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SoundsetsGet",
		Method:             "GET",
		PathPattern:        "/soundsets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SoundsetsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SoundsetsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SoundsetsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SoundsetsPost creates a new sound set

TODO: Add Description
*/
func (a *Client) SoundsetsPost(params *SoundsetsPostParams) (*SoundsetsPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSoundsetsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SoundsetsPost",
		Method:             "POST",
		PathPattern:        "/soundsets/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SoundsetsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SoundsetsPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SoundsetsPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubscriberprofilesGet gets subscriber profile items

TODO: Add Description
*/
func (a *Client) SubscriberprofilesGet(params *SubscriberprofilesGetParams) (*SubscriberprofilesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriberprofilesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SubscriberprofilesGet",
		Method:             "GET",
		PathPattern:        "/subscriberprofiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubscriberprofilesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriberprofilesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SubscriberprofilesGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubscriberprofilesPost creates a new subscriber profile

TODO: Add Description
*/
func (a *Client) SubscriberprofilesPost(params *SubscriberprofilesPostParams) (*SubscriberprofilesPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriberprofilesPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SubscriberprofilesPost",
		Method:             "POST",
		PathPattern:        "/subscriberprofiles/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubscriberprofilesPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriberprofilesPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SubscriberprofilesPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubscriberprofilesetsGet gets subscriber profile set items

TODO: Add Description
*/
func (a *Client) SubscriberprofilesetsGet(params *SubscriberprofilesetsGetParams) (*SubscriberprofilesetsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriberprofilesetsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SubscriberprofilesetsGet",
		Method:             "GET",
		PathPattern:        "/subscriberprofilesets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubscriberprofilesetsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriberprofilesetsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SubscriberprofilesetsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubscriberprofilesetsPost creates a new subscriber profile set

TODO: Add Description
*/
func (a *Client) SubscriberprofilesetsPost(params *SubscriberprofilesetsPostParams) (*SubscriberprofilesetsPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriberprofilesetsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SubscriberprofilesetsPost",
		Method:             "POST",
		PathPattern:        "/subscriberprofilesets/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubscriberprofilesetsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriberprofilesetsPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SubscriberprofilesetsPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubscriberregistrationsGet gets subscriber registration items

TODO: Add Description
*/
func (a *Client) SubscriberregistrationsGet(params *SubscriberregistrationsGetParams, authInfo runtime.ClientAuthInfoWriter) (*SubscriberregistrationsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriberregistrationsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SubscriberregistrationsGet",
		Method:             "GET",
		PathPattern:        "/subscriberregistrations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubscriberregistrationsGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriberregistrationsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SubscriberregistrationsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubscriberregistrationsPost creates a new subscriber registration

TODO: Add Description
*/
func (a *Client) SubscriberregistrationsPost(params *SubscriberregistrationsPostParams) (*SubscriberregistrationsPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriberregistrationsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SubscriberregistrationsPost",
		Method:             "POST",
		PathPattern:        "/subscriberregistrations/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubscriberregistrationsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriberregistrationsPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SubscriberregistrationsPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubscribersGet gets subscriber items

TODO: Add Description
*/
func (a *Client) SubscribersGet(params *SubscribersGetParams) (*SubscribersGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscribersGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SubscribersGet",
		Method:             "GET",
		PathPattern:        "/subscribers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubscribersGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscribersGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SubscribersGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubscribersPost creates a new subscriber

TODO: Add Description
*/
func (a *Client) SubscribersPost(params *SubscribersPostParams) (*SubscribersPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscribersPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SubscribersPost",
		Method:             "POST",
		PathPattern:        "/subscribers/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubscribersPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscribersPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SubscribersPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SystemcontactsGet gets system contact items

TODO: Add Description
*/
func (a *Client) SystemcontactsGet(params *SystemcontactsGetParams) (*SystemcontactsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemcontactsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SystemcontactsGet",
		Method:             "GET",
		PathPattern:        "/systemcontacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SystemcontactsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SystemcontactsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SystemcontactsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SystemcontactsPost creates a new system contact

TODO: Add Description
*/
func (a *Client) SystemcontactsPost(params *SystemcontactsPostParams) (*SystemcontactsPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemcontactsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SystemcontactsPost",
		Method:             "POST",
		PathPattern:        "/systemcontacts/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SystemcontactsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SystemcontactsPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SystemcontactsPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TrustedsourcesGet gets trusted source items

TODO: Add Description
*/
func (a *Client) TrustedsourcesGet(params *TrustedsourcesGetParams) (*TrustedsourcesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTrustedsourcesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TrustedsourcesGet",
		Method:             "GET",
		PathPattern:        "/trustedsources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TrustedsourcesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TrustedsourcesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TrustedsourcesGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TrustedsourcesPost creates a new trusted source

TODO: Add Description
*/
func (a *Client) TrustedsourcesPost(params *TrustedsourcesPostParams) (*TrustedsourcesPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTrustedsourcesPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TrustedsourcesPost",
		Method:             "POST",
		PathPattern:        "/trustedsources/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TrustedsourcesPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TrustedsourcesPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TrustedsourcesPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpnrewritesetsGet gets upn rewrite set items

TODO: Add Description
*/
func (a *Client) UpnrewritesetsGet(params *UpnrewritesetsGetParams) (*UpnrewritesetsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpnrewritesetsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpnrewritesetsGet",
		Method:             "GET",
		PathPattern:        "/upnrewritesets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpnrewritesetsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpnrewritesetsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpnrewritesetsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpnrewritesetsPost creates a new upn rewrite set

TODO: Add Description
*/
func (a *Client) UpnrewritesetsPost(params *UpnrewritesetsPostParams) (*UpnrewritesetsPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpnrewritesetsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpnrewritesetsPost",
		Method:             "POST",
		PathPattern:        "/upnrewritesets/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpnrewritesetsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpnrewritesetsPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpnrewritesetsPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VoicemailgreetingsGet gets voicemail greeting items

TODO: Add Description
*/
func (a *Client) VoicemailgreetingsGet(params *VoicemailgreetingsGetParams) (*VoicemailgreetingsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVoicemailgreetingsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VoicemailgreetingsGet",
		Method:             "GET",
		PathPattern:        "/voicemailgreetings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VoicemailgreetingsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VoicemailgreetingsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for VoicemailgreetingsGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VoicemailgreetingsPost creates a new voicemail greeting

TODO: Add Description
*/
func (a *Client) VoicemailgreetingsPost(params *VoicemailgreetingsPostParams) (*VoicemailgreetingsPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVoicemailgreetingsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VoicemailgreetingsPost",
		Method:             "POST",
		PathPattern:        "/voicemailgreetings/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VoicemailgreetingsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VoicemailgreetingsPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for VoicemailgreetingsPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VouchersGet gets voucher items

TODO: Add Description
*/
func (a *Client) VouchersGet(params *VouchersGetParams) (*VouchersGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVouchersGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VouchersGet",
		Method:             "GET",
		PathPattern:        "/vouchers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VouchersGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VouchersGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for VouchersGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VouchersPost creates a new voucher

TODO: Add Description
*/
func (a *Client) VouchersPost(params *VouchersPostParams) (*VouchersPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVouchersPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VouchersPost",
		Method:             "POST",
		PathPattern:        "/vouchers/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VouchersPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VouchersPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for VouchersPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
