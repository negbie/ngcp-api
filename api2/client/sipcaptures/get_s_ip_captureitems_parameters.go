// Code generated by go-swagger; DO NOT EDIT.

package sipcaptures

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetSIPCaptureitemsParams creates a new GetSIPCaptureitemsParams object
// with the default values initialized.
func NewGetSIPCaptureitemsParams() *GetSIPCaptureitemsParams {
	var ()
	return &GetSIPCaptureitemsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSIPCaptureitemsParamsWithTimeout creates a new GetSIPCaptureitemsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSIPCaptureitemsParamsWithTimeout(timeout time.Duration) *GetSIPCaptureitemsParams {
	var ()
	return &GetSIPCaptureitemsParams{

		timeout: timeout,
	}
}

// NewGetSIPCaptureitemsParamsWithContext creates a new GetSIPCaptureitemsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSIPCaptureitemsParamsWithContext(ctx context.Context) *GetSIPCaptureitemsParams {
	var ()
	return &GetSIPCaptureitemsParams{

		Context: ctx,
	}
}

// NewGetSIPCaptureitemsParamsWithHTTPClient creates a new GetSIPCaptureitemsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSIPCaptureitemsParamsWithHTTPClient(client *http.Client) *GetSIPCaptureitemsParams {
	var ()
	return &GetSIPCaptureitemsParams{
		HTTPClient: client,
	}
}

/*GetSIPCaptureitemsParams contains all the parameters to send to the API endpoint
for the get s IP captureitems operation typically these are written to a http.Request
*/
type GetSIPCaptureitemsParams struct {

	/*CallID
	  Filter for a particular call_id

	*/
	CallID string
	/*Method
	  Filter for a particular SIP method

	*/
	Method string
	/*OrderBy
	  Order collection by a specific attribute.

	*/
	OrderBy string
	/*OrderByDirection
	  Direction which the collection should be ordered by. Possible values are: asc (default), desc.

	*/
	OrderByDirection string
	/*Page
	  Pagination page which should be displayed (default: 1)

	*/
	Page string
	/*Rows
	  Number of rows in one pagination page (default: 10)

	*/
	Rows string
	/*StartGe
	  Filter for data starting greater or equal the specified time stamp.

	*/
	StartGe string
	/*StartLe
	  Filter for data starting lower or equal the specified time stamp.

	*/
	StartLe string
	/*SubscriberID
	  End time of the captured SIP data

	*/
	SubscriberID string
	/*Tz
	  Format start_time according to the optional time zone provided here, e.g. Europe/Berlin.

	*/
	Tz string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get s IP captureitems params
func (o *GetSIPCaptureitemsParams) WithTimeout(timeout time.Duration) *GetSIPCaptureitemsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get s IP captureitems params
func (o *GetSIPCaptureitemsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get s IP captureitems params
func (o *GetSIPCaptureitemsParams) WithContext(ctx context.Context) *GetSIPCaptureitemsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get s IP captureitems params
func (o *GetSIPCaptureitemsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get s IP captureitems params
func (o *GetSIPCaptureitemsParams) WithHTTPClient(client *http.Client) *GetSIPCaptureitemsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get s IP captureitems params
func (o *GetSIPCaptureitemsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCallID adds the callID to the get s IP captureitems params
func (o *GetSIPCaptureitemsParams) WithCallID(callID string) *GetSIPCaptureitemsParams {
	o.SetCallID(callID)
	return o
}

// SetCallID adds the callId to the get s IP captureitems params
func (o *GetSIPCaptureitemsParams) SetCallID(callID string) {
	o.CallID = callID
}

// WithMethod adds the method to the get s IP captureitems params
func (o *GetSIPCaptureitemsParams) WithMethod(method string) *GetSIPCaptureitemsParams {
	o.SetMethod(method)
	return o
}

// SetMethod adds the method to the get s IP captureitems params
func (o *GetSIPCaptureitemsParams) SetMethod(method string) {
	o.Method = method
}

// WithOrderBy adds the orderBy to the get s IP captureitems params
func (o *GetSIPCaptureitemsParams) WithOrderBy(orderBy string) *GetSIPCaptureitemsParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the get s IP captureitems params
func (o *GetSIPCaptureitemsParams) SetOrderBy(orderBy string) {
	o.OrderBy = orderBy
}

// WithOrderByDirection adds the orderByDirection to the get s IP captureitems params
func (o *GetSIPCaptureitemsParams) WithOrderByDirection(orderByDirection string) *GetSIPCaptureitemsParams {
	o.SetOrderByDirection(orderByDirection)
	return o
}

// SetOrderByDirection adds the orderByDirection to the get s IP captureitems params
func (o *GetSIPCaptureitemsParams) SetOrderByDirection(orderByDirection string) {
	o.OrderByDirection = orderByDirection
}

// WithPage adds the page to the get s IP captureitems params
func (o *GetSIPCaptureitemsParams) WithPage(page string) *GetSIPCaptureitemsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get s IP captureitems params
func (o *GetSIPCaptureitemsParams) SetPage(page string) {
	o.Page = page
}

// WithRows adds the rows to the get s IP captureitems params
func (o *GetSIPCaptureitemsParams) WithRows(rows string) *GetSIPCaptureitemsParams {
	o.SetRows(rows)
	return o
}

// SetRows adds the rows to the get s IP captureitems params
func (o *GetSIPCaptureitemsParams) SetRows(rows string) {
	o.Rows = rows
}

// WithStartGe adds the startGe to the get s IP captureitems params
func (o *GetSIPCaptureitemsParams) WithStartGe(startGe string) *GetSIPCaptureitemsParams {
	o.SetStartGe(startGe)
	return o
}

// SetStartGe adds the startGe to the get s IP captureitems params
func (o *GetSIPCaptureitemsParams) SetStartGe(startGe string) {
	o.StartGe = startGe
}

// WithStartLe adds the startLe to the get s IP captureitems params
func (o *GetSIPCaptureitemsParams) WithStartLe(startLe string) *GetSIPCaptureitemsParams {
	o.SetStartLe(startLe)
	return o
}

// SetStartLe adds the startLe to the get s IP captureitems params
func (o *GetSIPCaptureitemsParams) SetStartLe(startLe string) {
	o.StartLe = startLe
}

// WithSubscriberID adds the subscriberID to the get s IP captureitems params
func (o *GetSIPCaptureitemsParams) WithSubscriberID(subscriberID string) *GetSIPCaptureitemsParams {
	o.SetSubscriberID(subscriberID)
	return o
}

// SetSubscriberID adds the subscriberId to the get s IP captureitems params
func (o *GetSIPCaptureitemsParams) SetSubscriberID(subscriberID string) {
	o.SubscriberID = subscriberID
}

// WithTz adds the tz to the get s IP captureitems params
func (o *GetSIPCaptureitemsParams) WithTz(tz string) *GetSIPCaptureitemsParams {
	o.SetTz(tz)
	return o
}

// SetTz adds the tz to the get s IP captureitems params
func (o *GetSIPCaptureitemsParams) SetTz(tz string) {
	o.Tz = tz
}

// WriteToRequest writes these params to a swagger request
func (o *GetSIPCaptureitemsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param call_id
	qrCallID := o.CallID
	qCallID := qrCallID
	if qCallID != "" {
		if err := r.SetQueryParam("call_id", qCallID); err != nil {
			return err
		}
	}

	// query param method
	qrMethod := o.Method
	qMethod := qrMethod
	if qMethod != "" {
		if err := r.SetQueryParam("method", qMethod); err != nil {
			return err
		}
	}

	// query param order_by
	qrOrderBy := o.OrderBy
	qOrderBy := qrOrderBy
	if qOrderBy != "" {
		if err := r.SetQueryParam("order_by", qOrderBy); err != nil {
			return err
		}
	}

	// query param order_by_direction
	qrOrderByDirection := o.OrderByDirection
	qOrderByDirection := qrOrderByDirection
	if qOrderByDirection != "" {
		if err := r.SetQueryParam("order_by_direction", qOrderByDirection); err != nil {
			return err
		}
	}

	// query param page
	qrPage := o.Page
	qPage := qrPage
	if qPage != "" {
		if err := r.SetQueryParam("page", qPage); err != nil {
			return err
		}
	}

	// query param rows
	qrRows := o.Rows
	qRows := qrRows
	if qRows != "" {
		if err := r.SetQueryParam("rows", qRows); err != nil {
			return err
		}
	}

	// query param start_ge
	qrStartGe := o.StartGe
	qStartGe := qrStartGe
	if qStartGe != "" {
		if err := r.SetQueryParam("start_ge", qStartGe); err != nil {
			return err
		}
	}

	// query param start_le
	qrStartLe := o.StartLe
	qStartLe := qrStartLe
	if qStartLe != "" {
		if err := r.SetQueryParam("start_le", qStartLe); err != nil {
			return err
		}
	}

	// query param subscriber_id
	qrSubscriberID := o.SubscriberID
	qSubscriberID := qrSubscriberID
	if qSubscriberID != "" {
		if err := r.SetQueryParam("subscriber_id", qSubscriberID); err != nil {
			return err
		}
	}

	// query param tz
	qrTz := o.Tz
	qTz := qrTz
	if qTz != "" {
		if err := r.SetQueryParam("tz", qTz); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
