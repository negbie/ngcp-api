// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SIPCapture SIPCapture
//
// swagger:model SIPCapture
type SIPCapture struct {

	// call id
	// Required: true
	CallID *string `json:"call_id"`

	// cseq method
	// Required: true
	CseqMethod *string `json:"cseq_method"`

	// dst ip
	// Required: true
	DstIP *string `json:"dst_ip"`

	// dst port
	// Required: true
	DstPort *float64 `json:"dst_port"`

	// from uri
	// Required: true
	FromURI *string `json:"from_uri"`

	// method
	// Required: true
	Method *string `json:"method"`

	// protocol
	// Required: true
	Protocol *string `json:"protocol"`

	// request uri
	// Required: true
	RequestURI *string `json:"request_uri"`

	// src ip
	// Required: true
	SrcIP *string `json:"src_ip"`

	// src port
	// Required: true
	SrcPort *string `json:"src_port"`

	// timestamp
	// Required: true
	Timestamp *string `json:"timestamp"`

	// transport
	// Required: true
	Transport *string `json:"transport"`
}

// Validate validates this s IP capture
func (m *SIPCapture) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCallID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCseqMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDstIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDstPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFromURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSrcIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSrcPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransport(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SIPCapture) validateCallID(formats strfmt.Registry) error {

	if err := validate.Required("call_id", "body", m.CallID); err != nil {
		return err
	}

	return nil
}

func (m *SIPCapture) validateCseqMethod(formats strfmt.Registry) error {

	if err := validate.Required("cseq_method", "body", m.CseqMethod); err != nil {
		return err
	}

	return nil
}

func (m *SIPCapture) validateDstIP(formats strfmt.Registry) error {

	if err := validate.Required("dst_ip", "body", m.DstIP); err != nil {
		return err
	}

	return nil
}

func (m *SIPCapture) validateDstPort(formats strfmt.Registry) error {

	if err := validate.Required("dst_port", "body", m.DstPort); err != nil {
		return err
	}

	return nil
}

func (m *SIPCapture) validateFromURI(formats strfmt.Registry) error {

	if err := validate.Required("from_uri", "body", m.FromURI); err != nil {
		return err
	}

	return nil
}

func (m *SIPCapture) validateMethod(formats strfmt.Registry) error {

	if err := validate.Required("method", "body", m.Method); err != nil {
		return err
	}

	return nil
}

func (m *SIPCapture) validateProtocol(formats strfmt.Registry) error {

	if err := validate.Required("protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

func (m *SIPCapture) validateRequestURI(formats strfmt.Registry) error {

	if err := validate.Required("request_uri", "body", m.RequestURI); err != nil {
		return err
	}

	return nil
}

func (m *SIPCapture) validateSrcIP(formats strfmt.Registry) error {

	if err := validate.Required("src_ip", "body", m.SrcIP); err != nil {
		return err
	}

	return nil
}

func (m *SIPCapture) validateSrcPort(formats strfmt.Registry) error {

	if err := validate.Required("src_port", "body", m.SrcPort); err != nil {
		return err
	}

	return nil
}

func (m *SIPCapture) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	return nil
}

func (m *SIPCapture) validateTransport(formats strfmt.Registry) error {

	if err := validate.Required("transport", "body", m.Transport); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SIPCapture) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SIPCapture) UnmarshalBinary(b []byte) error {
	var res SIPCapture
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
