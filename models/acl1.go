// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Acl1 Acl1
// swagger:model Acl1
type Acl1 struct {

	// destination
	// Required: true
	Destination *string `json:"destination"`

	// from email
	// Required: true
	FromEmail *string `json:"from_email"`

	// received from
	// Required: true
	ReceivedFrom *string `json:"received_from"`

	// use regex
	// Required: true
	UseRegex *string `json:"use_regex"`
}

// Validate validates this acl1
func (m *Acl1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFromEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceivedFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUseRegex(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Acl1) validateDestination(formats strfmt.Registry) error {

	if err := validate.Required("destination", "body", m.Destination); err != nil {
		return err
	}

	return nil
}

func (m *Acl1) validateFromEmail(formats strfmt.Registry) error {

	if err := validate.Required("from_email", "body", m.FromEmail); err != nil {
		return err
	}

	return nil
}

func (m *Acl1) validateReceivedFrom(formats strfmt.Registry) error {

	if err := validate.Required("received_from", "body", m.ReceivedFrom); err != nil {
		return err
	}

	return nil
}

func (m *Acl1) validateUseRegex(formats strfmt.Registry) error {

	if err := validate.Required("use_regex", "body", m.UseRegex); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Acl1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Acl1) UnmarshalBinary(b []byte) error {
	var res Acl1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
