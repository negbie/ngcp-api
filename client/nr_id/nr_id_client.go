// Code generated by go-swagger; DO NOT EDIT.

package nr_id

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new nr id API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for nr id API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ChangeaspecificAutoAttendant(params *ChangeaspecificAutoAttendantParams) (*ChangeaspecificAutoAttendantNoContent, error)

	ChangeaspecificBillingFee(params *ChangeaspecificBillingFeeParams) (*ChangeaspecificBillingFeeOK, error)

	ChangeaspecificBillingNetwork(params *ChangeaspecificBillingNetworkParams) (*ChangeaspecificBillingNetworkNoContent, error)

	ChangeaspecificBillingProfile(params *ChangeaspecificBillingProfileParams) (*ChangeaspecificBillingProfileNoContent, error)

	ChangeaspecificBillingZone(params *ChangeaspecificBillingZoneParams) (*ChangeaspecificBillingZoneNoContent, error)

	ChangeaspecificCCMapEntry(params *ChangeaspecificCCMapEntryParams) (*ChangeaspecificCCMapEntryOK, error)

	ChangeaspecificCFBNumberSet(params *ChangeaspecificCFBNumberSetParams) (*ChangeaspecificCFBNumberSetNoContent, error)

	ChangeaspecificCFDestinationSet(params *ChangeaspecificCFDestinationSetParams) (*ChangeaspecificCFDestinationSetOK, error)

	ChangeaspecificCFMapping(params *ChangeaspecificCFMappingParams) (*ChangeaspecificCFMappingNoContent, error)

	ChangeaspecificCFSourceSet(params *ChangeaspecificCFSourceSetParams) (*ChangeaspecificCFSourceSetOK, error)

	ChangeaspecificCFTimeSet(params *ChangeaspecificCFTimeSetParams) (*ChangeaspecificCFTimeSetOK, error)

	ChangeaspecificCallForward(params *ChangeaspecificCallForwardParams) (*ChangeaspecificCallForwardOK, error)

	ChangeaspecificContract(params *ChangeaspecificContractParams) (*ChangeaspecificContractNoContent, error)

	ChangeaspecificCustomer(params *ChangeaspecificCustomerParams) (*ChangeaspecificCustomerNoContent, error)

	ChangeaspecificCustomerBalance(params *ChangeaspecificCustomerBalanceParams) (*ChangeaspecificCustomerBalanceOK, error)

	ChangeaspecificCustomerContact(params *ChangeaspecificCustomerContactParams) (*ChangeaspecificCustomerContactOK, error)

	ChangeaspecificCustomerFraudPreference(params *ChangeaspecificCustomerFraudPreferenceParams) (*ChangeaspecificCustomerFraudPreferenceNoContent, error)

	ChangeaspecificCustomerLocation(params *ChangeaspecificCustomerLocationParams) (*ChangeaspecificCustomerLocationNoContent, error)

	ChangeaspecificCustomerPreference(params *ChangeaspecificCustomerPreferenceParams) (*ChangeaspecificCustomerPreferenceOK, error)

	ChangeaspecificDomainPreference(params *ChangeaspecificDomainPreferenceParams) (*ChangeaspecificDomainPreferenceNoContent, error)

	ChangeaspecificEmailTemplate(params *ChangeaspecificEmailTemplateParams) (*ChangeaspecificEmailTemplateOK, error)

	ChangeaspecificEmergencyMapping(params *ChangeaspecificEmergencyMappingParams) (*ChangeaspecificEmergencyMappingNoContent, error)

	ChangeaspecificEmergencyMappingContainer(params *ChangeaspecificEmergencyMappingContainerParams) (*ChangeaspecificEmergencyMappingContainerNoContent, error)

	ChangeaspecificFaxserverSetting(params *ChangeaspecificFaxserverSettingParams) (*ChangeaspecificFaxserverSettingNoContent, error)

	ChangeaspecificInterception(params *ChangeaspecificInterceptionParams) (*ChangeaspecificInterceptionNoContent, error)

	ChangeaspecificLnpCarrier(params *ChangeaspecificLnpCarrierParams) (*ChangeaspecificLnpCarrierOK, error)

	ChangeaspecificLnpNumber(params *ChangeaspecificLnpNumberParams) (*ChangeaspecificLnpNumberOK, error)

	ChangeaspecificMailToFaxSetting(params *ChangeaspecificMailToFaxSettingParams) (*ChangeaspecificMailToFaxSettingOK, error)

	ChangeaspecificNcosLevel(params *ChangeaspecificNcosLevelParams) (*ChangeaspecificNcosLevelOK, error)

	ChangeaspecificNcosLnpCarrier(params *ChangeaspecificNcosLnpCarrierParams) (*ChangeaspecificNcosLnpCarrierOK, error)

	ChangeaspecificNcosPattern(params *ChangeaspecificNcosPatternParams) (*ChangeaspecificNcosPatternOK, error)

	ChangeaspecificNumber(params *ChangeaspecificNumberParams) (*ChangeaspecificNumberOK, error)

	ChangeaspecificPbxDevice(params *ChangeaspecificPbxDeviceParams) (*ChangeaspecificPbxDeviceNoContent, error)

	ChangeaspecificPbxDeviceModel(params *ChangeaspecificPbxDeviceModelParams) (*ChangeaspecificPbxDeviceModelNoContent, error)

	ChangeaspecificPbxDevicePreference(params *ChangeaspecificPbxDevicePreferenceParams) (*ChangeaspecificPbxDevicePreferenceOK, error)

	ChangeaspecificPbxDeviceProfile(params *ChangeaspecificPbxDeviceProfileParams) (*ChangeaspecificPbxDeviceProfileOK, error)

	ChangeaspecificPbxDeviceProfilePreference(params *ChangeaspecificPbxDeviceProfilePreferenceParams) (*ChangeaspecificPbxDeviceProfilePreferenceOK, error)

	ChangeaspecificPbxFieldDevicePreference(params *ChangeaspecificPbxFieldDevicePreferenceParams) (*ChangeaspecificPbxFieldDevicePreferenceNoContent, error)

	ChangeaspecificPeeringGroup(params *ChangeaspecificPeeringGroupParams) (*ChangeaspecificPeeringGroupOK, error)

	ChangeaspecificPeeringInboundRule(params *ChangeaspecificPeeringInboundRuleParams) (*ChangeaspecificPeeringInboundRuleOK, error)

	ChangeaspecificPeeringRule(params *ChangeaspecificPeeringRuleParams) (*ChangeaspecificPeeringRuleNoContent, error)

	ChangeaspecificPeeringServer(params *ChangeaspecificPeeringServerParams) (*ChangeaspecificPeeringServerOK, error)

	ChangeaspecificPeeringServerPreference(params *ChangeaspecificPeeringServerPreferenceParams) (*ChangeaspecificPeeringServerPreferenceOK, error)

	ChangeaspecificPhonebookEntry(params *ChangeaspecificPhonebookEntryParams) (*ChangeaspecificPhonebookEntryNoContent, error)

	ChangeaspecificPreferencesMetaEntry(params *ChangeaspecificPreferencesMetaEntryParams) (*ChangeaspecificPreferencesMetaEntryNoContent, error)

	ChangeaspecificProfilePackage(params *ChangeaspecificProfilePackageParams) (*ChangeaspecificProfilePackageNoContent, error)

	ChangeaspecificProfilePreference(params *ChangeaspecificProfilePreferenceParams) (*ChangeaspecificProfilePreferenceNoContent, error)

	ChangeaspecificReminder(params *ChangeaspecificReminderParams) (*ChangeaspecificReminderNoContent, error)

	ChangeaspecificReseller(params *ChangeaspecificResellerParams) (*ChangeaspecificResellerOK, error)

	ChangeaspecificRewriteRule(params *ChangeaspecificRewriteRuleParams) (*ChangeaspecificRewriteRuleOK, error)

	ChangeaspecificRewriteRuleSet(params *ChangeaspecificRewriteRuleSetParams) (*ChangeaspecificRewriteRuleSetNoContent, error)

	ChangeaspecificRtcApp(params *ChangeaspecificRtcAppParams) (*ChangeaspecificRtcAppNoContent, error)

	ChangeaspecificRtcNetwork(params *ChangeaspecificRtcNetworkParams) (*ChangeaspecificRtcNetworkOK, error)

	ChangeaspecificSoundSet(params *ChangeaspecificSoundSetParams) (*ChangeaspecificSoundSetOK, error)

	ChangeaspecificSpeedDial(params *ChangeaspecificSpeedDialParams) (*ChangeaspecificSpeedDialNoContent, error)

	ChangeaspecificSubscriber(params *ChangeaspecificSubscriberParams) (*ChangeaspecificSubscriberOK, error)

	ChangeaspecificSubscriberPreference(params *ChangeaspecificSubscriberPreferenceParams) (*ChangeaspecificSubscriberPreferenceOK, error)

	ChangeaspecificSubscriberProfile(params *ChangeaspecificSubscriberProfileParams) (*ChangeaspecificSubscriberProfileNoContent, error)

	ChangeaspecificSubscriberProfileSet(params *ChangeaspecificSubscriberProfileSetParams) (*ChangeaspecificSubscriberProfileSetNoContent, error)

	ChangeaspecificSubscriberRegistration(params *ChangeaspecificSubscriberRegistrationParams) (*ChangeaspecificSubscriberRegistrationOK, error)

	ChangeaspecificSystemContact(params *ChangeaspecificSystemContactParams) (*ChangeaspecificSystemContactOK, error)

	ChangeaspecificTrustedSource(params *ChangeaspecificTrustedSourceParams) (*ChangeaspecificTrustedSourceOK, error)

	ChangeaspecificUpnRewriteSet(params *ChangeaspecificUpnRewriteSetParams) (*ChangeaspecificUpnRewriteSetOK, error)

	ChangeaspecificVoicemail(params *ChangeaspecificVoicemailParams) (*ChangeaspecificVoicemailOK, error)

	ChangeaspecificVoicemailSetting(params *ChangeaspecificVoicemailSettingParams) (*ChangeaspecificVoicemailSettingOK, error)

	ChangeaspecificVoucher(params *ChangeaspecificVoucherParams) (*ChangeaspecificVoucherOK, error)

	DeleteaspecificAdmin(params *DeleteaspecificAdminParams) (*DeleteaspecificAdminNoContent, error)

	DeleteaspecificBannedIP(params *DeleteaspecificBannedIPParams) (*DeleteaspecificBannedIPNoContent, error)

	DeleteaspecificBannedUser(params *DeleteaspecificBannedUserParams) (*DeleteaspecificBannedUserNoContent, error)

	DeleteaspecificBillingFee(params *DeleteaspecificBillingFeeParams) (*DeleteaspecificBillingFeeNoContent, error)

	DeleteaspecificBillingZone(params *DeleteaspecificBillingZoneParams) (*DeleteaspecificBillingZoneNoContent, error)

	DeleteaspecificCCMapEntry(params *DeleteaspecificCCMapEntryParams) (*DeleteaspecificCCMapEntryNoContent, error)

	DeleteaspecificCFBNumberSet(params *DeleteaspecificCFBNumberSetParams) (*DeleteaspecificCFBNumberSetNoContent, error)

	DeleteaspecificCFDestinationSet(params *DeleteaspecificCFDestinationSetParams) (*DeleteaspecificCFDestinationSetNoContent, error)

	DeleteaspecificCFSourceSet(params *DeleteaspecificCFSourceSetParams) (*DeleteaspecificCFSourceSetNoContent, error)

	DeleteaspecificCFTimeSet(params *DeleteaspecificCFTimeSetParams) (*DeleteaspecificCFTimeSetNoContent, error)

	DeleteaspecificCallForward(params *DeleteaspecificCallForwardParams) (*DeleteaspecificCallForwardNoContent, error)

	DeleteaspecificCallRecording(params *DeleteaspecificCallRecordingParams) (*DeleteaspecificCallRecordingNoContent, error)

	DeleteaspecificCallRecordingStream(params *DeleteaspecificCallRecordingStreamParams) (*DeleteaspecificCallRecordingStreamNoContent, error)

	DeleteaspecificCustomerContact(params *DeleteaspecificCustomerContactParams) (*DeleteaspecificCustomerContactNoContent, error)

	DeleteaspecificCustomerLocation(params *DeleteaspecificCustomerLocationParams) (*DeleteaspecificCustomerLocationNoContent, error)

	DeleteaspecificDomain(params *DeleteaspecificDomainParams) (*DeleteaspecificDomainNoContent, error)

	DeleteaspecificEmailTemplate(params *DeleteaspecificEmailTemplateParams) (*DeleteaspecificEmailTemplateNoContent, error)

	DeleteaspecificEmergencyMapping(params *DeleteaspecificEmergencyMappingParams) (*DeleteaspecificEmergencyMappingNoContent, error)

	DeleteaspecificEmergencyMappingContainer(params *DeleteaspecificEmergencyMappingContainerParams) (*DeleteaspecificEmergencyMappingContainerNoContent, error)

	DeleteaspecificInterception(params *DeleteaspecificInterceptionParams) (*DeleteaspecificInterceptionNoContent, error)

	DeleteaspecificInvoice(params *DeleteaspecificInvoiceParams) (*DeleteaspecificInvoiceNoContent, error)

	DeleteaspecificLnpCarrier(params *DeleteaspecificLnpCarrierParams) (*DeleteaspecificLnpCarrierNoContent, error)

	DeleteaspecificLnpNumber(params *DeleteaspecificLnpNumberParams) (*DeleteaspecificLnpNumberNoContent, error)

	DeleteaspecificMaliciousCall(params *DeleteaspecificMaliciousCallParams) (*DeleteaspecificMaliciousCallNoContent, error)

	DeleteaspecificManagerSecretary(params *DeleteaspecificManagerSecretaryParams) (*DeleteaspecificManagerSecretaryNoContent, error)

	DeleteaspecificNcosLevel(params *DeleteaspecificNcosLevelParams) (*DeleteaspecificNcosLevelNoContent, error)

	DeleteaspecificNcosLnpCarrier(params *DeleteaspecificNcosLnpCarrierParams) (*DeleteaspecificNcosLnpCarrierNoContent, error)

	DeleteaspecificNcosPattern(params *DeleteaspecificNcosPatternParams) (*DeleteaspecificNcosPatternNoContent, error)

	DeleteaspecificPbxDevice(params *DeleteaspecificPbxDeviceParams) (*DeleteaspecificPbxDeviceNoContent, error)

	DeleteaspecificPeeringGroup(params *DeleteaspecificPeeringGroupParams) (*DeleteaspecificPeeringGroupNoContent, error)

	DeleteaspecificPeeringInboundRule(params *DeleteaspecificPeeringInboundRuleParams) (*DeleteaspecificPeeringInboundRuleNoContent, error)

	DeleteaspecificPeeringRule(params *DeleteaspecificPeeringRuleParams) (*DeleteaspecificPeeringRuleNoContent, error)

	DeleteaspecificPeeringServer(params *DeleteaspecificPeeringServerParams) (*DeleteaspecificPeeringServerNoContent, error)

	DeleteaspecificPhonebookEntry(params *DeleteaspecificPhonebookEntryParams) (*DeleteaspecificPhonebookEntryNoContent, error)

	DeleteaspecificPreferencesMetaEntry(params *DeleteaspecificPreferencesMetaEntryParams) (*DeleteaspecificPreferencesMetaEntryNoContent, error)

	DeleteaspecificProfilePackage(params *DeleteaspecificProfilePackageParams) (*DeleteaspecificProfilePackageNoContent, error)

	DeleteaspecificReminder(params *DeleteaspecificReminderParams) (*DeleteaspecificReminderNoContent, error)

	DeleteaspecificRewriteRule(params *DeleteaspecificRewriteRuleParams) (*DeleteaspecificRewriteRuleNoContent, error)

	DeleteaspecificRewriteRuleSet(params *DeleteaspecificRewriteRuleSetParams) (*DeleteaspecificRewriteRuleSetNoContent, error)

	DeleteaspecificSoundFile(params *DeleteaspecificSoundFileParams) (*DeleteaspecificSoundFileNoContent, error)

	DeleteaspecificSoundSet(params *DeleteaspecificSoundSetParams) (*DeleteaspecificSoundSetNoContent, error)

	DeleteaspecificSubscriber(params *DeleteaspecificSubscriberParams) (*DeleteaspecificSubscriberNoContent, error)

	DeleteaspecificSubscriberProfile(params *DeleteaspecificSubscriberProfileParams) (*DeleteaspecificSubscriberProfileNoContent, error)

	DeleteaspecificSubscriberProfileSet(params *DeleteaspecificSubscriberProfileSetParams) (*DeleteaspecificSubscriberProfileSetNoContent, error)

	DeleteaspecificSubscriberRegistration(params *DeleteaspecificSubscriberRegistrationParams) (*DeleteaspecificSubscriberRegistrationNoContent, error)

	DeleteaspecificSystemContact(params *DeleteaspecificSystemContactParams) (*DeleteaspecificSystemContactNoContent, error)

	DeleteaspecificTrustedSource(params *DeleteaspecificTrustedSourceParams) (*DeleteaspecificTrustedSourceNoContent, error)

	DeleteaspecificUpnRewriteSet(params *DeleteaspecificUpnRewriteSetParams) (*DeleteaspecificUpnRewriteSetNoContent, error)

	DeleteaspecificVoicemail(params *DeleteaspecificVoicemailParams) (*DeleteaspecificVoicemailNoContent, error)

	DeleteaspecificVoicemailGreeting(params *DeleteaspecificVoicemailGreetingParams) (*DeleteaspecificVoicemailGreetingNoContent, error)

	DeleteaspecificVoucher(params *DeleteaspecificVoucherParams) (*DeleteaspecificVoucherNoContent, error)

	GetaspecificAdmin(params *GetaspecificAdminParams) (*GetaspecificAdminOK, error)

	GetaspecificAutoAttendant(params *GetaspecificAutoAttendantParams) (*GetaspecificAutoAttendantOK, error)

	GetaspecificBannedIP(params *GetaspecificBannedIPParams) (*GetaspecificBannedIPOK, error)

	GetaspecificBannedUser(params *GetaspecificBannedUserParams) (*GetaspecificBannedUserOK, error)

	GetaspecificBillingFee(params *GetaspecificBillingFeeParams) (*GetaspecificBillingFeeOK, error)

	GetaspecificBillingNetwork(params *GetaspecificBillingNetworkParams) (*GetaspecificBillingNetworkOK, error)

	GetaspecificBillingProfile(params *GetaspecificBillingProfileParams) (*GetaspecificBillingProfileOK, error)

	GetaspecificBillingZone(params *GetaspecificBillingZoneParams) (*GetaspecificBillingZoneOK, error)

	GetaspecificCCMapEntry(params *GetaspecificCCMapEntryParams) (*GetaspecificCCMapEntryOK, error)

	GetaspecificCFBNumberSet(params *GetaspecificCFBNumberSetParams) (*GetaspecificCFBNumberSetOK, error)

	GetaspecificCFDestinationSet(params *GetaspecificCFDestinationSetParams) (*GetaspecificCFDestinationSetOK, error)

	GetaspecificCFMapping(params *GetaspecificCFMappingParams) (*GetaspecificCFMappingOK, error)

	GetaspecificCFSourceSet(params *GetaspecificCFSourceSetParams) (*GetaspecificCFSourceSetOK, error)

	GetaspecificCFTimeSet(params *GetaspecificCFTimeSetParams) (*GetaspecificCFTimeSetOK, error)

	GetaspecificCallForward(params *GetaspecificCallForwardParams) (*GetaspecificCallForwardOK, error)

	GetaspecificCallRecording(params *GetaspecificCallRecordingParams) (*GetaspecificCallRecordingOK, error)

	GetaspecificCallRecordingStream(params *GetaspecificCallRecordingStreamParams) (*GetaspecificCallRecordingStreamOK, error)

	GetaspecificContract(params *GetaspecificContractParams) (*GetaspecificContractOK, error)

	GetaspecificCustomer(params *GetaspecificCustomerParams) (*GetaspecificCustomerOK, error)

	GetaspecificCustomerBalance(params *GetaspecificCustomerBalanceParams) (*GetaspecificCustomerBalanceOK, error)

	GetaspecificCustomerContact(params *GetaspecificCustomerContactParams) (*GetaspecificCustomerContactOK, error)

	GetaspecificCustomerFraudPreference(params *GetaspecificCustomerFraudPreferenceParams) (*GetaspecificCustomerFraudPreferenceOK, error)

	GetaspecificCustomerLocation(params *GetaspecificCustomerLocationParams) (*GetaspecificCustomerLocationOK, error)

	GetaspecificCustomerPreference(params *GetaspecificCustomerPreferenceParams) (*GetaspecificCustomerPreferenceOK, error)

	GetaspecificDomain(params *GetaspecificDomainParams) (*GetaspecificDomainOK, error)

	GetaspecificDomainPreference(params *GetaspecificDomainPreferenceParams) (*GetaspecificDomainPreferenceOK, error)

	GetaspecificEmailTemplate(params *GetaspecificEmailTemplateParams) (*GetaspecificEmailTemplateOK, error)

	GetaspecificEmergencyMapping(params *GetaspecificEmergencyMappingParams) (*GetaspecificEmergencyMappingOK, error)

	GetaspecificEmergencyMappingContainer(params *GetaspecificEmergencyMappingContainerParams) (*GetaspecificEmergencyMappingContainerOK, error)

	GetaspecificFaxserverSetting(params *GetaspecificFaxserverSettingParams) (*GetaspecificFaxserverSettingOK, error)

	GetaspecificInterception(params *GetaspecificInterceptionParams) (*GetaspecificInterceptionOK, error)

	GetaspecificInvoice(params *GetaspecificInvoiceParams) (*GetaspecificInvoiceOK, error)

	GetaspecificLnpCarrier(params *GetaspecificLnpCarrierParams) (*GetaspecificLnpCarrierOK, error)

	GetaspecificLnpNumber(params *GetaspecificLnpNumberParams) (*GetaspecificLnpNumberOK, error)

	GetaspecificMailToFaxSetting(params *GetaspecificMailToFaxSettingParams) (*GetaspecificMailToFaxSettingOK, error)

	GetaspecificMaliciousCall(params *GetaspecificMaliciousCallParams) (*GetaspecificMaliciousCallOK, error)

	GetaspecificManagerSecretary(params *GetaspecificManagerSecretaryParams) (*GetaspecificManagerSecretaryOK, error)

	GetaspecificNcosLevel(params *GetaspecificNcosLevelParams) (*GetaspecificNcosLevelOK, error)

	GetaspecificNcosLnpCarrier(params *GetaspecificNcosLnpCarrierParams) (*GetaspecificNcosLnpCarrierOK, error)

	GetaspecificNcosPattern(params *GetaspecificNcosPatternParams) (*GetaspecificNcosPatternOK, error)

	GetaspecificNumber(params *GetaspecificNumberParams) (*GetaspecificNumberOK, error)

	GetaspecificPbxDevice(params *GetaspecificPbxDeviceParams) (*GetaspecificPbxDeviceOK, error)

	GetaspecificPbxDeviceConfig(params *GetaspecificPbxDeviceConfigParams) (*GetaspecificPbxDeviceConfigOK, error)

	GetaspecificPbxDeviceFirmware(params *GetaspecificPbxDeviceFirmwareParams) (*GetaspecificPbxDeviceFirmwareOK, error)

	GetaspecificPbxDeviceModel(params *GetaspecificPbxDeviceModelParams) (*GetaspecificPbxDeviceModelOK, error)

	GetaspecificPbxDevicePreference(params *GetaspecificPbxDevicePreferenceParams) (*GetaspecificPbxDevicePreferenceOK, error)

	GetaspecificPbxDeviceProfile(params *GetaspecificPbxDeviceProfileParams) (*GetaspecificPbxDeviceProfileOK, error)

	GetaspecificPbxDeviceProfilePreference(params *GetaspecificPbxDeviceProfilePreferenceParams) (*GetaspecificPbxDeviceProfilePreferenceOK, error)

	GetaspecificPbxFieldDevicePreference(params *GetaspecificPbxFieldDevicePreferenceParams) (*GetaspecificPbxFieldDevicePreferenceOK, error)

	GetaspecificPeeringGroup(params *GetaspecificPeeringGroupParams) (*GetaspecificPeeringGroupOK, error)

	GetaspecificPeeringInboundRule(params *GetaspecificPeeringInboundRuleParams) (*GetaspecificPeeringInboundRuleOK, error)

	GetaspecificPeeringRule(params *GetaspecificPeeringRuleParams) (*GetaspecificPeeringRuleOK, error)

	GetaspecificPeeringServer(params *GetaspecificPeeringServerParams) (*GetaspecificPeeringServerOK, error)

	GetaspecificPeeringServerPreference(params *GetaspecificPeeringServerPreferenceParams) (*GetaspecificPeeringServerPreferenceOK, error)

	GetaspecificPhonebookEntry(params *GetaspecificPhonebookEntryParams) (*GetaspecificPhonebookEntryOK, error)

	GetaspecificPreferencesMetaEntry(params *GetaspecificPreferencesMetaEntryParams) (*GetaspecificPreferencesMetaEntryOK, error)

	GetaspecificProfilePackage(params *GetaspecificProfilePackageParams) (*GetaspecificProfilePackageOK, error)

	GetaspecificProfilePreference(params *GetaspecificProfilePreferenceParams) (*GetaspecificProfilePreferenceOK, error)

	GetaspecificReminder(params *GetaspecificReminderParams) (*GetaspecificReminderOK, error)

	GetaspecificReseller(params *GetaspecificResellerParams) (*GetaspecificResellerOK, error)

	GetaspecificRewriteRule(params *GetaspecificRewriteRuleParams) (*GetaspecificRewriteRuleOK, error)

	GetaspecificRewriteRuleSet(params *GetaspecificRewriteRuleSetParams) (*GetaspecificRewriteRuleSetOK, error)

	GetaspecificRtcApp(params *GetaspecificRtcAppParams) (*GetaspecificRtcAppOK, error)

	GetaspecificRtcNetwork(params *GetaspecificRtcNetworkParams) (*GetaspecificRtcNetworkOK, error)

	GetaspecificSoundFile(params *GetaspecificSoundFileParams) (*GetaspecificSoundFileOK, error)

	GetaspecificSoundSet(params *GetaspecificSoundSetParams) (*GetaspecificSoundSetOK, error)

	GetaspecificSpeedDial(params *GetaspecificSpeedDialParams) (*GetaspecificSpeedDialOK, error)

	GetaspecificSubscriber(params *GetaspecificSubscriberParams) (*GetaspecificSubscriberOK, error)

	GetaspecificSubscriberPreference(params *GetaspecificSubscriberPreferenceParams) (*GetaspecificSubscriberPreferenceOK, error)

	GetaspecificSubscriberProfile(params *GetaspecificSubscriberProfileParams) (*GetaspecificSubscriberProfileOK, error)

	GetaspecificSubscriberProfileSet(params *GetaspecificSubscriberProfileSetParams) (*GetaspecificSubscriberProfileSetOK, error)

	GetaspecificSubscriberRegistration(params *GetaspecificSubscriberRegistrationParams) (*GetaspecificSubscriberRegistrationOK, error)

	GetaspecificSystemContact(params *GetaspecificSystemContactParams) (*GetaspecificSystemContactOK, error)

	GetaspecificTrustedSource(params *GetaspecificTrustedSourceParams) (*GetaspecificTrustedSourceOK, error)

	GetaspecificUpnRewriteSet(params *GetaspecificUpnRewriteSetParams) (*GetaspecificUpnRewriteSetOK, error)

	GetaspecificVoicemail(params *GetaspecificVoicemailParams) (*GetaspecificVoicemailOK, error)

	GetaspecificVoicemailGreeting(params *GetaspecificVoicemailGreetingParams) (*GetaspecificVoicemailGreetingOK, error)

	GetaspecificVoicemailSetting(params *GetaspecificVoicemailSettingParams) (*GetaspecificVoicemailSettingOK, error)

	GetaspecificVoucher(params *GetaspecificVoucherParams) (*GetaspecificVoucherOK, error)

	ReplaceChangeaspecificAutoAttendant(params *ReplaceChangeaspecificAutoAttendantParams) (*ReplaceChangeaspecificAutoAttendantOK, error)

	ReplaceChangeaspecificBillingFee(params *ReplaceChangeaspecificBillingFeeParams) (*ReplaceChangeaspecificBillingFeeNoContent, error)

	ReplaceChangeaspecificBillingNetwork(params *ReplaceChangeaspecificBillingNetworkParams) (*ReplaceChangeaspecificBillingNetworkOK, error)

	ReplaceChangeaspecificBillingProfile(params *ReplaceChangeaspecificBillingProfileParams) (*ReplaceChangeaspecificBillingProfileOK, error)

	ReplaceChangeaspecificBillingZone(params *ReplaceChangeaspecificBillingZoneParams) (*ReplaceChangeaspecificBillingZoneNoContent, error)

	ReplaceChangeaspecificCCMapEntry(params *ReplaceChangeaspecificCCMapEntryParams) (*ReplaceChangeaspecificCCMapEntryNoContent, error)

	ReplaceChangeaspecificCFBNumberSet(params *ReplaceChangeaspecificCFBNumberSetParams) (*ReplaceChangeaspecificCFBNumberSetNoContent, error)

	ReplaceChangeaspecificCFDestinationSet(params *ReplaceChangeaspecificCFDestinationSetParams) (*ReplaceChangeaspecificCFDestinationSetNoContent, error)

	ReplaceChangeaspecificCFMapping(params *ReplaceChangeaspecificCFMappingParams) (*ReplaceChangeaspecificCFMappingNoContent, error)

	ReplaceChangeaspecificCFSourceSet(params *ReplaceChangeaspecificCFSourceSetParams) (*ReplaceChangeaspecificCFSourceSetNoContent, error)

	ReplaceChangeaspecificCFTimeSet(params *ReplaceChangeaspecificCFTimeSetParams) (*ReplaceChangeaspecificCFTimeSetOK, error)

	ReplaceChangeaspecificCallForward(params *ReplaceChangeaspecificCallForwardParams) (*ReplaceChangeaspecificCallForwardOK, error)

	ReplaceChangeaspecificContract(params *ReplaceChangeaspecificContractParams) (*ReplaceChangeaspecificContractNoContent, error)

	ReplaceChangeaspecificCustomer(params *ReplaceChangeaspecificCustomerParams) (*ReplaceChangeaspecificCustomerOK, error)

	ReplaceChangeaspecificCustomerBalance(params *ReplaceChangeaspecificCustomerBalanceParams) (*ReplaceChangeaspecificCustomerBalanceNoContent, error)

	ReplaceChangeaspecificCustomerContact(params *ReplaceChangeaspecificCustomerContactParams) (*ReplaceChangeaspecificCustomerContactNoContent, error)

	ReplaceChangeaspecificCustomerFraudPreference(params *ReplaceChangeaspecificCustomerFraudPreferenceParams) (*ReplaceChangeaspecificCustomerFraudPreferenceOK, error)

	ReplaceChangeaspecificCustomerLocation(params *ReplaceChangeaspecificCustomerLocationParams) (*ReplaceChangeaspecificCustomerLocationNoContent, error)

	ReplaceChangeaspecificCustomerPreference(params *ReplaceChangeaspecificCustomerPreferenceParams) (*ReplaceChangeaspecificCustomerPreferenceOK, error)

	ReplaceChangeaspecificDomainPreference(params *ReplaceChangeaspecificDomainPreferenceParams) (*ReplaceChangeaspecificDomainPreferenceOK, error)

	ReplaceChangeaspecificEmailTemplate(params *ReplaceChangeaspecificEmailTemplateParams) (*ReplaceChangeaspecificEmailTemplateNoContent, error)

	ReplaceChangeaspecificEmergencyMapping(params *ReplaceChangeaspecificEmergencyMappingParams) (*ReplaceChangeaspecificEmergencyMappingOK, error)

	ReplaceChangeaspecificEmergencyMappingContainer(params *ReplaceChangeaspecificEmergencyMappingContainerParams) (*ReplaceChangeaspecificEmergencyMappingContainerNoContent, error)

	ReplaceChangeaspecificFaxserverSetting(params *ReplaceChangeaspecificFaxserverSettingParams) (*ReplaceChangeaspecificFaxserverSettingNoContent, error)

	ReplaceChangeaspecificInterception(params *ReplaceChangeaspecificInterceptionParams) (*ReplaceChangeaspecificInterceptionOK, error)

	ReplaceChangeaspecificLnpCarrier(params *ReplaceChangeaspecificLnpCarrierParams) (*ReplaceChangeaspecificLnpCarrierOK, error)

	ReplaceChangeaspecificLnpNumber(params *ReplaceChangeaspecificLnpNumberParams) (*ReplaceChangeaspecificLnpNumberNoContent, error)

	ReplaceChangeaspecificMailToFaxSetting(params *ReplaceChangeaspecificMailToFaxSettingParams) (*ReplaceChangeaspecificMailToFaxSettingOK, error)

	ReplaceChangeaspecificManagerSecretary(params *ReplaceChangeaspecificManagerSecretaryParams) (*ReplaceChangeaspecificManagerSecretaryNoContent, error)

	ReplaceChangeaspecificNcosLevel(params *ReplaceChangeaspecificNcosLevelParams) (*ReplaceChangeaspecificNcosLevelOK, error)

	ReplaceChangeaspecificNcosLnpCarrier(params *ReplaceChangeaspecificNcosLnpCarrierParams) (*ReplaceChangeaspecificNcosLnpCarrierNoContent, error)

	ReplaceChangeaspecificNcosPattern(params *ReplaceChangeaspecificNcosPatternParams) (*ReplaceChangeaspecificNcosPatternNoContent, error)

	ReplaceChangeaspecificNumber(params *ReplaceChangeaspecificNumberParams) (*ReplaceChangeaspecificNumberOK, error)

	ReplaceChangeaspecificPbxDevice(params *ReplaceChangeaspecificPbxDeviceParams) (*ReplaceChangeaspecificPbxDeviceOK, error)

	ReplaceChangeaspecificPbxDeviceConfig(params *ReplaceChangeaspecificPbxDeviceConfigParams) (*ReplaceChangeaspecificPbxDeviceConfigNoContent, error)

	ReplaceChangeaspecificPbxDeviceFirmware(params *ReplaceChangeaspecificPbxDeviceFirmwareParams) (*ReplaceChangeaspecificPbxDeviceFirmwareOK, error)

	ReplaceChangeaspecificPbxDeviceModel(params *ReplaceChangeaspecificPbxDeviceModelParams) (*ReplaceChangeaspecificPbxDeviceModelNoContent, error)

	ReplaceChangeaspecificPbxDevicePreference(params *ReplaceChangeaspecificPbxDevicePreferenceParams) (*ReplaceChangeaspecificPbxDevicePreferenceNoContent, error)

	ReplaceChangeaspecificPbxDeviceProfile(params *ReplaceChangeaspecificPbxDeviceProfileParams) (*ReplaceChangeaspecificPbxDeviceProfileOK, error)

	ReplaceChangeaspecificPbxDeviceProfilePreference(params *ReplaceChangeaspecificPbxDeviceProfilePreferenceParams) (*ReplaceChangeaspecificPbxDeviceProfilePreferenceOK, error)

	ReplaceChangeaspecificPbxFieldDevicePreference(params *ReplaceChangeaspecificPbxFieldDevicePreferenceParams) (*ReplaceChangeaspecificPbxFieldDevicePreferenceNoContent, error)

	ReplaceChangeaspecificPeeringGroup(params *ReplaceChangeaspecificPeeringGroupParams) (*ReplaceChangeaspecificPeeringGroupOK, error)

	ReplaceChangeaspecificPeeringInboundRule(params *ReplaceChangeaspecificPeeringInboundRuleParams) (*ReplaceChangeaspecificPeeringInboundRuleNoContent, error)

	ReplaceChangeaspecificPeeringRule(params *ReplaceChangeaspecificPeeringRuleParams) (*ReplaceChangeaspecificPeeringRuleOK, error)

	ReplaceChangeaspecificPeeringServer(params *ReplaceChangeaspecificPeeringServerParams) (*ReplaceChangeaspecificPeeringServerOK, error)

	ReplaceChangeaspecificPeeringServerPreference(params *ReplaceChangeaspecificPeeringServerPreferenceParams) (*ReplaceChangeaspecificPeeringServerPreferenceOK, error)

	ReplaceChangeaspecificPhonebookEntry(params *ReplaceChangeaspecificPhonebookEntryParams) (*ReplaceChangeaspecificPhonebookEntryNoContent, error)

	ReplaceChangeaspecificPreferencesMetaEntry(params *ReplaceChangeaspecificPreferencesMetaEntryParams) (*ReplaceChangeaspecificPreferencesMetaEntryOK, error)

	ReplaceChangeaspecificProfilePackage(params *ReplaceChangeaspecificProfilePackageParams) (*ReplaceChangeaspecificProfilePackageOK, error)

	ReplaceChangeaspecificProfilePreference(params *ReplaceChangeaspecificProfilePreferenceParams) (*ReplaceChangeaspecificProfilePreferenceNoContent, error)

	ReplaceChangeaspecificReminder(params *ReplaceChangeaspecificReminderParams) (*ReplaceChangeaspecificReminderNoContent, error)

	ReplaceChangeaspecificReseller(params *ReplaceChangeaspecificResellerParams) (*ReplaceChangeaspecificResellerOK, error)

	ReplaceChangeaspecificRewriteRule(params *ReplaceChangeaspecificRewriteRuleParams) (*ReplaceChangeaspecificRewriteRuleNoContent, error)

	ReplaceChangeaspecificRewriteRuleSet(params *ReplaceChangeaspecificRewriteRuleSetParams) (*ReplaceChangeaspecificRewriteRuleSetNoContent, error)

	ReplaceChangeaspecificRtcApp(params *ReplaceChangeaspecificRtcAppParams) (*ReplaceChangeaspecificRtcAppOK, error)

	ReplaceChangeaspecificRtcNetwork(params *ReplaceChangeaspecificRtcNetworkParams) (*ReplaceChangeaspecificRtcNetworkOK, error)

	ReplaceChangeaspecificSoundFile(params *ReplaceChangeaspecificSoundFileParams) (*ReplaceChangeaspecificSoundFileOK, error)

	ReplaceChangeaspecificSoundSet(params *ReplaceChangeaspecificSoundSetParams) (*ReplaceChangeaspecificSoundSetOK, error)

	ReplaceChangeaspecificSpeedDial(params *ReplaceChangeaspecificSpeedDialParams) (*ReplaceChangeaspecificSpeedDialOK, error)

	ReplaceChangeaspecificSubscriber(params *ReplaceChangeaspecificSubscriberParams) (*ReplaceChangeaspecificSubscriberOK, error)

	ReplaceChangeaspecificSubscriberPreference(params *ReplaceChangeaspecificSubscriberPreferenceParams) (*ReplaceChangeaspecificSubscriberPreferenceNoContent, error)

	ReplaceChangeaspecificSubscriberProfile(params *ReplaceChangeaspecificSubscriberProfileParams) (*ReplaceChangeaspecificSubscriberProfileOK, error)

	ReplaceChangeaspecificSubscriberProfileSet(params *ReplaceChangeaspecificSubscriberProfileSetParams) (*ReplaceChangeaspecificSubscriberProfileSetOK, error)

	ReplaceChangeaspecificSubscriberRegistration(params *ReplaceChangeaspecificSubscriberRegistrationParams) (*ReplaceChangeaspecificSubscriberRegistrationOK, error)

	ReplaceChangeaspecificSystemContact(params *ReplaceChangeaspecificSystemContactParams) (*ReplaceChangeaspecificSystemContactNoContent, error)

	ReplaceChangeaspecificTrustedSource(params *ReplaceChangeaspecificTrustedSourceParams) (*ReplaceChangeaspecificTrustedSourceNoContent, error)

	ReplaceChangeaspecificUpnRewriteSet(params *ReplaceChangeaspecificUpnRewriteSetParams) (*ReplaceChangeaspecificUpnRewriteSetNoContent, error)

	ReplaceChangeaspecificVoicemail(params *ReplaceChangeaspecificVoicemailParams) (*ReplaceChangeaspecificVoicemailNoContent, error)

	ReplaceChangeaspecificVoicemailGreeting(params *ReplaceChangeaspecificVoicemailGreetingParams) (*ReplaceChangeaspecificVoicemailGreetingNoContent, error)

	ReplaceChangeaspecificVoicemailSetting(params *ReplaceChangeaspecificVoicemailSettingParams) (*ReplaceChangeaspecificVoicemailSettingNoContent, error)

	ReplaceChangeaspecificVoucher(params *ReplaceChangeaspecificVoucherParams) (*ReplaceChangeaspecificVoucherOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ChangeaspecificAutoAttendant changes a specific auto attendant
*/
func (a *Client) ChangeaspecificAutoAttendant(params *ChangeaspecificAutoAttendantParams) (*ChangeaspecificAutoAttendantNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificAutoAttendantParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificAutoAttendant",
		Method:             "PATCH",
		PathPattern:        "/autoattendants/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificAutoAttendantReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificAutoAttendantNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificAutoAttendant: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificBillingFee changes a specific billing fee
*/
func (a *Client) ChangeaspecificBillingFee(params *ChangeaspecificBillingFeeParams) (*ChangeaspecificBillingFeeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificBillingFeeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificBillingFee",
		Method:             "PATCH",
		PathPattern:        "/billingfees/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificBillingFeeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificBillingFeeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificBillingFee: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificBillingNetwork changes a specific billing network
*/
func (a *Client) ChangeaspecificBillingNetwork(params *ChangeaspecificBillingNetworkParams) (*ChangeaspecificBillingNetworkNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificBillingNetworkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificBillingNetwork",
		Method:             "PATCH",
		PathPattern:        "/billingnetworks/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificBillingNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificBillingNetworkNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificBillingNetwork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificBillingProfile changes a specific billing profile
*/
func (a *Client) ChangeaspecificBillingProfile(params *ChangeaspecificBillingProfileParams) (*ChangeaspecificBillingProfileNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificBillingProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificBillingProfile",
		Method:             "PATCH",
		PathPattern:        "/billingprofiles/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificBillingProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificBillingProfileNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificBillingProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificBillingZone changes a specific billing zone
*/
func (a *Client) ChangeaspecificBillingZone(params *ChangeaspecificBillingZoneParams) (*ChangeaspecificBillingZoneNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificBillingZoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificBillingZone",
		Method:             "PATCH",
		PathPattern:        "/billingzones/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificBillingZoneReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificBillingZoneNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificBillingZone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificCCMapEntry changes a specific c c map entry
*/
func (a *Client) ChangeaspecificCCMapEntry(params *ChangeaspecificCCMapEntryParams) (*ChangeaspecificCCMapEntryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificCCMapEntryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificCCMapEntry",
		Method:             "PATCH",
		PathPattern:        "/ccmapentries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificCCMapEntryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificCCMapEntryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificCCMapEntry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificCFBNumberSet changes a specific c f b number set
*/
func (a *Client) ChangeaspecificCFBNumberSet(params *ChangeaspecificCFBNumberSetParams) (*ChangeaspecificCFBNumberSetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificCFBNumberSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificCFBNumberSet",
		Method:             "PATCH",
		PathPattern:        "/cfbnumbersets/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificCFBNumberSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificCFBNumberSetNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificCFBNumberSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificCFDestinationSet changes a specific c f destination set
*/
func (a *Client) ChangeaspecificCFDestinationSet(params *ChangeaspecificCFDestinationSetParams) (*ChangeaspecificCFDestinationSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificCFDestinationSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificCFDestinationSet",
		Method:             "PATCH",
		PathPattern:        "/cfdestinationsets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificCFDestinationSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificCFDestinationSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificCFDestinationSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificCFMapping changes a specific c f mapping
*/
func (a *Client) ChangeaspecificCFMapping(params *ChangeaspecificCFMappingParams) (*ChangeaspecificCFMappingNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificCFMappingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificCFMapping",
		Method:             "PATCH",
		PathPattern:        "/cfmappings/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificCFMappingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificCFMappingNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificCFMapping: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificCFSourceSet changes a specific c f source set
*/
func (a *Client) ChangeaspecificCFSourceSet(params *ChangeaspecificCFSourceSetParams) (*ChangeaspecificCFSourceSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificCFSourceSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificCFSourceSet",
		Method:             "PATCH",
		PathPattern:        "/cfsourcesets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificCFSourceSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificCFSourceSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificCFSourceSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificCFTimeSet changes a specific c f time set
*/
func (a *Client) ChangeaspecificCFTimeSet(params *ChangeaspecificCFTimeSetParams) (*ChangeaspecificCFTimeSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificCFTimeSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificCFTimeSet",
		Method:             "PATCH",
		PathPattern:        "/cftimesets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificCFTimeSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificCFTimeSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificCFTimeSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificCallForward changes a specific call forward
*/
func (a *Client) ChangeaspecificCallForward(params *ChangeaspecificCallForwardParams) (*ChangeaspecificCallForwardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificCallForwardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificCallForward",
		Method:             "PATCH",
		PathPattern:        "/callforwards/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificCallForwardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificCallForwardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificCallForward: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificContract changes a specific contract
*/
func (a *Client) ChangeaspecificContract(params *ChangeaspecificContractParams) (*ChangeaspecificContractNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificContractParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificContract",
		Method:             "PATCH",
		PathPattern:        "/contracts/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificContractReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificContractNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificContract: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificCustomer changes a specific customer
*/
func (a *Client) ChangeaspecificCustomer(params *ChangeaspecificCustomerParams) (*ChangeaspecificCustomerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificCustomerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificCustomer",
		Method:             "PATCH",
		PathPattern:        "/customers/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificCustomerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificCustomerNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificCustomer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificCustomerBalance changes a specific customer balance
*/
func (a *Client) ChangeaspecificCustomerBalance(params *ChangeaspecificCustomerBalanceParams) (*ChangeaspecificCustomerBalanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificCustomerBalanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificCustomerBalance",
		Method:             "PATCH",
		PathPattern:        "/customerbalances/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificCustomerBalanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificCustomerBalanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificCustomerBalance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificCustomerContact changes a specific customer contact
*/
func (a *Client) ChangeaspecificCustomerContact(params *ChangeaspecificCustomerContactParams) (*ChangeaspecificCustomerContactOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificCustomerContactParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificCustomerContact",
		Method:             "PATCH",
		PathPattern:        "/customercontacts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificCustomerContactReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificCustomerContactOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificCustomerContact: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificCustomerFraudPreference changes a specific customer fraud preference
*/
func (a *Client) ChangeaspecificCustomerFraudPreference(params *ChangeaspecificCustomerFraudPreferenceParams) (*ChangeaspecificCustomerFraudPreferenceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificCustomerFraudPreferenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificCustomerFraudPreference",
		Method:             "PATCH",
		PathPattern:        "/customerfraudpreferences/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificCustomerFraudPreferenceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificCustomerFraudPreferenceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificCustomerFraudPreference: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificCustomerLocation changes a specific customer location
*/
func (a *Client) ChangeaspecificCustomerLocation(params *ChangeaspecificCustomerLocationParams) (*ChangeaspecificCustomerLocationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificCustomerLocationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificCustomerLocation",
		Method:             "PATCH",
		PathPattern:        "/customerlocations/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificCustomerLocationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificCustomerLocationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificCustomerLocation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificCustomerPreference changes a specific customer preference
*/
func (a *Client) ChangeaspecificCustomerPreference(params *ChangeaspecificCustomerPreferenceParams) (*ChangeaspecificCustomerPreferenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificCustomerPreferenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificCustomerPreference",
		Method:             "PATCH",
		PathPattern:        "/customerpreferences/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificCustomerPreferenceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificCustomerPreferenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificCustomerPreference: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificDomainPreference changes a specific domain preference
*/
func (a *Client) ChangeaspecificDomainPreference(params *ChangeaspecificDomainPreferenceParams) (*ChangeaspecificDomainPreferenceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificDomainPreferenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificDomainPreference",
		Method:             "PATCH",
		PathPattern:        "/domainpreferences/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificDomainPreferenceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificDomainPreferenceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificDomainPreference: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificEmailTemplate changes a specific email template
*/
func (a *Client) ChangeaspecificEmailTemplate(params *ChangeaspecificEmailTemplateParams) (*ChangeaspecificEmailTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificEmailTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificEmailTemplate",
		Method:             "PATCH",
		PathPattern:        "/emailtemplates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificEmailTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificEmailTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificEmailTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificEmergencyMapping changes a specific emergency mapping
*/
func (a *Client) ChangeaspecificEmergencyMapping(params *ChangeaspecificEmergencyMappingParams) (*ChangeaspecificEmergencyMappingNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificEmergencyMappingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificEmergencyMapping",
		Method:             "PATCH",
		PathPattern:        "/emergencymappings/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificEmergencyMappingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificEmergencyMappingNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificEmergencyMapping: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificEmergencyMappingContainer changes a specific emergency mapping container
*/
func (a *Client) ChangeaspecificEmergencyMappingContainer(params *ChangeaspecificEmergencyMappingContainerParams) (*ChangeaspecificEmergencyMappingContainerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificEmergencyMappingContainerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificEmergencyMappingContainer",
		Method:             "PATCH",
		PathPattern:        "/emergencymappingcontainers/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificEmergencyMappingContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificEmergencyMappingContainerNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificEmergencyMappingContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificFaxserverSetting changes a specific faxserver setting
*/
func (a *Client) ChangeaspecificFaxserverSetting(params *ChangeaspecificFaxserverSettingParams) (*ChangeaspecificFaxserverSettingNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificFaxserverSettingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificFaxserverSetting",
		Method:             "PATCH",
		PathPattern:        "/faxserversettings/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificFaxserverSettingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificFaxserverSettingNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificFaxserverSetting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificInterception changes a specific interception
*/
func (a *Client) ChangeaspecificInterception(params *ChangeaspecificInterceptionParams) (*ChangeaspecificInterceptionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificInterceptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificInterception",
		Method:             "PATCH",
		PathPattern:        "/interceptions/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificInterceptionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificInterceptionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificInterception: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificLnpCarrier changes a specific lnp carrier
*/
func (a *Client) ChangeaspecificLnpCarrier(params *ChangeaspecificLnpCarrierParams) (*ChangeaspecificLnpCarrierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificLnpCarrierParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificLnpCarrier",
		Method:             "PATCH",
		PathPattern:        "/lnpcarriers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificLnpCarrierReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificLnpCarrierOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificLnpCarrier: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificLnpNumber changes a specific lnp number
*/
func (a *Client) ChangeaspecificLnpNumber(params *ChangeaspecificLnpNumberParams) (*ChangeaspecificLnpNumberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificLnpNumberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificLnpNumber",
		Method:             "PATCH",
		PathPattern:        "/lnpnumbers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificLnpNumberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificLnpNumberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificLnpNumber: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificMailToFaxSetting changes a specific mail to fax setting
*/
func (a *Client) ChangeaspecificMailToFaxSetting(params *ChangeaspecificMailToFaxSettingParams) (*ChangeaspecificMailToFaxSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificMailToFaxSettingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificMailToFaxSetting",
		Method:             "PATCH",
		PathPattern:        "/mailtofaxsettings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificMailToFaxSettingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificMailToFaxSettingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificMailToFaxSetting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificNcosLevel changes a specific ncos level
*/
func (a *Client) ChangeaspecificNcosLevel(params *ChangeaspecificNcosLevelParams) (*ChangeaspecificNcosLevelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificNcosLevelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificNcosLevel",
		Method:             "PATCH",
		PathPattern:        "/ncoslevels/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificNcosLevelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificNcosLevelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificNcosLevel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificNcosLnpCarrier changes a specific ncos lnp carrier
*/
func (a *Client) ChangeaspecificNcosLnpCarrier(params *ChangeaspecificNcosLnpCarrierParams) (*ChangeaspecificNcosLnpCarrierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificNcosLnpCarrierParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificNcosLnpCarrier",
		Method:             "PATCH",
		PathPattern:        "/ncoslnpcarriers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificNcosLnpCarrierReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificNcosLnpCarrierOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificNcosLnpCarrier: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificNcosPattern changes a specific ncos pattern
*/
func (a *Client) ChangeaspecificNcosPattern(params *ChangeaspecificNcosPatternParams) (*ChangeaspecificNcosPatternOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificNcosPatternParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificNcosPattern",
		Method:             "PATCH",
		PathPattern:        "/ncospatterns/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificNcosPatternReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificNcosPatternOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificNcosPattern: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificNumber changes a specific number
*/
func (a *Client) ChangeaspecificNumber(params *ChangeaspecificNumberParams) (*ChangeaspecificNumberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificNumberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificNumber",
		Method:             "PATCH",
		PathPattern:        "/numbers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificNumberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificNumberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificNumber: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificPbxDevice changes a specific pbx device
*/
func (a *Client) ChangeaspecificPbxDevice(params *ChangeaspecificPbxDeviceParams) (*ChangeaspecificPbxDeviceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificPbxDeviceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificPbxDevice",
		Method:             "PATCH",
		PathPattern:        "/pbxdevices/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificPbxDeviceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificPbxDeviceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificPbxDevice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificPbxDeviceModel changes a specific pbx device model
*/
func (a *Client) ChangeaspecificPbxDeviceModel(params *ChangeaspecificPbxDeviceModelParams) (*ChangeaspecificPbxDeviceModelNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificPbxDeviceModelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificPbxDeviceModel",
		Method:             "PATCH",
		PathPattern:        "/pbxdevicemodels/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificPbxDeviceModelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificPbxDeviceModelNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificPbxDeviceModel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificPbxDevicePreference changes a specific pbx device preference
*/
func (a *Client) ChangeaspecificPbxDevicePreference(params *ChangeaspecificPbxDevicePreferenceParams) (*ChangeaspecificPbxDevicePreferenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificPbxDevicePreferenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificPbxDevicePreference",
		Method:             "PATCH",
		PathPattern:        "/pbxdevicepreferences/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificPbxDevicePreferenceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificPbxDevicePreferenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificPbxDevicePreference: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificPbxDeviceProfile changes a specific pbx device profile
*/
func (a *Client) ChangeaspecificPbxDeviceProfile(params *ChangeaspecificPbxDeviceProfileParams) (*ChangeaspecificPbxDeviceProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificPbxDeviceProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificPbxDeviceProfile",
		Method:             "PATCH",
		PathPattern:        "/pbxdeviceprofiles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificPbxDeviceProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificPbxDeviceProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificPbxDeviceProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificPbxDeviceProfilePreference changes a specific pbx device profile preference
*/
func (a *Client) ChangeaspecificPbxDeviceProfilePreference(params *ChangeaspecificPbxDeviceProfilePreferenceParams) (*ChangeaspecificPbxDeviceProfilePreferenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificPbxDeviceProfilePreferenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificPbxDeviceProfilePreference",
		Method:             "PATCH",
		PathPattern:        "/pbxdeviceprofilepreferences/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificPbxDeviceProfilePreferenceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificPbxDeviceProfilePreferenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificPbxDeviceProfilePreference: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificPbxFieldDevicePreference changes a specific pbx field device preference
*/
func (a *Client) ChangeaspecificPbxFieldDevicePreference(params *ChangeaspecificPbxFieldDevicePreferenceParams) (*ChangeaspecificPbxFieldDevicePreferenceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificPbxFieldDevicePreferenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificPbxFieldDevicePreference",
		Method:             "PATCH",
		PathPattern:        "/pbxfielddevicepreferences/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificPbxFieldDevicePreferenceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificPbxFieldDevicePreferenceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificPbxFieldDevicePreference: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificPeeringGroup changes a specific peering group
*/
func (a *Client) ChangeaspecificPeeringGroup(params *ChangeaspecificPeeringGroupParams) (*ChangeaspecificPeeringGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificPeeringGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificPeeringGroup",
		Method:             "PATCH",
		PathPattern:        "/peeringgroups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificPeeringGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificPeeringGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificPeeringGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificPeeringInboundRule changes a specific peering inbound rule
*/
func (a *Client) ChangeaspecificPeeringInboundRule(params *ChangeaspecificPeeringInboundRuleParams) (*ChangeaspecificPeeringInboundRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificPeeringInboundRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificPeeringInboundRule",
		Method:             "PATCH",
		PathPattern:        "/peeringinboundrules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificPeeringInboundRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificPeeringInboundRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificPeeringInboundRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificPeeringRule changes a specific peering rule
*/
func (a *Client) ChangeaspecificPeeringRule(params *ChangeaspecificPeeringRuleParams) (*ChangeaspecificPeeringRuleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificPeeringRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificPeeringRule",
		Method:             "PATCH",
		PathPattern:        "/peeringrules/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificPeeringRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificPeeringRuleNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificPeeringRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificPeeringServer changes a specific peering server
*/
func (a *Client) ChangeaspecificPeeringServer(params *ChangeaspecificPeeringServerParams) (*ChangeaspecificPeeringServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificPeeringServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificPeeringServer",
		Method:             "PATCH",
		PathPattern:        "/peeringservers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificPeeringServerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificPeeringServerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificPeeringServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificPeeringServerPreference changes a specific peering server preference
*/
func (a *Client) ChangeaspecificPeeringServerPreference(params *ChangeaspecificPeeringServerPreferenceParams) (*ChangeaspecificPeeringServerPreferenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificPeeringServerPreferenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificPeeringServerPreference",
		Method:             "PATCH",
		PathPattern:        "/peeringserverpreferences/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificPeeringServerPreferenceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificPeeringServerPreferenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificPeeringServerPreference: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificPhonebookEntry changes a specific phonebook entry
*/
func (a *Client) ChangeaspecificPhonebookEntry(params *ChangeaspecificPhonebookEntryParams) (*ChangeaspecificPhonebookEntryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificPhonebookEntryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificPhonebookEntry",
		Method:             "PATCH",
		PathPattern:        "/phonebookentries/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificPhonebookEntryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificPhonebookEntryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificPhonebookEntry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificPreferencesMetaEntry changes a specific preferences meta entry
*/
func (a *Client) ChangeaspecificPreferencesMetaEntry(params *ChangeaspecificPreferencesMetaEntryParams) (*ChangeaspecificPreferencesMetaEntryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificPreferencesMetaEntryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificPreferencesMetaEntry",
		Method:             "PATCH",
		PathPattern:        "/preferencesmetaentries/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificPreferencesMetaEntryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificPreferencesMetaEntryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificPreferencesMetaEntry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificProfilePackage changes a specific profile package
*/
func (a *Client) ChangeaspecificProfilePackage(params *ChangeaspecificProfilePackageParams) (*ChangeaspecificProfilePackageNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificProfilePackageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificProfilePackage",
		Method:             "PATCH",
		PathPattern:        "/profilepackages/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificProfilePackageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificProfilePackageNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificProfilePackage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificProfilePreference changes a specific profile preference
*/
func (a *Client) ChangeaspecificProfilePreference(params *ChangeaspecificProfilePreferenceParams) (*ChangeaspecificProfilePreferenceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificProfilePreferenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificProfilePreference",
		Method:             "PATCH",
		PathPattern:        "/profilepreferences/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificProfilePreferenceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificProfilePreferenceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificProfilePreference: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificReminder changes a specific reminder
*/
func (a *Client) ChangeaspecificReminder(params *ChangeaspecificReminderParams) (*ChangeaspecificReminderNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificReminderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificReminder",
		Method:             "PATCH",
		PathPattern:        "/reminders/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificReminderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificReminderNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificReminder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificReseller changes a specific reseller
*/
func (a *Client) ChangeaspecificReseller(params *ChangeaspecificResellerParams) (*ChangeaspecificResellerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificResellerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificReseller",
		Method:             "PATCH",
		PathPattern:        "/resellers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificResellerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificResellerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificReseller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificRewriteRule changes a specific rewrite rule
*/
func (a *Client) ChangeaspecificRewriteRule(params *ChangeaspecificRewriteRuleParams) (*ChangeaspecificRewriteRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificRewriteRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificRewriteRule",
		Method:             "PATCH",
		PathPattern:        "/rewriterules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificRewriteRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificRewriteRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificRewriteRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificRewriteRuleSet changes a specific rewrite rule set
*/
func (a *Client) ChangeaspecificRewriteRuleSet(params *ChangeaspecificRewriteRuleSetParams) (*ChangeaspecificRewriteRuleSetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificRewriteRuleSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificRewriteRuleSet",
		Method:             "PATCH",
		PathPattern:        "/rewriterulesets/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificRewriteRuleSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificRewriteRuleSetNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificRewriteRuleSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificRtcApp changes a specific rtc app
*/
func (a *Client) ChangeaspecificRtcApp(params *ChangeaspecificRtcAppParams) (*ChangeaspecificRtcAppNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificRtcAppParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificRtcApp",
		Method:             "PATCH",
		PathPattern:        "/rtcapps/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificRtcAppReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificRtcAppNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificRtcApp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificRtcNetwork changes a specific rtc network
*/
func (a *Client) ChangeaspecificRtcNetwork(params *ChangeaspecificRtcNetworkParams) (*ChangeaspecificRtcNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificRtcNetworkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificRtcNetwork",
		Method:             "PATCH",
		PathPattern:        "/rtcnetworks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificRtcNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificRtcNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificRtcNetwork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificSoundSet changes a specific sound set
*/
func (a *Client) ChangeaspecificSoundSet(params *ChangeaspecificSoundSetParams) (*ChangeaspecificSoundSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificSoundSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificSoundSet",
		Method:             "PATCH",
		PathPattern:        "/soundsets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificSoundSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificSoundSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificSoundSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificSpeedDial changes a specific speed dial
*/
func (a *Client) ChangeaspecificSpeedDial(params *ChangeaspecificSpeedDialParams) (*ChangeaspecificSpeedDialNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificSpeedDialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificSpeedDial",
		Method:             "PATCH",
		PathPattern:        "/speeddials/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificSpeedDialReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificSpeedDialNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificSpeedDial: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificSubscriber changes a specific subscriber
*/
func (a *Client) ChangeaspecificSubscriber(params *ChangeaspecificSubscriberParams) (*ChangeaspecificSubscriberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificSubscriberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificSubscriber",
		Method:             "PATCH",
		PathPattern:        "/subscribers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificSubscriberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificSubscriberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificSubscriber: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificSubscriberPreference changes a specific subscriber preference
*/
func (a *Client) ChangeaspecificSubscriberPreference(params *ChangeaspecificSubscriberPreferenceParams) (*ChangeaspecificSubscriberPreferenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificSubscriberPreferenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificSubscriberPreference",
		Method:             "PATCH",
		PathPattern:        "/subscriberpreferences/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificSubscriberPreferenceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificSubscriberPreferenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificSubscriberPreference: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificSubscriberProfile changes a specific subscriber profile
*/
func (a *Client) ChangeaspecificSubscriberProfile(params *ChangeaspecificSubscriberProfileParams) (*ChangeaspecificSubscriberProfileNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificSubscriberProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificSubscriberProfile",
		Method:             "PATCH",
		PathPattern:        "/subscriberprofiles/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificSubscriberProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificSubscriberProfileNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificSubscriberProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificSubscriberProfileSet changes a specific subscriber profile set
*/
func (a *Client) ChangeaspecificSubscriberProfileSet(params *ChangeaspecificSubscriberProfileSetParams) (*ChangeaspecificSubscriberProfileSetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificSubscriberProfileSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificSubscriberProfileSet",
		Method:             "PATCH",
		PathPattern:        "/subscriberprofilesets/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificSubscriberProfileSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificSubscriberProfileSetNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificSubscriberProfileSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificSubscriberRegistration changes a specific subscriber registration
*/
func (a *Client) ChangeaspecificSubscriberRegistration(params *ChangeaspecificSubscriberRegistrationParams) (*ChangeaspecificSubscriberRegistrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificSubscriberRegistrationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificSubscriberRegistration",
		Method:             "PATCH",
		PathPattern:        "/subscriberregistrations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificSubscriberRegistrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificSubscriberRegistrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificSubscriberRegistration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificSystemContact changes a specific system contact
*/
func (a *Client) ChangeaspecificSystemContact(params *ChangeaspecificSystemContactParams) (*ChangeaspecificSystemContactOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificSystemContactParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificSystemContact",
		Method:             "PATCH",
		PathPattern:        "/systemcontacts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificSystemContactReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificSystemContactOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificSystemContact: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificTrustedSource changes a specific trusted source
*/
func (a *Client) ChangeaspecificTrustedSource(params *ChangeaspecificTrustedSourceParams) (*ChangeaspecificTrustedSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificTrustedSourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificTrustedSource",
		Method:             "PATCH",
		PathPattern:        "/trustedsources/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificTrustedSourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificTrustedSourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificTrustedSource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificUpnRewriteSet changes a specific upn rewrite set
*/
func (a *Client) ChangeaspecificUpnRewriteSet(params *ChangeaspecificUpnRewriteSetParams) (*ChangeaspecificUpnRewriteSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificUpnRewriteSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificUpnRewriteSet",
		Method:             "PATCH",
		PathPattern:        "/upnrewritesets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificUpnRewriteSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificUpnRewriteSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificUpnRewriteSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificVoicemail changes a specific voicemail
*/
func (a *Client) ChangeaspecificVoicemail(params *ChangeaspecificVoicemailParams) (*ChangeaspecificVoicemailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificVoicemailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificVoicemail",
		Method:             "PATCH",
		PathPattern:        "/voicemails/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificVoicemailReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificVoicemailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificVoicemail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificVoicemailSetting changes a specific voicemail setting
*/
func (a *Client) ChangeaspecificVoicemailSetting(params *ChangeaspecificVoicemailSettingParams) (*ChangeaspecificVoicemailSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificVoicemailSettingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificVoicemailSetting",
		Method:             "PATCH",
		PathPattern:        "/voicemailsettings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificVoicemailSettingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificVoicemailSettingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificVoicemailSetting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeaspecificVoucher changes a specific voucher
*/
func (a *Client) ChangeaspecificVoucher(params *ChangeaspecificVoucherParams) (*ChangeaspecificVoucherOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeaspecificVoucherParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeaspecificVoucher",
		Method:             "PATCH",
		PathPattern:        "/vouchers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json-patch+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeaspecificVoucherReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeaspecificVoucherOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeaspecificVoucher: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificAdmin deletes a specific admin
*/
func (a *Client) DeleteaspecificAdmin(params *DeleteaspecificAdminParams) (*DeleteaspecificAdminNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificAdminParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificAdmin",
		Method:             "DELETE",
		PathPattern:        "/admins/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificAdminReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificAdminNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificAdmin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificBannedIP deletes a specific banned Ip
*/
func (a *Client) DeleteaspecificBannedIP(params *DeleteaspecificBannedIPParams) (*DeleteaspecificBannedIPNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificBannedIPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificBannedIp",
		Method:             "DELETE",
		PathPattern:        "/bannedips/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificBannedIPReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificBannedIPNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificBannedIp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificBannedUser deletes a specific banned user
*/
func (a *Client) DeleteaspecificBannedUser(params *DeleteaspecificBannedUserParams) (*DeleteaspecificBannedUserNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificBannedUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificBannedUser",
		Method:             "DELETE",
		PathPattern:        "/bannedusers/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificBannedUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificBannedUserNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificBannedUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificBillingFee deletes a specific billing fee
*/
func (a *Client) DeleteaspecificBillingFee(params *DeleteaspecificBillingFeeParams) (*DeleteaspecificBillingFeeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificBillingFeeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificBillingFee",
		Method:             "DELETE",
		PathPattern:        "/billingfees/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificBillingFeeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificBillingFeeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificBillingFee: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificBillingZone deletes a specific billing zone
*/
func (a *Client) DeleteaspecificBillingZone(params *DeleteaspecificBillingZoneParams) (*DeleteaspecificBillingZoneNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificBillingZoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificBillingZone",
		Method:             "DELETE",
		PathPattern:        "/billingzones/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificBillingZoneReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificBillingZoneNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificBillingZone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificCCMapEntry deletes a specific c c map entry
*/
func (a *Client) DeleteaspecificCCMapEntry(params *DeleteaspecificCCMapEntryParams) (*DeleteaspecificCCMapEntryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificCCMapEntryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificCCMapEntry",
		Method:             "DELETE",
		PathPattern:        "/ccmapentries/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificCCMapEntryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificCCMapEntryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificCCMapEntry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificCFBNumberSet deletes a specific c f b number set
*/
func (a *Client) DeleteaspecificCFBNumberSet(params *DeleteaspecificCFBNumberSetParams) (*DeleteaspecificCFBNumberSetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificCFBNumberSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificCFBNumberSet",
		Method:             "DELETE",
		PathPattern:        "/cfbnumbersets/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificCFBNumberSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificCFBNumberSetNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificCFBNumberSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificCFDestinationSet deletes a specific c f destination set
*/
func (a *Client) DeleteaspecificCFDestinationSet(params *DeleteaspecificCFDestinationSetParams) (*DeleteaspecificCFDestinationSetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificCFDestinationSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificCFDestinationSet",
		Method:             "DELETE",
		PathPattern:        "/cfdestinationsets/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificCFDestinationSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificCFDestinationSetNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificCFDestinationSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificCFSourceSet deletes a specific c f source set
*/
func (a *Client) DeleteaspecificCFSourceSet(params *DeleteaspecificCFSourceSetParams) (*DeleteaspecificCFSourceSetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificCFSourceSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificCFSourceSet",
		Method:             "DELETE",
		PathPattern:        "/cfsourcesets/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificCFSourceSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificCFSourceSetNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificCFSourceSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificCFTimeSet deletes a specific c f time set
*/
func (a *Client) DeleteaspecificCFTimeSet(params *DeleteaspecificCFTimeSetParams) (*DeleteaspecificCFTimeSetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificCFTimeSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificCFTimeSet",
		Method:             "DELETE",
		PathPattern:        "/cftimesets/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificCFTimeSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificCFTimeSetNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificCFTimeSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificCallForward deletes a specific call forward
*/
func (a *Client) DeleteaspecificCallForward(params *DeleteaspecificCallForwardParams) (*DeleteaspecificCallForwardNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificCallForwardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificCallForward",
		Method:             "DELETE",
		PathPattern:        "/callforwards/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificCallForwardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificCallForwardNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificCallForward: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificCallRecording deletes a specific call recording
*/
func (a *Client) DeleteaspecificCallRecording(params *DeleteaspecificCallRecordingParams) (*DeleteaspecificCallRecordingNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificCallRecordingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificCallRecording",
		Method:             "DELETE",
		PathPattern:        "/callrecordings/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificCallRecordingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificCallRecordingNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificCallRecording: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificCallRecordingStream deletes a specific call recording stream
*/
func (a *Client) DeleteaspecificCallRecordingStream(params *DeleteaspecificCallRecordingStreamParams) (*DeleteaspecificCallRecordingStreamNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificCallRecordingStreamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificCallRecordingStream",
		Method:             "DELETE",
		PathPattern:        "/callrecordingstreams/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificCallRecordingStreamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificCallRecordingStreamNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificCallRecordingStream: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificCustomerContact deletes a specific customer contact
*/
func (a *Client) DeleteaspecificCustomerContact(params *DeleteaspecificCustomerContactParams) (*DeleteaspecificCustomerContactNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificCustomerContactParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificCustomerContact",
		Method:             "DELETE",
		PathPattern:        "/customercontacts/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificCustomerContactReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificCustomerContactNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificCustomerContact: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificCustomerLocation deletes a specific customer location
*/
func (a *Client) DeleteaspecificCustomerLocation(params *DeleteaspecificCustomerLocationParams) (*DeleteaspecificCustomerLocationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificCustomerLocationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificCustomerLocation",
		Method:             "DELETE",
		PathPattern:        "/customerlocations/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificCustomerLocationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificCustomerLocationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificCustomerLocation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificDomain deletes a specific domain
*/
func (a *Client) DeleteaspecificDomain(params *DeleteaspecificDomainParams) (*DeleteaspecificDomainNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificDomainParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificDomain",
		Method:             "DELETE",
		PathPattern:        "/domains/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificDomainReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificDomainNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificDomain: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificEmailTemplate deletes a specific email template
*/
func (a *Client) DeleteaspecificEmailTemplate(params *DeleteaspecificEmailTemplateParams) (*DeleteaspecificEmailTemplateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificEmailTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificEmailTemplate",
		Method:             "DELETE",
		PathPattern:        "/emailtemplates/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificEmailTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificEmailTemplateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificEmailTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificEmergencyMapping deletes a specific emergency mapping
*/
func (a *Client) DeleteaspecificEmergencyMapping(params *DeleteaspecificEmergencyMappingParams) (*DeleteaspecificEmergencyMappingNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificEmergencyMappingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificEmergencyMapping",
		Method:             "DELETE",
		PathPattern:        "/emergencymappings/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificEmergencyMappingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificEmergencyMappingNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificEmergencyMapping: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificEmergencyMappingContainer deletes a specific emergency mapping container
*/
func (a *Client) DeleteaspecificEmergencyMappingContainer(params *DeleteaspecificEmergencyMappingContainerParams) (*DeleteaspecificEmergencyMappingContainerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificEmergencyMappingContainerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificEmergencyMappingContainer",
		Method:             "DELETE",
		PathPattern:        "/emergencymappingcontainers/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificEmergencyMappingContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificEmergencyMappingContainerNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificEmergencyMappingContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificInterception deletes a specific interception
*/
func (a *Client) DeleteaspecificInterception(params *DeleteaspecificInterceptionParams) (*DeleteaspecificInterceptionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificInterceptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificInterception",
		Method:             "DELETE",
		PathPattern:        "/interceptions/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificInterceptionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificInterceptionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificInterception: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificInvoice deletes a specific invoice
*/
func (a *Client) DeleteaspecificInvoice(params *DeleteaspecificInvoiceParams) (*DeleteaspecificInvoiceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificInvoiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificInvoice",
		Method:             "DELETE",
		PathPattern:        "/invoices/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificInvoiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificInvoiceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificInvoice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificLnpCarrier deletes a specific lnp carrier
*/
func (a *Client) DeleteaspecificLnpCarrier(params *DeleteaspecificLnpCarrierParams) (*DeleteaspecificLnpCarrierNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificLnpCarrierParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificLnpCarrier",
		Method:             "DELETE",
		PathPattern:        "/lnpcarriers/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificLnpCarrierReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificLnpCarrierNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificLnpCarrier: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificLnpNumber deletes a specific lnp number
*/
func (a *Client) DeleteaspecificLnpNumber(params *DeleteaspecificLnpNumberParams) (*DeleteaspecificLnpNumberNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificLnpNumberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificLnpNumber",
		Method:             "DELETE",
		PathPattern:        "/lnpnumbers/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificLnpNumberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificLnpNumberNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificLnpNumber: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificMaliciousCall deletes a specific malicious call
*/
func (a *Client) DeleteaspecificMaliciousCall(params *DeleteaspecificMaliciousCallParams) (*DeleteaspecificMaliciousCallNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificMaliciousCallParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificMaliciousCall",
		Method:             "DELETE",
		PathPattern:        "/maliciouscalls/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificMaliciousCallReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificMaliciousCallNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificMaliciousCall: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificManagerSecretary deletes a specific manager secretary
*/
func (a *Client) DeleteaspecificManagerSecretary(params *DeleteaspecificManagerSecretaryParams) (*DeleteaspecificManagerSecretaryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificManagerSecretaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificManagerSecretary",
		Method:             "DELETE",
		PathPattern:        "/managersecretary/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificManagerSecretaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificManagerSecretaryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificManagerSecretary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificNcosLevel deletes a specific ncos level
*/
func (a *Client) DeleteaspecificNcosLevel(params *DeleteaspecificNcosLevelParams) (*DeleteaspecificNcosLevelNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificNcosLevelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificNcosLevel",
		Method:             "DELETE",
		PathPattern:        "/ncoslevels/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificNcosLevelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificNcosLevelNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificNcosLevel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificNcosLnpCarrier deletes a specific ncos lnp carrier
*/
func (a *Client) DeleteaspecificNcosLnpCarrier(params *DeleteaspecificNcosLnpCarrierParams) (*DeleteaspecificNcosLnpCarrierNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificNcosLnpCarrierParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificNcosLnpCarrier",
		Method:             "DELETE",
		PathPattern:        "/ncoslnpcarriers/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificNcosLnpCarrierReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificNcosLnpCarrierNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificNcosLnpCarrier: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificNcosPattern deletes a specific ncos pattern
*/
func (a *Client) DeleteaspecificNcosPattern(params *DeleteaspecificNcosPatternParams) (*DeleteaspecificNcosPatternNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificNcosPatternParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificNcosPattern",
		Method:             "DELETE",
		PathPattern:        "/ncospatterns/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificNcosPatternReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificNcosPatternNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificNcosPattern: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificPbxDevice deletes a specific pbx device
*/
func (a *Client) DeleteaspecificPbxDevice(params *DeleteaspecificPbxDeviceParams) (*DeleteaspecificPbxDeviceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificPbxDeviceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificPbxDevice",
		Method:             "DELETE",
		PathPattern:        "/pbxdevices/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificPbxDeviceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificPbxDeviceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificPbxDevice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificPeeringGroup deletes a specific peering group
*/
func (a *Client) DeleteaspecificPeeringGroup(params *DeleteaspecificPeeringGroupParams) (*DeleteaspecificPeeringGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificPeeringGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificPeeringGroup",
		Method:             "DELETE",
		PathPattern:        "/peeringgroups/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificPeeringGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificPeeringGroupNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificPeeringGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificPeeringInboundRule deletes a specific peering inbound rule
*/
func (a *Client) DeleteaspecificPeeringInboundRule(params *DeleteaspecificPeeringInboundRuleParams) (*DeleteaspecificPeeringInboundRuleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificPeeringInboundRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificPeeringInboundRule",
		Method:             "DELETE",
		PathPattern:        "/peeringinboundrules/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificPeeringInboundRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificPeeringInboundRuleNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificPeeringInboundRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificPeeringRule deletes a specific peering rule
*/
func (a *Client) DeleteaspecificPeeringRule(params *DeleteaspecificPeeringRuleParams) (*DeleteaspecificPeeringRuleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificPeeringRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificPeeringRule",
		Method:             "DELETE",
		PathPattern:        "/peeringrules/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificPeeringRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificPeeringRuleNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificPeeringRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificPeeringServer deletes a specific peering server
*/
func (a *Client) DeleteaspecificPeeringServer(params *DeleteaspecificPeeringServerParams) (*DeleteaspecificPeeringServerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificPeeringServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificPeeringServer",
		Method:             "DELETE",
		PathPattern:        "/peeringservers/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificPeeringServerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificPeeringServerNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificPeeringServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificPhonebookEntry deletes a specific phonebook entry
*/
func (a *Client) DeleteaspecificPhonebookEntry(params *DeleteaspecificPhonebookEntryParams) (*DeleteaspecificPhonebookEntryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificPhonebookEntryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificPhonebookEntry",
		Method:             "DELETE",
		PathPattern:        "/phonebookentries/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificPhonebookEntryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificPhonebookEntryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificPhonebookEntry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificPreferencesMetaEntry deletes a specific preferences meta entry
*/
func (a *Client) DeleteaspecificPreferencesMetaEntry(params *DeleteaspecificPreferencesMetaEntryParams) (*DeleteaspecificPreferencesMetaEntryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificPreferencesMetaEntryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificPreferencesMetaEntry",
		Method:             "DELETE",
		PathPattern:        "/preferencesmetaentries/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificPreferencesMetaEntryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificPreferencesMetaEntryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificPreferencesMetaEntry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificProfilePackage deletes a specific profile package
*/
func (a *Client) DeleteaspecificProfilePackage(params *DeleteaspecificProfilePackageParams) (*DeleteaspecificProfilePackageNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificProfilePackageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificProfilePackage",
		Method:             "DELETE",
		PathPattern:        "/profilepackages/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificProfilePackageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificProfilePackageNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificProfilePackage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificReminder deletes a specific reminder
*/
func (a *Client) DeleteaspecificReminder(params *DeleteaspecificReminderParams) (*DeleteaspecificReminderNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificReminderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificReminder",
		Method:             "DELETE",
		PathPattern:        "/reminders/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificReminderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificReminderNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificReminder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificRewriteRule deletes a specific rewrite rule
*/
func (a *Client) DeleteaspecificRewriteRule(params *DeleteaspecificRewriteRuleParams) (*DeleteaspecificRewriteRuleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificRewriteRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificRewriteRule",
		Method:             "DELETE",
		PathPattern:        "/rewriterules/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificRewriteRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificRewriteRuleNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificRewriteRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificRewriteRuleSet deletes a specific rewrite rule set
*/
func (a *Client) DeleteaspecificRewriteRuleSet(params *DeleteaspecificRewriteRuleSetParams) (*DeleteaspecificRewriteRuleSetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificRewriteRuleSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificRewriteRuleSet",
		Method:             "DELETE",
		PathPattern:        "/rewriterulesets/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificRewriteRuleSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificRewriteRuleSetNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificRewriteRuleSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificSoundFile deletes a specific sound file
*/
func (a *Client) DeleteaspecificSoundFile(params *DeleteaspecificSoundFileParams) (*DeleteaspecificSoundFileNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificSoundFileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificSoundFile",
		Method:             "DELETE",
		PathPattern:        "/soundfiles/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificSoundFileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificSoundFileNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificSoundFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificSoundSet deletes a specific sound set
*/
func (a *Client) DeleteaspecificSoundSet(params *DeleteaspecificSoundSetParams) (*DeleteaspecificSoundSetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificSoundSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificSoundSet",
		Method:             "DELETE",
		PathPattern:        "/soundsets/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificSoundSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificSoundSetNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificSoundSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificSubscriber deletes a specific subscriber
*/
func (a *Client) DeleteaspecificSubscriber(params *DeleteaspecificSubscriberParams) (*DeleteaspecificSubscriberNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificSubscriberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificSubscriber",
		Method:             "DELETE",
		PathPattern:        "/subscribers/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificSubscriberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificSubscriberNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificSubscriber: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificSubscriberProfile deletes a specific subscriber profile
*/
func (a *Client) DeleteaspecificSubscriberProfile(params *DeleteaspecificSubscriberProfileParams) (*DeleteaspecificSubscriberProfileNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificSubscriberProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificSubscriberProfile",
		Method:             "DELETE",
		PathPattern:        "/subscriberprofiles/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificSubscriberProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificSubscriberProfileNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificSubscriberProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificSubscriberProfileSet deletes a specific subscriber profile set
*/
func (a *Client) DeleteaspecificSubscriberProfileSet(params *DeleteaspecificSubscriberProfileSetParams) (*DeleteaspecificSubscriberProfileSetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificSubscriberProfileSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificSubscriberProfileSet",
		Method:             "DELETE",
		PathPattern:        "/subscriberprofilesets/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificSubscriberProfileSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificSubscriberProfileSetNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificSubscriberProfileSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificSubscriberRegistration deletes a specific subscriber registration
*/
func (a *Client) DeleteaspecificSubscriberRegistration(params *DeleteaspecificSubscriberRegistrationParams) (*DeleteaspecificSubscriberRegistrationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificSubscriberRegistrationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificSubscriberRegistration",
		Method:             "DELETE",
		PathPattern:        "/subscriberregistrations/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificSubscriberRegistrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificSubscriberRegistrationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificSubscriberRegistration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificSystemContact deletes a specific system contact
*/
func (a *Client) DeleteaspecificSystemContact(params *DeleteaspecificSystemContactParams) (*DeleteaspecificSystemContactNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificSystemContactParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificSystemContact",
		Method:             "DELETE",
		PathPattern:        "/systemcontacts/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificSystemContactReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificSystemContactNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificSystemContact: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificTrustedSource deletes a specific trusted source
*/
func (a *Client) DeleteaspecificTrustedSource(params *DeleteaspecificTrustedSourceParams) (*DeleteaspecificTrustedSourceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificTrustedSourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificTrustedSource",
		Method:             "DELETE",
		PathPattern:        "/trustedsources/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificTrustedSourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificTrustedSourceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificTrustedSource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificUpnRewriteSet deletes a specific upn rewrite set
*/
func (a *Client) DeleteaspecificUpnRewriteSet(params *DeleteaspecificUpnRewriteSetParams) (*DeleteaspecificUpnRewriteSetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificUpnRewriteSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificUpnRewriteSet",
		Method:             "DELETE",
		PathPattern:        "/upnrewritesets/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificUpnRewriteSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificUpnRewriteSetNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificUpnRewriteSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificVoicemail deletes a specific voicemail
*/
func (a *Client) DeleteaspecificVoicemail(params *DeleteaspecificVoicemailParams) (*DeleteaspecificVoicemailNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificVoicemailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificVoicemail",
		Method:             "DELETE",
		PathPattern:        "/voicemails/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificVoicemailReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificVoicemailNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificVoicemail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificVoicemailGreeting deletes a specific voicemail greeting
*/
func (a *Client) DeleteaspecificVoicemailGreeting(params *DeleteaspecificVoicemailGreetingParams) (*DeleteaspecificVoicemailGreetingNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificVoicemailGreetingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificVoicemailGreeting",
		Method:             "DELETE",
		PathPattern:        "/voicemailgreetings/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificVoicemailGreetingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificVoicemailGreetingNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificVoicemailGreeting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteaspecificVoucher deletes a specific voucher
*/
func (a *Client) DeleteaspecificVoucher(params *DeleteaspecificVoucherParams) (*DeleteaspecificVoucherNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteaspecificVoucherParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteaspecificVoucher",
		Method:             "DELETE",
		PathPattern:        "/vouchers/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteaspecificVoucherReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteaspecificVoucherNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteaspecificVoucher: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificAdmin gets a specific admin
*/
func (a *Client) GetaspecificAdmin(params *GetaspecificAdminParams) (*GetaspecificAdminOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificAdminParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificAdmin",
		Method:             "GET",
		PathPattern:        "/admins/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificAdminReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificAdminOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificAdmin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificAutoAttendant gets a specific auto attendant
*/
func (a *Client) GetaspecificAutoAttendant(params *GetaspecificAutoAttendantParams) (*GetaspecificAutoAttendantOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificAutoAttendantParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificAutoAttendant",
		Method:             "GET",
		PathPattern:        "/autoattendants/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificAutoAttendantReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificAutoAttendantOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificAutoAttendant: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificBannedIP gets a specific banned Ip
*/
func (a *Client) GetaspecificBannedIP(params *GetaspecificBannedIPParams) (*GetaspecificBannedIPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificBannedIPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificBannedIp",
		Method:             "GET",
		PathPattern:        "/bannedips/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificBannedIPReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificBannedIPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificBannedIp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificBannedUser gets a specific banned user
*/
func (a *Client) GetaspecificBannedUser(params *GetaspecificBannedUserParams) (*GetaspecificBannedUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificBannedUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificBannedUser",
		Method:             "GET",
		PathPattern:        "/bannedusers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificBannedUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificBannedUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificBannedUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificBillingFee gets a specific billing fee
*/
func (a *Client) GetaspecificBillingFee(params *GetaspecificBillingFeeParams) (*GetaspecificBillingFeeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificBillingFeeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificBillingFee",
		Method:             "GET",
		PathPattern:        "/billingfees/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificBillingFeeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificBillingFeeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificBillingFee: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificBillingNetwork gets a specific billing network
*/
func (a *Client) GetaspecificBillingNetwork(params *GetaspecificBillingNetworkParams) (*GetaspecificBillingNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificBillingNetworkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificBillingNetwork",
		Method:             "GET",
		PathPattern:        "/billingnetworks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificBillingNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificBillingNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificBillingNetwork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificBillingProfile gets a specific billing profile
*/
func (a *Client) GetaspecificBillingProfile(params *GetaspecificBillingProfileParams) (*GetaspecificBillingProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificBillingProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificBillingProfile",
		Method:             "GET",
		PathPattern:        "/billingprofiles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificBillingProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificBillingProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificBillingProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificBillingZone gets a specific billing zone
*/
func (a *Client) GetaspecificBillingZone(params *GetaspecificBillingZoneParams) (*GetaspecificBillingZoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificBillingZoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificBillingZone",
		Method:             "GET",
		PathPattern:        "/billingzones/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificBillingZoneReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificBillingZoneOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificBillingZone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificCCMapEntry gets a specific c c map entry
*/
func (a *Client) GetaspecificCCMapEntry(params *GetaspecificCCMapEntryParams) (*GetaspecificCCMapEntryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificCCMapEntryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificCCMapEntry",
		Method:             "GET",
		PathPattern:        "/ccmapentries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificCCMapEntryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificCCMapEntryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificCCMapEntry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificCFBNumberSet gets a specific c f b number set
*/
func (a *Client) GetaspecificCFBNumberSet(params *GetaspecificCFBNumberSetParams) (*GetaspecificCFBNumberSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificCFBNumberSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificCFBNumberSet",
		Method:             "GET",
		PathPattern:        "/cfbnumbersets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificCFBNumberSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificCFBNumberSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificCFBNumberSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificCFDestinationSet gets a specific c f destination set
*/
func (a *Client) GetaspecificCFDestinationSet(params *GetaspecificCFDestinationSetParams) (*GetaspecificCFDestinationSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificCFDestinationSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificCFDestinationSet",
		Method:             "GET",
		PathPattern:        "/cfdestinationsets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificCFDestinationSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificCFDestinationSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificCFDestinationSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificCFMapping gets a specific c f mapping
*/
func (a *Client) GetaspecificCFMapping(params *GetaspecificCFMappingParams) (*GetaspecificCFMappingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificCFMappingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificCFMapping",
		Method:             "GET",
		PathPattern:        "/cfmappings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificCFMappingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificCFMappingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificCFMapping: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificCFSourceSet gets a specific c f source set
*/
func (a *Client) GetaspecificCFSourceSet(params *GetaspecificCFSourceSetParams) (*GetaspecificCFSourceSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificCFSourceSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificCFSourceSet",
		Method:             "GET",
		PathPattern:        "/cfsourcesets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificCFSourceSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificCFSourceSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificCFSourceSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificCFTimeSet gets a specific c f time set
*/
func (a *Client) GetaspecificCFTimeSet(params *GetaspecificCFTimeSetParams) (*GetaspecificCFTimeSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificCFTimeSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificCFTimeSet",
		Method:             "GET",
		PathPattern:        "/cftimesets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificCFTimeSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificCFTimeSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificCFTimeSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificCallForward gets a specific call forward
*/
func (a *Client) GetaspecificCallForward(params *GetaspecificCallForwardParams) (*GetaspecificCallForwardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificCallForwardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificCallForward",
		Method:             "GET",
		PathPattern:        "/callforwards/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificCallForwardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificCallForwardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificCallForward: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificCallRecording gets a specific call recording
*/
func (a *Client) GetaspecificCallRecording(params *GetaspecificCallRecordingParams) (*GetaspecificCallRecordingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificCallRecordingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificCallRecording",
		Method:             "GET",
		PathPattern:        "/callrecordings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificCallRecordingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificCallRecordingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificCallRecording: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificCallRecordingStream gets a specific call recording stream
*/
func (a *Client) GetaspecificCallRecordingStream(params *GetaspecificCallRecordingStreamParams) (*GetaspecificCallRecordingStreamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificCallRecordingStreamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificCallRecordingStream",
		Method:             "GET",
		PathPattern:        "/callrecordingstreams/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificCallRecordingStreamReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificCallRecordingStreamOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificCallRecordingStream: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificContract gets a specific contract
*/
func (a *Client) GetaspecificContract(params *GetaspecificContractParams) (*GetaspecificContractOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificContractParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificContract",
		Method:             "GET",
		PathPattern:        "/contracts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificContractReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificContractOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificContract: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificCustomer gets a specific customer
*/
func (a *Client) GetaspecificCustomer(params *GetaspecificCustomerParams) (*GetaspecificCustomerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificCustomerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificCustomer",
		Method:             "GET",
		PathPattern:        "/customers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificCustomerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificCustomerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificCustomer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificCustomerBalance gets a specific customer balance
*/
func (a *Client) GetaspecificCustomerBalance(params *GetaspecificCustomerBalanceParams) (*GetaspecificCustomerBalanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificCustomerBalanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificCustomerBalance",
		Method:             "GET",
		PathPattern:        "/customerbalances/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificCustomerBalanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificCustomerBalanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificCustomerBalance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificCustomerContact gets a specific customer contact
*/
func (a *Client) GetaspecificCustomerContact(params *GetaspecificCustomerContactParams) (*GetaspecificCustomerContactOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificCustomerContactParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificCustomerContact",
		Method:             "GET",
		PathPattern:        "/customercontacts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificCustomerContactReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificCustomerContactOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificCustomerContact: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificCustomerFraudPreference gets a specific customer fraud preference
*/
func (a *Client) GetaspecificCustomerFraudPreference(params *GetaspecificCustomerFraudPreferenceParams) (*GetaspecificCustomerFraudPreferenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificCustomerFraudPreferenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificCustomerFraudPreference",
		Method:             "GET",
		PathPattern:        "/customerfraudpreferences/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificCustomerFraudPreferenceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificCustomerFraudPreferenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificCustomerFraudPreference: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificCustomerLocation gets a specific customer location
*/
func (a *Client) GetaspecificCustomerLocation(params *GetaspecificCustomerLocationParams) (*GetaspecificCustomerLocationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificCustomerLocationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificCustomerLocation",
		Method:             "GET",
		PathPattern:        "/customerlocations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificCustomerLocationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificCustomerLocationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificCustomerLocation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificCustomerPreference gets a specific customer preference
*/
func (a *Client) GetaspecificCustomerPreference(params *GetaspecificCustomerPreferenceParams) (*GetaspecificCustomerPreferenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificCustomerPreferenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificCustomerPreference",
		Method:             "GET",
		PathPattern:        "/customerpreferences/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificCustomerPreferenceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificCustomerPreferenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificCustomerPreference: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificDomain gets a specific domain
*/
func (a *Client) GetaspecificDomain(params *GetaspecificDomainParams) (*GetaspecificDomainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificDomainParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificDomain",
		Method:             "GET",
		PathPattern:        "/domains/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificDomainReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificDomainOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificDomain: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificDomainPreference gets a specific domain preference
*/
func (a *Client) GetaspecificDomainPreference(params *GetaspecificDomainPreferenceParams) (*GetaspecificDomainPreferenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificDomainPreferenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificDomainPreference",
		Method:             "GET",
		PathPattern:        "/domainpreferences/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificDomainPreferenceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificDomainPreferenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificDomainPreference: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificEmailTemplate gets a specific email template
*/
func (a *Client) GetaspecificEmailTemplate(params *GetaspecificEmailTemplateParams) (*GetaspecificEmailTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificEmailTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificEmailTemplate",
		Method:             "GET",
		PathPattern:        "/emailtemplates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificEmailTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificEmailTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificEmailTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificEmergencyMapping gets a specific emergency mapping
*/
func (a *Client) GetaspecificEmergencyMapping(params *GetaspecificEmergencyMappingParams) (*GetaspecificEmergencyMappingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificEmergencyMappingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificEmergencyMapping",
		Method:             "GET",
		PathPattern:        "/emergencymappings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificEmergencyMappingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificEmergencyMappingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificEmergencyMapping: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificEmergencyMappingContainer gets a specific emergency mapping container
*/
func (a *Client) GetaspecificEmergencyMappingContainer(params *GetaspecificEmergencyMappingContainerParams) (*GetaspecificEmergencyMappingContainerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificEmergencyMappingContainerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificEmergencyMappingContainer",
		Method:             "GET",
		PathPattern:        "/emergencymappingcontainers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificEmergencyMappingContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificEmergencyMappingContainerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificEmergencyMappingContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificFaxserverSetting gets a specific faxserver setting
*/
func (a *Client) GetaspecificFaxserverSetting(params *GetaspecificFaxserverSettingParams) (*GetaspecificFaxserverSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificFaxserverSettingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificFaxserverSetting",
		Method:             "GET",
		PathPattern:        "/faxserversettings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificFaxserverSettingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificFaxserverSettingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificFaxserverSetting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificInterception gets a specific interception
*/
func (a *Client) GetaspecificInterception(params *GetaspecificInterceptionParams) (*GetaspecificInterceptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificInterceptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificInterception",
		Method:             "GET",
		PathPattern:        "/interceptions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificInterceptionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificInterceptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificInterception: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificInvoice gets a specific invoice
*/
func (a *Client) GetaspecificInvoice(params *GetaspecificInvoiceParams) (*GetaspecificInvoiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificInvoiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificInvoice",
		Method:             "GET",
		PathPattern:        "/invoices/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificInvoiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificInvoiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificInvoice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificLnpCarrier gets a specific lnp carrier
*/
func (a *Client) GetaspecificLnpCarrier(params *GetaspecificLnpCarrierParams) (*GetaspecificLnpCarrierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificLnpCarrierParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificLnpCarrier",
		Method:             "GET",
		PathPattern:        "/lnpcarriers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificLnpCarrierReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificLnpCarrierOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificLnpCarrier: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificLnpNumber gets a specific lnp number
*/
func (a *Client) GetaspecificLnpNumber(params *GetaspecificLnpNumberParams) (*GetaspecificLnpNumberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificLnpNumberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificLnpNumber",
		Method:             "GET",
		PathPattern:        "/lnpnumbers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificLnpNumberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificLnpNumberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificLnpNumber: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificMailToFaxSetting gets a specific mail to fax setting
*/
func (a *Client) GetaspecificMailToFaxSetting(params *GetaspecificMailToFaxSettingParams) (*GetaspecificMailToFaxSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificMailToFaxSettingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificMailToFaxSetting",
		Method:             "GET",
		PathPattern:        "/mailtofaxsettings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificMailToFaxSettingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificMailToFaxSettingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificMailToFaxSetting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificMaliciousCall gets a specific malicious call
*/
func (a *Client) GetaspecificMaliciousCall(params *GetaspecificMaliciousCallParams) (*GetaspecificMaliciousCallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificMaliciousCallParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificMaliciousCall",
		Method:             "GET",
		PathPattern:        "/maliciouscalls/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificMaliciousCallReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificMaliciousCallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificMaliciousCall: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificManagerSecretary gets a specific manager secretary
*/
func (a *Client) GetaspecificManagerSecretary(params *GetaspecificManagerSecretaryParams) (*GetaspecificManagerSecretaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificManagerSecretaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificManagerSecretary",
		Method:             "GET",
		PathPattern:        "/managersecretary/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificManagerSecretaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificManagerSecretaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificManagerSecretary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificNcosLevel gets a specific ncos level
*/
func (a *Client) GetaspecificNcosLevel(params *GetaspecificNcosLevelParams) (*GetaspecificNcosLevelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificNcosLevelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificNcosLevel",
		Method:             "GET",
		PathPattern:        "/ncoslevels/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificNcosLevelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificNcosLevelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificNcosLevel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificNcosLnpCarrier gets a specific ncos lnp carrier
*/
func (a *Client) GetaspecificNcosLnpCarrier(params *GetaspecificNcosLnpCarrierParams) (*GetaspecificNcosLnpCarrierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificNcosLnpCarrierParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificNcosLnpCarrier",
		Method:             "GET",
		PathPattern:        "/ncoslnpcarriers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificNcosLnpCarrierReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificNcosLnpCarrierOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificNcosLnpCarrier: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificNcosPattern gets a specific ncos pattern
*/
func (a *Client) GetaspecificNcosPattern(params *GetaspecificNcosPatternParams) (*GetaspecificNcosPatternOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificNcosPatternParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificNcosPattern",
		Method:             "GET",
		PathPattern:        "/ncospatterns/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificNcosPatternReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificNcosPatternOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificNcosPattern: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificNumber gets a specific number
*/
func (a *Client) GetaspecificNumber(params *GetaspecificNumberParams) (*GetaspecificNumberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificNumberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificNumber",
		Method:             "GET",
		PathPattern:        "/numbers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificNumberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificNumberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificNumber: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificPbxDevice gets a specific pbx device
*/
func (a *Client) GetaspecificPbxDevice(params *GetaspecificPbxDeviceParams) (*GetaspecificPbxDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificPbxDeviceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificPbxDevice",
		Method:             "GET",
		PathPattern:        "/pbxdevices/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificPbxDeviceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificPbxDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificPbxDevice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificPbxDeviceConfig gets a specific pbx device config
*/
func (a *Client) GetaspecificPbxDeviceConfig(params *GetaspecificPbxDeviceConfigParams) (*GetaspecificPbxDeviceConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificPbxDeviceConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificPbxDeviceConfig",
		Method:             "GET",
		PathPattern:        "/pbxdeviceconfigs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificPbxDeviceConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificPbxDeviceConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificPbxDeviceConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificPbxDeviceFirmware gets a specific pbx device firmware
*/
func (a *Client) GetaspecificPbxDeviceFirmware(params *GetaspecificPbxDeviceFirmwareParams) (*GetaspecificPbxDeviceFirmwareOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificPbxDeviceFirmwareParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificPbxDeviceFirmware",
		Method:             "GET",
		PathPattern:        "/pbxdevicefirmwares/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificPbxDeviceFirmwareReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificPbxDeviceFirmwareOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificPbxDeviceFirmware: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificPbxDeviceModel gets a specific pbx device model
*/
func (a *Client) GetaspecificPbxDeviceModel(params *GetaspecificPbxDeviceModelParams) (*GetaspecificPbxDeviceModelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificPbxDeviceModelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificPbxDeviceModel",
		Method:             "GET",
		PathPattern:        "/pbxdevicemodels/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificPbxDeviceModelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificPbxDeviceModelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificPbxDeviceModel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificPbxDevicePreference gets a specific pbx device preference
*/
func (a *Client) GetaspecificPbxDevicePreference(params *GetaspecificPbxDevicePreferenceParams) (*GetaspecificPbxDevicePreferenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificPbxDevicePreferenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificPbxDevicePreference",
		Method:             "GET",
		PathPattern:        "/pbxdevicepreferences/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificPbxDevicePreferenceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificPbxDevicePreferenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificPbxDevicePreference: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificPbxDeviceProfile gets a specific pbx device profile
*/
func (a *Client) GetaspecificPbxDeviceProfile(params *GetaspecificPbxDeviceProfileParams) (*GetaspecificPbxDeviceProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificPbxDeviceProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificPbxDeviceProfile",
		Method:             "GET",
		PathPattern:        "/pbxdeviceprofiles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificPbxDeviceProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificPbxDeviceProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificPbxDeviceProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificPbxDeviceProfilePreference gets a specific pbx device profile preference
*/
func (a *Client) GetaspecificPbxDeviceProfilePreference(params *GetaspecificPbxDeviceProfilePreferenceParams) (*GetaspecificPbxDeviceProfilePreferenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificPbxDeviceProfilePreferenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificPbxDeviceProfilePreference",
		Method:             "GET",
		PathPattern:        "/pbxdeviceprofilepreferences/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificPbxDeviceProfilePreferenceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificPbxDeviceProfilePreferenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificPbxDeviceProfilePreference: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificPbxFieldDevicePreference gets a specific pbx field device preference
*/
func (a *Client) GetaspecificPbxFieldDevicePreference(params *GetaspecificPbxFieldDevicePreferenceParams) (*GetaspecificPbxFieldDevicePreferenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificPbxFieldDevicePreferenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificPbxFieldDevicePreference",
		Method:             "GET",
		PathPattern:        "/pbxfielddevicepreferences/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificPbxFieldDevicePreferenceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificPbxFieldDevicePreferenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificPbxFieldDevicePreference: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificPeeringGroup gets a specific peering group
*/
func (a *Client) GetaspecificPeeringGroup(params *GetaspecificPeeringGroupParams) (*GetaspecificPeeringGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificPeeringGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificPeeringGroup",
		Method:             "GET",
		PathPattern:        "/peeringgroups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificPeeringGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificPeeringGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificPeeringGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificPeeringInboundRule gets a specific peering inbound rule
*/
func (a *Client) GetaspecificPeeringInboundRule(params *GetaspecificPeeringInboundRuleParams) (*GetaspecificPeeringInboundRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificPeeringInboundRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificPeeringInboundRule",
		Method:             "GET",
		PathPattern:        "/peeringinboundrules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificPeeringInboundRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificPeeringInboundRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificPeeringInboundRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificPeeringRule gets a specific peering rule
*/
func (a *Client) GetaspecificPeeringRule(params *GetaspecificPeeringRuleParams) (*GetaspecificPeeringRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificPeeringRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificPeeringRule",
		Method:             "GET",
		PathPattern:        "/peeringrules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificPeeringRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificPeeringRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificPeeringRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificPeeringServer gets a specific peering server
*/
func (a *Client) GetaspecificPeeringServer(params *GetaspecificPeeringServerParams) (*GetaspecificPeeringServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificPeeringServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificPeeringServer",
		Method:             "GET",
		PathPattern:        "/peeringservers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificPeeringServerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificPeeringServerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificPeeringServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificPeeringServerPreference gets a specific peering server preference
*/
func (a *Client) GetaspecificPeeringServerPreference(params *GetaspecificPeeringServerPreferenceParams) (*GetaspecificPeeringServerPreferenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificPeeringServerPreferenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificPeeringServerPreference",
		Method:             "GET",
		PathPattern:        "/peeringserverpreferences/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificPeeringServerPreferenceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificPeeringServerPreferenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificPeeringServerPreference: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificPhonebookEntry gets a specific phonebook entry
*/
func (a *Client) GetaspecificPhonebookEntry(params *GetaspecificPhonebookEntryParams) (*GetaspecificPhonebookEntryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificPhonebookEntryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificPhonebookEntry",
		Method:             "GET",
		PathPattern:        "/phonebookentries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificPhonebookEntryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificPhonebookEntryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificPhonebookEntry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificPreferencesMetaEntry gets a specific preferences meta entry
*/
func (a *Client) GetaspecificPreferencesMetaEntry(params *GetaspecificPreferencesMetaEntryParams) (*GetaspecificPreferencesMetaEntryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificPreferencesMetaEntryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificPreferencesMetaEntry",
		Method:             "GET",
		PathPattern:        "/preferencesmetaentries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificPreferencesMetaEntryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificPreferencesMetaEntryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificPreferencesMetaEntry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificProfilePackage gets a specific profile package
*/
func (a *Client) GetaspecificProfilePackage(params *GetaspecificProfilePackageParams) (*GetaspecificProfilePackageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificProfilePackageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificProfilePackage",
		Method:             "GET",
		PathPattern:        "/profilepackages/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificProfilePackageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificProfilePackageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificProfilePackage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificProfilePreference gets a specific profile preference
*/
func (a *Client) GetaspecificProfilePreference(params *GetaspecificProfilePreferenceParams) (*GetaspecificProfilePreferenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificProfilePreferenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificProfilePreference",
		Method:             "GET",
		PathPattern:        "/profilepreferences/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificProfilePreferenceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificProfilePreferenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificProfilePreference: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificReminder gets a specific reminder
*/
func (a *Client) GetaspecificReminder(params *GetaspecificReminderParams) (*GetaspecificReminderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificReminderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificReminder",
		Method:             "GET",
		PathPattern:        "/reminders/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificReminderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificReminderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificReminder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificReseller gets a specific reseller
*/
func (a *Client) GetaspecificReseller(params *GetaspecificResellerParams) (*GetaspecificResellerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificResellerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificReseller",
		Method:             "GET",
		PathPattern:        "/resellers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificResellerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificResellerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificReseller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificRewriteRule gets a specific rewrite rule
*/
func (a *Client) GetaspecificRewriteRule(params *GetaspecificRewriteRuleParams) (*GetaspecificRewriteRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificRewriteRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificRewriteRule",
		Method:             "GET",
		PathPattern:        "/rewriterules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificRewriteRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificRewriteRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificRewriteRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificRewriteRuleSet gets a specific rewrite rule set
*/
func (a *Client) GetaspecificRewriteRuleSet(params *GetaspecificRewriteRuleSetParams) (*GetaspecificRewriteRuleSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificRewriteRuleSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificRewriteRuleSet",
		Method:             "GET",
		PathPattern:        "/rewriterulesets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificRewriteRuleSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificRewriteRuleSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificRewriteRuleSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificRtcApp gets a specific rtc app
*/
func (a *Client) GetaspecificRtcApp(params *GetaspecificRtcAppParams) (*GetaspecificRtcAppOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificRtcAppParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificRtcApp",
		Method:             "GET",
		PathPattern:        "/rtcapps/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificRtcAppReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificRtcAppOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificRtcApp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificRtcNetwork gets a specific rtc network
*/
func (a *Client) GetaspecificRtcNetwork(params *GetaspecificRtcNetworkParams) (*GetaspecificRtcNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificRtcNetworkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificRtcNetwork",
		Method:             "GET",
		PathPattern:        "/rtcnetworks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificRtcNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificRtcNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificRtcNetwork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificSoundFile gets a specific sound file
*/
func (a *Client) GetaspecificSoundFile(params *GetaspecificSoundFileParams) (*GetaspecificSoundFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificSoundFileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificSoundFile",
		Method:             "GET",
		PathPattern:        "/soundfiles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificSoundFileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificSoundFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificSoundFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificSoundSet gets a specific sound set
*/
func (a *Client) GetaspecificSoundSet(params *GetaspecificSoundSetParams) (*GetaspecificSoundSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificSoundSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificSoundSet",
		Method:             "GET",
		PathPattern:        "/soundsets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificSoundSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificSoundSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificSoundSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificSpeedDial gets a specific speed dial
*/
func (a *Client) GetaspecificSpeedDial(params *GetaspecificSpeedDialParams) (*GetaspecificSpeedDialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificSpeedDialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificSpeedDial",
		Method:             "GET",
		PathPattern:        "/speeddials/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificSpeedDialReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificSpeedDialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificSpeedDial: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificSubscriber gets a specific subscriber
*/
func (a *Client) GetaspecificSubscriber(params *GetaspecificSubscriberParams) (*GetaspecificSubscriberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificSubscriberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificSubscriber",
		Method:             "GET",
		PathPattern:        "/subscribers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificSubscriberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificSubscriberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificSubscriber: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificSubscriberPreference gets a specific subscriber preference
*/
func (a *Client) GetaspecificSubscriberPreference(params *GetaspecificSubscriberPreferenceParams) (*GetaspecificSubscriberPreferenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificSubscriberPreferenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificSubscriberPreference",
		Method:             "GET",
		PathPattern:        "/subscriberpreferences/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificSubscriberPreferenceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificSubscriberPreferenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificSubscriberPreference: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificSubscriberProfile gets a specific subscriber profile
*/
func (a *Client) GetaspecificSubscriberProfile(params *GetaspecificSubscriberProfileParams) (*GetaspecificSubscriberProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificSubscriberProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificSubscriberProfile",
		Method:             "GET",
		PathPattern:        "/subscriberprofiles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificSubscriberProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificSubscriberProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificSubscriberProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificSubscriberProfileSet gets a specific subscriber profile set
*/
func (a *Client) GetaspecificSubscriberProfileSet(params *GetaspecificSubscriberProfileSetParams) (*GetaspecificSubscriberProfileSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificSubscriberProfileSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificSubscriberProfileSet",
		Method:             "GET",
		PathPattern:        "/subscriberprofilesets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificSubscriberProfileSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificSubscriberProfileSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificSubscriberProfileSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificSubscriberRegistration gets a specific subscriber registration
*/
func (a *Client) GetaspecificSubscriberRegistration(params *GetaspecificSubscriberRegistrationParams) (*GetaspecificSubscriberRegistrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificSubscriberRegistrationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificSubscriberRegistration",
		Method:             "GET",
		PathPattern:        "/subscriberregistrations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificSubscriberRegistrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificSubscriberRegistrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificSubscriberRegistration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificSystemContact gets a specific system contact
*/
func (a *Client) GetaspecificSystemContact(params *GetaspecificSystemContactParams) (*GetaspecificSystemContactOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificSystemContactParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificSystemContact",
		Method:             "GET",
		PathPattern:        "/systemcontacts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificSystemContactReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificSystemContactOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificSystemContact: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificTrustedSource gets a specific trusted source
*/
func (a *Client) GetaspecificTrustedSource(params *GetaspecificTrustedSourceParams) (*GetaspecificTrustedSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificTrustedSourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificTrustedSource",
		Method:             "GET",
		PathPattern:        "/trustedsources/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificTrustedSourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificTrustedSourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificTrustedSource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificUpnRewriteSet gets a specific upn rewrite set
*/
func (a *Client) GetaspecificUpnRewriteSet(params *GetaspecificUpnRewriteSetParams) (*GetaspecificUpnRewriteSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificUpnRewriteSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificUpnRewriteSet",
		Method:             "GET",
		PathPattern:        "/upnrewritesets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificUpnRewriteSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificUpnRewriteSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificUpnRewriteSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificVoicemail gets a specific voicemail
*/
func (a *Client) GetaspecificVoicemail(params *GetaspecificVoicemailParams) (*GetaspecificVoicemailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificVoicemailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificVoicemail",
		Method:             "GET",
		PathPattern:        "/voicemails/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificVoicemailReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificVoicemailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificVoicemail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificVoicemailGreeting gets a specific voicemail greeting
*/
func (a *Client) GetaspecificVoicemailGreeting(params *GetaspecificVoicemailGreetingParams) (*GetaspecificVoicemailGreetingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificVoicemailGreetingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificVoicemailGreeting",
		Method:             "GET",
		PathPattern:        "/voicemailgreetings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificVoicemailGreetingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificVoicemailGreetingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificVoicemailGreeting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificVoicemailSetting gets a specific voicemail setting
*/
func (a *Client) GetaspecificVoicemailSetting(params *GetaspecificVoicemailSettingParams) (*GetaspecificVoicemailSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificVoicemailSettingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificVoicemailSetting",
		Method:             "GET",
		PathPattern:        "/voicemailsettings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificVoicemailSettingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificVoicemailSettingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificVoicemailSetting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetaspecificVoucher gets a specific voucher
*/
func (a *Client) GetaspecificVoucher(params *GetaspecificVoucherParams) (*GetaspecificVoucherOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetaspecificVoucherParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetaspecificVoucher",
		Method:             "GET",
		PathPattern:        "/vouchers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetaspecificVoucherReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetaspecificVoucherOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetaspecificVoucher: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificAutoAttendant replaces change a specific auto attendant
*/
func (a *Client) ReplaceChangeaspecificAutoAttendant(params *ReplaceChangeaspecificAutoAttendantParams) (*ReplaceChangeaspecificAutoAttendantOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificAutoAttendantParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificAutoAttendant",
		Method:             "PUT",
		PathPattern:        "/autoattendants/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificAutoAttendantReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificAutoAttendantOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificAutoAttendant: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificBillingFee replaces change a specific billing fee
*/
func (a *Client) ReplaceChangeaspecificBillingFee(params *ReplaceChangeaspecificBillingFeeParams) (*ReplaceChangeaspecificBillingFeeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificBillingFeeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificBillingFee",
		Method:             "PUT",
		PathPattern:        "/billingfees/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificBillingFeeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificBillingFeeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificBillingFee: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificBillingNetwork replaces change a specific billing network
*/
func (a *Client) ReplaceChangeaspecificBillingNetwork(params *ReplaceChangeaspecificBillingNetworkParams) (*ReplaceChangeaspecificBillingNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificBillingNetworkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificBillingNetwork",
		Method:             "PUT",
		PathPattern:        "/billingnetworks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificBillingNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificBillingNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificBillingNetwork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificBillingProfile replaces change a specific billing profile
*/
func (a *Client) ReplaceChangeaspecificBillingProfile(params *ReplaceChangeaspecificBillingProfileParams) (*ReplaceChangeaspecificBillingProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificBillingProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificBillingProfile",
		Method:             "PUT",
		PathPattern:        "/billingprofiles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificBillingProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificBillingProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificBillingProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificBillingZone replaces change a specific billing zone
*/
func (a *Client) ReplaceChangeaspecificBillingZone(params *ReplaceChangeaspecificBillingZoneParams) (*ReplaceChangeaspecificBillingZoneNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificBillingZoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificBillingZone",
		Method:             "PUT",
		PathPattern:        "/billingzones/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificBillingZoneReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificBillingZoneNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificBillingZone: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificCCMapEntry replaces change a specific c c map entry
*/
func (a *Client) ReplaceChangeaspecificCCMapEntry(params *ReplaceChangeaspecificCCMapEntryParams) (*ReplaceChangeaspecificCCMapEntryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificCCMapEntryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificCCMapEntry",
		Method:             "PUT",
		PathPattern:        "/ccmapentries/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificCCMapEntryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificCCMapEntryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificCCMapEntry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificCFBNumberSet replaces change a specific c f b number set
*/
func (a *Client) ReplaceChangeaspecificCFBNumberSet(params *ReplaceChangeaspecificCFBNumberSetParams) (*ReplaceChangeaspecificCFBNumberSetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificCFBNumberSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificCFBNumberSet",
		Method:             "PUT",
		PathPattern:        "/cfbnumbersets/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificCFBNumberSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificCFBNumberSetNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificCFBNumberSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificCFDestinationSet replaces change a specific c f destination set
*/
func (a *Client) ReplaceChangeaspecificCFDestinationSet(params *ReplaceChangeaspecificCFDestinationSetParams) (*ReplaceChangeaspecificCFDestinationSetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificCFDestinationSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificCFDestinationSet",
		Method:             "PUT",
		PathPattern:        "/cfdestinationsets/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificCFDestinationSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificCFDestinationSetNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificCFDestinationSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificCFMapping replaces change a specific c f mapping
*/
func (a *Client) ReplaceChangeaspecificCFMapping(params *ReplaceChangeaspecificCFMappingParams) (*ReplaceChangeaspecificCFMappingNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificCFMappingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificCFMapping",
		Method:             "PUT",
		PathPattern:        "/cfmappings/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificCFMappingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificCFMappingNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificCFMapping: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificCFSourceSet replaces change a specific c f source set
*/
func (a *Client) ReplaceChangeaspecificCFSourceSet(params *ReplaceChangeaspecificCFSourceSetParams) (*ReplaceChangeaspecificCFSourceSetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificCFSourceSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificCFSourceSet",
		Method:             "PUT",
		PathPattern:        "/cfsourcesets/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificCFSourceSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificCFSourceSetNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificCFSourceSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificCFTimeSet replaces change a specific c f time set
*/
func (a *Client) ReplaceChangeaspecificCFTimeSet(params *ReplaceChangeaspecificCFTimeSetParams) (*ReplaceChangeaspecificCFTimeSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificCFTimeSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificCFTimeSet",
		Method:             "PUT",
		PathPattern:        "/cftimesets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificCFTimeSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificCFTimeSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificCFTimeSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificCallForward replaces change a specific call forward
*/
func (a *Client) ReplaceChangeaspecificCallForward(params *ReplaceChangeaspecificCallForwardParams) (*ReplaceChangeaspecificCallForwardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificCallForwardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificCallForward",
		Method:             "PUT",
		PathPattern:        "/callforwards/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificCallForwardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificCallForwardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificCallForward: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificContract replaces change a specific contract
*/
func (a *Client) ReplaceChangeaspecificContract(params *ReplaceChangeaspecificContractParams) (*ReplaceChangeaspecificContractNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificContractParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificContract",
		Method:             "PUT",
		PathPattern:        "/contracts/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificContractReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificContractNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificContract: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificCustomer replaces change a specific customer
*/
func (a *Client) ReplaceChangeaspecificCustomer(params *ReplaceChangeaspecificCustomerParams) (*ReplaceChangeaspecificCustomerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificCustomerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificCustomer",
		Method:             "PUT",
		PathPattern:        "/customers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificCustomerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificCustomerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificCustomer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificCustomerBalance replaces change a specific customer balance
*/
func (a *Client) ReplaceChangeaspecificCustomerBalance(params *ReplaceChangeaspecificCustomerBalanceParams) (*ReplaceChangeaspecificCustomerBalanceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificCustomerBalanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificCustomerBalance",
		Method:             "PUT",
		PathPattern:        "/customerbalances/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificCustomerBalanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificCustomerBalanceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificCustomerBalance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificCustomerContact replaces change a specific customer contact
*/
func (a *Client) ReplaceChangeaspecificCustomerContact(params *ReplaceChangeaspecificCustomerContactParams) (*ReplaceChangeaspecificCustomerContactNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificCustomerContactParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificCustomerContact",
		Method:             "PUT",
		PathPattern:        "/customercontacts/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificCustomerContactReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificCustomerContactNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificCustomerContact: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificCustomerFraudPreference replaces change a specific customer fraud preference
*/
func (a *Client) ReplaceChangeaspecificCustomerFraudPreference(params *ReplaceChangeaspecificCustomerFraudPreferenceParams) (*ReplaceChangeaspecificCustomerFraudPreferenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificCustomerFraudPreferenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificCustomerFraudPreference",
		Method:             "PUT",
		PathPattern:        "/customerfraudpreferences/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificCustomerFraudPreferenceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificCustomerFraudPreferenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificCustomerFraudPreference: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificCustomerLocation replaces change a specific customer location
*/
func (a *Client) ReplaceChangeaspecificCustomerLocation(params *ReplaceChangeaspecificCustomerLocationParams) (*ReplaceChangeaspecificCustomerLocationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificCustomerLocationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificCustomerLocation",
		Method:             "PUT",
		PathPattern:        "/customerlocations/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificCustomerLocationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificCustomerLocationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificCustomerLocation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificCustomerPreference replaces change a specific customer preference
*/
func (a *Client) ReplaceChangeaspecificCustomerPreference(params *ReplaceChangeaspecificCustomerPreferenceParams) (*ReplaceChangeaspecificCustomerPreferenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificCustomerPreferenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificCustomerPreference",
		Method:             "PUT",
		PathPattern:        "/customerpreferences/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificCustomerPreferenceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificCustomerPreferenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificCustomerPreference: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificDomainPreference replaces change a specific domain preference
*/
func (a *Client) ReplaceChangeaspecificDomainPreference(params *ReplaceChangeaspecificDomainPreferenceParams) (*ReplaceChangeaspecificDomainPreferenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificDomainPreferenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificDomainPreference",
		Method:             "PUT",
		PathPattern:        "/domainpreferences/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificDomainPreferenceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificDomainPreferenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificDomainPreference: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificEmailTemplate replaces change a specific email template
*/
func (a *Client) ReplaceChangeaspecificEmailTemplate(params *ReplaceChangeaspecificEmailTemplateParams) (*ReplaceChangeaspecificEmailTemplateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificEmailTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificEmailTemplate",
		Method:             "PUT",
		PathPattern:        "/emailtemplates/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificEmailTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificEmailTemplateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificEmailTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificEmergencyMapping replaces change a specific emergency mapping
*/
func (a *Client) ReplaceChangeaspecificEmergencyMapping(params *ReplaceChangeaspecificEmergencyMappingParams) (*ReplaceChangeaspecificEmergencyMappingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificEmergencyMappingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificEmergencyMapping",
		Method:             "PUT",
		PathPattern:        "/emergencymappings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificEmergencyMappingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificEmergencyMappingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificEmergencyMapping: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificEmergencyMappingContainer replaces change a specific emergency mapping container
*/
func (a *Client) ReplaceChangeaspecificEmergencyMappingContainer(params *ReplaceChangeaspecificEmergencyMappingContainerParams) (*ReplaceChangeaspecificEmergencyMappingContainerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificEmergencyMappingContainerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificEmergencyMappingContainer",
		Method:             "PUT",
		PathPattern:        "/emergencymappingcontainers/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificEmergencyMappingContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificEmergencyMappingContainerNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificEmergencyMappingContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificFaxserverSetting replaces change a specific faxserver setting
*/
func (a *Client) ReplaceChangeaspecificFaxserverSetting(params *ReplaceChangeaspecificFaxserverSettingParams) (*ReplaceChangeaspecificFaxserverSettingNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificFaxserverSettingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificFaxserverSetting",
		Method:             "PUT",
		PathPattern:        "/faxserversettings/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificFaxserverSettingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificFaxserverSettingNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificFaxserverSetting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificInterception replaces change a specific interception
*/
func (a *Client) ReplaceChangeaspecificInterception(params *ReplaceChangeaspecificInterceptionParams) (*ReplaceChangeaspecificInterceptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificInterceptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificInterception",
		Method:             "PUT",
		PathPattern:        "/interceptions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificInterceptionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificInterceptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificInterception: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificLnpCarrier replaces change a specific lnp carrier
*/
func (a *Client) ReplaceChangeaspecificLnpCarrier(params *ReplaceChangeaspecificLnpCarrierParams) (*ReplaceChangeaspecificLnpCarrierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificLnpCarrierParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificLnpCarrier",
		Method:             "PUT",
		PathPattern:        "/lnpcarriers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificLnpCarrierReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificLnpCarrierOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificLnpCarrier: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificLnpNumber replaces change a specific lnp number
*/
func (a *Client) ReplaceChangeaspecificLnpNumber(params *ReplaceChangeaspecificLnpNumberParams) (*ReplaceChangeaspecificLnpNumberNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificLnpNumberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificLnpNumber",
		Method:             "PUT",
		PathPattern:        "/lnpnumbers/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificLnpNumberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificLnpNumberNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificLnpNumber: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificMailToFaxSetting replaces change a specific mail to fax setting
*/
func (a *Client) ReplaceChangeaspecificMailToFaxSetting(params *ReplaceChangeaspecificMailToFaxSettingParams) (*ReplaceChangeaspecificMailToFaxSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificMailToFaxSettingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificMailToFaxSetting",
		Method:             "PUT",
		PathPattern:        "/mailtofaxsettings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificMailToFaxSettingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificMailToFaxSettingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificMailToFaxSetting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificManagerSecretary replaces change a specific manager secretary
*/
func (a *Client) ReplaceChangeaspecificManagerSecretary(params *ReplaceChangeaspecificManagerSecretaryParams) (*ReplaceChangeaspecificManagerSecretaryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificManagerSecretaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificManagerSecretary",
		Method:             "PUT",
		PathPattern:        "/managersecretary/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificManagerSecretaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificManagerSecretaryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificManagerSecretary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificNcosLevel replaces change a specific ncos level
*/
func (a *Client) ReplaceChangeaspecificNcosLevel(params *ReplaceChangeaspecificNcosLevelParams) (*ReplaceChangeaspecificNcosLevelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificNcosLevelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificNcosLevel",
		Method:             "PUT",
		PathPattern:        "/ncoslevels/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificNcosLevelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificNcosLevelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificNcosLevel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificNcosLnpCarrier replaces change a specific ncos lnp carrier
*/
func (a *Client) ReplaceChangeaspecificNcosLnpCarrier(params *ReplaceChangeaspecificNcosLnpCarrierParams) (*ReplaceChangeaspecificNcosLnpCarrierNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificNcosLnpCarrierParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificNcosLnpCarrier",
		Method:             "PUT",
		PathPattern:        "/ncoslnpcarriers/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificNcosLnpCarrierReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificNcosLnpCarrierNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificNcosLnpCarrier: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificNcosPattern replaces change a specific ncos pattern
*/
func (a *Client) ReplaceChangeaspecificNcosPattern(params *ReplaceChangeaspecificNcosPatternParams) (*ReplaceChangeaspecificNcosPatternNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificNcosPatternParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificNcosPattern",
		Method:             "PUT",
		PathPattern:        "/ncospatterns/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificNcosPatternReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificNcosPatternNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificNcosPattern: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificNumber replaces change a specific number
*/
func (a *Client) ReplaceChangeaspecificNumber(params *ReplaceChangeaspecificNumberParams) (*ReplaceChangeaspecificNumberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificNumberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificNumber",
		Method:             "PUT",
		PathPattern:        "/numbers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificNumberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificNumberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificNumber: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificPbxDevice replaces change a specific pbx device
*/
func (a *Client) ReplaceChangeaspecificPbxDevice(params *ReplaceChangeaspecificPbxDeviceParams) (*ReplaceChangeaspecificPbxDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificPbxDeviceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificPbxDevice",
		Method:             "PUT",
		PathPattern:        "/pbxdevices/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificPbxDeviceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificPbxDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificPbxDevice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificPbxDeviceConfig replaces change a specific pbx device config
*/
func (a *Client) ReplaceChangeaspecificPbxDeviceConfig(params *ReplaceChangeaspecificPbxDeviceConfigParams) (*ReplaceChangeaspecificPbxDeviceConfigNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificPbxDeviceConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificPbxDeviceConfig",
		Method:             "PUT",
		PathPattern:        "/pbxdeviceconfigs/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificPbxDeviceConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificPbxDeviceConfigNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificPbxDeviceConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificPbxDeviceFirmware replaces change a specific pbx device firmware
*/
func (a *Client) ReplaceChangeaspecificPbxDeviceFirmware(params *ReplaceChangeaspecificPbxDeviceFirmwareParams) (*ReplaceChangeaspecificPbxDeviceFirmwareOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificPbxDeviceFirmwareParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificPbxDeviceFirmware",
		Method:             "PUT",
		PathPattern:        "/pbxdevicefirmwares/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificPbxDeviceFirmwareReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificPbxDeviceFirmwareOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificPbxDeviceFirmware: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificPbxDeviceModel replaces change a specific pbx device model
*/
func (a *Client) ReplaceChangeaspecificPbxDeviceModel(params *ReplaceChangeaspecificPbxDeviceModelParams) (*ReplaceChangeaspecificPbxDeviceModelNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificPbxDeviceModelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificPbxDeviceModel",
		Method:             "PUT",
		PathPattern:        "/pbxdevicemodels/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificPbxDeviceModelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificPbxDeviceModelNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificPbxDeviceModel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificPbxDevicePreference replaces change a specific pbx device preference
*/
func (a *Client) ReplaceChangeaspecificPbxDevicePreference(params *ReplaceChangeaspecificPbxDevicePreferenceParams) (*ReplaceChangeaspecificPbxDevicePreferenceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificPbxDevicePreferenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificPbxDevicePreference",
		Method:             "PUT",
		PathPattern:        "/pbxdevicepreferences/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificPbxDevicePreferenceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificPbxDevicePreferenceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificPbxDevicePreference: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificPbxDeviceProfile replaces change a specific pbx device profile
*/
func (a *Client) ReplaceChangeaspecificPbxDeviceProfile(params *ReplaceChangeaspecificPbxDeviceProfileParams) (*ReplaceChangeaspecificPbxDeviceProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificPbxDeviceProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificPbxDeviceProfile",
		Method:             "PUT",
		PathPattern:        "/pbxdeviceprofiles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificPbxDeviceProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificPbxDeviceProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificPbxDeviceProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificPbxDeviceProfilePreference replaces change a specific pbx device profile preference
*/
func (a *Client) ReplaceChangeaspecificPbxDeviceProfilePreference(params *ReplaceChangeaspecificPbxDeviceProfilePreferenceParams) (*ReplaceChangeaspecificPbxDeviceProfilePreferenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificPbxDeviceProfilePreferenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificPbxDeviceProfilePreference",
		Method:             "PUT",
		PathPattern:        "/pbxdeviceprofilepreferences/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificPbxDeviceProfilePreferenceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificPbxDeviceProfilePreferenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificPbxDeviceProfilePreference: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificPbxFieldDevicePreference replaces change a specific pbx field device preference
*/
func (a *Client) ReplaceChangeaspecificPbxFieldDevicePreference(params *ReplaceChangeaspecificPbxFieldDevicePreferenceParams) (*ReplaceChangeaspecificPbxFieldDevicePreferenceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificPbxFieldDevicePreferenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificPbxFieldDevicePreference",
		Method:             "PUT",
		PathPattern:        "/pbxfielddevicepreferences/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificPbxFieldDevicePreferenceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificPbxFieldDevicePreferenceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificPbxFieldDevicePreference: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificPeeringGroup replaces change a specific peering group
*/
func (a *Client) ReplaceChangeaspecificPeeringGroup(params *ReplaceChangeaspecificPeeringGroupParams) (*ReplaceChangeaspecificPeeringGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificPeeringGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificPeeringGroup",
		Method:             "PUT",
		PathPattern:        "/peeringgroups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificPeeringGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificPeeringGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificPeeringGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificPeeringInboundRule replaces change a specific peering inbound rule
*/
func (a *Client) ReplaceChangeaspecificPeeringInboundRule(params *ReplaceChangeaspecificPeeringInboundRuleParams) (*ReplaceChangeaspecificPeeringInboundRuleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificPeeringInboundRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificPeeringInboundRule",
		Method:             "PUT",
		PathPattern:        "/peeringinboundrules/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificPeeringInboundRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificPeeringInboundRuleNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificPeeringInboundRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificPeeringRule replaces change a specific peering rule
*/
func (a *Client) ReplaceChangeaspecificPeeringRule(params *ReplaceChangeaspecificPeeringRuleParams) (*ReplaceChangeaspecificPeeringRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificPeeringRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificPeeringRule",
		Method:             "PUT",
		PathPattern:        "/peeringrules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificPeeringRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificPeeringRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificPeeringRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificPeeringServer replaces change a specific peering server
*/
func (a *Client) ReplaceChangeaspecificPeeringServer(params *ReplaceChangeaspecificPeeringServerParams) (*ReplaceChangeaspecificPeeringServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificPeeringServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificPeeringServer",
		Method:             "PUT",
		PathPattern:        "/peeringservers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificPeeringServerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificPeeringServerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificPeeringServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificPeeringServerPreference replaces change a specific peering server preference
*/
func (a *Client) ReplaceChangeaspecificPeeringServerPreference(params *ReplaceChangeaspecificPeeringServerPreferenceParams) (*ReplaceChangeaspecificPeeringServerPreferenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificPeeringServerPreferenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificPeeringServerPreference",
		Method:             "PUT",
		PathPattern:        "/peeringserverpreferences/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificPeeringServerPreferenceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificPeeringServerPreferenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificPeeringServerPreference: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificPhonebookEntry replaces change a specific phonebook entry
*/
func (a *Client) ReplaceChangeaspecificPhonebookEntry(params *ReplaceChangeaspecificPhonebookEntryParams) (*ReplaceChangeaspecificPhonebookEntryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificPhonebookEntryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificPhonebookEntry",
		Method:             "PUT",
		PathPattern:        "/phonebookentries/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificPhonebookEntryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificPhonebookEntryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificPhonebookEntry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificPreferencesMetaEntry replaces change a specific preferences meta entry
*/
func (a *Client) ReplaceChangeaspecificPreferencesMetaEntry(params *ReplaceChangeaspecificPreferencesMetaEntryParams) (*ReplaceChangeaspecificPreferencesMetaEntryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificPreferencesMetaEntryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificPreferencesMetaEntry",
		Method:             "PUT",
		PathPattern:        "/preferencesmetaentries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificPreferencesMetaEntryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificPreferencesMetaEntryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificPreferencesMetaEntry: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificProfilePackage replaces change a specific profile package
*/
func (a *Client) ReplaceChangeaspecificProfilePackage(params *ReplaceChangeaspecificProfilePackageParams) (*ReplaceChangeaspecificProfilePackageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificProfilePackageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificProfilePackage",
		Method:             "PUT",
		PathPattern:        "/profilepackages/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificProfilePackageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificProfilePackageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificProfilePackage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificProfilePreference replaces change a specific profile preference
*/
func (a *Client) ReplaceChangeaspecificProfilePreference(params *ReplaceChangeaspecificProfilePreferenceParams) (*ReplaceChangeaspecificProfilePreferenceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificProfilePreferenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificProfilePreference",
		Method:             "PUT",
		PathPattern:        "/profilepreferences/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificProfilePreferenceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificProfilePreferenceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificProfilePreference: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificReminder replaces change a specific reminder
*/
func (a *Client) ReplaceChangeaspecificReminder(params *ReplaceChangeaspecificReminderParams) (*ReplaceChangeaspecificReminderNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificReminderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificReminder",
		Method:             "PUT",
		PathPattern:        "/reminders/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificReminderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificReminderNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificReminder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificReseller replaces change a specific reseller
*/
func (a *Client) ReplaceChangeaspecificReseller(params *ReplaceChangeaspecificResellerParams) (*ReplaceChangeaspecificResellerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificResellerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificReseller",
		Method:             "PUT",
		PathPattern:        "/resellers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificResellerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificResellerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificReseller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificRewriteRule replaces change a specific rewrite rule
*/
func (a *Client) ReplaceChangeaspecificRewriteRule(params *ReplaceChangeaspecificRewriteRuleParams) (*ReplaceChangeaspecificRewriteRuleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificRewriteRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificRewriteRule",
		Method:             "PUT",
		PathPattern:        "/rewriterules/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificRewriteRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificRewriteRuleNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificRewriteRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificRewriteRuleSet replaces change a specific rewrite rule set
*/
func (a *Client) ReplaceChangeaspecificRewriteRuleSet(params *ReplaceChangeaspecificRewriteRuleSetParams) (*ReplaceChangeaspecificRewriteRuleSetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificRewriteRuleSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificRewriteRuleSet",
		Method:             "PUT",
		PathPattern:        "/rewriterulesets/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificRewriteRuleSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificRewriteRuleSetNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificRewriteRuleSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificRtcApp replaces change a specific rtc app
*/
func (a *Client) ReplaceChangeaspecificRtcApp(params *ReplaceChangeaspecificRtcAppParams) (*ReplaceChangeaspecificRtcAppOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificRtcAppParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificRtcApp",
		Method:             "PUT",
		PathPattern:        "/rtcapps/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificRtcAppReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificRtcAppOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificRtcApp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificRtcNetwork replaces change a specific rtc network
*/
func (a *Client) ReplaceChangeaspecificRtcNetwork(params *ReplaceChangeaspecificRtcNetworkParams) (*ReplaceChangeaspecificRtcNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificRtcNetworkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificRtcNetwork",
		Method:             "PUT",
		PathPattern:        "/rtcnetworks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificRtcNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificRtcNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificRtcNetwork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificSoundFile replaces change a specific sound file
*/
func (a *Client) ReplaceChangeaspecificSoundFile(params *ReplaceChangeaspecificSoundFileParams) (*ReplaceChangeaspecificSoundFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificSoundFileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificSoundFile",
		Method:             "PUT",
		PathPattern:        "/soundfiles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificSoundFileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificSoundFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificSoundFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificSoundSet replaces change a specific sound set
*/
func (a *Client) ReplaceChangeaspecificSoundSet(params *ReplaceChangeaspecificSoundSetParams) (*ReplaceChangeaspecificSoundSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificSoundSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificSoundSet",
		Method:             "PUT",
		PathPattern:        "/soundsets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificSoundSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificSoundSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificSoundSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificSpeedDial replaces change a specific speed dial
*/
func (a *Client) ReplaceChangeaspecificSpeedDial(params *ReplaceChangeaspecificSpeedDialParams) (*ReplaceChangeaspecificSpeedDialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificSpeedDialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificSpeedDial",
		Method:             "PUT",
		PathPattern:        "/speeddials/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificSpeedDialReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificSpeedDialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificSpeedDial: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificSubscriber replaces change a specific subscriber
*/
func (a *Client) ReplaceChangeaspecificSubscriber(params *ReplaceChangeaspecificSubscriberParams) (*ReplaceChangeaspecificSubscriberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificSubscriberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificSubscriber",
		Method:             "PUT",
		PathPattern:        "/subscribers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificSubscriberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificSubscriberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificSubscriber: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificSubscriberPreference replaces change a specific subscriber preference
*/
func (a *Client) ReplaceChangeaspecificSubscriberPreference(params *ReplaceChangeaspecificSubscriberPreferenceParams) (*ReplaceChangeaspecificSubscriberPreferenceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificSubscriberPreferenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificSubscriberPreference",
		Method:             "PUT",
		PathPattern:        "/subscriberpreferences/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificSubscriberPreferenceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificSubscriberPreferenceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificSubscriberPreference: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificSubscriberProfile replaces change a specific subscriber profile
*/
func (a *Client) ReplaceChangeaspecificSubscriberProfile(params *ReplaceChangeaspecificSubscriberProfileParams) (*ReplaceChangeaspecificSubscriberProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificSubscriberProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificSubscriberProfile",
		Method:             "PUT",
		PathPattern:        "/subscriberprofiles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificSubscriberProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificSubscriberProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificSubscriberProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificSubscriberProfileSet replaces change a specific subscriber profile set
*/
func (a *Client) ReplaceChangeaspecificSubscriberProfileSet(params *ReplaceChangeaspecificSubscriberProfileSetParams) (*ReplaceChangeaspecificSubscriberProfileSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificSubscriberProfileSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificSubscriberProfileSet",
		Method:             "PUT",
		PathPattern:        "/subscriberprofilesets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificSubscriberProfileSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificSubscriberProfileSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificSubscriberProfileSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificSubscriberRegistration replaces change a specific subscriber registration
*/
func (a *Client) ReplaceChangeaspecificSubscriberRegistration(params *ReplaceChangeaspecificSubscriberRegistrationParams) (*ReplaceChangeaspecificSubscriberRegistrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificSubscriberRegistrationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificSubscriberRegistration",
		Method:             "PUT",
		PathPattern:        "/subscriberregistrations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificSubscriberRegistrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificSubscriberRegistrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificSubscriberRegistration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificSystemContact replaces change a specific system contact
*/
func (a *Client) ReplaceChangeaspecificSystemContact(params *ReplaceChangeaspecificSystemContactParams) (*ReplaceChangeaspecificSystemContactNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificSystemContactParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificSystemContact",
		Method:             "PUT",
		PathPattern:        "/systemcontacts/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificSystemContactReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificSystemContactNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificSystemContact: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificTrustedSource replaces change a specific trusted source
*/
func (a *Client) ReplaceChangeaspecificTrustedSource(params *ReplaceChangeaspecificTrustedSourceParams) (*ReplaceChangeaspecificTrustedSourceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificTrustedSourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificTrustedSource",
		Method:             "PUT",
		PathPattern:        "/trustedsources/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificTrustedSourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificTrustedSourceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificTrustedSource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificUpnRewriteSet replaces change a specific upn rewrite set
*/
func (a *Client) ReplaceChangeaspecificUpnRewriteSet(params *ReplaceChangeaspecificUpnRewriteSetParams) (*ReplaceChangeaspecificUpnRewriteSetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificUpnRewriteSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificUpnRewriteSet",
		Method:             "PUT",
		PathPattern:        "/upnrewritesets/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificUpnRewriteSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificUpnRewriteSetNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificUpnRewriteSet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificVoicemail replaces change a specific voicemail
*/
func (a *Client) ReplaceChangeaspecificVoicemail(params *ReplaceChangeaspecificVoicemailParams) (*ReplaceChangeaspecificVoicemailNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificVoicemailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificVoicemail",
		Method:             "PUT",
		PathPattern:        "/voicemails/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificVoicemailReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificVoicemailNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificVoicemail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificVoicemailGreeting replaces change a specific voicemail greeting
*/
func (a *Client) ReplaceChangeaspecificVoicemailGreeting(params *ReplaceChangeaspecificVoicemailGreetingParams) (*ReplaceChangeaspecificVoicemailGreetingNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificVoicemailGreetingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificVoicemailGreeting",
		Method:             "PUT",
		PathPattern:        "/voicemailgreetings/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificVoicemailGreetingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificVoicemailGreetingNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificVoicemailGreeting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificVoicemailSetting replaces change a specific voicemail setting
*/
func (a *Client) ReplaceChangeaspecificVoicemailSetting(params *ReplaceChangeaspecificVoicemailSettingParams) (*ReplaceChangeaspecificVoicemailSettingNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificVoicemailSettingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificVoicemailSetting",
		Method:             "PUT",
		PathPattern:        "/voicemailsettings/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificVoicemailSettingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificVoicemailSettingNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificVoicemailSetting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceChangeaspecificVoucher replaces change a specific voucher
*/
func (a *Client) ReplaceChangeaspecificVoucher(params *ReplaceChangeaspecificVoucherParams) (*ReplaceChangeaspecificVoucherOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceChangeaspecificVoucherParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Replace/changeaspecificVoucher",
		Method:             "PUT",
		PathPattern:        "/vouchers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceChangeaspecificVoucherReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceChangeaspecificVoucherOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Replace/changeaspecificVoucher: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
