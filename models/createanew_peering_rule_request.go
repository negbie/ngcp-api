// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateanewPeeringRuleRequest CreateanewPeeringRuleRequest
// swagger:model CreateanewPeeringRuleRequest
type CreateanewPeeringRuleRequest struct {

	// callee pattern
	// Required: true
	CalleePattern *string `json:"callee_pattern"`

	// callee prefix
	// Required: true
	CalleePrefix *string `json:"callee_prefix"`

	// caller pattern
	// Required: true
	CallerPattern *string `json:"caller_pattern"`

	// description
	// Required: true
	Description *string `json:"description"`

	// enabled
	// Required: true
	Enabled *string `json:"enabled"`

	// group id
	// Required: true
	GroupID *string `json:"group_id"`

	// stopper
	// Required: true
	Stopper *string `json:"stopper"`
}

// Validate validates this createanew peering rule request
func (m *CreateanewPeeringRuleRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCalleePattern(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCalleePrefix(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCallerPattern(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStopper(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateanewPeeringRuleRequest) validateCalleePattern(formats strfmt.Registry) error {

	if err := validate.Required("callee_pattern", "body", m.CalleePattern); err != nil {
		return err
	}

	return nil
}

func (m *CreateanewPeeringRuleRequest) validateCalleePrefix(formats strfmt.Registry) error {

	if err := validate.Required("callee_prefix", "body", m.CalleePrefix); err != nil {
		return err
	}

	return nil
}

func (m *CreateanewPeeringRuleRequest) validateCallerPattern(formats strfmt.Registry) error {

	if err := validate.Required("caller_pattern", "body", m.CallerPattern); err != nil {
		return err
	}

	return nil
}

func (m *CreateanewPeeringRuleRequest) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *CreateanewPeeringRuleRequest) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *CreateanewPeeringRuleRequest) validateGroupID(formats strfmt.Registry) error {

	if err := validate.Required("group_id", "body", m.GroupID); err != nil {
		return err
	}

	return nil
}

func (m *CreateanewPeeringRuleRequest) validateStopper(formats strfmt.Registry) error {

	if err := validate.Required("stopper", "body", m.Stopper); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateanewPeeringRuleRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateanewPeeringRuleRequest) UnmarshalBinary(b []byte) error {
	var res CreateanewPeeringRuleRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
