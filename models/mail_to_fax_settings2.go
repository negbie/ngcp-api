// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MailToFaxSettings2 MailToFaxSettings2
//
// swagger:model MailToFaxSettings2
type MailToFaxSettings2 struct {

	// acl
	// Required: true
	ACL []*Acl2 `json:"acl"`

	// active
	// Required: true
	Active *string `json:"active"`

	// secret key
	// Required: true
	SecretKey *string `json:"secret_key"`

	// secret key renew
	// Required: true
	SecretKeyRenew *string `json:"secret_key_renew"`

	// secret renew notify
	// Required: true
	SecretRenewNotify []*SecretRenewNotify `json:"secret_renew_notify"`
}

// Validate validates this mail to fax settings2
func (m *MailToFaxSettings2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateACL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecretKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecretKeyRenew(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecretRenewNotify(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MailToFaxSettings2) validateACL(formats strfmt.Registry) error {

	if err := validate.Required("acl", "body", m.ACL); err != nil {
		return err
	}

	for i := 0; i < len(m.ACL); i++ {
		if swag.IsZero(m.ACL[i]) { // not required
			continue
		}

		if m.ACL[i] != nil {
			if err := m.ACL[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("acl" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MailToFaxSettings2) validateActive(formats strfmt.Registry) error {

	if err := validate.Required("active", "body", m.Active); err != nil {
		return err
	}

	return nil
}

func (m *MailToFaxSettings2) validateSecretKey(formats strfmt.Registry) error {

	if err := validate.Required("secret_key", "body", m.SecretKey); err != nil {
		return err
	}

	return nil
}

func (m *MailToFaxSettings2) validateSecretKeyRenew(formats strfmt.Registry) error {

	if err := validate.Required("secret_key_renew", "body", m.SecretKeyRenew); err != nil {
		return err
	}

	return nil
}

func (m *MailToFaxSettings2) validateSecretRenewNotify(formats strfmt.Registry) error {

	if err := validate.Required("secret_renew_notify", "body", m.SecretRenewNotify); err != nil {
		return err
	}

	for i := 0; i < len(m.SecretRenewNotify); i++ {
		if swag.IsZero(m.SecretRenewNotify[i]) { // not required
			continue
		}

		if m.SecretRenewNotify[i] != nil {
			if err := m.SecretRenewNotify[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("secret_renew_notify" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MailToFaxSettings2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MailToFaxSettings2) UnmarshalBinary(b []byte) error {
	var res MailToFaxSettings2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
