// Code generated by go-swagger; DO NOT EDIT.

package nr_id

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetaspecificDomainPreferenceParams creates a new GetaspecificDomainPreferenceParams object
// with the default values initialized.
func NewGetaspecificDomainPreferenceParams() *GetaspecificDomainPreferenceParams {
	var ()
	return &GetaspecificDomainPreferenceParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetaspecificDomainPreferenceParamsWithTimeout creates a new GetaspecificDomainPreferenceParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetaspecificDomainPreferenceParamsWithTimeout(timeout time.Duration) *GetaspecificDomainPreferenceParams {
	var ()
	return &GetaspecificDomainPreferenceParams{

		timeout: timeout,
	}
}

// NewGetaspecificDomainPreferenceParamsWithContext creates a new GetaspecificDomainPreferenceParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetaspecificDomainPreferenceParamsWithContext(ctx context.Context) *GetaspecificDomainPreferenceParams {
	var ()
	return &GetaspecificDomainPreferenceParams{

		Context: ctx,
	}
}

// NewGetaspecificDomainPreferenceParamsWithHTTPClient creates a new GetaspecificDomainPreferenceParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetaspecificDomainPreferenceParamsWithHTTPClient(client *http.Client) *GetaspecificDomainPreferenceParams {
	var ()
	return &GetaspecificDomainPreferenceParams{
		HTTPClient: client,
	}
}

/*GetaspecificDomainPreferenceParams contains all the parameters to send to the API endpoint
for the getaspecific domain preference operation typically these are written to a http.Request
*/
type GetaspecificDomainPreferenceParams struct {

	/*ID
	  (Required)

	*/
	ID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the getaspecific domain preference params
func (o *GetaspecificDomainPreferenceParams) WithTimeout(timeout time.Duration) *GetaspecificDomainPreferenceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the getaspecific domain preference params
func (o *GetaspecificDomainPreferenceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the getaspecific domain preference params
func (o *GetaspecificDomainPreferenceParams) WithContext(ctx context.Context) *GetaspecificDomainPreferenceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the getaspecific domain preference params
func (o *GetaspecificDomainPreferenceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the getaspecific domain preference params
func (o *GetaspecificDomainPreferenceParams) WithHTTPClient(client *http.Client) *GetaspecificDomainPreferenceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the getaspecific domain preference params
func (o *GetaspecificDomainPreferenceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the getaspecific domain preference params
func (o *GetaspecificDomainPreferenceParams) WithID(id string) *GetaspecificDomainPreferenceParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the getaspecific domain preference params
func (o *GetaspecificDomainPreferenceParams) SetID(id string) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *GetaspecificDomainPreferenceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
