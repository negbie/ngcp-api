// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReplaceChangeaspecificCustomerFraudPreferenceRequest Replace/changeaspecificCustomerFraudPreferenceRequest
//
// swagger:model Replace/changeaspecificCustomerFraudPreferenceRequest
type ReplaceChangeaspecificCustomerFraudPreferenceRequest struct {

	// fraud daily limit
	// Required: true
	FraudDailyLimit *string `json:"fraud_daily_limit"`

	// fraud daily lock
	// Required: true
	FraudDailyLock *string `json:"fraud_daily_lock"`

	// fraud daily notify
	// Required: true
	FraudDailyNotify *string `json:"fraud_daily_notify"`

	// fraud interval limit
	// Required: true
	FraudIntervalLimit *string `json:"fraud_interval_limit"`

	// fraud interval lock
	// Required: true
	FraudIntervalLock *string `json:"fraud_interval_lock"`

	// fraud interval notify
	// Required: true
	FraudIntervalNotify *string `json:"fraud_interval_notify"`
}

// Validate validates this replace changeaspecific customer fraud preference request
func (m *ReplaceChangeaspecificCustomerFraudPreferenceRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFraudDailyLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFraudDailyLock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFraudDailyNotify(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFraudIntervalLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFraudIntervalLock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFraudIntervalNotify(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReplaceChangeaspecificCustomerFraudPreferenceRequest) validateFraudDailyLimit(formats strfmt.Registry) error {

	if err := validate.Required("fraud_daily_limit", "body", m.FraudDailyLimit); err != nil {
		return err
	}

	return nil
}

func (m *ReplaceChangeaspecificCustomerFraudPreferenceRequest) validateFraudDailyLock(formats strfmt.Registry) error {

	if err := validate.Required("fraud_daily_lock", "body", m.FraudDailyLock); err != nil {
		return err
	}

	return nil
}

func (m *ReplaceChangeaspecificCustomerFraudPreferenceRequest) validateFraudDailyNotify(formats strfmt.Registry) error {

	if err := validate.Required("fraud_daily_notify", "body", m.FraudDailyNotify); err != nil {
		return err
	}

	return nil
}

func (m *ReplaceChangeaspecificCustomerFraudPreferenceRequest) validateFraudIntervalLimit(formats strfmt.Registry) error {

	if err := validate.Required("fraud_interval_limit", "body", m.FraudIntervalLimit); err != nil {
		return err
	}

	return nil
}

func (m *ReplaceChangeaspecificCustomerFraudPreferenceRequest) validateFraudIntervalLock(formats strfmt.Registry) error {

	if err := validate.Required("fraud_interval_lock", "body", m.FraudIntervalLock); err != nil {
		return err
	}

	return nil
}

func (m *ReplaceChangeaspecificCustomerFraudPreferenceRequest) validateFraudIntervalNotify(formats strfmt.Registry) error {

	if err := validate.Required("fraud_interval_notify", "body", m.FraudIntervalNotify); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReplaceChangeaspecificCustomerFraudPreferenceRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReplaceChangeaspecificCustomerFraudPreferenceRequest) UnmarshalBinary(b []byte) error {
	var res ReplaceChangeaspecificCustomerFraudPreferenceRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
