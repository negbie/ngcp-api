// Code generated by go-swagger; DO NOT EDIT.

package sms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetSMSitemsParams creates a new GetSMSitemsParams object
// with the default values initialized.
func NewGetSMSitemsParams() *GetSMSitemsParams {
	var ()
	return &GetSMSitemsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSMSitemsParamsWithTimeout creates a new GetSMSitemsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSMSitemsParamsWithTimeout(timeout time.Duration) *GetSMSitemsParams {
	var ()
	return &GetSMSitemsParams{

		timeout: timeout,
	}
}

// NewGetSMSitemsParamsWithContext creates a new GetSMSitemsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSMSitemsParamsWithContext(ctx context.Context) *GetSMSitemsParams {
	var ()
	return &GetSMSitemsParams{

		Context: ctx,
	}
}

// NewGetSMSitemsParamsWithHTTPClient creates a new GetSMSitemsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSMSitemsParamsWithHTTPClient(client *http.Client) *GetSMSitemsParams {
	var ()
	return &GetSMSitemsParams{
		HTTPClient: client,
	}
}

/*GetSMSitemsParams contains all the parameters to send to the API endpoint
for the get s m sitems operation typically these are written to a http.Request
*/
type GetSMSitemsParams struct {

	/*CustomerID
	  Filter for messages belonging to a specific customer

	*/
	CustomerID string
	/*Direction
	  Filter for messages sent ("out"), received ("in") or forwarded ("forward").

	*/
	Direction string
	/*OrderBy
	  Order collection by a specific attribute.

	*/
	OrderBy string
	/*OrderByDirection
	  Direction which the collection should be ordered by. Possible values are: asc (default), desc.

	*/
	OrderByDirection string
	/*Page
	  Pagination page which should be displayed (default: 1)

	*/
	Page string
	/*ResellerID
	  Filter for messages belonging to a specific reseller

	*/
	ResellerID string
	/*Rows
	  Number of rows in one pagination page (default: 10)

	*/
	Rows string
	/*SubscriberID
	  Filter for messages belonging to a specific subscriber

	*/
	SubscriberID string
	/*TimeGe
	  Filter for messages sent later or equal the specified time stamp.

	*/
	TimeGe string
	/*TimeLe
	  Filter for messages sent earlier or equal the specified time stamp.

	*/
	TimeLe string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get s m sitems params
func (o *GetSMSitemsParams) WithTimeout(timeout time.Duration) *GetSMSitemsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get s m sitems params
func (o *GetSMSitemsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get s m sitems params
func (o *GetSMSitemsParams) WithContext(ctx context.Context) *GetSMSitemsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get s m sitems params
func (o *GetSMSitemsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get s m sitems params
func (o *GetSMSitemsParams) WithHTTPClient(client *http.Client) *GetSMSitemsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get s m sitems params
func (o *GetSMSitemsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCustomerID adds the customerID to the get s m sitems params
func (o *GetSMSitemsParams) WithCustomerID(customerID string) *GetSMSitemsParams {
	o.SetCustomerID(customerID)
	return o
}

// SetCustomerID adds the customerId to the get s m sitems params
func (o *GetSMSitemsParams) SetCustomerID(customerID string) {
	o.CustomerID = customerID
}

// WithDirection adds the direction to the get s m sitems params
func (o *GetSMSitemsParams) WithDirection(direction string) *GetSMSitemsParams {
	o.SetDirection(direction)
	return o
}

// SetDirection adds the direction to the get s m sitems params
func (o *GetSMSitemsParams) SetDirection(direction string) {
	o.Direction = direction
}

// WithOrderBy adds the orderBy to the get s m sitems params
func (o *GetSMSitemsParams) WithOrderBy(orderBy string) *GetSMSitemsParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the get s m sitems params
func (o *GetSMSitemsParams) SetOrderBy(orderBy string) {
	o.OrderBy = orderBy
}

// WithOrderByDirection adds the orderByDirection to the get s m sitems params
func (o *GetSMSitemsParams) WithOrderByDirection(orderByDirection string) *GetSMSitemsParams {
	o.SetOrderByDirection(orderByDirection)
	return o
}

// SetOrderByDirection adds the orderByDirection to the get s m sitems params
func (o *GetSMSitemsParams) SetOrderByDirection(orderByDirection string) {
	o.OrderByDirection = orderByDirection
}

// WithPage adds the page to the get s m sitems params
func (o *GetSMSitemsParams) WithPage(page string) *GetSMSitemsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get s m sitems params
func (o *GetSMSitemsParams) SetPage(page string) {
	o.Page = page
}

// WithResellerID adds the resellerID to the get s m sitems params
func (o *GetSMSitemsParams) WithResellerID(resellerID string) *GetSMSitemsParams {
	o.SetResellerID(resellerID)
	return o
}

// SetResellerID adds the resellerId to the get s m sitems params
func (o *GetSMSitemsParams) SetResellerID(resellerID string) {
	o.ResellerID = resellerID
}

// WithRows adds the rows to the get s m sitems params
func (o *GetSMSitemsParams) WithRows(rows string) *GetSMSitemsParams {
	o.SetRows(rows)
	return o
}

// SetRows adds the rows to the get s m sitems params
func (o *GetSMSitemsParams) SetRows(rows string) {
	o.Rows = rows
}

// WithSubscriberID adds the subscriberID to the get s m sitems params
func (o *GetSMSitemsParams) WithSubscriberID(subscriberID string) *GetSMSitemsParams {
	o.SetSubscriberID(subscriberID)
	return o
}

// SetSubscriberID adds the subscriberId to the get s m sitems params
func (o *GetSMSitemsParams) SetSubscriberID(subscriberID string) {
	o.SubscriberID = subscriberID
}

// WithTimeGe adds the timeGe to the get s m sitems params
func (o *GetSMSitemsParams) WithTimeGe(timeGe string) *GetSMSitemsParams {
	o.SetTimeGe(timeGe)
	return o
}

// SetTimeGe adds the timeGe to the get s m sitems params
func (o *GetSMSitemsParams) SetTimeGe(timeGe string) {
	o.TimeGe = timeGe
}

// WithTimeLe adds the timeLe to the get s m sitems params
func (o *GetSMSitemsParams) WithTimeLe(timeLe string) *GetSMSitemsParams {
	o.SetTimeLe(timeLe)
	return o
}

// SetTimeLe adds the timeLe to the get s m sitems params
func (o *GetSMSitemsParams) SetTimeLe(timeLe string) {
	o.TimeLe = timeLe
}

// WriteToRequest writes these params to a swagger request
func (o *GetSMSitemsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param customer_id
	qrCustomerID := o.CustomerID
	qCustomerID := qrCustomerID
	if qCustomerID != "" {
		if err := r.SetQueryParam("customer_id", qCustomerID); err != nil {
			return err
		}
	}

	// query param direction
	qrDirection := o.Direction
	qDirection := qrDirection
	if qDirection != "" {
		if err := r.SetQueryParam("direction", qDirection); err != nil {
			return err
		}
	}

	// query param order_by
	qrOrderBy := o.OrderBy
	qOrderBy := qrOrderBy
	if qOrderBy != "" {
		if err := r.SetQueryParam("order_by", qOrderBy); err != nil {
			return err
		}
	}

	// query param order_by_direction
	qrOrderByDirection := o.OrderByDirection
	qOrderByDirection := qrOrderByDirection
	if qOrderByDirection != "" {
		if err := r.SetQueryParam("order_by_direction", qOrderByDirection); err != nil {
			return err
		}
	}

	// query param page
	qrPage := o.Page
	qPage := qrPage
	if qPage != "" {
		if err := r.SetQueryParam("page", qPage); err != nil {
			return err
		}
	}

	// query param reseller_id
	qrResellerID := o.ResellerID
	qResellerID := qrResellerID
	if qResellerID != "" {
		if err := r.SetQueryParam("reseller_id", qResellerID); err != nil {
			return err
		}
	}

	// query param rows
	qrRows := o.Rows
	qRows := qrRows
	if qRows != "" {
		if err := r.SetQueryParam("rows", qRows); err != nil {
			return err
		}
	}

	// query param subscriber_id
	qrSubscriberID := o.SubscriberID
	qSubscriberID := qrSubscriberID
	if qSubscriberID != "" {
		if err := r.SetQueryParam("subscriber_id", qSubscriberID); err != nil {
			return err
		}
	}

	// query param time_ge
	qrTimeGe := o.TimeGe
	qTimeGe := qrTimeGe
	if qTimeGe != "" {
		if err := r.SetQueryParam("time_ge", qTimeGe); err != nil {
			return err
		}
	}

	// query param time_le
	qrTimeLe := o.TimeLe
	qTimeLe := qrTimeLe
	if qTimeLe != "" {
		if err := r.SetQueryParam("time_le", qTimeLe); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
