// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Line Line
// swagger:model Line
type Line struct {

	// key num
	// Required: true
	KeyNum *string `json:"key_num"`

	// linerange
	// Required: true
	Linerange *string `json:"linerange"`

	// subscriber id
	// Required: true
	SubscriberID *string `json:"subscriber_id"`

	// type
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this line
func (m *Line) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKeyNum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinerange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriberID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Line) validateKeyNum(formats strfmt.Registry) error {

	if err := validate.Required("key_num", "body", m.KeyNum); err != nil {
		return err
	}

	return nil
}

func (m *Line) validateLinerange(formats strfmt.Registry) error {

	if err := validate.Required("linerange", "body", m.Linerange); err != nil {
		return err
	}

	return nil
}

func (m *Line) validateSubscriberID(formats strfmt.Registry) error {

	if err := validate.Required("subscriber_id", "body", m.SubscriberID); err != nil {
		return err
	}

	return nil
}

func (m *Line) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Line) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Line) UnmarshalBinary(b []byte) error {
	var res Line
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
