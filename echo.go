// Package NGCPAPI provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package NGCPAPI

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/pkg/errors"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// Acl defines model for Acl.
type Acl struct {
	Destination  string `json:"destination"`
	FromEmail    string `json:"from_email"`
	ReceivedFrom string `json:"received_from"`
	UseRegex     bool   `json:"use_regex"`
}

// Acl2 defines model for Acl2.
type Acl2 struct {
	Destination  string `json:"destination"`
	FromEmail    string `json:"from_email"`
	ReceivedFrom string `json:"received_from"`
	UseRegex     string `json:"use_regex"`
}

// Admins defines model for Admins.
type Admins struct {
	BillingData     string `json:"billing_data"`
	CallData        string `json:"call_data"`
	IsActive        string `json:"is_active"`
	IsMaster        string `json:"is_master"`
	IsSuperuser     string `json:"is_superuser"`
	LawfulIntercept string `json:"lawful_intercept"`
	Login           string `json:"login"`
	Password        string `json:"password"`
	ReadOnly        string `json:"read_only"`
	ResellerId      string `json:"reseller_id"`
	ShowPasswords   string `json:"show_passwords"`
}

// AliasNumber defines model for AliasNumber.
type AliasNumber struct {
	Ac string `json:"ac"`
	Cc string `json:"cc"`
	Sn string `json:"sn"`
}

// Anerror defines model for Anerror.
type Anerror struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// App defines model for App.
type App struct {
	ApiKey string `json:"api_key"`
	Domain string `json:"domain"`
	Name   string `json:"name"`
	Secret string `json:"secret"`
}

// Attribute defines model for Attribute.
type Attribute struct {
	AcceptAutoAnswer          string `json:"accept_auto_answer"`
	AdviceOfCharge            string `json:"advice_of_charge"`
	AutoAttendant             string `json:"auto_attendant"`
	BlockInClir               string `json:"block_in_clir"`
	BlockInList               string `json:"block_in_list"`
	BlockInMode               string `json:"block_in_mode"`
	BlockOutList              string `json:"block_out_list"`
	BlockOutMode              string `json:"block_out_mode"`
	BlockOutOverridePin       string `json:"block_out_override_pin"`
	Cfb                       string `json:"cfb"`
	Cfna                      string `json:"cfna"`
	Cfr                       string `json:"cfr"`
	Cfs                       string `json:"cfs"`
	Cft                       string `json:"cft"`
	Cfu                       string `json:"cfu"`
	ClipNoScreening           string `json:"clip_no_screening"`
	Clir                      string `json:"clir"`
	ClirIntrapbx              string `json:"clir_intrapbx"`
	ClirOverride              string `json:"clir_override"`
	CloudPbxCallqueue         string `json:"cloud_pbx_callqueue"`
	CodecsFilter              string `json:"codecs_filter"`
	CodecsList                string `json:"codecs_list"`
	ConferenceMaxParticipants string `json:"conference_max_participants"`
	ConferencePin             string `json:"conference_pin"`
	ContractSoundSet          string `json:"contract_sound_set"`
	CstaClient                string `json:"csta_client"`
	CstaController            string `json:"csta_controller"`
	EnableT38                 string `json:"enable_t38"`
	ExtendedDialingMode       string `json:"extended_dialing_mode"`
	FaxServer                 string `json:"fax_server"`
	Language                  string `json:"language"`
	ManagerSecretary          string `json:"manager_secretary"`
	MaxCallDuration           string `json:"max_call_duration"`
	MaxQueueLength            string `json:"max_queue_length"`
	MusicOnHold               string `json:"music_on_hold"`
	Ncos                      string `json:"ncos"`
	PaiClir                   string `json:"pai_clir"`
	QueueWrapUpTime           string `json:"queue_wrap_up_time"`
	Reminder                  string `json:"reminder"`
	ReroutingCodes            string `json:"rerouting_codes"`
	ReroutingMode             string `json:"rerouting_mode"`
	SecretaryNumbers          string `json:"secretary_numbers"`
	SetMohSendonly            string `json:"set_moh_sendonly"`
	SetMohZeroconnection      string `json:"set_moh_zeroconnection"`
	SoftphoneAutoprov         string `json:"softphone_autoprov"`
	SpeedDial                 string `json:"speed_dial"`
	UpnRewrite                string `json:"upn_rewrite"`
	VoiceMail                 string `json:"voice_mail"`
}

// AutoAttendants defines model for AutoAttendants.
type AutoAttendants struct {
	Slots []Slot `json:"slots"`
}

// BalanceInterval defines model for BalanceInterval.
type BalanceInterval struct {
	BillingProfileId       float32 `json:"billing_profile_id"`
	CashBalance            float32 `json:"cash_balance"`
	CashDebit              float32 `json:"cash_debit"`
	FreeTimeBalance        float32 `json:"free_time_balance"`
	FreeTimeSpent          float32 `json:"free_time_spent"`
	InitialCashBalance     float32 `json:"initial_cash_balance"`
	InitialFreeTimeBalance float32 `json:"initial_free_time_balance"`
	IsActual               bool    `json:"is_actual"`
	NotopupDiscardExpiry   string  `json:"notopup_discard_expiry"`
	Start                  string  `json:"start"`
	Stop                   string  `json:"stop"`
	TimelyTopupCount       float32 `json:"timely_topup_count"`
	TimelyTopupStart       string  `json:"timely_topup_start"`
	TimelyTopupStop        string  `json:"timely_topup_stop"`
	TopupCount             float32 `json:"topup_count"`
	UnderrunLock           string  `json:"underrun_lock"`
	UnderrunProfiles       string  `json:"underrun_profiles"`
}

// BalanceIntervals defines model for BalanceIntervals.
type BalanceIntervals struct {
	BillingProfileId       float32 `json:"billing_profile_id"`
	CashBalance            float32 `json:"cash_balance"`
	CashDebit              float32 `json:"cash_debit"`
	FreeTimeBalance        float32 `json:"free_time_balance"`
	FreeTimeSpent          float32 `json:"free_time_spent"`
	InitialCashBalance     float32 `json:"initial_cash_balance"`
	InitialFreeTimeBalance float32 `json:"initial_free_time_balance"`
	IsActual               bool    `json:"is_actual"`
	NotopupDiscardExpiry   string  `json:"notopup_discard_expiry"`
	Start                  string  `json:"start"`
	Stop                   string  `json:"stop"`
	TimelyTopupCount       float32 `json:"timely_topup_count"`
	TimelyTopupStart       string  `json:"timely_topup_start"`
	TimelyTopupStop        string  `json:"timely_topup_stop"`
	TopupCount             float32 `json:"topup_count"`
	UnderrunLock           string  `json:"underrun_lock"`
	UnderrunProfiles       string  `json:"underrun_profiles"`
}

// BillingFees defines model for BillingFees.
type BillingFees struct {
	BillingProfileId      string `json:"billing_profile_id"`
	BillingZoneId         string `json:"billing_zone_id"`
	Destination           string `json:"destination"`
	Direction             string `json:"direction"`
	MatchMode             string `json:"match_mode"`
	OffpeakFollowInterval string `json:"offpeak_follow_interval"`
	OffpeakFollowRate     string `json:"offpeak_follow_rate"`
	OffpeakInitInterval   string `json:"offpeak_init_interval"`
	OffpeakInitRate       string `json:"offpeak_init_rate"`
	OnpeakFollowInterval  string `json:"onpeak_follow_interval"`
	OnpeakFollowRate      string `json:"onpeak_follow_rate"`
	OnpeakInitInterval    string `json:"onpeak_init_interval"`
	OnpeakInitRate        string `json:"onpeak_init_rate"`
	PurgeExisting         string `json:"purge_existing"`
	Source                string `json:"source"`
	UseFreeTime           string `json:"use_free_time"`
}

// BillingNetworks defines model for BillingNetworks.
type BillingNetworks struct {
	Blocks      []Block `json:"blocks"`
	Description string  `json:"description"`
	Name        string  `json:"name"`
	ResellerId  string  `json:"reseller_id"`
}

// BillingNetworks2 defines model for BillingNetworks2.
type BillingNetworks2 struct {
	Blocks      []Block8 `json:"blocks"`
	Description string   `json:"description"`
	Name        string   `json:"name"`
	ResellerId  float32  `json:"reseller_id"`
}

// BillingProfiles defines model for BillingProfiles.
type BillingProfiles struct {
	AdviceOfCharge        string            `json:"advice_of_charge"`
	Currency              string            `json:"currency"`
	FraudDailyLimit       string            `json:"fraud_daily_limit"`
	FraudDailyLock        string            `json:"fraud_daily_lock"`
	FraudDailyNotify      string            `json:"fraud_daily_notify"`
	FraudIntervalLimit    string            `json:"fraud_interval_limit"`
	FraudIntervalLock     string            `json:"fraud_interval_lock"`
	FraudIntervalNotify   string            `json:"fraud_interval_notify"`
	FraudUseResellerRates string            `json:"fraud_use_reseller_rates"`
	Handle                string            `json:"handle"`
	IntervalCharge        string            `json:"interval_charge"`
	IntervalFreeCash      string            `json:"interval_free_cash"`
	IntervalFreeTime      string            `json:"interval_free_time"`
	Name                  string            `json:"name"`
	PeaktimeSpecial       []PeaktimeSpecial `json:"peaktime_special"`
	PeaktimeWeekdays      []PeaktimeWeekday `json:"peaktime_weekdays"`
	Prepaid               string            `json:"prepaid"`
	PrepaidLibrary        string            `json:"prepaid_library"`
	ResellerId            string            `json:"reseller_id"`
}

// BillingProfiles2 defines model for BillingProfiles2.
type BillingProfiles2 struct {
	AdviceOfCharge        bool               `json:"advice_of_charge"`
	Currency              string             `json:"currency"`
	FraudDailyLimit       float32            `json:"fraud_daily_limit"`
	FraudDailyLock        string             `json:"fraud_daily_lock"`
	FraudDailyNotify      string             `json:"fraud_daily_notify"`
	FraudIntervalLimit    float32            `json:"fraud_interval_limit"`
	FraudIntervalLock     string             `json:"fraud_interval_lock"`
	FraudIntervalNotify   string             `json:"fraud_interval_notify"`
	FraudUseResellerRates bool               `json:"fraud_use_reseller_rates"`
	Handle                string             `json:"handle"`
	IntervalCharge        float32            `json:"interval_charge"`
	IntervalFreeCash      float32            `json:"interval_free_cash"`
	IntervalFreeTime      float32            `json:"interval_free_time"`
	Name                  string             `json:"name"`
	PeaktimeSpecial       []PeaktimeSpecial  `json:"peaktime_special"`
	PeaktimeWeekdays      []PeaktimeWeekday3 `json:"peaktime_weekdays"`
	Prepaid               bool               `json:"prepaid"`
	PrepaidLibrary        string             `json:"prepaid_library"`
	ResellerId            float32            `json:"reseller_id"`
}

// BillingProfiles3 defines model for BillingProfiles3.
type BillingProfiles3 struct {
	ProfileId string `json:"profile_id"`
	Start     string `json:"start"`
	Stop      string `json:"stop"`
}

// BillingProfiles8 defines model for BillingProfiles8.
type BillingProfiles8 struct {
	NetworkId string `json:"network_id"`
	ProfileId string `json:"profile_id"`
	Start     string `json:"start"`
	Stop      string `json:"stop"`
}

// BillingZones defines model for BillingZones.
type BillingZones struct {
	BillingProfileId string `json:"billing_profile_id"`
	Detail           string `json:"detail"`
	Zone             string `json:"zone"`
}

// Block defines model for Block.
type Block struct {
	Ip   string `json:"ip"`
	Mask string `json:"mask"`
}

// Block8 defines model for Block8.
type Block8 struct {
	Ip   string  `json:"ip"`
	Mask float32 `json:"mask"`
}

// Bnumber defines model for Bnumber.
type Bnumber struct {
	Bnumber string `json:"bnumber"`
}

// CCMapEntries defines model for CCMapEntries.
type CCMapEntries struct {
	Mappings []Mapping `json:"mappings"`
}

// CFBNumberSets defines model for CFBNumberSets.
type CFBNumberSets struct {
	Bnumbers     []Bnumber `json:"bnumbers"`
	IsRegex      string    `json:"is_regex"`
	Mode         string    `json:"mode"`
	Name         string    `json:"name"`
	SubscriberId string    `json:"subscriber_id"`
}

// CFBNumberSets1 defines model for CFBNumberSets1.
type CFBNumberSets1 struct {
	Bnumbers     []Bnumber `json:"bnumbers"`
	IsRegex      bool      `json:"is_regex"`
	Mode         string    `json:"mode"`
	Name         string    `json:"name"`
	SubscriberId float32   `json:"subscriber_id"`
}

// CFDestinationSets defines model for CFDestinationSets.
type CFDestinationSets struct {
	Destinations []Destination `json:"destinations"`
	Name         string        `json:"name"`
	SubscriberId string        `json:"subscriber_id"`
}

// CFDestinationSets2 defines model for CFDestinationSets2.
type CFDestinationSets2 struct {
	Destinations []Destination24 `json:"destinations"`
	Name         string          `json:"name"`
	SubscriberId float32         `json:"subscriber_id"`
}

// CFMappings defines model for CFMappings.
type CFMappings struct {
	Cfb            []Cfb5  `json:"cfb"`
	Cfna           []Cfna5 `json:"cfna"`
	Cfr            []Cfr5  `json:"cfr"`
	Cfs            []Cfs5  `json:"cfs"`
	Cft            []Cft5  `json:"cft"`
	CftRingtimeout float32 `json:"cft_ringtimeout"`
	Cfu            []Cfu5  `json:"cfu"`
}

// CFSourceSets defines model for CFSourceSets.
type CFSourceSets struct {
	IsRegex      string   `json:"is_regex"`
	Mode         string   `json:"mode"`
	Name         string   `json:"name"`
	Sources      []Source `json:"sources"`
	SubscriberId string   `json:"subscriber_id"`
}

// CFTimeSets defines model for CFTimeSets.
type CFTimeSets struct {
	Name         string `json:"name"`
	SubscriberId string `json:"subscriber_id"`
	Times        []Time `json:"times"`
}

// Call defines model for Call.
type Call struct {
	CallCode                         string  `json:"call_code"`
	CallId                           string  `json:"call_id"`
	CallStatus                       string  `json:"call_status"`
	CallType                         string  `json:"call_type"`
	DestinationCarrierBillingFeeId   float32 `json:"destination_carrier_billing_fee_id"`
	DestinationCarrierBillingZoneId  float32 `json:"destination_carrier_billing_zone_id"`
	DestinationCarrierCost           float32 `json:"destination_carrier_cost"`
	DestinationCarrierFreeTime       float32 `json:"destination_carrier_free_time"`
	DestinationCustomerBillingFeeId  float32 `json:"destination_customer_billing_fee_id"`
	DestinationCustomerBillingZoneId float32 `json:"destination_customer_billing_zone_id"`
	DestinationCustomerCost          float32 `json:"destination_customer_cost"`
	DestinationCustomerFreeTime      float32 `json:"destination_customer_free_time"`
	DestinationCustomerId            string  `json:"destination_customer_id"`
	DestinationDomain                string  `json:"destination_domain"`
	DestinationDomainIn              string  `json:"destination_domain_in"`
	DestinationExternalContractId    string  `json:"destination_external_contract_id"`
	DestinationExternalSubscriberId  string  `json:"destination_external_subscriber_id"`
	DestinationGpp0                  string  `json:"destination_gpp0"`
	DestinationGpp1                  string  `json:"destination_gpp1"`
	DestinationGpp2                  string  `json:"destination_gpp2"`
	DestinationGpp3                  string  `json:"destination_gpp3"`
	DestinationGpp4                  string  `json:"destination_gpp4"`
	DestinationGpp5                  string  `json:"destination_gpp5"`
	DestinationGpp6                  string  `json:"destination_gpp6"`
	DestinationGpp7                  string  `json:"destination_gpp7"`
	DestinationGpp8                  string  `json:"destination_gpp8"`
	DestinationGpp9                  string  `json:"destination_gpp9"`
	DestinationLnpPrefix             string  `json:"destination_lnp_prefix"`
	DestinationProviderId            string  `json:"destination_provider_id"`
	DestinationResellerBillingFeeId  float32 `json:"destination_reseller_billing_fee_id"`
	DestinationResellerBillingZoneId float32 `json:"destination_reseller_billing_zone_id"`
	DestinationResellerCost          float32 `json:"destination_reseller_cost"`
	DestinationResellerFreeTime      float32 `json:"destination_reseller_free_time"`
	DestinationUser                  string  `json:"destination_user"`
	DestinationUserDialed            string  `json:"destination_user_dialed"`
	DestinationUserId                string  `json:"destination_user_id"`
	DestinationUserIn                string  `json:"destination_user_in"`
	DestinationUserOut               string  `json:"destination_user_out"`
	Duration                         float32 `json:"duration"`
	ExportStatus                     string  `json:"export_status"`
	ExportedAt                       string  `json:"exported_at"`
	InitTime                         string  `json:"init_time"`
	PeerAuthRealm                    string  `json:"peer_auth_realm"`
	PeerAuthUser                     string  `json:"peer_auth_user"`
	RatedAt                          string  `json:"rated_at"`
	RatingStatus                     string  `json:"rating_status"`
	SourceCarrierBillingFeeId        float32 `json:"source_carrier_billing_fee_id"`
	SourceCarrierBillingZoneId       float32 `json:"source_carrier_billing_zone_id"`
	SourceCarrierCost                float32 `json:"source_carrier_cost"`
	SourceCarrierFreeTime            float32 `json:"source_carrier_free_time"`
	SourceCli                        string  `json:"source_cli"`
	SourceClir                       bool    `json:"source_clir"`
	SourceCustomerBillingFeeId       float32 `json:"source_customer_billing_fee_id"`
	SourceCustomerBillingZoneId      float32 `json:"source_customer_billing_zone_id"`
	SourceCustomerCost               float32 `json:"source_customer_cost"`
	SourceCustomerFreeTime           float32 `json:"source_customer_free_time"`
	SourceCustomerId                 string  `json:"source_customer_id"`
	SourceDomain                     string  `json:"source_domain"`
	SourceExternalContractId         string  `json:"source_external_contract_id"`
	SourceExternalSubscriberId       string  `json:"source_external_subscriber_id"`
	SourceGpp0                       string  `json:"source_gpp0"`
	SourceGpp1                       string  `json:"source_gpp1"`
	SourceGpp2                       string  `json:"source_gpp2"`
	SourceGpp3                       string  `json:"source_gpp3"`
	SourceGpp4                       string  `json:"source_gpp4"`
	SourceGpp5                       string  `json:"source_gpp5"`
	SourceGpp6                       string  `json:"source_gpp6"`
	SourceGpp7                       string  `json:"source_gpp7"`
	SourceGpp8                       string  `json:"source_gpp8"`
	SourceGpp9                       string  `json:"source_gpp9"`
	SourceIp                         string  `json:"source_ip"`
	SourceLnpPrefix                  string  `json:"source_lnp_prefix"`
	SourceProviderId                 string  `json:"source_provider_id"`
	SourceResellerBillingFeeId       float32 `json:"source_reseller_billing_fee_id"`
	SourceResellerBillingZoneId      float32 `json:"source_reseller_billing_zone_id"`
	SourceResellerCost               float32 `json:"source_reseller_cost"`
	SourceResellerFreeTime           float32 `json:"source_reseller_free_time"`
	SourceUser                       string  `json:"source_user"`
	SourceUserId                     string  `json:"source_user_id"`
	SourceUserOut                    string  `json:"source_user_out"`
	StartTime                        string  `json:"start_time"`
}

// CallForwards defines model for CallForwards.
type CallForwards struct {
	Cfb  Cfb  `json:"cfb"`
	Cfna Cfna `json:"cfna"`
	Cfr  Cfr  `json:"cfr"`
	Cfs  Cfs  `json:"cfs"`
	Cft  Cft  `json:"cft"`
	Cfu  Cfu  `json:"cfu"`
}

// CallForwards3 defines model for CallForwards3.
type CallForwards3 struct {
	Cfb  Cfb4  `json:"cfb"`
	Cfna Cfna4 `json:"cfna"`
	Cfr  Cfr4  `json:"cfr"`
	Cfs  Cfs4  `json:"cfs"`
	Cft  Cft4  `json:"cft"`
	Cfu  Cfu4  `json:"cfu"`
}

// CallList defines model for CallList.
type CallList struct {
	CallId               string  `json:"call_id"`
	Clir                 string  `json:"clir"`
	CustomerCost         float32 `json:"customer_cost"`
	CustomerFreeTime     float32 `json:"customer_free_time"`
	Direction            string  `json:"direction"`
	Duration             float32 `json:"duration"`
	InitTime             string  `json:"init_time"`
	IntraCustomer        bool    `json:"intra_customer"`
	MosAverage           string  `json:"mos_average"`
	MosAverageJitter     string  `json:"mos_average_jitter"`
	MosAveragePacketloss string  `json:"mos_average_packetloss"`
	MosAverageRoundtrip  string  `json:"mos_average_roundtrip"`
	OtherCli             string  `json:"other_cli"`
	OwnCli               string  `json:"own_cli"`
	RatingStatus         string  `json:"rating_status"`
	StartTime            string  `json:"start_time"`
	Status               string  `json:"status"`
	TotalCustomerCost    float32 `json:"total_customer_cost"`
	Type                 string  `json:"type"`
}

// CallLists defines model for CallLists.
type CallLists struct {
	CallId               string  `json:"call_id"`
	Clir                 string  `json:"clir"`
	CustomerCost         float32 `json:"customer_cost"`
	CustomerFreeTime     float32 `json:"customer_free_time"`
	Direction            string  `json:"direction"`
	Duration             float32 `json:"duration"`
	InitTime             string  `json:"init_time"`
	IntraCustomer        bool    `json:"intra_customer"`
	MosAverage           string  `json:"mos_average"`
	MosAverageJitter     string  `json:"mos_average_jitter"`
	MosAveragePacketloss string  `json:"mos_average_packetloss"`
	MosAverageRoundtrip  string  `json:"mos_average_roundtrip"`
	OtherCli             string  `json:"other_cli"`
	OwnCli               string  `json:"own_cli"`
	RatingStatus         string  `json:"rating_status"`
	StartTime            string  `json:"start_time"`
	Status               string  `json:"status"`
	TotalCustomerCost    float32 `json:"total_customer_cost"`
	Type                 string  `json:"type"`
}

// CallQueue defines model for CallQueue.
type CallQueue struct {
	Queue       []string `json:"queue"`
	QueueLength float32  `json:"queue_length"`
}

// CallQueues defines model for CallQueues.
type CallQueues struct {
	Queue       []string `json:"queue"`
	QueueLength float32  `json:"queue_length"`
}

// CallRecordingFiles defines model for CallRecordingFiles.
type CallRecordingFiles struct {
	Channels    float32 `json:"channels"`
	EndTime     string  `json:"end_time"`
	Format      string  `json:"format"`
	RecordingId float32 `json:"recording_id"`
	SampleRate  float32 `json:"sample_rate"`
	StartTime   string  `json:"start_time"`
	Type        string  `json:"type"`
}

// CallRecordingStreams defines model for CallRecordingStreams.
type CallRecordingStreams struct {
	Channels    float32 `json:"channels"`
	EndTime     string  `json:"end_time"`
	Format      string  `json:"format"`
	RecordingId float32 `json:"recording_id"`
	SampleRate  float32 `json:"sample_rate"`
	StartTime   string  `json:"start_time"`
	Type        string  `json:"type"`
}

// CallRecordings defines model for CallRecordings.
type CallRecordings struct {
	Callid    string `json:"callid"`
	EndTime   string `json:"end_time"`
	StartTime string `json:"start_time"`
	Status    string `json:"status"`
}

// Calls defines model for Calls.
type Calls struct {
	CallCode                         string  `json:"call_code"`
	CallId                           string  `json:"call_id"`
	CallStatus                       string  `json:"call_status"`
	CallType                         string  `json:"call_type"`
	DestinationCarrierBillingFeeId   float32 `json:"destination_carrier_billing_fee_id"`
	DestinationCarrierBillingZoneId  float32 `json:"destination_carrier_billing_zone_id"`
	DestinationCarrierCost           float32 `json:"destination_carrier_cost"`
	DestinationCarrierFreeTime       float32 `json:"destination_carrier_free_time"`
	DestinationCustomerBillingFeeId  float32 `json:"destination_customer_billing_fee_id"`
	DestinationCustomerBillingZoneId float32 `json:"destination_customer_billing_zone_id"`
	DestinationCustomerCost          float32 `json:"destination_customer_cost"`
	DestinationCustomerFreeTime      float32 `json:"destination_customer_free_time"`
	DestinationCustomerId            string  `json:"destination_customer_id"`
	DestinationDomain                string  `json:"destination_domain"`
	DestinationDomainIn              string  `json:"destination_domain_in"`
	DestinationExternalContractId    string  `json:"destination_external_contract_id"`
	DestinationExternalSubscriberId  string  `json:"destination_external_subscriber_id"`
	DestinationGpp0                  string  `json:"destination_gpp0"`
	DestinationGpp1                  string  `json:"destination_gpp1"`
	DestinationGpp2                  string  `json:"destination_gpp2"`
	DestinationGpp3                  string  `json:"destination_gpp3"`
	DestinationGpp4                  string  `json:"destination_gpp4"`
	DestinationGpp5                  string  `json:"destination_gpp5"`
	DestinationGpp6                  string  `json:"destination_gpp6"`
	DestinationGpp7                  string  `json:"destination_gpp7"`
	DestinationGpp8                  string  `json:"destination_gpp8"`
	DestinationGpp9                  string  `json:"destination_gpp9"`
	DestinationLnpPrefix             string  `json:"destination_lnp_prefix"`
	DestinationProviderId            string  `json:"destination_provider_id"`
	DestinationResellerBillingFeeId  float32 `json:"destination_reseller_billing_fee_id"`
	DestinationResellerBillingZoneId float32 `json:"destination_reseller_billing_zone_id"`
	DestinationResellerCost          float32 `json:"destination_reseller_cost"`
	DestinationResellerFreeTime      float32 `json:"destination_reseller_free_time"`
	DestinationUser                  string  `json:"destination_user"`
	DestinationUserDialed            string  `json:"destination_user_dialed"`
	DestinationUserId                string  `json:"destination_user_id"`
	DestinationUserIn                string  `json:"destination_user_in"`
	DestinationUserOut               string  `json:"destination_user_out"`
	Duration                         float32 `json:"duration"`
	ExportStatus                     string  `json:"export_status"`
	ExportedAt                       string  `json:"exported_at"`
	InitTime                         string  `json:"init_time"`
	PeerAuthRealm                    string  `json:"peer_auth_realm"`
	PeerAuthUser                     string  `json:"peer_auth_user"`
	RatedAt                          string  `json:"rated_at"`
	RatingStatus                     string  `json:"rating_status"`
	SourceCarrierBillingFeeId        float32 `json:"source_carrier_billing_fee_id"`
	SourceCarrierBillingZoneId       float32 `json:"source_carrier_billing_zone_id"`
	SourceCarrierCost                float32 `json:"source_carrier_cost"`
	SourceCarrierFreeTime            float32 `json:"source_carrier_free_time"`
	SourceCli                        string  `json:"source_cli"`
	SourceClir                       bool    `json:"source_clir"`
	SourceCustomerBillingFeeId       float32 `json:"source_customer_billing_fee_id"`
	SourceCustomerBillingZoneId      float32 `json:"source_customer_billing_zone_id"`
	SourceCustomerCost               float32 `json:"source_customer_cost"`
	SourceCustomerFreeTime           float32 `json:"source_customer_free_time"`
	SourceCustomerId                 string  `json:"source_customer_id"`
	SourceDomain                     string  `json:"source_domain"`
	SourceExternalContractId         string  `json:"source_external_contract_id"`
	SourceExternalSubscriberId       string  `json:"source_external_subscriber_id"`
	SourceGpp0                       string  `json:"source_gpp0"`
	SourceGpp1                       string  `json:"source_gpp1"`
	SourceGpp2                       string  `json:"source_gpp2"`
	SourceGpp3                       string  `json:"source_gpp3"`
	SourceGpp4                       string  `json:"source_gpp4"`
	SourceGpp5                       string  `json:"source_gpp5"`
	SourceGpp6                       string  `json:"source_gpp6"`
	SourceGpp7                       string  `json:"source_gpp7"`
	SourceGpp8                       string  `json:"source_gpp8"`
	SourceGpp9                       string  `json:"source_gpp9"`
	SourceIp                         string  `json:"source_ip"`
	SourceLnpPrefix                  string  `json:"source_lnp_prefix"`
	SourceProviderId                 string  `json:"source_provider_id"`
	SourceResellerBillingFeeId       float32 `json:"source_reseller_billing_fee_id"`
	SourceResellerBillingZoneId      float32 `json:"source_reseller_billing_zone_id"`
	SourceResellerCost               float32 `json:"source_reseller_cost"`
	SourceResellerFreeTime           float32 `json:"source_reseller_free_time"`
	SourceUser                       string  `json:"source_user"`
	SourceUserId                     string  `json:"source_user_id"`
	SourceUserOut                    string  `json:"source_user_out"`
	StartTime                        string  `json:"start_time"`
}

// Capabilities defines model for Capabilities.
type Capabilities struct {
	Enabled bool    `json:"enabled"`
	Id      float32 `json:"id"`
	Name    string  `json:"name"`
}

// Capability defines model for Capability.
type Capability struct {
	Enabled bool    `json:"enabled"`
	Id      float32 `json:"id"`
	Name    string  `json:"name"`
}

// Cfb defines model for Cfb.
type Cfb struct {
	Bnumbers        []Bnumber     `json:"bnumbers"`
	BnumbersIsRegex string        `json:"bnumbers_is_regex"`
	BnumbersMode    string        `json:"bnumbers_mode"`
	Destinations    []Destination `json:"destinations"`
	Sources         []Source      `json:"sources"`
	SourcesIsRegex  string        `json:"sources_is_regex"`
	SourcesMode     string        `json:"sources_mode"`
	Times           []Time        `json:"times"`
}

// Cfb4 defines model for Cfb4.
type Cfb4 struct {
	Bnumbers        []Bnumber       `json:"bnumbers"`
	BnumbersIsRegex bool            `json:"bnumbers_is_regex"`
	BnumbersMode    string          `json:"bnumbers_mode"`
	Destinations    []Destination24 `json:"destinations"`
	Sources         []Source        `json:"sources"`
	SourcesIsRegex  bool            `json:"sources_is_regex"`
	SourcesMode     string          `json:"sources_mode"`
	Times           []Time          `json:"times"`
}

// Cfb5 defines model for Cfb5.
type Cfb5 struct {
	Bnumberset       string  `json:"bnumberset"`
	BnumbersetId     float32 `json:"bnumberset_id"`
	Destinationset   string  `json:"destinationset"`
	DestinationsetId float32 `json:"destinationset_id"`
	Sourceset        string  `json:"sourceset"`
	SourcesetId      float32 `json:"sourceset_id"`
	Timeset          string  `json:"timeset"`
	TimesetId        float32 `json:"timeset_id"`
}

// Cfna defines model for Cfna.
type Cfna struct {
	Bnumbers        []Bnumber     `json:"bnumbers"`
	BnumbersIsRegex string        `json:"bnumbers_is_regex"`
	BnumbersMode    string        `json:"bnumbers_mode"`
	Destinations    []Destination `json:"destinations"`
	Sources         []Source      `json:"sources"`
	SourcesIsRegex  string        `json:"sources_is_regex"`
	SourcesMode     string        `json:"sources_mode"`
	Times           []Time        `json:"times"`
}

// Cfna4 defines model for Cfna4.
type Cfna4 struct {
	Bnumbers        []Bnumber       `json:"bnumbers"`
	BnumbersIsRegex bool            `json:"bnumbers_is_regex"`
	BnumbersMode    string          `json:"bnumbers_mode"`
	Destinations    []Destination24 `json:"destinations"`
	Sources         []Source        `json:"sources"`
	SourcesIsRegex  bool            `json:"sources_is_regex"`
	SourcesMode     string          `json:"sources_mode"`
	Times           []Time          `json:"times"`
}

// Cfna5 defines model for Cfna5.
type Cfna5 struct {
	Bnumberset       string  `json:"bnumberset"`
	BnumbersetId     float32 `json:"bnumberset_id"`
	Destinationset   string  `json:"destinationset"`
	DestinationsetId float32 `json:"destinationset_id"`
	Sourceset        string  `json:"sourceset"`
	SourcesetId      float32 `json:"sourceset_id"`
	Timeset          string  `json:"timeset"`
	TimesetId        float32 `json:"timeset_id"`
}

// Cfr defines model for Cfr.
type Cfr struct {
	Bnumbers        []Bnumber     `json:"bnumbers"`
	BnumbersIsRegex string        `json:"bnumbers_is_regex"`
	BnumbersMode    string        `json:"bnumbers_mode"`
	Destinations    []Destination `json:"destinations"`
	Sources         []Source      `json:"sources"`
	SourcesIsRegex  string        `json:"sources_is_regex"`
	SourcesMode     string        `json:"sources_mode"`
	Times           []Time        `json:"times"`
}

// Cfr4 defines model for Cfr4.
type Cfr4 struct {
	Bnumbers        []Bnumber       `json:"bnumbers"`
	BnumbersIsRegex bool            `json:"bnumbers_is_regex"`
	BnumbersMode    string          `json:"bnumbers_mode"`
	Destinations    []Destination24 `json:"destinations"`
	Sources         []Source        `json:"sources"`
	SourcesIsRegex  bool            `json:"sources_is_regex"`
	SourcesMode     string          `json:"sources_mode"`
	Times           []Time          `json:"times"`
}

// Cfr5 defines model for Cfr5.
type Cfr5 struct {
	Bnumberset       string  `json:"bnumberset"`
	BnumbersetId     float32 `json:"bnumberset_id"`
	Destinationset   string  `json:"destinationset"`
	DestinationsetId float32 `json:"destinationset_id"`
	Sourceset        string  `json:"sourceset"`
	SourcesetId      float32 `json:"sourceset_id"`
	Timeset          string  `json:"timeset"`
	TimesetId        float32 `json:"timeset_id"`
}

// Cfs defines model for Cfs.
type Cfs struct {
	Bnumbers        []Bnumber     `json:"bnumbers"`
	BnumbersIsRegex string        `json:"bnumbers_is_regex"`
	BnumbersMode    string        `json:"bnumbers_mode"`
	Destinations    []Destination `json:"destinations"`
	Sources         []Source      `json:"sources"`
	SourcesIsRegex  string        `json:"sources_is_regex"`
	SourcesMode     string        `json:"sources_mode"`
	Times           []Time        `json:"times"`
}

// Cfs4 defines model for Cfs4.
type Cfs4 struct {
	Bnumbers        []Bnumber       `json:"bnumbers"`
	BnumbersIsRegex bool            `json:"bnumbers_is_regex"`
	BnumbersMode    string          `json:"bnumbers_mode"`
	Destinations    []Destination24 `json:"destinations"`
	Sources         []Source        `json:"sources"`
	SourcesIsRegex  bool            `json:"sources_is_regex"`
	SourcesMode     string          `json:"sources_mode"`
	Times           []Time          `json:"times"`
}

// Cfs5 defines model for Cfs5.
type Cfs5 struct {
	Bnumberset       string  `json:"bnumberset"`
	BnumbersetId     float32 `json:"bnumberset_id"`
	Destinationset   string  `json:"destinationset"`
	DestinationsetId float32 `json:"destinationset_id"`
	Sourceset        string  `json:"sourceset"`
	SourcesetId      float32 `json:"sourceset_id"`
	Timeset          string  `json:"timeset"`
	TimesetId        float32 `json:"timeset_id"`
}

// Cft defines model for Cft.
type Cft struct {
	Bnumbers        []Bnumber     `json:"bnumbers"`
	BnumbersIsRegex string        `json:"bnumbers_is_regex"`
	BnumbersMode    string        `json:"bnumbers_mode"`
	Destinations    []Destination `json:"destinations"`
	Ringtimeout     string        `json:"ringtimeout"`
	Sources         []Source      `json:"sources"`
	SourcesIsRegex  string        `json:"sources_is_regex"`
	SourcesMode     string        `json:"sources_mode"`
	Times           []Time        `json:"times"`
}

// Cft4 defines model for Cft4.
type Cft4 struct {
	Bnumbers        []Bnumber       `json:"bnumbers"`
	BnumbersIsRegex bool            `json:"bnumbers_is_regex"`
	BnumbersMode    string          `json:"bnumbers_mode"`
	Destinations    []Destination24 `json:"destinations"`
	Ringtimeout     float32         `json:"ringtimeout"`
	Sources         []Source        `json:"sources"`
	SourcesIsRegex  bool            `json:"sources_is_regex"`
	SourcesMode     string          `json:"sources_mode"`
	Times           []Time          `json:"times"`
}

// Cft5 defines model for Cft5.
type Cft5 struct {
	Bnumberset       string  `json:"bnumberset"`
	BnumbersetId     float32 `json:"bnumberset_id"`
	Destinationset   string  `json:"destinationset"`
	DestinationsetId float32 `json:"destinationset_id"`
	Sourceset        string  `json:"sourceset"`
	SourcesetId      float32 `json:"sourceset_id"`
	Timeset          string  `json:"timeset"`
	TimesetId        float32 `json:"timeset_id"`
}

// Cfu defines model for Cfu.
type Cfu struct {
	Bnumbers        []Bnumber     `json:"bnumbers"`
	BnumbersIsRegex string        `json:"bnumbers_is_regex"`
	BnumbersMode    string        `json:"bnumbers_mode"`
	Destinations    []Destination `json:"destinations"`
	Sources         []Source      `json:"sources"`
	SourcesIsRegex  string        `json:"sources_is_regex"`
	SourcesMode     string        `json:"sources_mode"`
	Times           []Time        `json:"times"`
}

// Cfu4 defines model for Cfu4.
type Cfu4 struct {
	Bnumbers        []Bnumber       `json:"bnumbers"`
	BnumbersIsRegex bool            `json:"bnumbers_is_regex"`
	BnumbersMode    string          `json:"bnumbers_mode"`
	Destinations    []Destination24 `json:"destinations"`
	Sources         []Source        `json:"sources"`
	SourcesIsRegex  bool            `json:"sources_is_regex"`
	SourcesMode     string          `json:"sources_mode"`
	Times           []Time          `json:"times"`
}

// Cfu5 defines model for Cfu5.
type Cfu5 struct {
	Bnumberset       string  `json:"bnumberset"`
	BnumbersetId     float32 `json:"bnumberset_id"`
	Destinationset   string  `json:"destinationset"`
	DestinationsetId float32 `json:"destinationset_id"`
	Sourceset        string  `json:"sourceset"`
	SourcesetId      float32 `json:"sourceset_id"`
	Timeset          string  `json:"timeset"`
	TimesetId        float32 `json:"timeset_id"`
}

// Contracts defines model for Contracts.
type Contracts struct {
	BillingProfileDefinition string             `json:"billing_profile_definition"`
	BillingProfileId         string             `json:"billing_profile_id"`
	BillingProfiles          []BillingProfiles3 `json:"billing_profiles"`
	ContactId                string             `json:"contact_id"`
	ExternalId               string             `json:"external_id"`
	Status                   string             `json:"status"`
	Type                     string             `json:"type"`
}

// Conversation defines model for Conversation.
type Conversation struct {
	CallId                string  `json:"call_id"`
	CallType              string  `json:"call_type"`
	Callee                string  `json:"callee"`
	Caller                string  `json:"caller"`
	Context               string  `json:"context"`
	Currency              string  `json:"currency"`
	CustomerCost          float32 `json:"customer_cost"`
	Direction             string  `json:"direction"`
	Duration              string  `json:"duration"`
	Filename              string  `json:"filename"`
	Folder                string  `json:"folder"`
	Id                    float32 `json:"id"`
	Pages                 float32 `json:"pages"`
	RatingStatus          string  `json:"rating_status"`
	StartTime             string  `json:"start_time"`
	Status                string  `json:"status"`
	SubscriberId          float32 `json:"subscriber_id"`
	TotalCustomerCost     float32 `json:"total_customer_cost"`
	Type                  string  `json:"type"`
	VoicemailSubscriberId float32 `json:"voicemail_subscriber_id"`
}

// Conversations defines model for Conversations.
type Conversations struct {
	CallId                string  `json:"call_id"`
	CallType              string  `json:"call_type"`
	Callee                string  `json:"callee"`
	Caller                string  `json:"caller"`
	Context               string  `json:"context"`
	Currency              string  `json:"currency"`
	CustomerCost          float32 `json:"customer_cost"`
	Direction             string  `json:"direction"`
	Duration              string  `json:"duration"`
	Filename              string  `json:"filename"`
	Folder                string  `json:"folder"`
	Id                    float32 `json:"id"`
	Pages                 float32 `json:"pages"`
	RatingStatus          string  `json:"rating_status"`
	StartTime             string  `json:"start_time"`
	Status                string  `json:"status"`
	SubscriberId          float32 `json:"subscriber_id"`
	TotalCustomerCost     float32 `json:"total_customer_cost"`
	Type                  string  `json:"type"`
	VoicemailSubscriberId float32 `json:"voicemail_subscriber_id"`
}

// CreateanewAdminCertRequest defines model for CreateanewAdminCertRequest.
type CreateanewAdminCertRequest struct {
	Login string `json:"login"`
}

// CreateanewAdminRequest defines model for CreateanewAdminRequest.
type CreateanewAdminRequest struct {
	BillingData     string `json:"billing_data"`
	CallData        string `json:"call_data"`
	IsActive        string `json:"is_active"`
	IsMaster        string `json:"is_master"`
	IsSuperuser     string `json:"is_superuser"`
	LawfulIntercept string `json:"lawful_intercept"`
	Login           string `json:"login"`
	Password        string `json:"password"`
	ReadOnly        string `json:"read_only"`
	ResellerId      string `json:"reseller_id"`
	ShowPasswords   string `json:"show_passwords"`
}

// CreateanewApplyRewriteRequest defines model for CreateanewApplyRewriteRequest.
type CreateanewApplyRewriteRequest struct {
	Direction    string `json:"direction"`
	Number       string `json:"number"`
	SubscriberId string `json:"subscriber_id"`
}

// CreateanewBillingFeeRequest defines model for CreateanewBillingFeeRequest.
type CreateanewBillingFeeRequest struct {
	BillingProfileId      string `json:"billing_profile_id"`
	BillingZoneId         string `json:"billing_zone_id"`
	Destination           string `json:"destination"`
	Direction             string `json:"direction"`
	MatchMode             string `json:"match_mode"`
	OffpeakFollowInterval string `json:"offpeak_follow_interval"`
	OffpeakFollowRate     string `json:"offpeak_follow_rate"`
	OffpeakInitInterval   string `json:"offpeak_init_interval"`
	OffpeakInitRate       string `json:"offpeak_init_rate"`
	OnpeakFollowInterval  string `json:"onpeak_follow_interval"`
	OnpeakFollowRate      string `json:"onpeak_follow_rate"`
	OnpeakInitInterval    string `json:"onpeak_init_interval"`
	OnpeakInitRate        string `json:"onpeak_init_rate"`
	PurgeExisting         string `json:"purge_existing"`
	Source                string `json:"source"`
	UseFreeTime           string `json:"use_free_time"`
}

// CreateanewBillingNetworkRequest defines model for CreateanewBillingNetworkRequest.
type CreateanewBillingNetworkRequest struct {
	Blocks      []Block `json:"blocks"`
	Description string  `json:"description"`
	Name        string  `json:"name"`
	ResellerId  string  `json:"reseller_id"`
}

// CreateanewBillingProfileRequest defines model for CreateanewBillingProfileRequest.
type CreateanewBillingProfileRequest struct {
	AdviceOfCharge        string            `json:"advice_of_charge"`
	Currency              string            `json:"currency"`
	FraudDailyLimit       string            `json:"fraud_daily_limit"`
	FraudDailyLock        string            `json:"fraud_daily_lock"`
	FraudDailyNotify      string            `json:"fraud_daily_notify"`
	FraudIntervalLimit    string            `json:"fraud_interval_limit"`
	FraudIntervalLock     string            `json:"fraud_interval_lock"`
	FraudIntervalNotify   string            `json:"fraud_interval_notify"`
	FraudUseResellerRates string            `json:"fraud_use_reseller_rates"`
	Handle                string            `json:"handle"`
	IntervalCharge        string            `json:"interval_charge"`
	IntervalFreeCash      string            `json:"interval_free_cash"`
	IntervalFreeTime      string            `json:"interval_free_time"`
	Name                  string            `json:"name"`
	PeaktimeSpecial       []PeaktimeSpecial `json:"peaktime_special"`
	PeaktimeWeekdays      []PeaktimeWeekday `json:"peaktime_weekdays"`
	Prepaid               string            `json:"prepaid"`
	PrepaidLibrary        string            `json:"prepaid_library"`
	ResellerId            string            `json:"reseller_id"`
}

// CreateanewBillingZoneRequest defines model for CreateanewBillingZoneRequest.
type CreateanewBillingZoneRequest struct {
	BillingProfileId string `json:"billing_profile_id"`
	Detail           string `json:"detail"`
	Zone             string `json:"zone"`
}

// CreateanewCFBNumberSetRequest defines model for CreateanewCFBNumberSetRequest.
type CreateanewCFBNumberSetRequest struct {
	Bnumbers     []Bnumber `json:"bnumbers"`
	IsRegex      string    `json:"is_regex"`
	Mode         string    `json:"mode"`
	Name         string    `json:"name"`
	SubscriberId string    `json:"subscriber_id"`
}

// CreateanewCFDestinationSetRequest defines model for CreateanewCFDestinationSetRequest.
type CreateanewCFDestinationSetRequest struct {
	Destinations []Destination `json:"destinations"`
	Name         string        `json:"name"`
	SubscriberId string        `json:"subscriber_id"`
}

// CreateanewCFSourceSetRequest defines model for CreateanewCFSourceSetRequest.
type CreateanewCFSourceSetRequest struct {
	IsRegex      string   `json:"is_regex"`
	Mode         string   `json:"mode"`
	Name         string   `json:"name"`
	Sources      []Source `json:"sources"`
	SubscriberId string   `json:"subscriber_id"`
}

// CreateanewCFTimeSetRequest defines model for CreateanewCFTimeSetRequest.
type CreateanewCFTimeSetRequest struct {
	Name         string `json:"name"`
	SubscriberId string `json:"subscriber_id"`
	Times        []Time `json:"times"`
}

// CreateanewCallControlRequest defines model for CreateanewCallControlRequest.
type CreateanewCallControlRequest struct {
	Destination  string `json:"destination"`
	SubscriberId string `json:"subscriber_id"`
}

// CreateanewContractRequest defines model for CreateanewContractRequest.
type CreateanewContractRequest struct {
	BillingProfileDefinition string             `json:"billing_profile_definition"`
	BillingProfileId         string             `json:"billing_profile_id"`
	BillingProfiles          []BillingProfiles3 `json:"billing_profiles"`
	ContactId                string             `json:"contact_id"`
	ExternalId               string             `json:"external_id"`
	Status                   string             `json:"status"`
	Type                     string             `json:"type"`
}

// CreateanewCustomerContactRequest defines model for CreateanewCustomerContactRequest.
type CreateanewCustomerContactRequest struct {
	Bankname     string `json:"bankname"`
	Bic          string `json:"bic"`
	City         string `json:"city"`
	Company      string `json:"company"`
	Comregnum    string `json:"comregnum"`
	Country      string `json:"country"`
	Email        string `json:"email"`
	Faxnumber    string `json:"faxnumber"`
	Firstname    string `json:"firstname"`
	Gpp0         string `json:"gpp0"`
	Gpp1         string `json:"gpp1"`
	Gpp2         string `json:"gpp2"`
	Gpp3         string `json:"gpp3"`
	Gpp4         string `json:"gpp4"`
	Gpp5         string `json:"gpp5"`
	Gpp6         string `json:"gpp6"`
	Gpp7         string `json:"gpp7"`
	Gpp8         string `json:"gpp8"`
	Gpp9         string `json:"gpp9"`
	Iban         string `json:"iban"`
	Lastname     string `json:"lastname"`
	Mobilenumber string `json:"mobilenumber"`
	Phonenumber  string `json:"phonenumber"`
	Postcode     string `json:"postcode"`
	ResellerId   string `json:"reseller_id"`
	Street       string `json:"street"`
	Timezone     string `json:"timezone"`
	Vatnum       string `json:"vatnum"`
}

// CreateanewCustomerLocationRequest defines model for CreateanewCustomerLocationRequest.
type CreateanewCustomerLocationRequest struct {
	Blocks      []Block `json:"blocks"`
	ContractId  string  `json:"contract_id"`
	Description string  `json:"description"`
	Name        string  `json:"name"`
}

// CreateanewCustomerRequest defines model for CreateanewCustomerRequest.
type CreateanewCustomerRequest struct {
	ActivateTimestamp         string             `json:"activate_timestamp"`
	AddVat                    string             `json:"add_vat"`
	BillingProfileDefinition  string             `json:"billing_profile_definition"`
	BillingProfileId          string             `json:"billing_profile_id"`
	BillingProfiles           []BillingProfiles8 `json:"billing_profiles"`
	ContactId                 string             `json:"contact_id"`
	CreateTimestamp           string             `json:"create_timestamp"`
	ExternalId                string             `json:"external_id"`
	InvoiceEmailTemplateId    string             `json:"invoice_email_template_id"`
	InvoiceTemplateId         string             `json:"invoice_template_id"`
	MaxSubscribers            string             `json:"max_subscribers"`
	ModifyTimestamp           string             `json:"modify_timestamp"`
	PassresetEmailTemplateId  string             `json:"passreset_email_template_id"`
	ProfilePackageId          string             `json:"profile_package_id"`
	Status                    string             `json:"status"`
	SubscriberEmailTemplateId string             `json:"subscriber_email_template_id"`
	TerminateTimestamp        string             `json:"terminate_timestamp"`
	Type                      string             `json:"type"`
	VatRate                   string             `json:"vat_rate"`
}

// CreateanewDomainRequest defines model for CreateanewDomainRequest.
type CreateanewDomainRequest struct {
	Domain     string `json:"domain"`
	ResellerId string `json:"reseller_id"`
}

// CreateanewEmailTemplateRequest defines model for CreateanewEmailTemplateRequest.
type CreateanewEmailTemplateRequest struct {
	AttachmentName string `json:"attachment_name"`
	Body           string `json:"body"`
	FromEmail      string `json:"from_email"`
	Name           string `json:"name"`
	ResellerId     string `json:"reseller_id"`
	Subject        string `json:"subject"`
}

// CreateanewEmergencyMappingContainerRequest defines model for CreateanewEmergencyMappingContainerRequest.
type CreateanewEmergencyMappingContainerRequest struct {
	Name       string `json:"name"`
	ResellerId string `json:"reseller_id"`
}

// CreateanewEmergencyMappingRequest defines model for CreateanewEmergencyMappingRequest.
type CreateanewEmergencyMappingRequest struct {
	Code                 string `json:"code"`
	EmergencyContainerId string `json:"emergency_container_id"`
	Prefix               string `json:"prefix"`
}

// CreateanewFaxRequest defines model for CreateanewFaxRequest.
type CreateanewFaxRequest struct {
	Data         string `json:"data"`
	Destination  string `json:"destination"`
	Faxfile      string `json:"faxfile"`
	Pageheader   string `json:"pageheader"`
	Quality      string `json:"quality"`
	SubscriberId string `json:"subscriber_id"`
}

// CreateanewInterceptionRequest defines model for CreateanewInterceptionRequest.
type CreateanewInterceptionRequest struct {
	Liid       string `json:"liid"`
	Number     string `json:"number"`
	X2Host     string `json:"x2_host"`
	X2Password string `json:"x2_password"`
	X2Port     string `json:"x2_port"`
	X2User     string `json:"x2_user"`
	X3Host     string `json:"x3_host"`
	X3Port     string `json:"x3_port"`
	X3Required string `json:"x3_required"`
}

// CreateanewInvoiceRequest defines model for CreateanewInvoiceRequest.
type CreateanewInvoiceRequest struct {
	AmountNet   string `json:"amount_net"`
	AmountTotal string `json:"amount_total"`
	AmountVat   string `json:"amount_vat"`
	CustomerId  string `json:"customer_id"`
	Period      string `json:"period"`
	PeriodEnd   string `json:"period_end"`
	PeriodStart string `json:"period_start"`
	SentDate    string `json:"sent_date"`
	Serial      string `json:"serial"`
	TemplateId  string `json:"template_id"`
}

// CreateanewLnpCarrierRequest defines model for CreateanewLnpCarrierRequest.
type CreateanewLnpCarrierRequest struct {
	Authoritative string `json:"authoritative"`
	Name          string `json:"name"`
	Prefix        string `json:"prefix"`
	SkipRewrite   string `json:"skip_rewrite"`
}

// CreateanewLnpNumberRequest defines model for CreateanewLnpNumberRequest.
type CreateanewLnpNumberRequest struct {
	CarrierId     string `json:"carrier_id"`
	End           string `json:"end"`
	Number        string `json:"number"`
	RoutingNumber string `json:"routing_number"`
	Start         string `json:"start"`
	Type          string `json:"type"`
}

// CreateanewNcosLevelRequest defines model for CreateanewNcosLevelRequest.
type CreateanewNcosLevelRequest struct {
	Description string `json:"description"`
	IntraPbx    string `json:"intra_pbx"`
	Level       string `json:"level"`
	LocalAc     string `json:"local_ac"`
	Mode        string `json:"mode"`
	ResellerId  string `json:"reseller_id"`
}

// CreateanewNcosLnpCarrierRequest defines model for CreateanewNcosLnpCarrierRequest.
type CreateanewNcosLnpCarrierRequest struct {
	Description string `json:"description"`
	NcosLevelId string `json:"ncos_level_id"`
}

// CreateanewPartyCallControlRequest defines model for CreateanewPartyCallControlRequest.
type CreateanewPartyCallControlRequest struct {
	Callee string `json:"callee"`
	Caller string `json:"caller"`
	Callid string `json:"callid"`
	Status string `json:"status"`
	Token  string `json:"token"`
	Type   string `json:"type"`
}

// CreateanewPbxDeviceConfigRequest defines model for CreateanewPbxDeviceConfigRequest.
type CreateanewPbxDeviceConfigRequest struct {
	ContentType string `json:"content_type"`
	DeviceId    string `json:"device_id"`
	Version     string `json:"version"`
}

// CreateanewPbxDeviceFirmwareRequest defines model for CreateanewPbxDeviceFirmwareRequest.
type CreateanewPbxDeviceFirmwareRequest struct {
	DeviceId string `json:"device_id"`
	Filename string `json:"filename"`
	Tag      string `json:"tag"`
	Version  string `json:"version"`
}

// CreateanewPbxDeviceModelRequest defines model for CreateanewPbxDeviceModelRequest.
type CreateanewPbxDeviceModelRequest struct {
	BootstrapConfigHttpSyncMethod            string      `json:"bootstrap_config_http_sync_method"`
	BootstrapConfigHttpSyncParams            string      `json:"bootstrap_config_http_sync_params"`
	BootstrapConfigHttpSyncUri               string      `json:"bootstrap_config_http_sync_uri"`
	BootstrapConfigRedirectGrandstreamCid    string      `json:"bootstrap_config_redirect_grandstream_cid"`
	BootstrapConfigRedirectGrandstreamKey    string      `json:"bootstrap_config_redirect_grandstream_key"`
	BootstrapConfigRedirectPanasonicPassword string      `json:"bootstrap_config_redirect_panasonic_password"`
	BootstrapConfigRedirectPanasonicUser     string      `json:"bootstrap_config_redirect_panasonic_user"`
	BootstrapConfigRedirectPolycomPassword   string      `json:"bootstrap_config_redirect_polycom_password"`
	BootstrapConfigRedirectPolycomProfile    string      `json:"bootstrap_config_redirect_polycom_profile"`
	BootstrapConfigRedirectPolycomUser       string      `json:"bootstrap_config_redirect_polycom_user"`
	BootstrapConfigRedirectSnomPassword      string      `json:"bootstrap_config_redirect_snom_password"`
	BootstrapConfigRedirectSnomUser          string      `json:"bootstrap_config_redirect_snom_user"`
	BootstrapConfigRedirectYealinkPassword   string      `json:"bootstrap_config_redirect_yealink_password"`
	BootstrapConfigRedirectYealinkUser       string      `json:"bootstrap_config_redirect_yealink_user"`
	BootstrapMethod                          string      `json:"bootstrap_method"`
	BootstrapUri                             string      `json:"bootstrap_uri"`
	ConnectableModelsId                      string      `json:"connectable_models_id"`
	ExtensionsNum                            string      `json:"extensions_num"`
	Linerange                                []Linerange `json:"linerange"`
	Model                                    string      `json:"model"`
	ResellerId                               string      `json:"reseller_id"`
	Type                                     string      `json:"type"`
	Vendor                                   string      `json:"vendor"`
}

// CreateanewPbxDeviceProfileRequest defines model for CreateanewPbxDeviceProfileRequest.
type CreateanewPbxDeviceProfileRequest struct {
	ConfigId string `json:"config_id"`
	Name     string `json:"name"`
}

// CreateanewPbxDeviceRequest defines model for CreateanewPbxDeviceRequest.
type CreateanewPbxDeviceRequest struct {
	CustomerId  string `json:"customer_id"`
	Identifier  string `json:"identifier"`
	Lines       []Line `json:"lines"`
	ProfileId   string `json:"profile_id"`
	StationName string `json:"station_name"`
}

// CreateanewPeeringGroupRequest defines model for CreateanewPeeringGroupRequest.
type CreateanewPeeringGroupRequest struct {
	ContractId  string `json:"contract_id"`
	Description string `json:"description"`
	Name        string `json:"name"`
	Priority    string `json:"priority"`
}

// CreateanewPeeringRuleRequest defines model for CreateanewPeeringRuleRequest.
type CreateanewPeeringRuleRequest struct {
	CalleePattern string `json:"callee_pattern"`
	CalleePrefix  string `json:"callee_prefix"`
	CallerPattern string `json:"caller_pattern"`
	Description   string `json:"description"`
	Enabled       string `json:"enabled"`
	GroupId       string `json:"group_id"`
	Stopper       string `json:"stopper"`
}

// CreateanewPeeringServerRequest defines model for CreateanewPeeringServerRequest.
type CreateanewPeeringServerRequest struct {
	Enabled   string `json:"enabled"`
	GroupId   string `json:"group_id"`
	Host      string `json:"host"`
	Ip        string `json:"ip"`
	Name      string `json:"name"`
	Port      string `json:"port"`
	Probe     string `json:"probe"`
	Transport string `json:"transport"`
	ViaRoute  string `json:"via_route"`
	Weight    string `json:"weight"`
}

// CreateanewPhonebookEntryRequest defines model for CreateanewPhonebookEntryRequest.
type CreateanewPhonebookEntryRequest struct {
	Id         string `json:"id"`
	Name       string `json:"name"`
	Number     string `json:"number"`
	ResellerId string `json:"reseller_id"`
}

// CreateanewPreferencesMetaEntryRequest defines model for CreateanewPreferencesMetaEntryRequest.
type CreateanewPreferencesMetaEntryRequest struct {
	Attribute    string   `json:"attribute"`
	DataType     string   `json:"data_type"`
	Description  string   `json:"description"`
	Enum         []string `json:"enum"`
	FielddevPref string   `json:"fielddev_pref"`
	Label        string   `json:"label"`
	MaxOccur     string   `json:"max_occur"`
}

// CreateanewProfilePackageRequest defines model for CreateanewProfilePackageRequest.
type CreateanewProfilePackageRequest struct {
	BalanceIntervalStartMode string            `json:"balance_interval_start_mode"`
	BalanceIntervalUnit      string            `json:"balance_interval_unit"`
	BalanceIntervalValue     string            `json:"balance_interval_value"`
	CarryOverMode            string            `json:"carry_over_mode"`
	Description              string            `json:"description"`
	InitialBalance           string            `json:"initial_balance"`
	InitialProfiles          []InitialProfile  `json:"initial_profiles"`
	Name                     string            `json:"name"`
	NotopupDiscardIntervals  string            `json:"notopup_discard_intervals"`
	ResellerId               string            `json:"reseller_id"`
	ServiceCharge            string            `json:"service_charge"`
	TimelyDurationUnit       string            `json:"timely_duration_unit"`
	TimelyDurationValue      string            `json:"timely_duration_value"`
	TopupLockLevel           string            `json:"topup_lock_level"`
	TopupProfiles            []TopupProfile    `json:"topup_profiles"`
	UnderrunLockLevel        string            `json:"underrun_lock_level"`
	UnderrunLockThreshold    string            `json:"underrun_lock_threshold"`
	UnderrunProfileThreshold string            `json:"underrun_profile_threshold"`
	UnderrunProfiles         []UnderrunProfile `json:"underrun_profiles"`
}

// CreateanewReminderRequest defines model for CreateanewReminderRequest.
type CreateanewReminderRequest struct {
	Active       string `json:"active"`
	Recur        string `json:"recur"`
	SubscriberId string `json:"subscriber_id"`
	Time         string `json:"time"`
}

// CreateanewResellerRequest defines model for CreateanewResellerRequest.
type CreateanewResellerRequest struct {
	ContractId  string `json:"contract_id"`
	EnableRtc   string `json:"enable_rtc"`
	Name        string `json:"name"`
	RtcNetworks string `json:"rtc_networks"`
	Status      string `json:"status"`
}

// CreateanewRewriteRuleRequest defines model for CreateanewRewriteRuleRequest.
type CreateanewRewriteRuleRequest struct {
	Description    string `json:"description"`
	Direction      string `json:"direction"`
	Enabled        string `json:"enabled"`
	Field          string `json:"field"`
	MatchPattern   string `json:"match_pattern"`
	Priority       string `json:"priority"`
	ReplacePattern string `json:"replace_pattern"`
	SetId          string `json:"set_id"`
}

// CreateanewRewriteRuleSetRequest defines model for CreateanewRewriteRuleSetRequest.
type CreateanewRewriteRuleSetRequest struct {
	Description  string          `json:"description"`
	Name         string          `json:"name"`
	ResellerId   string          `json:"reseller_id"`
	Rewriterules []Rewriterules3 `json:"rewriterules"`
}

// CreateanewSMSRequest defines model for CreateanewSMSRequest.
type CreateanewSMSRequest struct {
	Callee       string `json:"callee"`
	Caller       string `json:"caller"`
	Direction    string `json:"direction"`
	Reason       string `json:"reason"`
	Status       string `json:"status"`
	SubscriberId string `json:"subscriber_id"`
	Text         string `json:"text"`
}

// CreateanewSoundFileRequest defines model for CreateanewSoundFileRequest.
type CreateanewSoundFileRequest struct {
	Filename string `json:"filename"`
	Handle   string `json:"handle"`
	Loopplay string `json:"loopplay"`
	SetId    string `json:"set_id"`
}

// CreateanewSoundSetRequest defines model for CreateanewSoundSetRequest.
type CreateanewSoundSetRequest struct {
	ContractDefault string `json:"contract_default"`
	ContractId      string `json:"contract_id"`
	Description     string `json:"description"`
	Name            string `json:"name"`
	ResellerId      string `json:"reseller_id"`
}

// CreateanewSubscriberProfileRequest defines model for CreateanewSubscriberProfileRequest.
type CreateanewSubscriberProfileRequest struct {
	Attribute    Attribute `json:"attribute"`
	Description  string    `json:"description"`
	Name         string    `json:"name"`
	ProfileSetId string    `json:"profile_set_id"`
	SetDefault   string    `json:"set_default"`
}

// CreateanewSubscriberProfileSetRequest defines model for CreateanewSubscriberProfileSetRequest.
type CreateanewSubscriberProfileSetRequest struct {
	Description string `json:"description"`
	Name        string `json:"name"`
	ResellerId  string `json:"reseller_id"`
}

// CreateanewSubscriberRegistrationRequest defines model for CreateanewSubscriberRegistrationRequest.
type CreateanewSubscriberRegistrationRequest struct {
	Contact      string `json:"contact"`
	Expires      string `json:"expires"`
	Nat          string `json:"nat"`
	Path         string `json:"path"`
	Q            string `json:"q"`
	Socket       string `json:"socket"`
	SubscriberId string `json:"subscriber_id"`
}

// CreateanewSubscriberRequest defines model for CreateanewSubscriberRequest.
type CreateanewSubscriberRequest struct {
	Administrative      string        `json:"administrative"`
	AliasNumbers        []AliasNumber `json:"alias_numbers"`
	DisplayName         string        `json:"display_name"`
	Domain              string        `json:"domain"`
	DomainId            string        `json:"domain_id"`
	Email               string        `json:"email"`
	ExternalId          string        `json:"external_id"`
	IsPbxGroup          string        `json:"is_pbx_group"`
	IsPbxPilot          string        `json:"is_pbx_pilot"`
	Lock                string        `json:"lock"`
	Password            string        `json:"password"`
	PbxExtension        string        `json:"pbx_extension"`
	PbxGroupIds         []string      `json:"pbx_group_ids"`
	PbxGroupmemberIdsId []string      `json:"pbx_groupmember_ids_id"`
	PrimaryNumber       PrimaryNumber `json:"primary_number"`
	ProfileId           string        `json:"profile_id"`
	ProfileSetId        string        `json:"profile_set_id"`
	Status              string        `json:"status"`
	Timezone            string        `json:"timezone"`
	Username            string        `json:"username"`
	Webpassword         string        `json:"webpassword"`
	Webusername         string        `json:"webusername"`
}

// CreateanewSystemContactRequest defines model for CreateanewSystemContactRequest.
type CreateanewSystemContactRequest struct {
	Bankname     string `json:"bankname"`
	Bic          string `json:"bic"`
	City         string `json:"city"`
	Company      string `json:"company"`
	Comregnum    string `json:"comregnum"`
	Country      string `json:"country"`
	Email        string `json:"email"`
	Faxnumber    string `json:"faxnumber"`
	Firstname    string `json:"firstname"`
	Gpp0         string `json:"gpp0"`
	Gpp1         string `json:"gpp1"`
	Gpp2         string `json:"gpp2"`
	Gpp3         string `json:"gpp3"`
	Gpp4         string `json:"gpp4"`
	Gpp5         string `json:"gpp5"`
	Gpp6         string `json:"gpp6"`
	Gpp7         string `json:"gpp7"`
	Gpp8         string `json:"gpp8"`
	Gpp9         string `json:"gpp9"`
	Iban         string `json:"iban"`
	Lastname     string `json:"lastname"`
	Mobilenumber string `json:"mobilenumber"`
	Phonenumber  string `json:"phonenumber"`
	Postcode     string `json:"postcode"`
	Street       string `json:"street"`
	Timezone     string `json:"timezone"`
	Vatnum       string `json:"vatnum"`
}

// CreateanewTopupCashRequest defines model for CreateanewTopupCashRequest.
type CreateanewTopupCashRequest struct {
	Amount       string `json:"amount"`
	PackageId    string `json:"package_id"`
	RequestToken string `json:"request_token"`
	SubscriberId string `json:"subscriber_id"`
}

// CreateanewTopupVoucherRequest defines model for CreateanewTopupVoucherRequest.
type CreateanewTopupVoucherRequest struct {
	Code         string `json:"code"`
	RequestToken string `json:"request_token"`
	SubscriberId string `json:"subscriber_id"`
}

// CreateanewTrustedSourceRequest defines model for CreateanewTrustedSourceRequest.
type CreateanewTrustedSourceRequest struct {
	FromPattern  string `json:"from_pattern"`
	Protocol     string `json:"protocol"`
	SrcIp        string `json:"src_ip"`
	SubscriberId string `json:"subscriber_id"`
}

// CreateanewVoicemailGreetingRequest defines model for CreateanewVoicemailGreetingRequest.
type CreateanewVoicemailGreetingRequest struct {
	Dir          string `json:"dir"`
	Greetingfile string `json:"greetingfile"`
	SubscriberId string `json:"subscriber_id"`
}

// CreateanewVoucherRequest defines model for CreateanewVoucherRequest.
type CreateanewVoucherRequest struct {
	Amount     string `json:"amount"`
	Code       string `json:"code"`
	CustomerId string `json:"customer_id"`
	PackageId  string `json:"package_id"`
	ResellerId string `json:"reseller_id"`
	ValidUntil string `json:"valid_until"`
}

// CustomerBalances defines model for CustomerBalances.
type CustomerBalances struct {
	CashBalance     float32 `json:"cash_balance"`
	CashDebit       float32 `json:"cash_debit"`
	FreeTimeBalance float32 `json:"free_time_balance"`
	FreeTimeSpent   float32 `json:"free_time_spent"`
	Ratio           float32 `json:"ratio"`
}

// CustomerContacts defines model for CustomerContacts.
type CustomerContacts struct {
	Bankname     string `json:"bankname"`
	Bic          string `json:"bic"`
	City         string `json:"city"`
	Company      string `json:"company"`
	Comregnum    string `json:"comregnum"`
	Country      string `json:"country"`
	Email        string `json:"email"`
	Faxnumber    string `json:"faxnumber"`
	Firstname    string `json:"firstname"`
	Gpp0         string `json:"gpp0"`
	Gpp1         string `json:"gpp1"`
	Gpp2         string `json:"gpp2"`
	Gpp3         string `json:"gpp3"`
	Gpp4         string `json:"gpp4"`
	Gpp5         string `json:"gpp5"`
	Gpp6         string `json:"gpp6"`
	Gpp7         string `json:"gpp7"`
	Gpp8         string `json:"gpp8"`
	Gpp9         string `json:"gpp9"`
	Iban         string `json:"iban"`
	Lastname     string `json:"lastname"`
	Mobilenumber string `json:"mobilenumber"`
	Phonenumber  string `json:"phonenumber"`
	Postcode     string `json:"postcode"`
	ResellerId   string `json:"reseller_id"`
	Street       string `json:"street"`
	Timezone     string `json:"timezone"`
	Vatnum       string `json:"vatnum"`
}

// CustomerFraudEvent defines model for CustomerFraudEvent.
type CustomerFraudEvent struct {
	Id               float32 `json:"id"`
	Interval         string  `json:"interval"`
	IntervalCost     float32 `json:"interval_cost"`
	IntervalLimit    float32 `json:"interval_limit"`
	IntervalLock     float32 `json:"interval_lock"`
	IntervalNotify   string  `json:"interval_notify"`
	ResellerId       float32 `json:"reseller_id"`
	Type             string  `json:"type"`
	UseResellerRates float32 `json:"use_reseller_rates"`
}

// CustomerFraudEvents defines model for CustomerFraudEvents.
type CustomerFraudEvents struct {
	Id               float32 `json:"id"`
	Interval         string  `json:"interval"`
	IntervalCost     float32 `json:"interval_cost"`
	IntervalLimit    float32 `json:"interval_limit"`
	IntervalLock     float32 `json:"interval_lock"`
	IntervalNotify   string  `json:"interval_notify"`
	ResellerId       float32 `json:"reseller_id"`
	Type             string  `json:"type"`
	UseResellerRates float32 `json:"use_reseller_rates"`
}

// CustomerFraudPreferences defines model for CustomerFraudPreferences.
type CustomerFraudPreferences struct {
	FraudDailyLimit     float32 `json:"fraud_daily_limit"`
	FraudDailyLock      string  `json:"fraud_daily_lock"`
	FraudDailyNotify    string  `json:"fraud_daily_notify"`
	FraudIntervalLimit  float32 `json:"fraud_interval_limit"`
	FraudIntervalLock   string  `json:"fraud_interval_lock"`
	FraudIntervalNotify string  `json:"fraud_interval_notify"`
}

// CustomerFraudPreferences1 defines model for CustomerFraudPreferences1.
type CustomerFraudPreferences1 struct {
	FraudDailyLimit     string `json:"fraud_daily_limit"`
	FraudDailyLock      string `json:"fraud_daily_lock"`
	FraudDailyNotify    string `json:"fraud_daily_notify"`
	FraudIntervalLimit  string `json:"fraud_interval_limit"`
	FraudIntervalLock   string `json:"fraud_interval_lock"`
	FraudIntervalNotify string `json:"fraud_interval_notify"`
}

// CustomerLocations defines model for CustomerLocations.
type CustomerLocations struct {
	Blocks      []Block `json:"blocks"`
	ContractId  string  `json:"contract_id"`
	Description string  `json:"description"`
	Name        string  `json:"name"`
}

// Customers defines model for Customers.
type Customers struct {
	ActivateTimestamp         string             `json:"activate_timestamp"`
	AddVat                    string             `json:"add_vat"`
	BillingProfileDefinition  string             `json:"billing_profile_definition"`
	BillingProfileId          string             `json:"billing_profile_id"`
	BillingProfiles           []BillingProfiles8 `json:"billing_profiles"`
	ContactId                 string             `json:"contact_id"`
	CreateTimestamp           string             `json:"create_timestamp"`
	ExternalId                string             `json:"external_id"`
	InvoiceEmailTemplateId    string             `json:"invoice_email_template_id"`
	InvoiceTemplateId         string             `json:"invoice_template_id"`
	MaxSubscribers            string             `json:"max_subscribers"`
	ModifyTimestamp           string             `json:"modify_timestamp"`
	PassresetEmailTemplateId  string             `json:"passreset_email_template_id"`
	ProfilePackageId          string             `json:"profile_package_id"`
	Status                    string             `json:"status"`
	SubscriberEmailTemplateId string             `json:"subscriber_email_template_id"`
	TerminateTimestamp        string             `json:"terminate_timestamp"`
	Type                      string             `json:"type"`
	VatRate                   string             `json:"vat_rate"`
}

// Destination defines model for Destination.
type Destination struct {
	AnnouncementId    string `json:"announcement_id"`
	Destination       string `json:"destination"`
	Priority          string `json:"priority"`
	SimpleDestination string `json:"simple_destination"`
	Timeout           string `json:"timeout"`
}

// Destination24 defines model for Destination24.
type Destination24 struct {
	AnnouncementId    float32 `json:"announcement_id"`
	Destination       string  `json:"destination"`
	Priority          float32 `json:"priority"`
	SimpleDestination string  `json:"simple_destination"`
	Timeout           float32 `json:"timeout"`
}

// Destination36 defines model for Destination36.
type Destination36 struct {
	Destination string `json:"destination"`
	Filetype    string `json:"filetype"`
	Incoming    string `json:"incoming"`
	Outgoing    string `json:"outgoing"`
	Status      string `json:"status"`
}

// Destination38 defines model for Destination38.
type Destination38 struct {
	Destination string `json:"destination"`
	Filetype    string `json:"filetype"`
	Incoming    bool   `json:"incoming"`
	Outgoing    bool   `json:"outgoing"`
	Status      bool   `json:"status"`
}

// Domains defines model for Domains.
type Domains struct {
	Domain     string `json:"domain"`
	ResellerId string `json:"reseller_id"`
}

// EmailTemplates defines model for EmailTemplates.
type EmailTemplates struct {
	AttachmentName string `json:"attachment_name"`
	Body           string `json:"body"`
	FromEmail      string `json:"from_email"`
	Name           string `json:"name"`
	ResellerId     string `json:"reseller_id"`
	Subject        string `json:"subject"`
}

// EmergencyMappingContainers defines model for EmergencyMappingContainers.
type EmergencyMappingContainers struct {
	Name       string `json:"name"`
	ResellerId string `json:"reseller_id"`
}

// EmergencyMappings defines model for EmergencyMappings.
type EmergencyMappings struct {
	Code                 string `json:"code"`
	EmergencyContainerId string `json:"emergency_container_id"`
	Prefix               string `json:"prefix"`
}

// Event defines model for Event.
type Event struct {
	ExportStatus                            string  `json:"export_status"`
	ExportedAt                              string  `json:"exported_at"`
	FirstNonPrimaryAliasUsernameAfter       string  `json:"first_non_primary_alias_username_after"`
	FirstNonPrimaryAliasUsernameBefore      string  `json:"first_non_primary_alias_username_before"`
	NewStatus                               string  `json:"new_status"`
	NonPrimaryAliasUsername                 string  `json:"non_primary_alias_username"`
	OldStatus                               string  `json:"old_status"`
	PilotFirstNonPrimaryAliasUsernameAfter  string  `json:"pilot_first_non_primary_alias_username_after"`
	PilotFirstNonPrimaryAliasUsernameBefore string  `json:"pilot_first_non_primary_alias_username_before"`
	PilotPrimaryAliasUsernameAfter          string  `json:"pilot_primary_alias_username_after"`
	PilotPrimaryAliasUsernameBefore         string  `json:"pilot_primary_alias_username_before"`
	PilotPrimaryNumberAc                    string  `json:"pilot_primary_number_ac"`
	PilotPrimaryNumberCc                    string  `json:"pilot_primary_number_cc"`
	PilotPrimaryNumberId                    float32 `json:"pilot_primary_number_id"`
	PilotPrimaryNumberSn                    string  `json:"pilot_primary_number_sn"`
	PilotSubscriberId                       float32 `json:"pilot_subscriber_id"`
	PilotSubscriberProfileId                float32 `json:"pilot_subscriber_profile_id"`
	PilotSubscriberProfileName              string  `json:"pilot_subscriber_profile_name"`
	PilotSubscriberProfileSetId             float32 `json:"pilot_subscriber_profile_set_id"`
	PilotSubscriberProfileSetName           string  `json:"pilot_subscriber_profile_set_name"`
	PrimaryAliasUsernameAfter               string  `json:"primary_alias_username_after"`
	PrimaryAliasUsernameBefore              string  `json:"primary_alias_username_before"`
	PrimaryNumberAc                         string  `json:"primary_number_ac"`
	PrimaryNumberCc                         string  `json:"primary_number_cc"`
	PrimaryNumberId                         float32 `json:"primary_number_id"`
	PrimaryNumberSn                         string  `json:"primary_number_sn"`
	ResellerId                              float32 `json:"reseller_id"`
	SubscriberId                            float32 `json:"subscriber_id"`
	SubscriberProfileId                     float32 `json:"subscriber_profile_id"`
	SubscriberProfileName                   string  `json:"subscriber_profile_name"`
	SubscriberProfileSetId                  float32 `json:"subscriber_profile_set_id"`
	SubscriberProfileSetName                string  `json:"subscriber_profile_set_name"`
	Timestamp                               string  `json:"timestamp"`
	Type                                    string  `json:"type"`
}

// Events defines model for Events.
type Events struct {
	ExportStatus                            string  `json:"export_status"`
	ExportedAt                              string  `json:"exported_at"`
	FirstNonPrimaryAliasUsernameAfter       string  `json:"first_non_primary_alias_username_after"`
	FirstNonPrimaryAliasUsernameBefore      string  `json:"first_non_primary_alias_username_before"`
	NewStatus                               string  `json:"new_status"`
	NonPrimaryAliasUsername                 string  `json:"non_primary_alias_username"`
	OldStatus                               string  `json:"old_status"`
	PilotFirstNonPrimaryAliasUsernameAfter  string  `json:"pilot_first_non_primary_alias_username_after"`
	PilotFirstNonPrimaryAliasUsernameBefore string  `json:"pilot_first_non_primary_alias_username_before"`
	PilotPrimaryAliasUsernameAfter          string  `json:"pilot_primary_alias_username_after"`
	PilotPrimaryAliasUsernameBefore         string  `json:"pilot_primary_alias_username_before"`
	PilotPrimaryNumberAc                    string  `json:"pilot_primary_number_ac"`
	PilotPrimaryNumberCc                    string  `json:"pilot_primary_number_cc"`
	PilotPrimaryNumberId                    float32 `json:"pilot_primary_number_id"`
	PilotPrimaryNumberSn                    string  `json:"pilot_primary_number_sn"`
	PilotSubscriberId                       float32 `json:"pilot_subscriber_id"`
	PilotSubscriberProfileId                float32 `json:"pilot_subscriber_profile_id"`
	PilotSubscriberProfileName              string  `json:"pilot_subscriber_profile_name"`
	PilotSubscriberProfileSetId             float32 `json:"pilot_subscriber_profile_set_id"`
	PilotSubscriberProfileSetName           string  `json:"pilot_subscriber_profile_set_name"`
	PrimaryAliasUsernameAfter               string  `json:"primary_alias_username_after"`
	PrimaryAliasUsernameBefore              string  `json:"primary_alias_username_before"`
	PrimaryNumberAc                         string  `json:"primary_number_ac"`
	PrimaryNumberCc                         string  `json:"primary_number_cc"`
	PrimaryNumberId                         float32 `json:"primary_number_id"`
	PrimaryNumberSn                         string  `json:"primary_number_sn"`
	ResellerId                              float32 `json:"reseller_id"`
	SubscriberId                            float32 `json:"subscriber_id"`
	SubscriberProfileId                     float32 `json:"subscriber_profile_id"`
	SubscriberProfileName                   string  `json:"subscriber_profile_name"`
	SubscriberProfileSetId                  float32 `json:"subscriber_profile_set_id"`
	SubscriberProfileSetName                string  `json:"subscriber_profile_set_name"`
	Timestamp                               string  `json:"timestamp"`
	Type                                    string  `json:"type"`
}

// Faxes defines model for Faxes.
type Faxes struct {
	Data         string `json:"data"`
	Destination  string `json:"destination"`
	Faxfile      string `json:"faxfile"`
	Pageheader   string `json:"pageheader"`
	Quality      string `json:"quality"`
	SubscriberId string `json:"subscriber_id"`
}

// Faxis defines model for Faxis.
type Faxis struct {
	Data         string `json:"data"`
	Destination  string `json:"destination"`
	Faxfile      string `json:"faxfile"`
	Pageheader   string `json:"pageheader"`
	Quality      string `json:"quality"`
	SubscriberId string `json:"subscriber_id"`
}

// FaxserverSettings defines model for FaxserverSettings.
type FaxserverSettings struct {
	Active       string          `json:"active"`
	Destinations []Destination36 `json:"destinations"`
	Ecm          string          `json:"ecm"`
	Name         string          `json:"name"`
	Password     string          `json:"password"`
	T38          string          `json:"t38"`
}

// FaxserverSettings1 defines model for FaxserverSettings1.
type FaxserverSettings1 struct {
	Active       bool            `json:"active"`
	Destinations []Destination38 `json:"destinations"`
	Ecm          bool            `json:"ecm"`
	Name         string          `json:"name"`
	Password     string          `json:"password"`
	T38          bool            `json:"t38"`
}

// InitialProfile defines model for InitialProfile.
type InitialProfile struct {
	NetworkId string `json:"network_id"`
	ProfileId string `json:"profile_id"`
}

// Interceptions defines model for Interceptions.
type Interceptions struct {
	Liid       string `json:"liid"`
	Number     string `json:"number"`
	X2Host     string `json:"x2_host"`
	X2Password string `json:"x2_password"`
	X2Port     string `json:"x2_port"`
	X2User     string `json:"x2_user"`
	X3Host     string `json:"x3_host"`
	X3Port     string `json:"x3_port"`
	X3Required string `json:"x3_required"`
}

// InvoiceTemplate defines model for InvoiceTemplate.
type InvoiceTemplate struct {
	Name       string  `json:"name"`
	ResellerId float32 `json:"reseller_id"`
	Type       string  `json:"type"`
}

// InvoiceTemplates defines model for InvoiceTemplates.
type InvoiceTemplates struct {
	Name       string  `json:"name"`
	ResellerId float32 `json:"reseller_id"`
	Type       string  `json:"type"`
}

// Invoices defines model for Invoices.
type Invoices struct {
	AmountNet   string `json:"amount_net"`
	AmountTotal string `json:"amount_total"`
	AmountVat   string `json:"amount_vat"`
	CustomerId  string `json:"customer_id"`
	Period      string `json:"period"`
	PeriodEnd   string `json:"period_end"`
	PeriodStart string `json:"period_start"`
	SentDate    string `json:"sent_date"`
	Serial      string `json:"serial"`
	TemplateId  string `json:"template_id"`
}

// Key defines model for Key.
type Key struct {
	Labelpos string `json:"labelpos"`
	X        string `json:"x"`
	Y        string `json:"y"`
}

// Key2 defines model for Key2.
type Key2 struct {
	Labelpos string  `json:"labelpos"`
	X        float32 `json:"x"`
	Y        float32 `json:"y"`
}

// Line defines model for Line.
type Line struct {
	KeyNum       string `json:"key_num"`
	Linerange    string `json:"linerange"`
	SubscriberId string `json:"subscriber_id"`
	Type         string `json:"type"`
}

// Linerange defines model for Linerange.
type Linerange struct {
	CanBlf     string `json:"can_blf"`
	CanPrivate string `json:"can_private"`
	CanShared  string `json:"can_shared"`
	Keys       []Key  `json:"keys"`
	Name       string `json:"name"`
}

// Linerange2 defines model for Linerange2.
type Linerange2 struct {
	CanBlf     bool   `json:"can_blf"`
	CanPrivate bool   `json:"can_private"`
	CanShared  bool   `json:"can_shared"`
	Keys       []Key2 `json:"keys"`
	Name       string `json:"name"`
}

// LnpCarriers defines model for LnpCarriers.
type LnpCarriers struct {
	Authoritative string `json:"authoritative"`
	Name          string `json:"name"`
	Prefix        string `json:"prefix"`
	SkipRewrite   string `json:"skip_rewrite"`
}

// LnpNumbers defines model for LnpNumbers.
type LnpNumbers struct {
	CarrierId     string `json:"carrier_id"`
	End           string `json:"end"`
	Number        string `json:"number"`
	RoutingNumber string `json:"routing_number"`
	Start         string `json:"start"`
	Type          string `json:"type"`
}

// MailToFaxSettings defines model for MailToFaxSettings.
type MailToFaxSettings struct {
	Acl               []Acl               `json:"acl"`
	Active            bool                `json:"active"`
	SecretKey         string              `json:"secret_key"`
	SecretKeyRenew    string              `json:"secret_key_renew"`
	SecretRenewNotify []SecretRenewNotify `json:"secret_renew_notify"`
}

// MailToFaxSettings2 defines model for MailToFaxSettings2.
type MailToFaxSettings2 struct {
	Acl               []Acl2              `json:"acl"`
	Active            string              `json:"active"`
	SecretKey         string              `json:"secret_key"`
	SecretKeyRenew    string              `json:"secret_key_renew"`
	SecretRenewNotify []SecretRenewNotify `json:"secret_renew_notify"`
}

// MaliciousCalls defines model for MaliciousCalls.
type MaliciousCalls struct {
	CallId     string  `json:"call_id"`
	Callee     string  `json:"callee"`
	Caller     string  `json:"caller"`
	Duration   float32 `json:"duration"`
	ReportedAt string  `json:"reported_at"`
	ResellerId float32 `json:"reseller_id"`
	Source     string  `json:"source"`
	StartTime  string  `json:"start_time"`
}

// ManagerSecretary defines model for ManagerSecretary.
type ManagerSecretary struct {
	SecretaryNumbers []SecretaryNumber `json:"secretary_numbers"`
	Uuid             string            `json:"uuid"`
}

// Mapping defines model for Mapping.
type Mapping struct {
	AuthKey string `json:"auth_key"`
}

// NcosLevels defines model for NcosLevels.
type NcosLevels struct {
	Description string `json:"description"`
	IntraPbx    string `json:"intra_pbx"`
	Level       string `json:"level"`
	LocalAc     string `json:"local_ac"`
	Mode        string `json:"mode"`
	ResellerId  string `json:"reseller_id"`
}

// NcosLevels3 defines model for NcosLevels3.
type NcosLevels3 struct {
	Description string  `json:"description"`
	IntraPbx    bool    `json:"intra_pbx"`
	Level       string  `json:"level"`
	LocalAc     bool    `json:"local_ac"`
	Mode        string  `json:"mode"`
	ResellerId  float32 `json:"reseller_id"`
}

// NcosLnpCarriers defines model for NcosLnpCarriers.
type NcosLnpCarriers struct {
	Description string `json:"description"`
	NcosLevelId string `json:"ncos_level_id"`
}

// NcosLnpCarriers2 defines model for NcosLnpCarriers2.
type NcosLnpCarriers2 struct {
	Description string  `json:"description"`
	NcosLevelId float32 `json:"ncos_level_id"`
}

// Network defines model for Network.
type Network struct {
	Config    string `json:"config"`
	Connector string `json:"connector"`
	Tag       string `json:"tag"`
}

// Numbers defines model for Numbers.
type Numbers struct {
	Ac           string `json:"ac"`
	Cc           string `json:"cc"`
	IsPrimary    string `json:"is_primary"`
	ResellerId   string `json:"reseller_id"`
	Sn           string `json:"sn"`
	SubscriberId string `json:"subscriber_id"`
}

// Numbers3 defines model for Numbers3.
type Numbers3 struct {
	Ac           string  `json:"ac"`
	Cc           string  `json:"cc"`
	IsPrimary    bool    `json:"is_primary"`
	ResellerId   float32 `json:"reseller_id"`
	Sn           string  `json:"sn"`
	SubscriberId float32 `json:"subscriber_id"`
}

// PbxDeviceConfigFiles defines model for PbxDeviceConfigFiles.
type PbxDeviceConfigFiles struct {
	DeviceId float32 `json:"device_id"`
	Filename string  `json:"filename"`
	Tag      string  `json:"tag"`
	Version  string  `json:"version"`
}

// PbxDeviceConfigs defines model for PbxDeviceConfigs.
type PbxDeviceConfigs struct {
	ContentType string `json:"content_type"`
	DeviceId    string `json:"device_id"`
	Version     string `json:"version"`
}

// PbxDeviceFirmwareBinaries defines model for PbxDeviceFirmwareBinaries.
type PbxDeviceFirmwareBinaries struct {
	DeviceId float32 `json:"device_id"`
	Filename string  `json:"filename"`
	Tag      string  `json:"tag"`
	Version  string  `json:"version"`
}

// PbxDeviceFirmwares defines model for PbxDeviceFirmwares.
type PbxDeviceFirmwares struct {
	DeviceId string `json:"device_id"`
	Filename string `json:"filename"`
	Tag      string `json:"tag"`
	Version  string `json:"version"`
}

// PbxDeviceFirmwares2 defines model for PbxDeviceFirmwares2.
type PbxDeviceFirmwares2 struct {
	DeviceId float32 `json:"device_id"`
	Filename string  `json:"filename"`
	Tag      string  `json:"tag"`
	Version  string  `json:"version"`
}

// PbxDeviceModels defines model for PbxDeviceModels.
type PbxDeviceModels struct {
	BootstrapConfigHttpSyncMethod            string      `json:"bootstrap_config_http_sync_method"`
	BootstrapConfigHttpSyncParams            string      `json:"bootstrap_config_http_sync_params"`
	BootstrapConfigHttpSyncUri               string      `json:"bootstrap_config_http_sync_uri"`
	BootstrapConfigRedirectGrandstreamCid    string      `json:"bootstrap_config_redirect_grandstream_cid"`
	BootstrapConfigRedirectGrandstreamKey    string      `json:"bootstrap_config_redirect_grandstream_key"`
	BootstrapConfigRedirectPanasonicPassword string      `json:"bootstrap_config_redirect_panasonic_password"`
	BootstrapConfigRedirectPanasonicUser     string      `json:"bootstrap_config_redirect_panasonic_user"`
	BootstrapConfigRedirectPolycomPassword   string      `json:"bootstrap_config_redirect_polycom_password"`
	BootstrapConfigRedirectPolycomProfile    string      `json:"bootstrap_config_redirect_polycom_profile"`
	BootstrapConfigRedirectPolycomUser       string      `json:"bootstrap_config_redirect_polycom_user"`
	BootstrapConfigRedirectSnomPassword      string      `json:"bootstrap_config_redirect_snom_password"`
	BootstrapConfigRedirectSnomUser          string      `json:"bootstrap_config_redirect_snom_user"`
	BootstrapConfigRedirectYealinkPassword   string      `json:"bootstrap_config_redirect_yealink_password"`
	BootstrapConfigRedirectYealinkUser       string      `json:"bootstrap_config_redirect_yealink_user"`
	BootstrapMethod                          string      `json:"bootstrap_method"`
	BootstrapUri                             string      `json:"bootstrap_uri"`
	ConnectableModelsId                      string      `json:"connectable_models_id"`
	ExtensionsNum                            string      `json:"extensions_num"`
	Linerange                                []Linerange `json:"linerange"`
	Model                                    string      `json:"model"`
	ResellerId                               string      `json:"reseller_id"`
	Type                                     string      `json:"type"`
	Vendor                                   string      `json:"vendor"`
}

// PbxDeviceModels1 defines model for PbxDeviceModels1.
type PbxDeviceModels1 struct {
	BootstrapConfigHttpSyncMethod            string       `json:"bootstrap_config_http_sync_method"`
	BootstrapConfigHttpSyncParams            string       `json:"bootstrap_config_http_sync_params"`
	BootstrapConfigHttpSyncUri               string       `json:"bootstrap_config_http_sync_uri"`
	BootstrapConfigRedirectGrandstreamCid    string       `json:"bootstrap_config_redirect_grandstream_cid"`
	BootstrapConfigRedirectGrandstreamKey    string       `json:"bootstrap_config_redirect_grandstream_key"`
	BootstrapConfigRedirectPanasonicPassword string       `json:"bootstrap_config_redirect_panasonic_password"`
	BootstrapConfigRedirectPanasonicUser     string       `json:"bootstrap_config_redirect_panasonic_user"`
	BootstrapConfigRedirectPolycomPassword   string       `json:"bootstrap_config_redirect_polycom_password"`
	BootstrapConfigRedirectPolycomProfile    string       `json:"bootstrap_config_redirect_polycom_profile"`
	BootstrapConfigRedirectPolycomUser       string       `json:"bootstrap_config_redirect_polycom_user"`
	BootstrapConfigRedirectSnomPassword      string       `json:"bootstrap_config_redirect_snom_password"`
	BootstrapConfigRedirectSnomUser          string       `json:"bootstrap_config_redirect_snom_user"`
	BootstrapConfigRedirectYealinkPassword   string       `json:"bootstrap_config_redirect_yealink_password"`
	BootstrapConfigRedirectYealinkUser       string       `json:"bootstrap_config_redirect_yealink_user"`
	BootstrapMethod                          string       `json:"bootstrap_method"`
	BootstrapUri                             string       `json:"bootstrap_uri"`
	ConnectableModelsId                      float32      `json:"connectable_models_id"`
	ExtensionsNum                            float32      `json:"extensions_num"`
	Linerange                                []Linerange2 `json:"linerange"`
	Model                                    string       `json:"model"`
	ResellerId                               float32      `json:"reseller_id"`
	Type                                     string       `json:"type"`
	Vendor                                   string       `json:"vendor"`
}

// PbxDeviceProfiles defines model for PbxDeviceProfiles.
type PbxDeviceProfiles struct {
	ConfigId string `json:"config_id"`
	Name     string `json:"name"`
}

// PbxDeviceProfiles3 defines model for PbxDeviceProfiles3.
type PbxDeviceProfiles3 struct {
	ConfigId float32 `json:"config_id"`
	Name     string  `json:"name"`
}

// PbxDevices defines model for PbxDevices.
type PbxDevices struct {
	CustomerId  string `json:"customer_id"`
	Identifier  string `json:"identifier"`
	Lines       []Line `json:"lines"`
	ProfileId   string `json:"profile_id"`
	StationName string `json:"station_name"`
}

// PeaktimeSpecial defines model for PeaktimeSpecial.
type PeaktimeSpecial struct {
	Start string `json:"start"`
	Stop  string `json:"stop"`
}

// PeaktimeWeekday defines model for PeaktimeWeekday.
type PeaktimeWeekday struct {
	Start   string `json:"start"`
	Stop    string `json:"stop"`
	Weekday string `json:"weekday"`
}

// PeaktimeWeekday3 defines model for PeaktimeWeekday3.
type PeaktimeWeekday3 struct {
	Start   string  `json:"start"`
	Stop    string  `json:"stop"`
	Weekday float32 `json:"weekday"`
}

// PeeringGroups defines model for PeeringGroups.
type PeeringGroups struct {
	ContractId  string `json:"contract_id"`
	Description string `json:"description"`
	Name        string `json:"name"`
	Priority    string `json:"priority"`
}

// PeeringGroups3 defines model for PeeringGroups3.
type PeeringGroups3 struct {
	ContractId  float32 `json:"contract_id"`
	Description string  `json:"description"`
	Name        string  `json:"name"`
	Priority    int32   `json:"priority"`
}

// PeeringRules defines model for PeeringRules.
type PeeringRules struct {
	CalleePattern string `json:"callee_pattern"`
	CalleePrefix  string `json:"callee_prefix"`
	CallerPattern string `json:"caller_pattern"`
	Description   string `json:"description"`
	Enabled       string `json:"enabled"`
	GroupId       string `json:"group_id"`
	Stopper       string `json:"stopper"`
}

// PeeringRules2 defines model for PeeringRules2.
type PeeringRules2 struct {
	CalleePattern string  `json:"callee_pattern"`
	CalleePrefix  string  `json:"callee_prefix"`
	CallerPattern string  `json:"caller_pattern"`
	Description   string  `json:"description"`
	Enabled       bool    `json:"enabled"`
	GroupId       float32 `json:"group_id"`
	Stopper       bool    `json:"stopper"`
}

// PeeringServers defines model for PeeringServers.
type PeeringServers struct {
	Enabled   string `json:"enabled"`
	GroupId   string `json:"group_id"`
	Host      string `json:"host"`
	Ip        string `json:"ip"`
	Name      string `json:"name"`
	Port      string `json:"port"`
	Probe     string `json:"probe"`
	Transport string `json:"transport"`
	ViaRoute  string `json:"via_route"`
	Weight    string `json:"weight"`
}

// PeeringServers3 defines model for PeeringServers3.
type PeeringServers3 struct {
	Enabled   bool    `json:"enabled"`
	GroupId   float32 `json:"group_id"`
	Host      string  `json:"host"`
	Ip        string  `json:"ip"`
	Name      string  `json:"name"`
	Port      float32 `json:"port"`
	Probe     bool    `json:"probe"`
	Transport string  `json:"transport"`
	ViaRoute  string  `json:"via_route"`
	Weight    float32 `json:"weight"`
}

// PhonebookEntries defines model for PhonebookEntries.
type PhonebookEntries struct {
	Id         string `json:"id"`
	Name       string `json:"name"`
	Number     string `json:"number"`
	ResellerId string `json:"reseller_id"`
}

// PreferencesMetaEntries defines model for PreferencesMetaEntries.
type PreferencesMetaEntries struct {
	Attribute    string   `json:"attribute"`
	DataType     string   `json:"data_type"`
	Description  string   `json:"description"`
	Enum         []string `json:"enum"`
	FielddevPref string   `json:"fielddev_pref"`
	Label        string   `json:"label"`
	MaxOccur     string   `json:"max_occur"`
}

// PreferencesMetaEntries2 defines model for PreferencesMetaEntries2.
type PreferencesMetaEntries2 struct {
	Attribute    string   `json:"attribute"`
	DataType     string   `json:"data_type"`
	Description  string   `json:"description"`
	Enum         []string `json:"enum"`
	FielddevPref bool     `json:"fielddev_pref"`
	Label        string   `json:"label"`
	MaxOccur     bool     `json:"max_occur"`
}

// PrimaryNumber defines model for PrimaryNumber.
type PrimaryNumber struct {
	Ac string `json:"ac"`
	Cc string `json:"cc"`
	Sn string `json:"sn"`
}

// ProfilePackages defines model for ProfilePackages.
type ProfilePackages struct {
	BalanceIntervalStartMode string            `json:"balance_interval_start_mode"`
	BalanceIntervalUnit      string            `json:"balance_interval_unit"`
	BalanceIntervalValue     string            `json:"balance_interval_value"`
	CarryOverMode            string            `json:"carry_over_mode"`
	Description              string            `json:"description"`
	InitialBalance           string            `json:"initial_balance"`
	InitialProfiles          []InitialProfile  `json:"initial_profiles"`
	Name                     string            `json:"name"`
	NotopupDiscardIntervals  string            `json:"notopup_discard_intervals"`
	ResellerId               string            `json:"reseller_id"`
	ServiceCharge            string            `json:"service_charge"`
	TimelyDurationUnit       string            `json:"timely_duration_unit"`
	TimelyDurationValue      string            `json:"timely_duration_value"`
	TopupLockLevel           string            `json:"topup_lock_level"`
	TopupProfiles            []TopupProfile    `json:"topup_profiles"`
	UnderrunLockLevel        string            `json:"underrun_lock_level"`
	UnderrunLockThreshold    string            `json:"underrun_lock_threshold"`
	UnderrunProfileThreshold string            `json:"underrun_profile_threshold"`
	UnderrunProfiles         []UnderrunProfile `json:"underrun_profiles"`
}

// Reminders defines model for Reminders.
type Reminders struct {
	Active       string `json:"active"`
	Recur        string `json:"recur"`
	SubscriberId string `json:"subscriber_id"`
	Time         string `json:"time"`
}

// Reminders1 defines model for Reminders1.
type Reminders1 struct {
	Active       bool    `json:"active"`
	Recur        string  `json:"recur"`
	SubscriberId float32 `json:"subscriber_id"`
	Time         string  `json:"time"`
}

// Resellers defines model for Resellers.
type Resellers struct {
	ContractId  string `json:"contract_id"`
	EnableRtc   string `json:"enable_rtc"`
	Name        string `json:"name"`
	RtcNetworks string `json:"rtc_networks"`
	Status      string `json:"status"`
}

// Resellers3 defines model for Resellers3.
type Resellers3 struct {
	ContractId  float32 `json:"contract_id"`
	EnableRtc   bool    `json:"enable_rtc"`
	Name        string  `json:"name"`
	RtcNetworks string  `json:"rtc_networks"`
	Status      string  `json:"status"`
}

// RewriteRuleSets defines model for RewriteRuleSets.
type RewriteRuleSets struct {
	Description  string          `json:"description"`
	Name         string          `json:"name"`
	ResellerId   string          `json:"reseller_id"`
	Rewriterules []Rewriterules3 `json:"rewriterules"`
}

// RewriteRules defines model for RewriteRules.
type RewriteRules struct {
	Description    string `json:"description"`
	Direction      string `json:"direction"`
	Enabled        string `json:"enabled"`
	Field          string `json:"field"`
	MatchPattern   string `json:"match_pattern"`
	Priority       string `json:"priority"`
	ReplacePattern string `json:"replace_pattern"`
	SetId          string `json:"set_id"`
}

// Rewriterules3 defines model for Rewriterules3.
type Rewriterules3 struct {
	Description    string `json:"description"`
	Direction      string `json:"direction"`
	Enabled        string `json:"enabled"`
	Field          string `json:"field"`
	MatchPattern   string `json:"match_pattern"`
	Priority       string `json:"priority"`
	ReplacePattern string `json:"replace_pattern"`
}

// RtcApps defines model for RtcApps.
type RtcApps struct {
	Apps       []App   `json:"apps"`
	ResellerId float32 `json:"reseller_id"`
	RtcUserId  string  `json:"rtc_user_id"`
}

// RtcApps1 defines model for RtcApps1.
type RtcApps1 struct {
	Apps       []App  `json:"apps"`
	ResellerId string `json:"reseller_id"`
	RtcUserId  string `json:"rtc_user_id"`
}

// RtcNetworks defines model for RtcNetworks.
type RtcNetworks struct {
	Networks   []Network `json:"networks"`
	ResellerId float32   `json:"reseller_id"`
	RtcUserId  string    `json:"rtc_user_id"`
}

// RtcNetworks2 defines model for RtcNetworks2.
type RtcNetworks2 struct {
	Networks   []Network `json:"networks"`
	ResellerId string    `json:"reseller_id"`
	RtcUserId  string    `json:"rtc_user_id"`
}

// SIPCapture defines model for SIPCapture.
type SIPCapture struct {
	CallId     string  `json:"call_id"`
	CseqMethod string  `json:"cseq_method"`
	DstIp      string  `json:"dst_ip"`
	DstPort    float32 `json:"dst_port"`
	FromUri    string  `json:"from_uri"`
	Method     string  `json:"method"`
	Protocol   string  `json:"protocol"`
	RequestUri string  `json:"request_uri"`
	SrcIp      string  `json:"src_ip"`
	SrcPort    string  `json:"src_port"`
	Timestamp  string  `json:"timestamp"`
	Transport  string  `json:"transport"`
}

// SIPCaptures defines model for SIPCaptures.
type SIPCaptures struct {
	CallId     string  `json:"call_id"`
	CseqMethod string  `json:"cseq_method"`
	DstIp      string  `json:"dst_ip"`
	DstPort    float32 `json:"dst_port"`
	FromUri    string  `json:"from_uri"`
	Method     string  `json:"method"`
	Protocol   string  `json:"protocol"`
	RequestUri string  `json:"request_uri"`
	SrcIp      string  `json:"src_ip"`
	SrcPort    string  `json:"src_port"`
	Timestamp  string  `json:"timestamp"`
	Transport  string  `json:"transport"`
}

// SM defines model for SM.
type SM struct {
	Callee       string  `json:"callee"`
	Caller       string  `json:"caller"`
	Direction    string  `json:"direction"`
	Reason       string  `json:"reason"`
	Status       string  `json:"status"`
	SubscriberId float32 `json:"subscriber_id"`
	Text         string  `json:"text"`
}

// SMS defines model for SMS.
type SMS struct {
	Callee       string `json:"callee"`
	Caller       string `json:"caller"`
	Direction    string `json:"direction"`
	Reason       string `json:"reason"`
	Status       string `json:"status"`
	SubscriberId string `json:"subscriber_id"`
	Text         string `json:"text"`
}

// SecretRenewNotify defines model for SecretRenewNotify.
type SecretRenewNotify struct {
	Destination string `json:"destination"`
}

// SecretaryNumber defines model for SecretaryNumber.
type SecretaryNumber struct {
	Number string `json:"number"`
}

// Slot defines model for Slot.
type Slot struct {
	Destination string `json:"destination"`
	Slot        string `json:"slot"`
}

// SoundFileRecordings defines model for SoundFileRecordings.
type SoundFileRecordings struct {
	Filename string  `json:"filename"`
	Handle   string  `json:"handle"`
	Loopplay bool    `json:"loopplay"`
	SetId    float32 `json:"set_id"`
}

// SoundFiles defines model for SoundFiles.
type SoundFiles struct {
	Filename string `json:"filename"`
	Handle   string `json:"handle"`
	Loopplay string `json:"loopplay"`
	SetId    string `json:"set_id"`
}

// SoundFiles2 defines model for SoundFiles2.
type SoundFiles2 struct {
	Filename string  `json:"filename"`
	Handle   string  `json:"handle"`
	Loopplay bool    `json:"loopplay"`
	SetId    float32 `json:"set_id"`
}

// SoundHandle defines model for SoundHandle.
type SoundHandle struct {
	Group  string `json:"group"`
	Handle string `json:"handle"`
}

// SoundHandles defines model for SoundHandles.
type SoundHandles struct {
	Group  string `json:"group"`
	Handle string `json:"handle"`
}

// SoundSets defines model for SoundSets.
type SoundSets struct {
	ContractDefault string `json:"contract_default"`
	ContractId      string `json:"contract_id"`
	Description     string `json:"description"`
	Name            string `json:"name"`
	ResellerId      string `json:"reseller_id"`
}

// Source defines model for Source.
type Source struct {
	Source string `json:"source"`
}

// SpeedDials defines model for SpeedDials.
type SpeedDials struct {
	Speeddials []Speeddials1 `json:"speeddials"`
}

// Speeddials1 defines model for Speeddials1.
type Speeddials1 struct {
	Destination string `json:"destination"`
	Slot        string `json:"slot"`
}

// SubscriberProfileSets defines model for SubscriberProfileSets.
type SubscriberProfileSets struct {
	Description string `json:"description"`
	Name        string `json:"name"`
	ResellerId  string `json:"reseller_id"`
}

// SubscriberProfiles defines model for SubscriberProfiles.
type SubscriberProfiles struct {
	Attribute    Attribute `json:"attribute"`
	Description  string    `json:"description"`
	Name         string    `json:"name"`
	ProfileSetId string    `json:"profile_set_id"`
	SetDefault   string    `json:"set_default"`
}

// SubscriberRegistrations defines model for SubscriberRegistrations.
type SubscriberRegistrations struct {
	Contact      string `json:"contact"`
	Expires      string `json:"expires"`
	Nat          string `json:"nat"`
	Path         string `json:"path"`
	Q            string `json:"q"`
	Socket       string `json:"socket"`
	SubscriberId string `json:"subscriber_id"`
}

// SubscriberRegistrations3 defines model for SubscriberRegistrations3.
type SubscriberRegistrations3 struct {
	Contact      string  `json:"contact"`
	Expires      string  `json:"expires"`
	Nat          bool    `json:"nat"`
	Path         string  `json:"path"`
	Q            float32 `json:"q"`
	Socket       string  `json:"socket"`
	SubscriberId float32 `json:"subscriber_id"`
}

// Subscribers defines model for Subscribers.
type Subscribers struct {
	Administrative      string        `json:"administrative"`
	AliasNumbers        []AliasNumber `json:"alias_numbers"`
	DisplayName         string        `json:"display_name"`
	Domain              string        `json:"domain"`
	DomainId            string        `json:"domain_id"`
	Email               string        `json:"email"`
	ExternalId          string        `json:"external_id"`
	IsPbxGroup          string        `json:"is_pbx_group"`
	IsPbxPilot          string        `json:"is_pbx_pilot"`
	Lock                string        `json:"lock"`
	Password            string        `json:"password"`
	PbxExtension        string        `json:"pbx_extension"`
	PbxGroupIds         []string      `json:"pbx_group_ids"`
	PbxGroupmemberIdsId []string      `json:"pbx_groupmember_ids_id"`
	PrimaryNumber       PrimaryNumber `json:"primary_number"`
	ProfileId           string        `json:"profile_id"`
	ProfileSetId        string        `json:"profile_set_id"`
	Status              string        `json:"status"`
	Timezone            string        `json:"timezone"`
	Username            string        `json:"username"`
	Webpassword         string        `json:"webpassword"`
	Webusername         string        `json:"webusername"`
}

// Subscribers3 defines model for Subscribers3.
type Subscribers3 struct {
	Administrative      bool          `json:"administrative"`
	AliasNumbers        []AliasNumber `json:"alias_numbers"`
	DisplayName         string        `json:"display_name"`
	Domain              string        `json:"domain"`
	DomainId            float32       `json:"domain_id"`
	Email               string        `json:"email"`
	ExternalId          string        `json:"external_id"`
	IsPbxGroup          bool          `json:"is_pbx_group"`
	IsPbxPilot          bool          `json:"is_pbx_pilot"`
	Lock                string        `json:"lock"`
	Password            string        `json:"password"`
	PbxExtension        string        `json:"pbx_extension"`
	PbxGroupIds         []string      `json:"pbx_group_ids"`
	PbxGroupmemberIdsId []string      `json:"pbx_groupmember_ids_id"`
	PrimaryNumber       PrimaryNumber `json:"primary_number"`
	ProfileId           float32       `json:"profile_id"`
	ProfileSetId        float32       `json:"profile_set_id"`
	Status              string        `json:"status"`
	Timezone            string        `json:"timezone"`
	Username            string        `json:"username"`
	Webpassword         string        `json:"webpassword"`
	Webusername         string        `json:"webusername"`
}

// SystemContacts defines model for SystemContacts.
type SystemContacts struct {
	Bankname     string `json:"bankname"`
	Bic          string `json:"bic"`
	City         string `json:"city"`
	Company      string `json:"company"`
	Comregnum    string `json:"comregnum"`
	Country      string `json:"country"`
	Email        string `json:"email"`
	Faxnumber    string `json:"faxnumber"`
	Firstname    string `json:"firstname"`
	Gpp0         string `json:"gpp0"`
	Gpp1         string `json:"gpp1"`
	Gpp2         string `json:"gpp2"`
	Gpp3         string `json:"gpp3"`
	Gpp4         string `json:"gpp4"`
	Gpp5         string `json:"gpp5"`
	Gpp6         string `json:"gpp6"`
	Gpp7         string `json:"gpp7"`
	Gpp8         string `json:"gpp8"`
	Gpp9         string `json:"gpp9"`
	Iban         string `json:"iban"`
	Lastname     string `json:"lastname"`
	Mobilenumber string `json:"mobilenumber"`
	Phonenumber  string `json:"phonenumber"`
	Postcode     string `json:"postcode"`
	Street       string `json:"street"`
	Timezone     string `json:"timezone"`
	Vatnum       string `json:"vatnum"`
}

// SystemContacts2 defines model for SystemContacts2.
type SystemContacts2 struct {
	Bankname     string  `json:"bankname"`
	Bic          string  `json:"bic"`
	City         string  `json:"city"`
	Company      string  `json:"company"`
	Comregnum    string  `json:"comregnum"`
	Country      string  `json:"country"`
	Email        string  `json:"email"`
	Faxnumber    string  `json:"faxnumber"`
	Firstname    string  `json:"firstname"`
	Gpp0         string  `json:"gpp0"`
	Gpp1         string  `json:"gpp1"`
	Gpp2         string  `json:"gpp2"`
	Gpp3         string  `json:"gpp3"`
	Gpp4         string  `json:"gpp4"`
	Gpp5         string  `json:"gpp5"`
	Gpp6         string  `json:"gpp6"`
	Gpp7         string  `json:"gpp7"`
	Gpp8         string  `json:"gpp8"`
	Gpp9         string  `json:"gpp9"`
	Iban         string  `json:"iban"`
	Lastname     string  `json:"lastname"`
	Mobilenumber string  `json:"mobilenumber"`
	Phonenumber  string  `json:"phonenumber"`
	Postcode     string  `json:"postcode"`
	Street       string  `json:"street"`
	Timezone     float32 `json:"timezone"`
	Vatnum       string  `json:"vatnum"`
}

// Thenewlycreateditemorempty defines model for Thenewlycreateditemorempty.
type Thenewlycreateditemorempty struct {
	Bankname     string `json:"bankname"`
	Bic          string `json:"bic"`
	City         string `json:"city"`
	Company      string `json:"company"`
	Comregnum    string `json:"comregnum"`
	Country      string `json:"country"`
	Email        string `json:"email"`
	Faxnumber    string `json:"faxnumber"`
	Firstname    string `json:"firstname"`
	Gpp0         string `json:"gpp0"`
	Gpp1         string `json:"gpp1"`
	Gpp2         string `json:"gpp2"`
	Gpp3         string `json:"gpp3"`
	Gpp4         string `json:"gpp4"`
	Gpp5         string `json:"gpp5"`
	Gpp6         string `json:"gpp6"`
	Gpp7         string `json:"gpp7"`
	Gpp8         string `json:"gpp8"`
	Gpp9         string `json:"gpp9"`
	Iban         string `json:"iban"`
	Lastname     string `json:"lastname"`
	Mobilenumber string `json:"mobilenumber"`
	Phonenumber  string `json:"phonenumber"`
	Postcode     string `json:"postcode"`
	Street       string `json:"street"`
	Timezone     string `json:"timezone"`
	Vatnum       string `json:"vatnum"`
}

// Thenewlycreateditemorempty1 defines model for Thenewlycreateditemorempty1.
type Thenewlycreateditemorempty1 struct {
	AdviceOfCharge        string            `json:"advice_of_charge"`
	Currency              string            `json:"currency"`
	FraudDailyLimit       string            `json:"fraud_daily_limit"`
	FraudDailyLock        string            `json:"fraud_daily_lock"`
	FraudDailyNotify      string            `json:"fraud_daily_notify"`
	FraudIntervalLimit    string            `json:"fraud_interval_limit"`
	FraudIntervalLock     string            `json:"fraud_interval_lock"`
	FraudIntervalNotify   string            `json:"fraud_interval_notify"`
	FraudUseResellerRates string            `json:"fraud_use_reseller_rates"`
	Handle                string            `json:"handle"`
	IntervalCharge        string            `json:"interval_charge"`
	IntervalFreeCash      string            `json:"interval_free_cash"`
	IntervalFreeTime      string            `json:"interval_free_time"`
	Name                  string            `json:"name"`
	PeaktimeSpecial       []PeaktimeSpecial `json:"peaktime_special"`
	PeaktimeWeekdays      []PeaktimeWeekday `json:"peaktime_weekdays"`
	Prepaid               string            `json:"prepaid"`
	PrepaidLibrary        string            `json:"prepaid_library"`
	ResellerId            string            `json:"reseller_id"`
}

// Thenewlycreateditemorempty10 defines model for Thenewlycreateditemorempty10.
type Thenewlycreateditemorempty10 struct {
	ContractId  string `json:"contract_id"`
	Description string `json:"description"`
	Name        string `json:"name"`
	Priority    string `json:"priority"`
}

// Thenewlycreateditemorempty11 defines model for Thenewlycreateditemorempty11.
type Thenewlycreateditemorempty11 struct {
	Description string `json:"description"`
	Name        string `json:"name"`
	ResellerId  string `json:"reseller_id"`
}

// Thenewlycreateditemorempty12 defines model for Thenewlycreateditemorempty12.
type Thenewlycreateditemorempty12 struct {
	BillingProfileDefinition string             `json:"billing_profile_definition"`
	BillingProfileId         string             `json:"billing_profile_id"`
	BillingProfiles          []BillingProfiles3 `json:"billing_profiles"`
	ContactId                string             `json:"contact_id"`
	ExternalId               string             `json:"external_id"`
	Status                   string             `json:"status"`
	Type                     string             `json:"type"`
}

// Thenewlycreateditemorempty13 defines model for Thenewlycreateditemorempty13.
type Thenewlycreateditemorempty13 struct {
	IsRegex      string   `json:"is_regex"`
	Mode         string   `json:"mode"`
	Name         string   `json:"name"`
	Sources      []Source `json:"sources"`
	SubscriberId string   `json:"subscriber_id"`
}

// Thenewlycreateditemorempty14 defines model for Thenewlycreateditemorempty14.
type Thenewlycreateditemorempty14 struct {
	Id         string `json:"id"`
	Name       string `json:"name"`
	Number     string `json:"number"`
	ResellerId string `json:"reseller_id"`
}

// Thenewlycreateditemorempty15 defines model for Thenewlycreateditemorempty15.
type Thenewlycreateditemorempty15 struct {
	DeviceId string `json:"device_id"`
	Filename string `json:"filename"`
	Tag      string `json:"tag"`
	Version  string `json:"version"`
}

// Thenewlycreateditemorempty16 defines model for Thenewlycreateditemorempty16.
type Thenewlycreateditemorempty16 struct {
	FromPattern  string `json:"from_pattern"`
	Protocol     string `json:"protocol"`
	SrcIp        string `json:"src_ip"`
	SubscriberId string `json:"subscriber_id"`
}

// Thenewlycreateditemorempty17 defines model for Thenewlycreateditemorempty17.
type Thenewlycreateditemorempty17 struct {
	BootstrapConfigHttpSyncMethod            string      `json:"bootstrap_config_http_sync_method"`
	BootstrapConfigHttpSyncParams            string      `json:"bootstrap_config_http_sync_params"`
	BootstrapConfigHttpSyncUri               string      `json:"bootstrap_config_http_sync_uri"`
	BootstrapConfigRedirectGrandstreamCid    string      `json:"bootstrap_config_redirect_grandstream_cid"`
	BootstrapConfigRedirectGrandstreamKey    string      `json:"bootstrap_config_redirect_grandstream_key"`
	BootstrapConfigRedirectPanasonicPassword string      `json:"bootstrap_config_redirect_panasonic_password"`
	BootstrapConfigRedirectPanasonicUser     string      `json:"bootstrap_config_redirect_panasonic_user"`
	BootstrapConfigRedirectPolycomPassword   string      `json:"bootstrap_config_redirect_polycom_password"`
	BootstrapConfigRedirectPolycomProfile    string      `json:"bootstrap_config_redirect_polycom_profile"`
	BootstrapConfigRedirectPolycomUser       string      `json:"bootstrap_config_redirect_polycom_user"`
	BootstrapConfigRedirectSnomPassword      string      `json:"bootstrap_config_redirect_snom_password"`
	BootstrapConfigRedirectSnomUser          string      `json:"bootstrap_config_redirect_snom_user"`
	BootstrapConfigRedirectYealinkPassword   string      `json:"bootstrap_config_redirect_yealink_password"`
	BootstrapConfigRedirectYealinkUser       string      `json:"bootstrap_config_redirect_yealink_user"`
	BootstrapMethod                          string      `json:"bootstrap_method"`
	BootstrapUri                             string      `json:"bootstrap_uri"`
	ConnectableModelsId                      string      `json:"connectable_models_id"`
	ExtensionsNum                            string      `json:"extensions_num"`
	Linerange                                []Linerange `json:"linerange"`
	Model                                    string      `json:"model"`
	ResellerId                               string      `json:"reseller_id"`
	Type                                     string      `json:"type"`
	Vendor                                   string      `json:"vendor"`
}

// Thenewlycreateditemorempty18 defines model for Thenewlycreateditemorempty18.
type Thenewlycreateditemorempty18 struct {
	Attribute    string   `json:"attribute"`
	DataType     string   `json:"data_type"`
	Description  string   `json:"description"`
	Enum         []string `json:"enum"`
	FielddevPref string   `json:"fielddev_pref"`
	Label        string   `json:"label"`
	MaxOccur     string   `json:"max_occur"`
}

// Thenewlycreateditemorempty19 defines model for Thenewlycreateditemorempty19.
type Thenewlycreateditemorempty19 struct {
	Enabled   string `json:"enabled"`
	GroupId   string `json:"group_id"`
	Host      string `json:"host"`
	Ip        string `json:"ip"`
	Name      string `json:"name"`
	Port      string `json:"port"`
	Probe     string `json:"probe"`
	Transport string `json:"transport"`
	ViaRoute  string `json:"via_route"`
	Weight    string `json:"weight"`
}

// Thenewlycreateditemorempty2 defines model for Thenewlycreateditemorempty2.
type Thenewlycreateditemorempty2 struct {
	Active       string `json:"active"`
	Recur        string `json:"recur"`
	SubscriberId string `json:"subscriber_id"`
	Time         string `json:"time"`
}

// Thenewlycreateditemorempty20 defines model for Thenewlycreateditemorempty20.
type Thenewlycreateditemorempty20 struct {
	ConfigId string `json:"config_id"`
	Name     string `json:"name"`
}

// Thenewlycreateditemorempty21 defines model for Thenewlycreateditemorempty21.
type Thenewlycreateditemorempty21 struct {
	AttachmentName string `json:"attachment_name"`
	Body           string `json:"body"`
	FromEmail      string `json:"from_email"`
	Name           string `json:"name"`
	ResellerId     string `json:"reseller_id"`
	Subject        string `json:"subject"`
}

// Thenewlycreateditemorempty22 defines model for Thenewlycreateditemorempty22.
type Thenewlycreateditemorempty22 struct {
	Filename string `json:"filename"`
	Handle   string `json:"handle"`
	Loopplay string `json:"loopplay"`
	SetId    string `json:"set_id"`
}

// Thenewlycreateditemorempty23 defines model for Thenewlycreateditemorempty23.
type Thenewlycreateditemorempty23 struct {
	CustomerId  string `json:"customer_id"`
	Identifier  string `json:"identifier"`
	Lines       []Line `json:"lines"`
	ProfileId   string `json:"profile_id"`
	StationName string `json:"station_name"`
}

// Thenewlycreateditemorempty24 defines model for Thenewlycreateditemorempty24.
type Thenewlycreateditemorempty24 struct {
	ContentType string `json:"content_type"`
	DeviceId    string `json:"device_id"`
	Version     string `json:"version"`
}

// Thenewlycreateditemorempty25 defines model for Thenewlycreateditemorempty25.
type Thenewlycreateditemorempty25 struct {
	ContractId  string `json:"contract_id"`
	EnableRtc   string `json:"enable_rtc"`
	Name        string `json:"name"`
	RtcNetworks string `json:"rtc_networks"`
	Status      string `json:"status"`
}

// Thenewlycreateditemorempty26 defines model for Thenewlycreateditemorempty26.
type Thenewlycreateditemorempty26 struct {
	Attribute    Attribute `json:"attribute"`
	Description  string    `json:"description"`
	Name         string    `json:"name"`
	ProfileSetId string    `json:"profile_set_id"`
	SetDefault   string    `json:"set_default"`
}

// Thenewlycreateditemorempty27 defines model for Thenewlycreateditemorempty27.
type Thenewlycreateditemorempty27 struct {
	Blocks      []Block `json:"blocks"`
	ContractId  string  `json:"contract_id"`
	Description string  `json:"description"`
	Name        string  `json:"name"`
}

// Thenewlycreateditemorempty28 defines model for Thenewlycreateditemorempty28.
type Thenewlycreateditemorempty28 struct {
	Destinations []Destination `json:"destinations"`
	Name         string        `json:"name"`
	SubscriberId string        `json:"subscriber_id"`
}

// Thenewlycreateditemorempty29 defines model for Thenewlycreateditemorempty29.
type Thenewlycreateditemorempty29 struct {
	Name       string `json:"name"`
	ResellerId string `json:"reseller_id"`
}

// Thenewlycreateditemorempty3 defines model for Thenewlycreateditemorempty3.
type Thenewlycreateditemorempty3 struct {
	Authoritative string `json:"authoritative"`
	Name          string `json:"name"`
	Prefix        string `json:"prefix"`
	SkipRewrite   string `json:"skip_rewrite"`
}

// Thenewlycreateditemorempty30 defines model for Thenewlycreateditemorempty30.
type Thenewlycreateditemorempty30 struct {
	ActivateTimestamp         string             `json:"activate_timestamp"`
	AddVat                    string             `json:"add_vat"`
	BillingProfileDefinition  string             `json:"billing_profile_definition"`
	BillingProfileId          string             `json:"billing_profile_id"`
	BillingProfiles           []BillingProfiles8 `json:"billing_profiles"`
	ContactId                 string             `json:"contact_id"`
	CreateTimestamp           string             `json:"create_timestamp"`
	ExternalId                string             `json:"external_id"`
	InvoiceEmailTemplateId    string             `json:"invoice_email_template_id"`
	InvoiceTemplateId         string             `json:"invoice_template_id"`
	MaxSubscribers            string             `json:"max_subscribers"`
	ModifyTimestamp           string             `json:"modify_timestamp"`
	PassresetEmailTemplateId  string             `json:"passreset_email_template_id"`
	ProfilePackageId          string             `json:"profile_package_id"`
	Status                    string             `json:"status"`
	SubscriberEmailTemplateId string             `json:"subscriber_email_template_id"`
	TerminateTimestamp        string             `json:"terminate_timestamp"`
	Type                      string             `json:"type"`
	VatRate                   string             `json:"vat_rate"`
}

// Thenewlycreateditemorempty31 defines model for Thenewlycreateditemorempty31.
type Thenewlycreateditemorempty31 struct {
	Code                 string `json:"code"`
	EmergencyContainerId string `json:"emergency_container_id"`
	Prefix               string `json:"prefix"`
}

// Thenewlycreateditemorempty32 defines model for Thenewlycreateditemorempty32.
type Thenewlycreateditemorempty32 struct {
	Description string `json:"description"`
	IntraPbx    string `json:"intra_pbx"`
	Level       string `json:"level"`
	LocalAc     string `json:"local_ac"`
	Mode        string `json:"mode"`
	ResellerId  string `json:"reseller_id"`
}

// Thenewlycreateditemorempty33 defines model for Thenewlycreateditemorempty33.
type Thenewlycreateditemorempty33 struct {
	BillingProfileId string `json:"billing_profile_id"`
	Detail           string `json:"detail"`
	Zone             string `json:"zone"`
}

// Thenewlycreateditemorempty34 defines model for Thenewlycreateditemorempty34.
type Thenewlycreateditemorempty34 struct {
	Bnumbers     []Bnumber `json:"bnumbers"`
	IsRegex      string    `json:"is_regex"`
	Mode         string    `json:"mode"`
	Name         string    `json:"name"`
	SubscriberId string    `json:"subscriber_id"`
}

// Thenewlycreateditemorempty35 defines model for Thenewlycreateditemorempty35.
type Thenewlycreateditemorempty35 struct {
	CalleePattern string `json:"callee_pattern"`
	CalleePrefix  string `json:"callee_prefix"`
	CallerPattern string `json:"caller_pattern"`
	Description   string `json:"description"`
	Enabled       string `json:"enabled"`
	GroupId       string `json:"group_id"`
	Stopper       string `json:"stopper"`
}

// Thenewlycreateditemorempty36 defines model for Thenewlycreateditemorempty36.
type Thenewlycreateditemorempty36 struct {
	Domain     string `json:"domain"`
	ResellerId string `json:"reseller_id"`
}

// Thenewlycreateditemorempty37 defines model for Thenewlycreateditemorempty37.
type Thenewlycreateditemorempty37 struct {
	Callee       string `json:"callee"`
	Caller       string `json:"caller"`
	Direction    string `json:"direction"`
	Reason       string `json:"reason"`
	Status       string `json:"status"`
	SubscriberId string `json:"subscriber_id"`
	Text         string `json:"text"`
}

// Thenewlycreateditemorempty38 defines model for Thenewlycreateditemorempty38.
type Thenewlycreateditemorempty38 struct {
	Description    string `json:"description"`
	Direction      string `json:"direction"`
	Enabled        string `json:"enabled"`
	Field          string `json:"field"`
	MatchPattern   string `json:"match_pattern"`
	Priority       string `json:"priority"`
	ReplacePattern string `json:"replace_pattern"`
	SetId          string `json:"set_id"`
}

// Thenewlycreateditemorempty39 defines model for Thenewlycreateditemorempty39.
type Thenewlycreateditemorempty39 struct {
	Name         string `json:"name"`
	SubscriberId string `json:"subscriber_id"`
	Times        []Time `json:"times"`
}

// Thenewlycreateditemorempty4 defines model for Thenewlycreateditemorempty4.
type Thenewlycreateditemorempty4 struct {
	Bankname     string `json:"bankname"`
	Bic          string `json:"bic"`
	City         string `json:"city"`
	Company      string `json:"company"`
	Comregnum    string `json:"comregnum"`
	Country      string `json:"country"`
	Email        string `json:"email"`
	Faxnumber    string `json:"faxnumber"`
	Firstname    string `json:"firstname"`
	Gpp0         string `json:"gpp0"`
	Gpp1         string `json:"gpp1"`
	Gpp2         string `json:"gpp2"`
	Gpp3         string `json:"gpp3"`
	Gpp4         string `json:"gpp4"`
	Gpp5         string `json:"gpp5"`
	Gpp6         string `json:"gpp6"`
	Gpp7         string `json:"gpp7"`
	Gpp8         string `json:"gpp8"`
	Gpp9         string `json:"gpp9"`
	Iban         string `json:"iban"`
	Lastname     string `json:"lastname"`
	Mobilenumber string `json:"mobilenumber"`
	Phonenumber  string `json:"phonenumber"`
	Postcode     string `json:"postcode"`
	ResellerId   string `json:"reseller_id"`
	Street       string `json:"street"`
	Timezone     string `json:"timezone"`
	Vatnum       string `json:"vatnum"`
}

// Thenewlycreateditemorempty40 defines model for Thenewlycreateditemorempty40.
type Thenewlycreateditemorempty40 struct {
	BalanceIntervalStartMode string            `json:"balance_interval_start_mode"`
	BalanceIntervalUnit      string            `json:"balance_interval_unit"`
	BalanceIntervalValue     string            `json:"balance_interval_value"`
	CarryOverMode            string            `json:"carry_over_mode"`
	Description              string            `json:"description"`
	InitialBalance           string            `json:"initial_balance"`
	InitialProfiles          []InitialProfile  `json:"initial_profiles"`
	Name                     string            `json:"name"`
	NotopupDiscardIntervals  string            `json:"notopup_discard_intervals"`
	ResellerId               string            `json:"reseller_id"`
	ServiceCharge            string            `json:"service_charge"`
	TimelyDurationUnit       string            `json:"timely_duration_unit"`
	TimelyDurationValue      string            `json:"timely_duration_value"`
	TopupLockLevel           string            `json:"topup_lock_level"`
	TopupProfiles            []TopupProfile    `json:"topup_profiles"`
	UnderrunLockLevel        string            `json:"underrun_lock_level"`
	UnderrunLockThreshold    string            `json:"underrun_lock_threshold"`
	UnderrunProfileThreshold string            `json:"underrun_profile_threshold"`
	UnderrunProfiles         []UnderrunProfile `json:"underrun_profiles"`
}

// Thenewlycreateditemorempty41 defines model for Thenewlycreateditemorempty41.
type Thenewlycreateditemorempty41 struct {
	Blocks      []Block `json:"blocks"`
	Description string  `json:"description"`
	Name        string  `json:"name"`
	ResellerId  string  `json:"reseller_id"`
}

// Thenewlycreateditemorempty42 defines model for Thenewlycreateditemorempty42.
type Thenewlycreateditemorempty42 struct {
	Description  string          `json:"description"`
	Name         string          `json:"name"`
	ResellerId   string          `json:"reseller_id"`
	Rewriterules []Rewriterules3 `json:"rewriterules"`
}

// Thenewlycreateditemorempty43 defines model for Thenewlycreateditemorempty43.
type Thenewlycreateditemorempty43 struct {
	BillingProfileId      string `json:"billing_profile_id"`
	BillingZoneId         string `json:"billing_zone_id"`
	Destination           string `json:"destination"`
	Direction             string `json:"direction"`
	MatchMode             string `json:"match_mode"`
	OffpeakFollowInterval string `json:"offpeak_follow_interval"`
	OffpeakFollowRate     string `json:"offpeak_follow_rate"`
	OffpeakInitInterval   string `json:"offpeak_init_interval"`
	OffpeakInitRate       string `json:"offpeak_init_rate"`
	OnpeakFollowInterval  string `json:"onpeak_follow_interval"`
	OnpeakFollowRate      string `json:"onpeak_follow_rate"`
	OnpeakInitInterval    string `json:"onpeak_init_interval"`
	OnpeakInitRate        string `json:"onpeak_init_rate"`
	PurgeExisting         string `json:"purge_existing"`
	Source                string `json:"source"`
	UseFreeTime           string `json:"use_free_time"`
}

// Thenewlycreateditemorempty44 defines model for Thenewlycreateditemorempty44.
type Thenewlycreateditemorempty44 struct {
	Amount     string `json:"amount"`
	Code       string `json:"code"`
	CustomerId string `json:"customer_id"`
	PackageId  string `json:"package_id"`
	ResellerId string `json:"reseller_id"`
	ValidUntil string `json:"valid_until"`
}

// Thenewlycreateditemorempty45 defines model for Thenewlycreateditemorempty45.
type Thenewlycreateditemorempty45 struct {
	AmountNet   string `json:"amount_net"`
	AmountTotal string `json:"amount_total"`
	AmountVat   string `json:"amount_vat"`
	CustomerId  string `json:"customer_id"`
	Period      string `json:"period"`
	PeriodEnd   string `json:"period_end"`
	PeriodStart string `json:"period_start"`
	SentDate    string `json:"sent_date"`
	Serial      string `json:"serial"`
	TemplateId  string `json:"template_id"`
}

// Thenewlycreateditemorempty46 defines model for Thenewlycreateditemorempty46.
type Thenewlycreateditemorempty46 struct {
	Contact      string `json:"contact"`
	Expires      string `json:"expires"`
	Nat          string `json:"nat"`
	Path         string `json:"path"`
	Q            string `json:"q"`
	Socket       string `json:"socket"`
	SubscriberId string `json:"subscriber_id"`
}

// Thenewlycreateditemorempty47 defines model for Thenewlycreateditemorempty47.
type Thenewlycreateditemorempty47 struct {
	Description string `json:"description"`
	NcosLevelId string `json:"ncos_level_id"`
}

// Thenewlycreateditemorempty48 defines model for Thenewlycreateditemorempty48.
type Thenewlycreateditemorempty48 struct {
	Liid       string `json:"liid"`
	Number     string `json:"number"`
	X2Host     string `json:"x2_host"`
	X2Password string `json:"x2_password"`
	X2Port     string `json:"x2_port"`
	X2User     string `json:"x2_user"`
	X3Host     string `json:"x3_host"`
	X3Port     string `json:"x3_port"`
	X3Required string `json:"x3_required"`
}

// Thenewlycreateditemorempty49 defines model for Thenewlycreateditemorempty49.
type Thenewlycreateditemorempty49 struct {
	ContractDefault string `json:"contract_default"`
	ContractId      string `json:"contract_id"`
	Description     string `json:"description"`
	Name            string `json:"name"`
	ResellerId      string `json:"reseller_id"`
}

// Thenewlycreateditemorempty5 defines model for Thenewlycreateditemorempty5.
type Thenewlycreateditemorempty5 struct {
	Administrative      string        `json:"administrative"`
	AliasNumbers        []AliasNumber `json:"alias_numbers"`
	DisplayName         string        `json:"display_name"`
	Domain              string        `json:"domain"`
	DomainId            string        `json:"domain_id"`
	Email               string        `json:"email"`
	ExternalId          string        `json:"external_id"`
	IsPbxGroup          string        `json:"is_pbx_group"`
	IsPbxPilot          string        `json:"is_pbx_pilot"`
	Lock                string        `json:"lock"`
	Password            string        `json:"password"`
	PbxExtension        string        `json:"pbx_extension"`
	PbxGroupIds         []string      `json:"pbx_group_ids"`
	PbxGroupmemberIdsId []string      `json:"pbx_groupmember_ids_id"`
	PrimaryNumber       PrimaryNumber `json:"primary_number"`
	ProfileId           string        `json:"profile_id"`
	ProfileSetId        string        `json:"profile_set_id"`
	Status              string        `json:"status"`
	Timezone            string        `json:"timezone"`
	Username            string        `json:"username"`
	Webpassword         string        `json:"webpassword"`
	Webusername         string        `json:"webusername"`
}

// Thenewlycreateditemorempty50 defines model for Thenewlycreateditemorempty50.
type Thenewlycreateditemorempty50 struct {
	Code         string `json:"code"`
	RequestToken string `json:"request_token"`
	SubscriberId string `json:"subscriber_id"`
}

// Thenewlycreateditemorempty51 defines model for Thenewlycreateditemorempty51.
type Thenewlycreateditemorempty51 struct {
	Amount       string `json:"amount"`
	PackageId    string `json:"package_id"`
	RequestToken string `json:"request_token"`
	SubscriberId string `json:"subscriber_id"`
}

// Thenewlycreateditemorempty52 defines model for Thenewlycreateditemorempty52.
type Thenewlycreateditemorempty52 struct {
	Direction    string `json:"direction"`
	Number       string `json:"number"`
	SubscriberId string `json:"subscriber_id"`
}

// Thenewlycreateditemorempty53 defines model for Thenewlycreateditemorempty53.
type Thenewlycreateditemorempty53 struct {
	Destination  string `json:"destination"`
	SubscriberId string `json:"subscriber_id"`
}

// Thenewlycreateditemorempty54 defines model for Thenewlycreateditemorempty54.
type Thenewlycreateditemorempty54 struct {
	Login string `json:"login"`
}

// Thenewlycreateditemorempty55 defines model for Thenewlycreateditemorempty55.
type Thenewlycreateditemorempty55 struct {
	Callee string `json:"callee"`
	Caller string `json:"caller"`
	Callid string `json:"callid"`
	Status string `json:"status"`
	Token  string `json:"token"`
	Type   string `json:"type"`
}

// Thenewlycreateditemorempty6 defines model for Thenewlycreateditemorempty6.
type Thenewlycreateditemorempty6 struct {
	Data         string `json:"data"`
	Destination  string `json:"destination"`
	Faxfile      string `json:"faxfile"`
	Pageheader   string `json:"pageheader"`
	Quality      string `json:"quality"`
	SubscriberId string `json:"subscriber_id"`
}

// Thenewlycreateditemorempty7 defines model for Thenewlycreateditemorempty7.
type Thenewlycreateditemorempty7 struct {
	Dir          string `json:"dir"`
	Greetingfile string `json:"greetingfile"`
	SubscriberId string `json:"subscriber_id"`
}

// Thenewlycreateditemorempty8 defines model for Thenewlycreateditemorempty8.
type Thenewlycreateditemorempty8 struct {
	CarrierId     string `json:"carrier_id"`
	End           string `json:"end"`
	Number        string `json:"number"`
	RoutingNumber string `json:"routing_number"`
	Start         string `json:"start"`
	Type          string `json:"type"`
}

// Thenewlycreateditemorempty9 defines model for Thenewlycreateditemorempty9.
type Thenewlycreateditemorempty9 struct {
	BillingData     string `json:"billing_data"`
	CallData        string `json:"call_data"`
	IsActive        string `json:"is_active"`
	IsMaster        string `json:"is_master"`
	IsSuperuser     string `json:"is_superuser"`
	LawfulIntercept string `json:"lawful_intercept"`
	Login           string `json:"login"`
	Password        string `json:"password"`
	ReadOnly        string `json:"read_only"`
	ResellerId      string `json:"reseller_id"`
	ShowPasswords   string `json:"show_passwords"`
}

// Time defines model for Time.
type Time struct {
	Hour   string `json:"hour"`
	Mday   string `json:"mday"`
	Minute string `json:"minute"`
	Month  string `json:"month"`
	Wday   string `json:"wday"`
	Year   string `json:"year"`
}

// TopupLog defines model for TopupLog.
type TopupLog struct {
	Amount                  float32 `json:"amount"`
	CashBalanceAfter        float32 `json:"cash_balance_after"`
	CashBalanceBefore       float32 `json:"cash_balance_before"`
	ContractBalanceAfterId  float32 `json:"contract_balance_after_id"`
	ContractBalanceBeforeId float32 `json:"contract_balance_before_id"`
	ContractId              float32 `json:"contract_id"`
	LockLevelAfter          string  `json:"lock_level_after"`
	LockLevelBefore         string  `json:"lock_level_before"`
	Message                 string  `json:"message"`
	Outcome                 string  `json:"outcome"`
	PackageAfterId          float32 `json:"package_after_id"`
	PackageBeforeId         float32 `json:"package_before_id"`
	ProfileAfterId          float32 `json:"profile_after_id"`
	ProfileBeforeId         float32 `json:"profile_before_id"`
	RequestToken            string  `json:"request_token"`
	SubscriberId            float32 `json:"subscriber_id"`
	Timestamp               string  `json:"timestamp"`
	Type                    string  `json:"type"`
	Username                string  `json:"username"`
	VoucherId               float32 `json:"voucher_id"`
}

// TopupLogs defines model for TopupLogs.
type TopupLogs struct {
	Amount                  float32 `json:"amount"`
	CashBalanceAfter        float32 `json:"cash_balance_after"`
	CashBalanceBefore       float32 `json:"cash_balance_before"`
	ContractBalanceAfterId  float32 `json:"contract_balance_after_id"`
	ContractBalanceBeforeId float32 `json:"contract_balance_before_id"`
	ContractId              float32 `json:"contract_id"`
	LockLevelAfter          string  `json:"lock_level_after"`
	LockLevelBefore         string  `json:"lock_level_before"`
	Message                 string  `json:"message"`
	Outcome                 string  `json:"outcome"`
	PackageAfterId          float32 `json:"package_after_id"`
	PackageBeforeId         float32 `json:"package_before_id"`
	ProfileAfterId          float32 `json:"profile_after_id"`
	ProfileBeforeId         float32 `json:"profile_before_id"`
	RequestToken            string  `json:"request_token"`
	SubscriberId            float32 `json:"subscriber_id"`
	Timestamp               string  `json:"timestamp"`
	Type                    string  `json:"type"`
	Username                string  `json:"username"`
	VoucherId               float32 `json:"voucher_id"`
}

// TopupProfile defines model for TopupProfile.
type TopupProfile struct {
	NetworkId string `json:"network_id"`
	ProfileId string `json:"profile_id"`
}

// TrustedSources defines model for TrustedSources.
type TrustedSources struct {
	FromPattern  string `json:"from_pattern"`
	Protocol     string `json:"protocol"`
	SrcIp        string `json:"src_ip"`
	SubscriberId string `json:"subscriber_id"`
}

// TrustedSources2 defines model for TrustedSources2.
type TrustedSources2 struct {
	FromPattern  string  `json:"from_pattern"`
	Protocol     string  `json:"protocol"`
	SrcIp        string  `json:"src_ip"`
	SubscriberId float32 `json:"subscriber_id"`
}

// UnderrunProfile defines model for UnderrunProfile.
type UnderrunProfile struct {
	NetworkId string `json:"network_id"`
	ProfileId string `json:"profile_id"`
}

// VoicemailGreetings defines model for VoicemailGreetings.
type VoicemailGreetings struct {
	Dir          string `json:"dir"`
	Greetingfile string `json:"greetingfile"`
	SubscriberId string `json:"subscriber_id"`
}

// VoicemailGreetings1 defines model for VoicemailGreetings1.
type VoicemailGreetings1 struct {
	Dir          string  `json:"dir"`
	Greetingfile string  `json:"greetingfile"`
	SubscriberId float32 `json:"subscriber_id"`
}

// VoicemailSettings defines model for VoicemailSettings.
type VoicemailSettings struct {
	Attach    string `json:"attach"`
	Delete    string `json:"delete"`
	Email     string `json:"email"`
	Pin       string `json:"pin"`
	SmsNumber string `json:"sms_number"`
}

// VoicemailSettings2 defines model for VoicemailSettings2.
type VoicemailSettings2 struct {
	Attach    bool   `json:"attach"`
	Delete    bool   `json:"delete"`
	Email     string `json:"email"`
	Pin       string `json:"pin"`
	SmsNumber string `json:"sms_number"`
}

// Voicemails defines model for Voicemails.
type Voicemails struct {
	Caller       string  `json:"caller"`
	Duration     float32 `json:"duration"`
	Folder       string  `json:"folder"`
	SubscriberId float32 `json:"subscriber_id"`
	Time         string  `json:"time"`
}

// Vouchers defines model for Vouchers.
type Vouchers struct {
	Amount     string `json:"amount"`
	Code       string `json:"code"`
	CustomerId string `json:"customer_id"`
	PackageId  string `json:"package_id"`
	ResellerId string `json:"reseller_id"`
	ValidUntil string `json:"valid_until"`
}

// CreateanewAdminCertJSONBody defines parameters for CreateanewAdminCert.
type CreateanewAdminCertJSONBody CreateanewAdminCertRequest

// GetAdminitemsParams defines parameters for GetAdminitems.
type GetAdminitemsParams struct {

	// Filter for admins belonging to a specific reseller
	ResellerId string `json:"reseller_id"`

	// Filter for admins with a specific login (wildcards possible)
	Login string `json:"login"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewAdminJSONBody defines parameters for CreateanewAdmin.
type CreateanewAdminJSONBody CreateanewAdminRequest

// CreateanewApplyRewriteJSONBody defines parameters for CreateanewApplyRewrite.
type CreateanewApplyRewriteJSONBody CreateanewApplyRewriteRequest

// GetAutoAttendantitemsParams defines parameters for GetAutoAttendantitems.
type GetAutoAttendantitemsParams struct {

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// ReplacechangeaspecificAutoAttendantJSONBody defines parameters for ReplacechangeaspecificAutoAttendant.
type ReplacechangeaspecificAutoAttendantJSONBody Replace1changeaspecificAutoAttendantRequest

// GetBalanceIntervalitemsParams defines parameters for GetBalanceIntervalitems.
type GetBalanceIntervalitemsParams struct {

	// Filter for actual balance intervals of customers belonging to a specific reseller
	ResellerId string `json:"reseller_id"`

	// Filter for contracts with a specific contact id
	ContactId string `json:"contact_id"`

	// Filter for contracts with a specific status (except "terminated")
	Status string `json:"status"`

	// Filter for contracts with a specific external id
	ExternalId string `json:"external_id"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// GetBannedIpitemsParams defines parameters for GetBannedIpitems.
type GetBannedIpitemsParams struct {

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// GetBannedUseritemsParams defines parameters for GetBannedUseritems.
type GetBannedUseritemsParams struct {

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// GetBillingFeeitemsParams defines parameters for GetBillingFeeitems.
type GetBillingFeeitemsParams struct {

	// Filter for fees belonging to a specific billing profile
	BillingProfileId string `json:"billing_profile_id"`

	// Filter for fees of a specific billing zone
	BillingZoneId string `json:"billing_zone_id"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewBillingFeeJSONBody defines parameters for CreateanewBillingFee.
type CreateanewBillingFeeJSONBody CreateanewBillingFeeRequest

// ReplacechangeaspecificBillingFeeJSONBody defines parameters for ReplacechangeaspecificBillingFee.
type ReplacechangeaspecificBillingFeeJSONBody Replace1changeaspecificBillingFeeRequest

// GetBillingNetworkitemsParams defines parameters for GetBillingNetworkitems.
type GetBillingNetworkitemsParams struct {

	// Filter for billing networks belonging to a specific reseller
	ResellerId string `json:"reseller_id"`

	// Filter for billing networks containing a specific IP address
	Ip string `json:"ip"`

	// Filter for billing networks matching a name pattern
	Name string `json:"name"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewBillingNetworkJSONBody defines parameters for CreateanewBillingNetwork.
type CreateanewBillingNetworkJSONBody CreateanewBillingNetworkRequest

// ReplacechangeaspecificBillingNetworkJSONBody defines parameters for ReplacechangeaspecificBillingNetwork.
type ReplacechangeaspecificBillingNetworkJSONBody Replace1changeaspecificBillingNetworkRequest

// GetBillingProfileitemsParams defines parameters for GetBillingProfileitems.
type GetBillingProfileitemsParams struct {

	// Filter for billing profiles belonging to a specific reseller
	ResellerId string `json:"reseller_id"`

	// Filter for billing profiles with a specific handle
	Handle string `json:"handle"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewBillingProfileJSONBody defines parameters for CreateanewBillingProfile.
type CreateanewBillingProfileJSONBody CreateanewBillingProfileRequest

// ReplacechangeaspecificBillingProfileJSONBody defines parameters for ReplacechangeaspecificBillingProfile.
type ReplacechangeaspecificBillingProfileJSONBody Replace1changeaspecificBillingProfileRequest

// GetBillingZoneitemsParams defines parameters for GetBillingZoneitems.
type GetBillingZoneitemsParams struct {

	// Filter for zones belonging to a specific billing profile
	BillingProfileId string `json:"billing_profile_id"`

	// Filter for zone name
	Zone string `json:"zone"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewBillingZoneJSONBody defines parameters for CreateanewBillingZone.
type CreateanewBillingZoneJSONBody CreateanewBillingZoneRequest

// ReplacechangeaspecificBillingZoneJSONBody defines parameters for ReplacechangeaspecificBillingZone.
type ReplacechangeaspecificBillingZoneJSONBody Replace1changeaspecificBillingZoneRequest

// CreateanewCallControlJSONBody defines parameters for CreateanewCallControl.
type CreateanewCallControlJSONBody CreateanewCallControlRequest

// GetCallForwarditemsParams defines parameters for GetCallForwarditems.
type GetCallForwarditemsParams struct {

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// ReplacechangeaspecificCallForwardJSONBody defines parameters for ReplacechangeaspecificCallForward.
type ReplacechangeaspecificCallForwardJSONBody Replace1changeaspecificCallForwardRequest

// GetCallListitemsParams defines parameters for GetCallListitems.
type GetCallListitemsParams struct {

	// Format start_time according to the optional time zone provided here, e.g. Europe/Berlin.
	Tz string `json:"tz"`

	// Format start_time according to the filtered customer's/subscribers's inherited time zone.
	UseOwnerTz string `json:"use_owner_tz"`

	// Filter for calls for a specific subscriber. Either this or customer_id is mandatory if called by admin, reseller or subscriberadmin to filter list down to a specific subscriber in order to properly determine the direction of calls.
	SubscriberId string `json:"subscriber_id"`

	// Filter for calls for a specific customer. Either this or subscriber_id is mandatory if called by admin, reseller or subscriberadmin to filter list down to a specific customer. For calls within the same customer_id, the direction will always be "out".
	CustomerId string `json:"customer_id"`

	// Set this parameter for example to "gpp0" if you store alias numbers in the gpp0 preference and want to have that value shown as other CLI for calls from or to such a local subscriber.
	AliasField string `json:"alias_field"`

	// Filter for calls with a specific status. One of "ok", "busy", "noanswer", "cancel", "offline", "timeout", "other".
	Status string `json:"status"`

	// Filter for calls not having a specific status. One of "ok", "busy", "noanswer", "cancel", "offline", "timeout", "other".
	StatusNe string `json:"status_ne"`

	// Filter for calls having a specific rating status. Comma separated list of "ok", "unrated", "failed".
	RatingStatus string `json:"rating_status"`

	// Filter for calls not having a specific rating status. Comma separated list of "ok", "unrated", "failed".
	RatingStatusNe string `json:"rating_status_ne"`

	// Filter for calls with a specific type. One of "call", "cfu", "cfb", "cft", "cfna", "cfs", "cfr".
	Type string `json:"type"`

	// Filter for calls not having a specific type. One of "call", "cfu", "cfb", "cft", "cfna", "cfs", "cfr".
	TypeNe string `json:"type_ne"`

	// Filter for calls with a specific direction. One of "in", "out".
	Direction string `json:"direction"`

	// Filter for calls starting greater or equal the specified time stamp.
	StartGe string `json:"start_ge"`

	// Filter for calls starting lower or equal the specified time stamp.
	StartLe string `json:"start_le"`

	// Filter for calls initiated greater or equal the specified time stamp.
	InitGe string `json:"init_ge"`

	// Filter for calls initiated lower or equal the specified time stamp.
	InitLe string `json:"init_le"`

	// Filter for a particular call_id prefix and sort by call leg depth.
	CallId string `json:"call_id"`

	// Filter calls by a specific number that is a part of in or out calls.
	OwnCli string `json:"own_cli"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// GetCallQueueitemsParams defines parameters for GetCallQueueitems.
type GetCallQueueitemsParams struct {

	// Filter for callqueues of subscribers belonging to a specific reseller
	ResellerId string `json:"reseller_id"`

	// Filter for callqueues of subscribers with numbers matching the given pattern.
	Number string `json:"number"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// GetCallRecordingitemsParams defines parameters for GetCallRecordingitems.
type GetCallRecordingitemsParams struct {

	// Filter for callrecordings belonging to a specific reseller
	ResellerId string `json:"reseller_id"`

	// Filter for callrecordings with a specific status
	Status string `json:"status"`

	// Filter for callrecordings where the subscriber with the given id is involved.
	SubscriberId string `json:"subscriber_id"`

	// Format start_time according to the optional time zone provided here, e.g. Europe/Berlin.
	Tz string `json:"tz"`

	// Force callrecording info deletion from database despite callrecording files deletion errors.
	ForceDelete string `json:"force_delete"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// GetCallRecordingStreamitemsParams defines parameters for GetCallRecordingStreamitems.
type GetCallRecordingStreamitemsParams struct {

	// Filter for callrecording streams belonging to a specific recording session.
	RecordingId string `json:"recording_id"`

	// Filter for callrecording streams with a specific type ("single" or "mixed")
	Type string `json:"type"`

	// Format start_time according to the optional time zone provided here, e.g. Europe/Berlin.
	Tz string `json:"tz"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// GetCallitemsParams defines parameters for GetCallitems.
type GetCallitemsParams struct {

	// Filter for calls of a specific customer
	CustomerId string `json:"customer_id"`

	// Filter for calls of a specific subscriber
	SubscriberId string `json:"subscriber_id"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// GetCapabilityitemsParams defines parameters for GetCapabilityitems.
type GetCapabilityitemsParams struct {

	// Filter for capability name.
	Name string `json:"name"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// GetCCMapEntryitemsParams defines parameters for GetCCMapEntryitems.
type GetCCMapEntryitemsParams struct {

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// ReplacechangeaspecificCCMapEntryJSONBody defines parameters for ReplacechangeaspecificCCMapEntry.
type ReplacechangeaspecificCCMapEntryJSONBody Replace1changeaspecificCCMapEntryRequest

// GetCFBNumberSetitemsParams defines parameters for GetCFBNumberSetitems.
type GetCFBNumberSetitemsParams struct {

	// Filter for B-Number sets belonging to a specific subscriber
	SubscriberId string `json:"subscriber_id"`

	// Filter for items matching a B-Number Set name pattern
	Name string `json:"name"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewCFBNumberSetJSONBody defines parameters for CreateanewCFBNumberSet.
type CreateanewCFBNumberSetJSONBody CreateanewCFBNumberSetRequest

// ReplacechangeaspecificCFBNumberSetJSONBody defines parameters for ReplacechangeaspecificCFBNumberSet.
type ReplacechangeaspecificCFBNumberSetJSONBody Replace1changeaspecificCFBNumberSetRequest

// GetCFDestinationSetitemsParams defines parameters for GetCFDestinationSetitems.
type GetCFDestinationSetitemsParams struct {

	// Filter for destination sets belonging to a specific subscriber
	SubscriberId string `json:"subscriber_id"`

	// Filter for contacts matching a destination set name pattern
	Name string `json:"name"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewCFDestinationSetJSONBody defines parameters for CreateanewCFDestinationSet.
type CreateanewCFDestinationSetJSONBody CreateanewCFDestinationSetRequest

// ReplacechangeaspecificCFDestinationSetJSONBody defines parameters for ReplacechangeaspecificCFDestinationSet.
type ReplacechangeaspecificCFDestinationSetJSONBody Replace1changeaspecificCFDestinationSetRequest

// GetCFMappingitemsParams defines parameters for GetCFMappingitems.
type GetCFMappingitemsParams struct {

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// ReplacechangeaspecificCFMappingJSONBody defines parameters for ReplacechangeaspecificCFMapping.
type ReplacechangeaspecificCFMappingJSONBody Replace1changeaspecificCFMappingRequest

// GetCFSourceSetitemsParams defines parameters for GetCFSourceSetitems.
type GetCFSourceSetitemsParams struct {

	// Filter for source sets belonging to a specific subscriber
	SubscriberId string `json:"subscriber_id"`

	// Filter for items matching a source set name pattern
	Name string `json:"name"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewCFSourceSetJSONBody defines parameters for CreateanewCFSourceSet.
type CreateanewCFSourceSetJSONBody CreateanewCFSourceSetRequest

// ReplacechangeaspecificCFSourceSetJSONBody defines parameters for ReplacechangeaspecificCFSourceSet.
type ReplacechangeaspecificCFSourceSetJSONBody Replace1changeaspecificCFSourceSetRequest

// GetCFTimeSetitemsParams defines parameters for GetCFTimeSetitems.
type GetCFTimeSetitemsParams struct {

	// Filter for timesets belonging to a specific subscriber
	SubscriberId string `json:"subscriber_id"`

	// Filter for contacts matching a timeset name pattern
	Name string `json:"name"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewCFTimeSetJSONBody defines parameters for CreateanewCFTimeSet.
type CreateanewCFTimeSetJSONBody CreateanewCFTimeSetRequest

// ReplacechangeaspecificCFTimeSetJSONBody defines parameters for ReplacechangeaspecificCFTimeSet.
type ReplacechangeaspecificCFTimeSetJSONBody Replace1changeaspecificCFTimeSetRequest

// GetContractitemsParams defines parameters for GetContractitems.
type GetContractitemsParams struct {

	// Filter for contracts with a specific contact id
	ContactId string `json:"contact_id"`

	// Filter for contracts with a specific status (except "terminated")
	Status string `json:"status"`

	// Filter for contracts with a specific external id
	ExternalId string `json:"external_id"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewContractJSONBody defines parameters for CreateanewContract.
type CreateanewContractJSONBody CreateanewContractRequest

// ReplacechangeaspecificContractJSONBody defines parameters for ReplacechangeaspecificContract.
type ReplacechangeaspecificContractJSONBody Replace1changeaspecificContractRequest

// GetConversationitemsParams defines parameters for GetConversationitems.
type GetConversationitemsParams struct {

	// Format timestamp according to the optional time zone provided here, e.g. Europe/Berlin.
	Tz string `json:"tz"`

	// Format timestamp according to the filtered customer's/subscribers's inherited time zone.
	UseOwnerTz string `json:"use_owner_tz"`

	// Filter for conversation events of a specific subscriber. Either this or customer_id filter is mandatory if called by admin, reseller or subscriberadmin.
	SubscriberId string `json:"subscriber_id"`

	// Filter for conversation events for a specific customer. Either this or subscriber_id filter is mandatory if called by admin, reseller or subscriberadmin.
	CustomerId string `json:"customer_id"`

	// Filter for conversation events with a specific direction. One of "in", "out". Voicemails are considered as incoming only.
	Direction string `json:"direction"`

	// todo
	Status string `json:"status"`

	// Filter for conversation events of given types ("call", "voicemail", "sms", "fax", "xmpp"). Multiple types can be included by concatenating type strings, eg. "?type=call-voicemial".
	Type string `json:"type"`

	// Filter for conversation events starting greater or equal the specified time stamp.
	From string `json:"from"`

	// Filter for conversation events starting lower or equal the specified time stamp.
	To string `json:"to"`

	// Force the fax numbers normalization logic (available: 'default', 'extended').
	FaxNumberRewriteMode string `json:"fax_number_rewrite_mode"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// GetCustomerBalanceitemsParams defines parameters for GetCustomerBalanceitems.
type GetCustomerBalanceitemsParams struct {

	// Filter for customer balances belonging to a specific reseller
	ResellerId string `json:"reseller_id"`

	// Filter for contracts with a specific contact id
	ContactId string `json:"contact_id"`

	// Filter for contracts with a specific status (except "terminated")
	Status string `json:"status"`

	// Filter for contracts with a specific external id
	ExternalId string `json:"external_id"`

	// Filter for contracts with subscribers belonging to a specific domain
	Domain string `json:"domain"`

	// Filter for contracts with a prepaid billing profile
	Prepaid string `json:"prepaid"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// ReplacechangeaspecificCustomerBalanceJSONBody defines parameters for ReplacechangeaspecificCustomerBalance.
type ReplacechangeaspecificCustomerBalanceJSONBody Replace1changeaspecificCustomerBalanceRequest

// GetCustomerContactitemsParams defines parameters for GetCustomerContactitems.
type GetCustomerContactitemsParams struct {

	// Filter for contacts matching an email pattern
	Email string `json:"email"`

	// Filter for contacts belonging to a specific reseller
	ResellerId string `json:"reseller_id"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewCustomerContactJSONBody defines parameters for CreateanewCustomerContact.
type CreateanewCustomerContactJSONBody CreateanewCustomerContactRequest

// ReplacechangeaspecificCustomerContactJSONBody defines parameters for ReplacechangeaspecificCustomerContact.
type ReplacechangeaspecificCustomerContactJSONBody Replace1changeaspecificCustomerContactRequest

// GetCustomerFraudEventitemsParams defines parameters for GetCustomerFraudEventitems.
type GetCustomerFraudEventitemsParams struct {

	// Filter for fraud events belonging to a specific reseller
	ResellerId string `json:"reseller_id"`

	// Interval filter. values: day, month. default: month
	Interval string `json:"interval"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// GetCustomerFraudPreferenceitemsParams defines parameters for GetCustomerFraudPreferenceitems.
type GetCustomerFraudPreferenceitemsParams struct {

	// Filter for fraud preferences of contracts belonging to a specific reseller
	ResellerId string `json:"reseller_id"`

	// Filter for fraud preferences of contracts with a specific contact id
	ContactId string `json:"contact_id"`

	// Filter for fraud preferences of contracts containing a specific notification email address
	Notify string `json:"notify"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// ReplacechangeaspecificCustomerFraudPreferenceJSONBody defines parameters for ReplacechangeaspecificCustomerFraudPreference.
type ReplacechangeaspecificCustomerFraudPreferenceJSONBody Replace1changeaspecificCustomerFraudPreferenceRequest

// GetCustomerLocationitemsParams defines parameters for GetCustomerLocationitems.
type GetCustomerLocationitemsParams struct {

	// Filter for customer locations containing a specific IP address
	Ip string `json:"ip"`

	// Filter for customer locations matching a name pattern
	Name string `json:"name"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewCustomerLocationJSONBody defines parameters for CreateanewCustomerLocation.
type CreateanewCustomerLocationJSONBody CreateanewCustomerLocationRequest

// ReplacechangeaspecificCustomerLocationJSONBody defines parameters for ReplacechangeaspecificCustomerLocation.
type ReplacechangeaspecificCustomerLocationJSONBody Replace1changeaspecificCustomerLocationRequest

// GetCustomerPreferenceitemsParams defines parameters for GetCustomerPreferenceitems.
type GetCustomerPreferenceitemsParams struct {

	// Fetch preferences for a specific location otherwise default preferences (location_id=null) are shown.
	LocationId string `json:"location_id"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// ReplacechangeaspecificCustomerPreferenceJSONBody defines parameters for ReplacechangeaspecificCustomerPreference.
type ReplacechangeaspecificCustomerPreferenceJSONBody string

// GetCustomeritemsParams defines parameters for GetCustomeritems.
type GetCustomeritemsParams struct {

	// Filter for customers with a specific status (comma-separated list of statuses to include possible)
	Status string `json:"status"`

	// Filter for customers not having a specific status (comma-separated list of statuses to exclude possible)
	NotStatus string `json:"not_status"`

	// Filter for customers belonging to a specific reseller
	ResellerId string `json:"reseller_id"`

	// Filter for customer with specific external_id
	ExternalId string `json:"external_id"`

	// Filter for customers belonging to a specific contact
	ContactId string `json:"contact_id"`

	// Filter for customers with specific profile package id
	PackageId string `json:"package_id"`

	// Filter for customers with create_timestamp greater then specified value
	CreateTimestampGt string `json:"create_timestamp_gt"`

	// Filter for customers with create_timestamp less then specified value
	CreateTimestampLt string `json:"create_timestamp_lt"`

	// Filter for customers with activate_timestamp greater then specified value
	ActivateTimestampGt string `json:"activate_timestamp_gt"`

	// Filter for customers with activate_timestamp less then specified value
	ActivateTimestampLt string `json:"activate_timestamp_lt"`

	// Filter for customers with modify_timestamp greater then specified value
	ModifyTimestampGt string `json:"modify_timestamp_gt"`

	// Filter for customers with modify_timestamp less then specified value
	ModifyTimestampLt string `json:"modify_timestamp_lt"`

	// Filter for customers with terminate_timestamp greater then specified value
	TerminateTimestampGt string `json:"terminate_timestamp_gt"`

	// Filter for customers with terminate_timestamp less then specified value
	TerminateTimestampLt string `json:"terminate_timestamp_lt"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewCustomerJSONBody defines parameters for CreateanewCustomer.
type CreateanewCustomerJSONBody CreateanewCustomerRequest

// ReplacechangeaspecificCustomerJSONBody defines parameters for ReplacechangeaspecificCustomer.
type ReplacechangeaspecificCustomerJSONBody Replace1changeaspecificCustomerRequest

// GetCustomerZoneCostitemsParams defines parameters for GetCustomerZoneCostitems.
type GetCustomerZoneCostitemsParams struct {

	// Filter for a specific customer.
	CustomerId string `json:"customer_id"`

	// Filter for a specific start time in format YYYY-MM-DDThhmmss.
	Start string `json:"start"`

	// Filter for a specific end time in format YYYY-MM-DDThhmmss.
	End string `json:"end"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// GetDomainPreferenceitemsParams defines parameters for GetDomainPreferenceitems.
type GetDomainPreferenceitemsParams struct {

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// ReplacechangeaspecificDomainPreferenceJSONBody defines parameters for ReplacechangeaspecificDomainPreference.
type ReplacechangeaspecificDomainPreferenceJSONBody string

// GetDomainitemsParams defines parameters for GetDomainitems.
type GetDomainitemsParams struct {

	// Filter for domains belonging to a specific reseller
	ResellerId string `json:"reseller_id"`

	// Filter for domains matching the given pattern
	Domain string `json:"domain"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewDomainJSONBody defines parameters for CreateanewDomain.
type CreateanewDomainJSONBody CreateanewDomainRequest

// GetEmailTemplateitemsParams defines parameters for GetEmailTemplateitems.
type GetEmailTemplateitemsParams struct {

	// Filter for email templates belonging to a specific reseller
	ResellerId string `json:"reseller_id"`

	// Filter for email templates with a specific name
	Name string `json:"name"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewEmailTemplateJSONBody defines parameters for CreateanewEmailTemplate.
type CreateanewEmailTemplateJSONBody CreateanewEmailTemplateRequest

// ReplacechangeaspecificEmailTemplateJSONBody defines parameters for ReplacechangeaspecificEmailTemplate.
type ReplacechangeaspecificEmailTemplateJSONBody Replace1changeaspecificEmailTemplateRequest

// GetEmergencyMappingContaineritemsParams defines parameters for GetEmergencyMappingContaineritems.
type GetEmergencyMappingContaineritemsParams struct {

	// Filter for emergency mapping containers with a specific name (wildcards possible)
	Name string `json:"name"`

	// Filter for emergency mapping containers for a specific reseller
	ResellerId string `json:"reseller_id"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewEmergencyMappingContainerJSONBody defines parameters for CreateanewEmergencyMappingContainer.
type CreateanewEmergencyMappingContainerJSONBody CreateanewEmergencyMappingContainerRequest

// ReplacechangeaspecificEmergencyMappingContainerJSONBody defines parameters for ReplacechangeaspecificEmergencyMappingContainer.
type ReplacechangeaspecificEmergencyMappingContainerJSONBody Replace1changeaspecificEmergencyMappingContainerRequest

// GetEmergencyMappingitemsParams defines parameters for GetEmergencyMappingitems.
type GetEmergencyMappingitemsParams struct {

	// Filter for emergency mappings belonging to a specific emergency mapping container
	EmergencyContainerId string `json:"emergency_container_id"`

	// Filter for emergency mappings belonging to a specific reseller
	ResellerId string `json:"reseller_id"`

	// Filter for mappings with a specific code (wildcards possible)
	Code string `json:"code"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewEmergencyMappingJSONBody defines parameters for CreateanewEmergencyMapping.
type CreateanewEmergencyMappingJSONBody CreateanewEmergencyMappingRequest

// ReplacechangeaspecificEmergencyMappingJSONBody defines parameters for ReplacechangeaspecificEmergencyMapping.
type ReplacechangeaspecificEmergencyMappingJSONBody Replace1changeaspecificEmergencyMappingRequest

// GetEventitemsParams defines parameters for GetEventitems.
type GetEventitemsParams struct {

	// Filter for events of a specific subscriber.
	SubscriberId string `json:"subscriber_id"`

	// Filter for events for customers/subscribers of a specific reseller.
	ResellerId string `json:"reseller_id"`

	// Filter for events of a specific type.
	Type string `json:"type"`

	// Filter for events occurred after or at the given time stamp.
	TimestampFrom string `json:"timestamp_from"`

	// Filter for events occurred before or at the given time stamp.
	TimestampTo string `json:"timestamp_to"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// GetFaxitemsParams defines parameters for GetFaxitems.
type GetFaxitemsParams struct {

	// Format timestamp according to the optional time zone provided here, e.g. Europe/Berlin.
	Tz string `json:"tz"`

	// Format timestamp according to the filtered customer's/subscribers's inherited time zone.
	UseOwnerTz string `json:"use_owner_tz"`

	// Filter for faxes belonging to a specific subscriber
	SubscriberId string `json:"subscriber_id"`

	// Filter for faxes performed after or at the given timestamp.
	TimeFrom string `json:"time_from"`

	// Filter for faxes performed before or at the given timestamp.
	TimeTo string `json:"time_to"`

	// Filter for a fax with the specific session id
	Sid string `json:"sid"`

	// Force the number normalization logic (available: 'default', 'extended').
	NumberRewriteMode string `json:"number_rewrite_mode"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewFaxJSONBody defines parameters for CreateanewFax.
type CreateanewFaxJSONBody CreateanewFaxRequest

// GetFaxserverSettingitemsParams defines parameters for GetFaxserverSettingitems.
type GetFaxserverSettingitemsParams struct {

	// Filter for items (subscribers) where name or password field match given pattern
	NameOrPassword string `json:"name_or_password"`

	// Filter for items (subscribers) with active faxserver settings
	Active string `json:"active"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// ReplacechangeaspecificFaxserverSettingJSONBody defines parameters for ReplacechangeaspecificFaxserverSetting.
type ReplacechangeaspecificFaxserverSettingJSONBody Replace1changeaspecificFaxserverSettingRequest

// GetInterceptionitemsParams defines parameters for GetInterceptionitems.
type GetInterceptionitemsParams struct {

	// Filter for interceptions of a specific interception id
	Liid string `json:"liid"`

	// Filter for interceptions of a specific number (in E.164 format)
	Number string `json:"number"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewInterceptionJSONBody defines parameters for CreateanewInterception.
type CreateanewInterceptionJSONBody CreateanewInterceptionRequest

// ReplacechangeaspecificInterceptionJSONBody defines parameters for ReplacechangeaspecificInterception.
type ReplacechangeaspecificInterceptionJSONBody Replace1changeaspecificInterceptionRequest

// GetInvoiceitemsParams defines parameters for GetInvoiceitems.
type GetInvoiceitemsParams struct {

	// Filter for invoices newer or equal to the given date (YYYY-MM-DDThh:mm:ss)
	PeriodStartGe string `json:"period_start_ge"`

	// Filter for invoices older or equal to the given date (YYYY-MM-DDThh:mm:ss)
	PeriodEndLe string `json:"period_end_le"`

	// Filter for invoices of customers belonging to a certain reseller
	ResellerId string `json:"reseller_id"`

	// Filter for invoices belonging to a specific customer
	CustomerId string `json:"customer_id"`

	// Filter for invoices matching a serial (patterns allowed)
	Serial string `json:"serial"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewInvoiceJSONBody defines parameters for CreateanewInvoice.
type CreateanewInvoiceJSONBody CreateanewInvoiceRequest

// GetInvoiceTemplateitemsParams defines parameters for GetInvoiceTemplateitems.
type GetInvoiceTemplateitemsParams struct {

	// Filter for invoice templates belonging to a specific reseller
	ResellerId string `json:"reseller_id"`

	// Filter for invoice templates with a specific name
	Name string `json:"name"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// GetLnpCarrieritemsParams defines parameters for GetLnpCarrieritems.
type GetLnpCarrieritemsParams struct {

	// Filter for LNP carriers with a specific prefix (wildcards possible)
	Prefix string `json:"prefix"`

	// Filter for LNP carriers with a specific name (wildcards possible)
	Name string `json:"name"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewLnpCarrierJSONBody defines parameters for CreateanewLnpCarrier.
type CreateanewLnpCarrierJSONBody CreateanewLnpCarrierRequest

// ReplacechangeaspecificLnpCarrierJSONBody defines parameters for ReplacechangeaspecificLnpCarrier.
type ReplacechangeaspecificLnpCarrierJSONBody Replace1changeaspecificLnpCarrierRequest

// GetLnpNumberitemsParams defines parameters for GetLnpNumberitems.
type GetLnpNumberitemsParams struct {

	// Filter for LNP numbers belonging to a specific LNP carrier
	CarrierId string `json:"carrier_id"`

	// Filter for LNP numbers with a specific number (wildcards possible)
	Number string `json:"number"`

	// Filter for LNP numbers valid at the given timestamp (YYYY-MM-DD HH:mm:ss) or the current time
	Actual string `json:"actual"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewLnpNumberJSONBody defines parameters for CreateanewLnpNumber.
type CreateanewLnpNumberJSONBody CreateanewLnpNumberRequest

// ReplacechangeaspecificLnpNumberJSONBody defines parameters for ReplacechangeaspecificLnpNumber.
type ReplacechangeaspecificLnpNumberJSONBody Replace1changeaspecificLnpNumberRequest

// GetMailToFaxSettingitemsParams defines parameters for GetMailToFaxSettingitems.
type GetMailToFaxSettingitemsParams struct {

	// Filter for items (subscribers) with active mail to fax settings
	Active string `json:"active"`

	// Filter for items (subscribers) where secret_key_renew field matches given pattern
	SecretKeyRenew string `json:"secret_key_renew"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// ReplacechangeaspecificMailToFaxSettingJSONBody defines parameters for ReplacechangeaspecificMailToFaxSetting.
type ReplacechangeaspecificMailToFaxSettingJSONBody Replace1changeaspecificMailToFaxSettingRequest

// GetMaliciousCallitemsParams defines parameters for GetMaliciousCallitems.
type GetMaliciousCallitemsParams struct {

	// Filter for malicious calls belonging to a specific reseller
	ResellerId string `json:"reseller_id"`

	// Filter by the call id
	Callid string `json:"callid"`

	// Filter by the caller number
	Caller string `json:"caller"`

	// Filter by the callee number
	Callee string `json:"callee"`

	// Filter by records with lower or equal than the specified time stamp.
	StartLe string `json:"start_le"`

	// Filter by records with greater or equal the specified time stamp.
	StartGe string `json:"start_ge"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// GetManagerSecretaryitemsParams defines parameters for GetManagerSecretaryitems.
type GetManagerSecretaryitemsParams struct {

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// ReplacechangeaspecificManagerSecretaryJSONBody defines parameters for ReplacechangeaspecificManagerSecretary.
type ReplacechangeaspecificManagerSecretaryJSONBody Replace1changeaspecificManagerSecretaryRequest

// GetNcosLevelitemsParams defines parameters for GetNcosLevelitems.
type GetNcosLevelitemsParams struct {

	// Filter for ncos levels belonging to a specific reseller
	ResellerId string `json:"reseller_id"`

	// Filter for levels matching the given pattern
	Level string `json:"level"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewNcosLevelJSONBody defines parameters for CreateanewNcosLevel.
type CreateanewNcosLevelJSONBody CreateanewNcosLevelRequest

// ReplacechangeaspecificNcosLevelJSONBody defines parameters for ReplacechangeaspecificNcosLevel.
type ReplacechangeaspecificNcosLevelJSONBody Replace1changeaspecificNcosLevelRequest

// GetNcosLnpCarrieritemsParams defines parameters for GetNcosLnpCarrieritems.
type GetNcosLnpCarrieritemsParams struct {

	// Filter for NCOS LNP entries belonging to a specific NCOS level.
	NcosLevelId string `json:"ncos_level_id"`

	// Filter for NCOS LNP entries belonging to a specific LNP carrier.
	CarrierId string `json:"carrier_id"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewNcosLnpCarrierJSONBody defines parameters for CreateanewNcosLnpCarrier.
type CreateanewNcosLnpCarrierJSONBody CreateanewNcosLnpCarrierRequest

// ReplacechangeaspecificNcosLnpCarrierJSONBody defines parameters for ReplacechangeaspecificNcosLnpCarrier.
type ReplacechangeaspecificNcosLnpCarrierJSONBody Replace1changeaspecificNcosLnpCarrierRequest

// GetNcosPatternitemsParams defines parameters for GetNcosPatternitems.
type GetNcosPatternitemsParams struct {

	// Filter for NCOS patterns belonging to a specific NCOS level.
	NcosLevelId string `json:"ncos_level_id"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewNcosPatternJSONBody defines parameters for CreateanewNcosPattern.
type CreateanewNcosPatternJSONBody string

// ReplacechangeaspecificNcosPatternJSONBody defines parameters for ReplacechangeaspecificNcosPattern.
type ReplacechangeaspecificNcosPatternJSONBody string

// GetNumberitemsParams defines parameters for GetNumberitems.
type GetNumberitemsParams struct {

	// Filter for numbers assigned to subscribers belonging to a specific reseller
	ResellerId string `json:"reseller_id"`

	// Filter for numbers assigned to subscribers of a specific customer.
	CustomerId string `json:"customer_id"`

	// Filter for numbers assigned to a specific subscriber.
	SubscriberId string `json:"subscriber_id"`

	// Filter for ac field of the number.
	Ac string `json:"ac"`

	// Filter for cc field c the number.
	Cc string `json:"cc"`

	// Filter for sn field c the number.
	Sn string `json:"sn"`

	// Filter for number type, either "primary" or "alias".
	Type string `json:"type"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// ReplacechangeaspecificNumberJSONBody defines parameters for ReplacechangeaspecificNumber.
type ReplacechangeaspecificNumberJSONBody Replace1changeaspecificNumberRequest

// CreateanewPartyCallControlJSONBody defines parameters for CreateanewPartyCallControl.
type CreateanewPartyCallControlJSONBody CreateanewPartyCallControlRequest

// GetPbxDeviceConfigitemsParams defines parameters for GetPbxDeviceConfigitems.
type GetPbxDeviceConfigitemsParams struct {

	// Filter for configs of a specific device model
	DeviceId string `json:"device_id"`

	// Filter for configs by a specific version
	Version string `json:"version"`

	// Filter for configs by a specific content type
	ContentType string `json:"content_type"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewPbxDeviceConfigJSONBody defines parameters for CreateanewPbxDeviceConfig.
type CreateanewPbxDeviceConfigJSONBody CreateanewPbxDeviceConfigRequest

// ReplacechangeaspecificPbxDeviceConfigJSONBody defines parameters for ReplacechangeaspecificPbxDeviceConfig.
type ReplacechangeaspecificPbxDeviceConfigJSONBody Replace1changeaspecificPbxDeviceConfigRequest

// GetPbxDeviceFirmwareitemsParams defines parameters for GetPbxDeviceFirmwareitems.
type GetPbxDeviceFirmwareitemsParams struct {

	// Filter for firmwares of a specific device model
	DeviceId string `json:"device_id"`

	// Filter for firmwares by a specific version
	Version string `json:"version"`

	// Filter for firmwares by a specific file name
	Filename string `json:"filename"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewPbxDeviceFirmwareJSONBody defines parameters for CreateanewPbxDeviceFirmware.
type CreateanewPbxDeviceFirmwareJSONBody CreateanewPbxDeviceFirmwareRequest

// ReplacechangeaspecificPbxDeviceFirmwareJSONBody defines parameters for ReplacechangeaspecificPbxDeviceFirmware.
type ReplacechangeaspecificPbxDeviceFirmwareJSONBody Replace1changeaspecificPbxDeviceFirmwareRequest

// GetPbxDeviceModelitemsParams defines parameters for GetPbxDeviceModelitems.
type GetPbxDeviceModelitemsParams struct {

	// Filter for models belonging to a certain reseller
	ResellerId string `json:"reseller_id"`

	// Filter for vendor matching a vendor name pattern
	Vendor string `json:"vendor"`

	// Filter for models matching a model name pattern
	Model string `json:"model"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewPbxDeviceModelJSONBody defines parameters for CreateanewPbxDeviceModel.
type CreateanewPbxDeviceModelJSONBody CreateanewPbxDeviceModelRequest

// ReplacechangeaspecificPbxDeviceModelJSONBody defines parameters for ReplacechangeaspecificPbxDeviceModel.
type ReplacechangeaspecificPbxDeviceModelJSONBody Replace1changeaspecificPbxDeviceModelRequest

// GetPbxDevicePreferenceitemsParams defines parameters for GetPbxDevicePreferenceitems.
type GetPbxDevicePreferenceitemsParams struct {

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// ReplacechangeaspecificPbxDevicePreferenceJSONBody defines parameters for ReplacechangeaspecificPbxDevicePreference.
type ReplacechangeaspecificPbxDevicePreferenceJSONBody string

// GetPbxDeviceProfilePreferenceitemsParams defines parameters for GetPbxDeviceProfilePreferenceitems.
type GetPbxDeviceProfilePreferenceitemsParams struct {

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// ReplacechangeaspecificPbxDeviceProfilePreferenceJSONBody defines parameters for ReplacechangeaspecificPbxDeviceProfilePreference.
type ReplacechangeaspecificPbxDeviceProfilePreferenceJSONBody string

// GetPbxDeviceProfileitemsParams defines parameters for GetPbxDeviceProfileitems.
type GetPbxDeviceProfileitemsParams struct {

	// Filter for profiles matching a name pattern
	Name string `json:"name"`

	// Filter for profiles matching a config_id
	ConfigId string `json:"config_id"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewPbxDeviceProfileJSONBody defines parameters for CreateanewPbxDeviceProfile.
type CreateanewPbxDeviceProfileJSONBody CreateanewPbxDeviceProfileRequest

// ReplacechangeaspecificPbxDeviceProfileJSONBody defines parameters for ReplacechangeaspecificPbxDeviceProfile.
type ReplacechangeaspecificPbxDeviceProfileJSONBody Replace1changeaspecificPbxDeviceProfileRequest

// GetPbxDeviceitemsParams defines parameters for GetPbxDeviceitems.
type GetPbxDeviceitemsParams struct {

	// Search for PBX devices belonging to a specific customer
	CustomerId string `json:"customer_id"`

	// Search for PBX devices with a specific autoprovisioning device profile
	ProfileId string `json:"profile_id"`

	// Search for PBX devices matching an identifier/MAC pattern (wildcards possible)
	Identifier string `json:"identifier"`

	// Search for PBX devices matching a station_name pattern (wildcards possible)
	StationName string `json:"station_name"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewPbxDeviceJSONBody defines parameters for CreateanewPbxDevice.
type CreateanewPbxDeviceJSONBody CreateanewPbxDeviceRequest

// ReplacechangeaspecificPbxDeviceJSONBody defines parameters for ReplacechangeaspecificPbxDevice.
type ReplacechangeaspecificPbxDeviceJSONBody Replace1changeaspecificPbxDeviceRequest

// GetPbxFieldDevicePreferenceitemsParams defines parameters for GetPbxFieldDevicePreferenceitems.
type GetPbxFieldDevicePreferenceitemsParams struct {

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// ReplacechangeaspecificPbxFieldDevicePreferenceJSONBody defines parameters for ReplacechangeaspecificPbxFieldDevicePreference.
type ReplacechangeaspecificPbxFieldDevicePreferenceJSONBody string

// GetPeeringGroupitemsParams defines parameters for GetPeeringGroupitems.
type GetPeeringGroupitemsParams struct {

	// Filter for peering group name
	Name string `json:"name"`

	// Filter for peering group description
	Description string `json:"description"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewPeeringGroupJSONBody defines parameters for CreateanewPeeringGroup.
type CreateanewPeeringGroupJSONBody CreateanewPeeringGroupRequest

// ReplacechangeaspecificPeeringGroupJSONBody defines parameters for ReplacechangeaspecificPeeringGroup.
type ReplacechangeaspecificPeeringGroupJSONBody Replace1changeaspecificPeeringGroupRequest

// GetPeeringInboundRuleitemsParams defines parameters for GetPeeringInboundRuleitems.
type GetPeeringInboundRuleitemsParams struct {

	// Filter for peering group
	GroupId string `json:"group_id"`

	// Filter for peering rules field (wildcards possible)
	Field string `json:"field"`

	// Filter for peering rules enabled flag
	Enabled string `json:"enabled"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewPeeringInboundRuleJSONBody defines parameters for CreateanewPeeringInboundRule.
type CreateanewPeeringInboundRuleJSONBody string

// ReplacechangeaspecificPeeringInboundRuleJSONBody defines parameters for ReplacechangeaspecificPeeringInboundRule.
type ReplacechangeaspecificPeeringInboundRuleJSONBody string

// GetPeeringRuleitemsParams defines parameters for GetPeeringRuleitems.
type GetPeeringRuleitemsParams struct {

	// Filter for peering group
	GroupId string `json:"group_id"`

	// Filter for peering rules description
	Description string `json:"description"`

	// Filter for peering rules enabled flag
	Enabled string `json:"enabled"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewPeeringRuleJSONBody defines parameters for CreateanewPeeringRule.
type CreateanewPeeringRuleJSONBody CreateanewPeeringRuleRequest

// ReplacechangeaspecificPeeringRuleJSONBody defines parameters for ReplacechangeaspecificPeeringRule.
type ReplacechangeaspecificPeeringRuleJSONBody Replace1changeaspecificPeeringRuleRequest

// GetPeeringServerPreferenceitemsParams defines parameters for GetPeeringServerPreferenceitems.
type GetPeeringServerPreferenceitemsParams struct {

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// ReplacechangeaspecificPeeringServerPreferenceJSONBody defines parameters for ReplacechangeaspecificPeeringServerPreference.
type ReplacechangeaspecificPeeringServerPreferenceJSONBody string

// GetPeeringServeritemsParams defines parameters for GetPeeringServeritems.
type GetPeeringServeritemsParams struct {

	// Filter for peering server group
	GroupId string `json:"group_id"`

	// Filter for peering server name
	Name string `json:"name"`

	// Filter for peering server host
	Host string `json:"host"`

	// Filter for peering server ip
	Ip string `json:"ip"`

	// Filter for peering server enabled flag
	Enabled string `json:"enabled"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewPeeringServerJSONBody defines parameters for CreateanewPeeringServer.
type CreateanewPeeringServerJSONBody CreateanewPeeringServerRequest

// ReplacechangeaspecificPeeringServerJSONBody defines parameters for ReplacechangeaspecificPeeringServer.
type ReplacechangeaspecificPeeringServerJSONBody Replace1changeaspecificPeeringServerRequest

// GetPhonebookEntryitemsParams defines parameters for GetPhonebookEntryitems.
type GetPhonebookEntryitemsParams struct {

	// Filter for Phonebook entries belonging to a specific reseeller
	ResellerId string `json:"reseller_id"`

	// Filter for Phonebook entries belonging to a specific contract
	CustomerId string `json:"customer_id"`

	// Filter for Phonebook entries belonging to a specific subscriber
	SubscriberId string `json:"subscriber_id"`

	// Filter for Phonebook numbers with a specific number (wildcards possible)
	Number string `json:"number"`

	// Filter for Phonebook numbers with a specific name (wildcards possible)
	Name string `json:"name"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewPhonebookEntryJSONBody defines parameters for CreateanewPhonebookEntry.
type CreateanewPhonebookEntryJSONBody CreateanewPhonebookEntryRequest

// ReplacechangeaspecificPhonebookEntryJSONBody defines parameters for ReplacechangeaspecificPhonebookEntry.
type ReplacechangeaspecificPhonebookEntryJSONBody Replace1changeaspecificPhonebookEntryRequest

// GetPreferencesMetaEntryitemsParams defines parameters for GetPreferencesMetaEntryitems.
type GetPreferencesMetaEntryitemsParams struct {

	// Filter for dynamic preference with a specific name
	Attribute string `json:"attribute"`

	// Filter for dynamic preference relevant to the spcified pbx device model id
	ModelId string `json:"model_id"`

	// Filter for dynamic preference relevant to the spcified reseller id
	ResellerId string `json:"reseller_id"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewPreferencesMetaEntryJSONBody defines parameters for CreateanewPreferencesMetaEntry.
type CreateanewPreferencesMetaEntryJSONBody CreateanewPreferencesMetaEntryRequest

// ReplacechangeaspecificPreferencesMetaEntryJSONBody defines parameters for ReplacechangeaspecificPreferencesMetaEntry.
type ReplacechangeaspecificPreferencesMetaEntryJSONBody Replace1changeaspecificPreferencesMetaEntryRequest

// GetProfilePackageitemsParams defines parameters for GetProfilePackageitems.
type GetProfilePackageitemsParams struct {

	// Filter for profile packages belonging to a specific reseller
	ResellerId string `json:"reseller_id"`

	// Filter for profile packages with a specific name
	Name string `json:"name"`

	// Filter for profile packages containing a billing profile with specific name
	ProfileName string `json:"profile_name"`

	// Filter for profile packages containing a billing network with specific name
	NetworkName string `json:"network_name"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewProfilePackageJSONBody defines parameters for CreateanewProfilePackage.
type CreateanewProfilePackageJSONBody CreateanewProfilePackageRequest

// ReplacechangeaspecificProfilePackageJSONBody defines parameters for ReplacechangeaspecificProfilePackage.
type ReplacechangeaspecificProfilePackageJSONBody Replace1changeaspecificProfilePackageRequest

// GetProfilePreferenceitemsParams defines parameters for GetProfilePreferenceitems.
type GetProfilePreferenceitemsParams struct {

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// ReplacechangeaspecificProfilePreferenceJSONBody defines parameters for ReplacechangeaspecificProfilePreference.
type ReplacechangeaspecificProfilePreferenceJSONBody string

// GetReminderitemsParams defines parameters for GetReminderitems.
type GetReminderitemsParams struct {

	// Filter for reminders of a specific subscriber
	SubscriberId string `json:"subscriber_id"`

	// Filter for active or inactive reminders (0|1)
	Active string `json:"active"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewReminderJSONBody defines parameters for CreateanewReminder.
type CreateanewReminderJSONBody CreateanewReminderRequest

// ReplacechangeaspecificReminderJSONBody defines parameters for ReplacechangeaspecificReminder.
type ReplacechangeaspecificReminderJSONBody Replace1changeaspecificReminderRequest

// GetReselleritemsParams defines parameters for GetReselleritems.
type GetReselleritemsParams struct {

	// Filter for resellers matching the given name pattern
	Name string `json:"name"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewResellerJSONBody defines parameters for CreateanewReseller.
type CreateanewResellerJSONBody CreateanewResellerRequest

// ReplacechangeaspecificResellerJSONBody defines parameters for ReplacechangeaspecificReseller.
type ReplacechangeaspecificResellerJSONBody Replace1changeaspecificResellerRequest

// GetRewriteRuleitemsParams defines parameters for GetRewriteRuleitems.
type GetRewriteRuleitemsParams struct {

	// Filter rules for a certain description (wildcards possible).
	Description string `json:"description"`

	// Filter for rules belonging to a specific rewriteruleset.
	SetId string `json:"set_id"`

	// Filter for rules belonging to a specific reseller.
	ResellerId string `json:"reseller_id"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewRewriteRuleJSONBody defines parameters for CreateanewRewriteRule.
type CreateanewRewriteRuleJSONBody CreateanewRewriteRuleRequest

// ReplacechangeaspecificRewriteRuleJSONBody defines parameters for ReplacechangeaspecificRewriteRule.
type ReplacechangeaspecificRewriteRuleJSONBody Replace1changeaspecificRewriteRuleRequest

// GetRewriteRuleSetitemsParams defines parameters for GetRewriteRuleSetitems.
type GetRewriteRuleSetitemsParams struct {

	// Filter for rewriterulesets belonging to a specific reseller
	ResellerId string `json:"reseller_id"`

	// Filter rulesets for a certain description (wildcards possible).
	Description string `json:"description"`

	// Filter rulesets for a certain name (wildcards possible).
	Name string `json:"name"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewRewriteRuleSetJSONBody defines parameters for CreateanewRewriteRuleSet.
type CreateanewRewriteRuleSetJSONBody CreateanewRewriteRuleSetRequest

// ReplacechangeaspecificRewriteRuleSetJSONBody defines parameters for ReplacechangeaspecificRewriteRuleSet.
type ReplacechangeaspecificRewriteRuleSetJSONBody Replace1changeaspecificRewriteRuleSetRequest

// GetRtcAppitemsParams defines parameters for GetRtcAppitems.
type GetRtcAppitemsParams struct {

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// ReplacechangeaspecificRtcAppJSONBody defines parameters for ReplacechangeaspecificRtcApp.
type ReplacechangeaspecificRtcAppJSONBody Replace1changeaspecificRtcAppRequest

// GetRtcNetworkitemsParams defines parameters for GetRtcNetworkitems.
type GetRtcNetworkitemsParams struct {

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// ReplacechangeaspecificRtcNetworkJSONBody defines parameters for ReplacechangeaspecificRtcNetwork.
type ReplacechangeaspecificRtcNetworkJSONBody Replace1changeaspecificRtcNetworkRequest

// GetRtcSessionitemsParams defines parameters for GetRtcSessionitems.
type GetRtcSessionitemsParams struct {

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewRtcSessionJSONBody defines parameters for CreateanewRtcSession.
type CreateanewRtcSessionJSONBody string

// GetSIPCaptureitemsParams defines parameters for GetSIPCaptureitems.
type GetSIPCaptureitemsParams struct {

	// Filter for a particular call_id
	CallId string `json:"call_id"`

	// Filter for data starting greater or equal the specified time stamp.
	StartGe string `json:"start_ge"`

	// Filter for data starting lower or equal the specified time stamp.
	StartLe string `json:"start_le"`

	// Filter for a particular SIP method
	Method string `json:"method"`

	// End time of the captured SIP data
	SubscriberId string `json:"subscriber_id"`

	// Format start_time according to the optional time zone provided here, e.g. Europe/Berlin.
	Tz string `json:"tz"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// GetSMSitemsParams defines parameters for GetSMSitems.
type GetSMSitemsParams struct {

	// Filter for messages belonging to a specific subscriber
	SubscriberId string `json:"subscriber_id"`

	// Filter for messages belonging to a specific customer
	CustomerId string `json:"customer_id"`

	// Filter for messages belonging to a specific reseller
	ResellerId string `json:"reseller_id"`

	// Filter for messages sent later or equal the specified time stamp.
	TimeGe string `json:"time_ge"`

	// Filter for messages sent earlier or equal the specified time stamp.
	TimeLe string `json:"time_le"`

	// Filter for messages sent ("out"), received ("in") or forwarded ("forward").
	Direction string `json:"direction"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewSMSJSONBody defines parameters for CreateanewSMS.
type CreateanewSMSJSONBody CreateanewSMSRequest

// GetSoundFileitemsParams defines parameters for GetSoundFileitems.
type GetSoundFileitemsParams struct {

	// Filter for sound files of a specific sound set
	SetId string `json:"set_id"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewSoundFileJSONBody defines parameters for CreateanewSoundFile.
type CreateanewSoundFileJSONBody CreateanewSoundFileRequest

// ReplacechangeaspecificSoundFileJSONBody defines parameters for ReplacechangeaspecificSoundFile.
type ReplacechangeaspecificSoundFileJSONBody Replace1changeaspecificSoundFileRequest

// GetSoundGroupitemsParams defines parameters for GetSoundGroupitems.
type GetSoundGroupitemsParams struct {

	// Filter for sound groups with a specific name
	Name string `json:"name"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// GetSoundHandleitemsParams defines parameters for GetSoundHandleitems.
type GetSoundHandleitemsParams struct {

	// Filter for sound handles of a specific group
	Group string `json:"group"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// GetSoundSetitemsParams defines parameters for GetSoundSetitems.
type GetSoundSetitemsParams struct {

	// Filter for sound sets of a specific customer
	CustomerId string `json:"customer_id"`

	// Filter for sound sets of a specific reseller
	ResellerId string `json:"reseller_id"`

	// Filter for sound sets with a specific name (wildcard pattern allowed)
	Name string `json:"name"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewSoundSetJSONBody defines parameters for CreateanewSoundSet.
type CreateanewSoundSetJSONBody CreateanewSoundSetRequest

// ReplacechangeaspecificSoundSetJSONBody defines parameters for ReplacechangeaspecificSoundSet.
type ReplacechangeaspecificSoundSetJSONBody Replace1changeaspecificSoundSetRequest

// GetSpeedDialitemsParams defines parameters for GetSpeedDialitems.
type GetSpeedDialitemsParams struct {

	// Filter for subscribers with nonempty speeddials
	Nonempty string `json:"nonempty"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// ReplacechangeaspecificSpeedDialJSONBody defines parameters for ReplacechangeaspecificSpeedDial.
type ReplacechangeaspecificSpeedDialJSONBody Replace1changeaspecificSpeedDialRequest

// GetSubscriberPreferenceitemsParams defines parameters for GetSubscriberPreferenceitems.
type GetSubscriberPreferenceitemsParams struct {

	// Filter for subscribers of customers belonging to a specific reseller
	ResellerId string `json:"reseller_id"`

	// Filter for subscribers of contracts with a specific contact id
	ContactId string `json:"contact_id"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// ReplacechangeaspecificSubscriberPreferenceJSONBody defines parameters for ReplacechangeaspecificSubscriberPreference.
type ReplacechangeaspecificSubscriberPreferenceJSONBody string

// GetSubscriberProfileitemsParams defines parameters for GetSubscriberProfileitems.
type GetSubscriberProfileitemsParams struct {

	// Filter for profiles  belonging to a specific profile set
	ProfileSetId string `json:"profile_set_id"`

	// Filter for profile with a specific name
	Name string `json:"name"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewSubscriberProfileJSONBody defines parameters for CreateanewSubscriberProfile.
type CreateanewSubscriberProfileJSONBody CreateanewSubscriberProfileRequest

// ReplacechangeaspecificSubscriberProfileJSONBody defines parameters for ReplacechangeaspecificSubscriberProfile.
type ReplacechangeaspecificSubscriberProfileJSONBody Replace1changeaspecificSubscriberProfileRequest

// GetSubscriberProfileSetitemsParams defines parameters for GetSubscriberProfileSetitems.
type GetSubscriberProfileSetitemsParams struct {

	// Filter for profile sets belonging to a specific reseller
	ResellerId string `json:"reseller_id"`

	// Filter for profile sets with a specific name
	Name string `json:"name"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewSubscriberProfileSetJSONBody defines parameters for CreateanewSubscriberProfileSet.
type CreateanewSubscriberProfileSetJSONBody CreateanewSubscriberProfileSetRequest

// ReplacechangeaspecificSubscriberProfileSetJSONBody defines parameters for ReplacechangeaspecificSubscriberProfileSet.
type ReplacechangeaspecificSubscriberProfileSetJSONBody Replace1changeaspecificSubscriberProfileSetRequest

// GetSubscriberRegistrationitemsParams defines parameters for GetSubscriberRegistrationitems.
type GetSubscriberRegistrationitemsParams struct {

	// Filter for registrations of a specific subscriber
	SubscriberId string `json:"subscriber_id"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewSubscriberRegistrationJSONBody defines parameters for CreateanewSubscriberRegistration.
type CreateanewSubscriberRegistrationJSONBody CreateanewSubscriberRegistrationRequest

// ReplacechangeaspecificSubscriberRegistrationJSONBody defines parameters for ReplacechangeaspecificSubscriberRegistration.
type ReplacechangeaspecificSubscriberRegistrationJSONBody Replace1changeaspecificSubscriberRegistrationRequest

// GetSubscriberitemsParams defines parameters for GetSubscriberitems.
type GetSubscriberitemsParams struct {

	// Search for subscribers having a specific subscriber profile
	ProfileId string `json:"profile_id"`

	// Search for specific SIP username
	Username string `json:"username"`

	// Search for specific webuser login credentials (exact match)
	Webusername string `json:"webusername"`

	// Search for specific webuser login password (exact match)
	Webpassword string `json:"webpassword"`

	// Filter for subscribers in specific domain
	Domain string `json:"domain"`

	// Filter for subscribers of a specific customer.
	CustomerId string `json:"customer_id"`

	// Filter for subscribers of a specific customer external_id.
	CustomerExternalId string `json:"customer_external_id"`

	// Filter for subscribers by subscriber's external_id.
	SubscriberExternalId string `json:"subscriber_external_id"`

	// Filter for subscribers who are (not) pbx_groups.
	IsPbxGroup string `json:"is_pbx_group"`

	// Filter for subscribers who are (not) pbx subscriber admins.
	IsAdmin string `json:"is_admin"`

	// Filter for subscribers who are pbx pilot subscribers.
	IsPbxPilot string `json:"is_pbx_pilot"`

	// Filter for subscribers who has specified alias.
	Alias string `json:"alias"`

	// Filter for subscribers of customers belonging to a specific reseller
	ResellerId string `json:"reseller_id"`

	// Filter for subscribers of contracts with a specific contact id
	ContactId string `json:"contact_id"`

	// Filter for subscriber with create_timestamp greater then specified value
	CreateTimestampGt string `json:"create_timestamp_gt"`

	// Filter for subscriber with create_timestamp less then specified value
	CreateTimestampLt string `json:"create_timestamp_lt"`

	// Filter for subscriber with modify_timestamp greater then specified value
	ModifyTimestampGt string `json:"modify_timestamp_gt"`

	// Filter for subscriber with modify_timestamp less then specified value
	ModifyTimestampLt string `json:"modify_timestamp_lt"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewSubscriberJSONBody defines parameters for CreateanewSubscriber.
type CreateanewSubscriberJSONBody CreateanewSubscriberRequest

// ReplacechangeaspecificSubscriberJSONBody defines parameters for ReplacechangeaspecificSubscriber.
type ReplacechangeaspecificSubscriberJSONBody Replace1changeaspecificSubscriberRequest

// GetSystemContactitemsParams defines parameters for GetSystemContactitems.
type GetSystemContactitemsParams struct {

	// Filter for contacts matching an email pattern
	Email string `json:"email"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewSystemContactJSONBody defines parameters for CreateanewSystemContact.
type CreateanewSystemContactJSONBody CreateanewSystemContactRequest

// ReplacechangeaspecificSystemContactJSONBody defines parameters for ReplacechangeaspecificSystemContact.
type ReplacechangeaspecificSystemContactJSONBody Replace1changeaspecificSystemContactRequest

// CreateanewTopupCashJSONBody defines parameters for CreateanewTopupCash.
type CreateanewTopupCashJSONBody CreateanewTopupCashRequest

// GetTopupLogitemsParams defines parameters for GetTopupLogitems.
type GetTopupLogitemsParams struct {

	// Filter for top-up requests for customers/subscribers of a specific reseller.
	ResellerId string `json:"reseller_id"`

	// Filter for top-up requests with the given request_token.
	RequestToken string `json:"request_token"`

	// Filter for top-up requests performed after or at the given time stamp.
	TimestampFrom string `json:"timestamp_from"`

	// Filter for top-up requests performed before or at the given time stamp.
	TimestampTo string `json:"timestamp_to"`

	// Filter for top-up requests of a specific customer contract.
	ContractId string `json:"contract_id"`

	// Filter for top-up requests of a specific subscriber.
	SubscriberId string `json:"subscriber_id"`

	// Filter for top-up requests with a specific voucher.
	VoucherId string `json:"voucher_id"`

	// Filter for top-up requests by outcome.
	Outcome string `json:"outcome"`

	// Filter for top-up requests with an amount greater than or equal to the given value in USD/EUR/etc.
	AmountAbove string `json:"amount_above"`

	// Filter for top-up requests with an amount less than or equal to the given value in USD/EUR/etc.
	AmountBelow string `json:"amount_below"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewTopupVoucherJSONBody defines parameters for CreateanewTopupVoucher.
type CreateanewTopupVoucherJSONBody CreateanewTopupVoucherRequest

// GetTrustedSourceitemsParams defines parameters for GetTrustedSourceitems.
type GetTrustedSourceitemsParams struct {

	// Filter for trusted sources of a specific subscriber
	SubscriberId string `json:"subscriber_id"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewTrustedSourceJSONBody defines parameters for CreateanewTrustedSource.
type CreateanewTrustedSourceJSONBody CreateanewTrustedSourceRequest

// ReplacechangeaspecificTrustedSourceJSONBody defines parameters for ReplacechangeaspecificTrustedSource.
type ReplacechangeaspecificTrustedSourceJSONBody Replace1changeaspecificTrustedSourceRequest

// GetUpnRewriteSetitemsParams defines parameters for GetUpnRewriteSetitems.
type GetUpnRewriteSetitemsParams struct {

	// Filter for trusted sources of a specific subscriber
	SubscriberId string `json:"subscriber_id"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewUpnRewriteSetJSONBody defines parameters for CreateanewUpnRewriteSet.
type CreateanewUpnRewriteSetJSONBody string

// ReplacechangeaspecificUpnRewriteSetJSONBody defines parameters for ReplacechangeaspecificUpnRewriteSet.
type ReplacechangeaspecificUpnRewriteSetJSONBody string

// GetVoicemailGreetingitemsParams defines parameters for GetVoicemailGreetingitems.
type GetVoicemailGreetingitemsParams struct {

	// Filter for registrations of a specific subscriber
	SubscriberId string `json:"subscriber_id"`

	// Filter for the greeting type
	Type string `json:"type"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewVoicemailGreetingJSONBody defines parameters for CreateanewVoicemailGreeting.
type CreateanewVoicemailGreetingJSONBody CreateanewVoicemailGreetingRequest

// ReplacechangeaspecificVoicemailGreetingJSONBody defines parameters for ReplacechangeaspecificVoicemailGreeting.
type ReplacechangeaspecificVoicemailGreetingJSONBody Replace1changeaspecificVoicemailGreetingRequest

// GetVoicemailitemsParams defines parameters for GetVoicemailitems.
type GetVoicemailitemsParams struct {

	// Format timestamp according to the optional time zone provided here, e.g. Europe/Berlin.
	Tz string `json:"tz"`

	// Format timestamp according to the filtered customer's/subscribers's inherited time zone.
	UseOwnerTz string `json:"use_owner_tz"`

	// Filter for voicemails belonging to a specific subscriber
	SubscriberId string `json:"subscriber_id"`

	// Filter for voicemails in a specific folder (one of INBOX, Old, Friends, Family, Cust1 to Cust4)
	Folder string `json:"folder"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// ReplacechangeaspecificVoicemailJSONBody defines parameters for ReplacechangeaspecificVoicemail.
type ReplacechangeaspecificVoicemailJSONBody Replace1changeaspecificVoicemailRequest

// GetVoicemailSettingitemsParams defines parameters for GetVoicemailSettingitems.
type GetVoicemailSettingitemsParams struct {

	// Filter for voicemail settings of a specific subscriber
	SubscriberId string `json:"subscriber_id"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// ReplacechangeaspecificVoicemailSettingJSONBody defines parameters for ReplacechangeaspecificVoicemailSetting.
type ReplacechangeaspecificVoicemailSettingJSONBody Replace1changeaspecificVoicemailSettingRequest

// GetVoucheritemsParams defines parameters for GetVoucheritems.
type GetVoucheritemsParams struct {

	// Filter for vouchers belonging to a specific reseller
	ResellerId string `json:"reseller_id"`

	// Filter for vouchers belonging to a specific profile package
	PackageId string `json:"package_id"`

	// Order collection by a specific attribute.
	OrderBy string `json:"order_by"`

	// Direction which the collection should be ordered by. Possible values are: asc (default), desc.
	OrderByDirection string `json:"order_by_direction"`

	// Pagination page which should be displayed (default: 1)
	Page string `json:"page"`

	// Number of rows in one pagination page (default: 10)
	Rows string `json:"rows"`
}

// CreateanewVoucherJSONBody defines parameters for CreateanewVoucher.
type CreateanewVoucherJSONBody CreateanewVoucherRequest

// ReplacechangeaspecificVoucherJSONBody defines parameters for ReplacechangeaspecificVoucher.
type ReplacechangeaspecificVoucherJSONBody Replace1changeaspecificVoucherRequest

// CreateanewAdminCertRequestBody defines body for CreateanewAdminCert for application/json ContentType.
type CreateanewAdminCertJSONRequestBody CreateanewAdminCertJSONBody

// CreateanewAdminRequestBody defines body for CreateanewAdmin for application/json ContentType.
type CreateanewAdminJSONRequestBody CreateanewAdminJSONBody

// CreateanewApplyRewriteRequestBody defines body for CreateanewApplyRewrite for application/json ContentType.
type CreateanewApplyRewriteJSONRequestBody CreateanewApplyRewriteJSONBody

// ReplacechangeaspecificAutoAttendantRequestBody defines body for ReplacechangeaspecificAutoAttendant for application/json ContentType.
type ReplacechangeaspecificAutoAttendantJSONRequestBody ReplacechangeaspecificAutoAttendantJSONBody

// CreateanewBillingFeeRequestBody defines body for CreateanewBillingFee for application/json ContentType.
type CreateanewBillingFeeJSONRequestBody CreateanewBillingFeeJSONBody

// ReplacechangeaspecificBillingFeeRequestBody defines body for ReplacechangeaspecificBillingFee for application/json ContentType.
type ReplacechangeaspecificBillingFeeJSONRequestBody ReplacechangeaspecificBillingFeeJSONBody

// CreateanewBillingNetworkRequestBody defines body for CreateanewBillingNetwork for application/json ContentType.
type CreateanewBillingNetworkJSONRequestBody CreateanewBillingNetworkJSONBody

// ReplacechangeaspecificBillingNetworkRequestBody defines body for ReplacechangeaspecificBillingNetwork for application/json ContentType.
type ReplacechangeaspecificBillingNetworkJSONRequestBody ReplacechangeaspecificBillingNetworkJSONBody

// CreateanewBillingProfileRequestBody defines body for CreateanewBillingProfile for application/json ContentType.
type CreateanewBillingProfileJSONRequestBody CreateanewBillingProfileJSONBody

// ReplacechangeaspecificBillingProfileRequestBody defines body for ReplacechangeaspecificBillingProfile for application/json ContentType.
type ReplacechangeaspecificBillingProfileJSONRequestBody ReplacechangeaspecificBillingProfileJSONBody

// CreateanewBillingZoneRequestBody defines body for CreateanewBillingZone for application/json ContentType.
type CreateanewBillingZoneJSONRequestBody CreateanewBillingZoneJSONBody

// ReplacechangeaspecificBillingZoneRequestBody defines body for ReplacechangeaspecificBillingZone for application/json ContentType.
type ReplacechangeaspecificBillingZoneJSONRequestBody ReplacechangeaspecificBillingZoneJSONBody

// CreateanewCallControlRequestBody defines body for CreateanewCallControl for application/json ContentType.
type CreateanewCallControlJSONRequestBody CreateanewCallControlJSONBody

// ReplacechangeaspecificCallForwardRequestBody defines body for ReplacechangeaspecificCallForward for application/json ContentType.
type ReplacechangeaspecificCallForwardJSONRequestBody ReplacechangeaspecificCallForwardJSONBody

// ReplacechangeaspecificCCMapEntryRequestBody defines body for ReplacechangeaspecificCCMapEntry for application/json ContentType.
type ReplacechangeaspecificCCMapEntryJSONRequestBody ReplacechangeaspecificCCMapEntryJSONBody

// CreateanewCFBNumberSetRequestBody defines body for CreateanewCFBNumberSet for application/json ContentType.
type CreateanewCFBNumberSetJSONRequestBody CreateanewCFBNumberSetJSONBody

// ReplacechangeaspecificCFBNumberSetRequestBody defines body for ReplacechangeaspecificCFBNumberSet for application/json ContentType.
type ReplacechangeaspecificCFBNumberSetJSONRequestBody ReplacechangeaspecificCFBNumberSetJSONBody

// CreateanewCFDestinationSetRequestBody defines body for CreateanewCFDestinationSet for application/json ContentType.
type CreateanewCFDestinationSetJSONRequestBody CreateanewCFDestinationSetJSONBody

// ReplacechangeaspecificCFDestinationSetRequestBody defines body for ReplacechangeaspecificCFDestinationSet for application/json ContentType.
type ReplacechangeaspecificCFDestinationSetJSONRequestBody ReplacechangeaspecificCFDestinationSetJSONBody

// ReplacechangeaspecificCFMappingRequestBody defines body for ReplacechangeaspecificCFMapping for application/json ContentType.
type ReplacechangeaspecificCFMappingJSONRequestBody ReplacechangeaspecificCFMappingJSONBody

// CreateanewCFSourceSetRequestBody defines body for CreateanewCFSourceSet for application/json ContentType.
type CreateanewCFSourceSetJSONRequestBody CreateanewCFSourceSetJSONBody

// ReplacechangeaspecificCFSourceSetRequestBody defines body for ReplacechangeaspecificCFSourceSet for application/json ContentType.
type ReplacechangeaspecificCFSourceSetJSONRequestBody ReplacechangeaspecificCFSourceSetJSONBody

// CreateanewCFTimeSetRequestBody defines body for CreateanewCFTimeSet for application/json ContentType.
type CreateanewCFTimeSetJSONRequestBody CreateanewCFTimeSetJSONBody

// ReplacechangeaspecificCFTimeSetRequestBody defines body for ReplacechangeaspecificCFTimeSet for application/json ContentType.
type ReplacechangeaspecificCFTimeSetJSONRequestBody ReplacechangeaspecificCFTimeSetJSONBody

// CreateanewContractRequestBody defines body for CreateanewContract for application/json ContentType.
type CreateanewContractJSONRequestBody CreateanewContractJSONBody

// ReplacechangeaspecificContractRequestBody defines body for ReplacechangeaspecificContract for application/json ContentType.
type ReplacechangeaspecificContractJSONRequestBody ReplacechangeaspecificContractJSONBody

// ReplacechangeaspecificCustomerBalanceRequestBody defines body for ReplacechangeaspecificCustomerBalance for application/json ContentType.
type ReplacechangeaspecificCustomerBalanceJSONRequestBody ReplacechangeaspecificCustomerBalanceJSONBody

// CreateanewCustomerContactRequestBody defines body for CreateanewCustomerContact for application/json ContentType.
type CreateanewCustomerContactJSONRequestBody CreateanewCustomerContactJSONBody

// ReplacechangeaspecificCustomerContactRequestBody defines body for ReplacechangeaspecificCustomerContact for application/json ContentType.
type ReplacechangeaspecificCustomerContactJSONRequestBody ReplacechangeaspecificCustomerContactJSONBody

// ReplacechangeaspecificCustomerFraudPreferenceRequestBody defines body for ReplacechangeaspecificCustomerFraudPreference for application/json ContentType.
type ReplacechangeaspecificCustomerFraudPreferenceJSONRequestBody ReplacechangeaspecificCustomerFraudPreferenceJSONBody

// CreateanewCustomerLocationRequestBody defines body for CreateanewCustomerLocation for application/json ContentType.
type CreateanewCustomerLocationJSONRequestBody CreateanewCustomerLocationJSONBody

// ReplacechangeaspecificCustomerLocationRequestBody defines body for ReplacechangeaspecificCustomerLocation for application/json ContentType.
type ReplacechangeaspecificCustomerLocationJSONRequestBody ReplacechangeaspecificCustomerLocationJSONBody

// ReplacechangeaspecificCustomerPreferenceRequestBody defines body for ReplacechangeaspecificCustomerPreference for application/json ContentType.
type ReplacechangeaspecificCustomerPreferenceJSONRequestBody ReplacechangeaspecificCustomerPreferenceJSONBody

// CreateanewCustomerRequestBody defines body for CreateanewCustomer for application/json ContentType.
type CreateanewCustomerJSONRequestBody CreateanewCustomerJSONBody

// ReplacechangeaspecificCustomerRequestBody defines body for ReplacechangeaspecificCustomer for application/json ContentType.
type ReplacechangeaspecificCustomerJSONRequestBody ReplacechangeaspecificCustomerJSONBody

// ReplacechangeaspecificDomainPreferenceRequestBody defines body for ReplacechangeaspecificDomainPreference for application/json ContentType.
type ReplacechangeaspecificDomainPreferenceJSONRequestBody ReplacechangeaspecificDomainPreferenceJSONBody

// CreateanewDomainRequestBody defines body for CreateanewDomain for application/json ContentType.
type CreateanewDomainJSONRequestBody CreateanewDomainJSONBody

// CreateanewEmailTemplateRequestBody defines body for CreateanewEmailTemplate for application/json ContentType.
type CreateanewEmailTemplateJSONRequestBody CreateanewEmailTemplateJSONBody

// ReplacechangeaspecificEmailTemplateRequestBody defines body for ReplacechangeaspecificEmailTemplate for application/json ContentType.
type ReplacechangeaspecificEmailTemplateJSONRequestBody ReplacechangeaspecificEmailTemplateJSONBody

// CreateanewEmergencyMappingContainerRequestBody defines body for CreateanewEmergencyMappingContainer for application/json ContentType.
type CreateanewEmergencyMappingContainerJSONRequestBody CreateanewEmergencyMappingContainerJSONBody

// ReplacechangeaspecificEmergencyMappingContainerRequestBody defines body for ReplacechangeaspecificEmergencyMappingContainer for application/json ContentType.
type ReplacechangeaspecificEmergencyMappingContainerJSONRequestBody ReplacechangeaspecificEmergencyMappingContainerJSONBody

// CreateanewEmergencyMappingRequestBody defines body for CreateanewEmergencyMapping for application/json ContentType.
type CreateanewEmergencyMappingJSONRequestBody CreateanewEmergencyMappingJSONBody

// ReplacechangeaspecificEmergencyMappingRequestBody defines body for ReplacechangeaspecificEmergencyMapping for application/json ContentType.
type ReplacechangeaspecificEmergencyMappingJSONRequestBody ReplacechangeaspecificEmergencyMappingJSONBody

// CreateanewFaxRequestBody defines body for CreateanewFax for application/json ContentType.
type CreateanewFaxJSONRequestBody CreateanewFaxJSONBody

// ReplacechangeaspecificFaxserverSettingRequestBody defines body for ReplacechangeaspecificFaxserverSetting for application/json ContentType.
type ReplacechangeaspecificFaxserverSettingJSONRequestBody ReplacechangeaspecificFaxserverSettingJSONBody

// CreateanewInterceptionRequestBody defines body for CreateanewInterception for application/json ContentType.
type CreateanewInterceptionJSONRequestBody CreateanewInterceptionJSONBody

// ReplacechangeaspecificInterceptionRequestBody defines body for ReplacechangeaspecificInterception for application/json ContentType.
type ReplacechangeaspecificInterceptionJSONRequestBody ReplacechangeaspecificInterceptionJSONBody

// CreateanewInvoiceRequestBody defines body for CreateanewInvoice for application/json ContentType.
type CreateanewInvoiceJSONRequestBody CreateanewInvoiceJSONBody

// CreateanewLnpCarrierRequestBody defines body for CreateanewLnpCarrier for application/json ContentType.
type CreateanewLnpCarrierJSONRequestBody CreateanewLnpCarrierJSONBody

// ReplacechangeaspecificLnpCarrierRequestBody defines body for ReplacechangeaspecificLnpCarrier for application/json ContentType.
type ReplacechangeaspecificLnpCarrierJSONRequestBody ReplacechangeaspecificLnpCarrierJSONBody

// CreateanewLnpNumberRequestBody defines body for CreateanewLnpNumber for application/json ContentType.
type CreateanewLnpNumberJSONRequestBody CreateanewLnpNumberJSONBody

// ReplacechangeaspecificLnpNumberRequestBody defines body for ReplacechangeaspecificLnpNumber for application/json ContentType.
type ReplacechangeaspecificLnpNumberJSONRequestBody ReplacechangeaspecificLnpNumberJSONBody

// ReplacechangeaspecificMailToFaxSettingRequestBody defines body for ReplacechangeaspecificMailToFaxSetting for application/json ContentType.
type ReplacechangeaspecificMailToFaxSettingJSONRequestBody ReplacechangeaspecificMailToFaxSettingJSONBody

// ReplacechangeaspecificManagerSecretaryRequestBody defines body for ReplacechangeaspecificManagerSecretary for application/json ContentType.
type ReplacechangeaspecificManagerSecretaryJSONRequestBody ReplacechangeaspecificManagerSecretaryJSONBody

// CreateanewNcosLevelRequestBody defines body for CreateanewNcosLevel for application/json ContentType.
type CreateanewNcosLevelJSONRequestBody CreateanewNcosLevelJSONBody

// ReplacechangeaspecificNcosLevelRequestBody defines body for ReplacechangeaspecificNcosLevel for application/json ContentType.
type ReplacechangeaspecificNcosLevelJSONRequestBody ReplacechangeaspecificNcosLevelJSONBody

// CreateanewNcosLnpCarrierRequestBody defines body for CreateanewNcosLnpCarrier for application/json ContentType.
type CreateanewNcosLnpCarrierJSONRequestBody CreateanewNcosLnpCarrierJSONBody

// ReplacechangeaspecificNcosLnpCarrierRequestBody defines body for ReplacechangeaspecificNcosLnpCarrier for application/json ContentType.
type ReplacechangeaspecificNcosLnpCarrierJSONRequestBody ReplacechangeaspecificNcosLnpCarrierJSONBody

// CreateanewNcosPatternRequestBody defines body for CreateanewNcosPattern for application/json ContentType.
type CreateanewNcosPatternJSONRequestBody CreateanewNcosPatternJSONBody

// ReplacechangeaspecificNcosPatternRequestBody defines body for ReplacechangeaspecificNcosPattern for application/json ContentType.
type ReplacechangeaspecificNcosPatternJSONRequestBody ReplacechangeaspecificNcosPatternJSONBody

// ReplacechangeaspecificNumberRequestBody defines body for ReplacechangeaspecificNumber for application/json ContentType.
type ReplacechangeaspecificNumberJSONRequestBody ReplacechangeaspecificNumberJSONBody

// CreateanewPartyCallControlRequestBody defines body for CreateanewPartyCallControl for application/json ContentType.
type CreateanewPartyCallControlJSONRequestBody CreateanewPartyCallControlJSONBody

// CreateanewPbxDeviceConfigRequestBody defines body for CreateanewPbxDeviceConfig for application/json ContentType.
type CreateanewPbxDeviceConfigJSONRequestBody CreateanewPbxDeviceConfigJSONBody

// ReplacechangeaspecificPbxDeviceConfigRequestBody defines body for ReplacechangeaspecificPbxDeviceConfig for application/json ContentType.
type ReplacechangeaspecificPbxDeviceConfigJSONRequestBody ReplacechangeaspecificPbxDeviceConfigJSONBody

// CreateanewPbxDeviceFirmwareRequestBody defines body for CreateanewPbxDeviceFirmware for application/json ContentType.
type CreateanewPbxDeviceFirmwareJSONRequestBody CreateanewPbxDeviceFirmwareJSONBody

// ReplacechangeaspecificPbxDeviceFirmwareRequestBody defines body for ReplacechangeaspecificPbxDeviceFirmware for application/json ContentType.
type ReplacechangeaspecificPbxDeviceFirmwareJSONRequestBody ReplacechangeaspecificPbxDeviceFirmwareJSONBody

// CreateanewPbxDeviceModelRequestBody defines body for CreateanewPbxDeviceModel for application/json ContentType.
type CreateanewPbxDeviceModelJSONRequestBody CreateanewPbxDeviceModelJSONBody

// ReplacechangeaspecificPbxDeviceModelRequestBody defines body for ReplacechangeaspecificPbxDeviceModel for application/json ContentType.
type ReplacechangeaspecificPbxDeviceModelJSONRequestBody ReplacechangeaspecificPbxDeviceModelJSONBody

// ReplacechangeaspecificPbxDevicePreferenceRequestBody defines body for ReplacechangeaspecificPbxDevicePreference for application/json ContentType.
type ReplacechangeaspecificPbxDevicePreferenceJSONRequestBody ReplacechangeaspecificPbxDevicePreferenceJSONBody

// ReplacechangeaspecificPbxDeviceProfilePreferenceRequestBody defines body for ReplacechangeaspecificPbxDeviceProfilePreference for application/json ContentType.
type ReplacechangeaspecificPbxDeviceProfilePreferenceJSONRequestBody ReplacechangeaspecificPbxDeviceProfilePreferenceJSONBody

// CreateanewPbxDeviceProfileRequestBody defines body for CreateanewPbxDeviceProfile for application/json ContentType.
type CreateanewPbxDeviceProfileJSONRequestBody CreateanewPbxDeviceProfileJSONBody

// ReplacechangeaspecificPbxDeviceProfileRequestBody defines body for ReplacechangeaspecificPbxDeviceProfile for application/json ContentType.
type ReplacechangeaspecificPbxDeviceProfileJSONRequestBody ReplacechangeaspecificPbxDeviceProfileJSONBody

// CreateanewPbxDeviceRequestBody defines body for CreateanewPbxDevice for application/json ContentType.
type CreateanewPbxDeviceJSONRequestBody CreateanewPbxDeviceJSONBody

// ReplacechangeaspecificPbxDeviceRequestBody defines body for ReplacechangeaspecificPbxDevice for application/json ContentType.
type ReplacechangeaspecificPbxDeviceJSONRequestBody ReplacechangeaspecificPbxDeviceJSONBody

// ReplacechangeaspecificPbxFieldDevicePreferenceRequestBody defines body for ReplacechangeaspecificPbxFieldDevicePreference for application/json ContentType.
type ReplacechangeaspecificPbxFieldDevicePreferenceJSONRequestBody ReplacechangeaspecificPbxFieldDevicePreferenceJSONBody

// CreateanewPeeringGroupRequestBody defines body for CreateanewPeeringGroup for application/json ContentType.
type CreateanewPeeringGroupJSONRequestBody CreateanewPeeringGroupJSONBody

// ReplacechangeaspecificPeeringGroupRequestBody defines body for ReplacechangeaspecificPeeringGroup for application/json ContentType.
type ReplacechangeaspecificPeeringGroupJSONRequestBody ReplacechangeaspecificPeeringGroupJSONBody

// CreateanewPeeringInboundRuleRequestBody defines body for CreateanewPeeringInboundRule for application/json ContentType.
type CreateanewPeeringInboundRuleJSONRequestBody CreateanewPeeringInboundRuleJSONBody

// ReplacechangeaspecificPeeringInboundRuleRequestBody defines body for ReplacechangeaspecificPeeringInboundRule for application/json ContentType.
type ReplacechangeaspecificPeeringInboundRuleJSONRequestBody ReplacechangeaspecificPeeringInboundRuleJSONBody

// CreateanewPeeringRuleRequestBody defines body for CreateanewPeeringRule for application/json ContentType.
type CreateanewPeeringRuleJSONRequestBody CreateanewPeeringRuleJSONBody

// ReplacechangeaspecificPeeringRuleRequestBody defines body for ReplacechangeaspecificPeeringRule for application/json ContentType.
type ReplacechangeaspecificPeeringRuleJSONRequestBody ReplacechangeaspecificPeeringRuleJSONBody

// ReplacechangeaspecificPeeringServerPreferenceRequestBody defines body for ReplacechangeaspecificPeeringServerPreference for application/json ContentType.
type ReplacechangeaspecificPeeringServerPreferenceJSONRequestBody ReplacechangeaspecificPeeringServerPreferenceJSONBody

// CreateanewPeeringServerRequestBody defines body for CreateanewPeeringServer for application/json ContentType.
type CreateanewPeeringServerJSONRequestBody CreateanewPeeringServerJSONBody

// ReplacechangeaspecificPeeringServerRequestBody defines body for ReplacechangeaspecificPeeringServer for application/json ContentType.
type ReplacechangeaspecificPeeringServerJSONRequestBody ReplacechangeaspecificPeeringServerJSONBody

// CreateanewPhonebookEntryRequestBody defines body for CreateanewPhonebookEntry for application/json ContentType.
type CreateanewPhonebookEntryJSONRequestBody CreateanewPhonebookEntryJSONBody

// ReplacechangeaspecificPhonebookEntryRequestBody defines body for ReplacechangeaspecificPhonebookEntry for application/json ContentType.
type ReplacechangeaspecificPhonebookEntryJSONRequestBody ReplacechangeaspecificPhonebookEntryJSONBody

// CreateanewPreferencesMetaEntryRequestBody defines body for CreateanewPreferencesMetaEntry for application/json ContentType.
type CreateanewPreferencesMetaEntryJSONRequestBody CreateanewPreferencesMetaEntryJSONBody

// ReplacechangeaspecificPreferencesMetaEntryRequestBody defines body for ReplacechangeaspecificPreferencesMetaEntry for application/json ContentType.
type ReplacechangeaspecificPreferencesMetaEntryJSONRequestBody ReplacechangeaspecificPreferencesMetaEntryJSONBody

// CreateanewProfilePackageRequestBody defines body for CreateanewProfilePackage for application/json ContentType.
type CreateanewProfilePackageJSONRequestBody CreateanewProfilePackageJSONBody

// ReplacechangeaspecificProfilePackageRequestBody defines body for ReplacechangeaspecificProfilePackage for application/json ContentType.
type ReplacechangeaspecificProfilePackageJSONRequestBody ReplacechangeaspecificProfilePackageJSONBody

// ReplacechangeaspecificProfilePreferenceRequestBody defines body for ReplacechangeaspecificProfilePreference for application/json ContentType.
type ReplacechangeaspecificProfilePreferenceJSONRequestBody ReplacechangeaspecificProfilePreferenceJSONBody

// CreateanewReminderRequestBody defines body for CreateanewReminder for application/json ContentType.
type CreateanewReminderJSONRequestBody CreateanewReminderJSONBody

// ReplacechangeaspecificReminderRequestBody defines body for ReplacechangeaspecificReminder for application/json ContentType.
type ReplacechangeaspecificReminderJSONRequestBody ReplacechangeaspecificReminderJSONBody

// CreateanewResellerRequestBody defines body for CreateanewReseller for application/json ContentType.
type CreateanewResellerJSONRequestBody CreateanewResellerJSONBody

// ReplacechangeaspecificResellerRequestBody defines body for ReplacechangeaspecificReseller for application/json ContentType.
type ReplacechangeaspecificResellerJSONRequestBody ReplacechangeaspecificResellerJSONBody

// CreateanewRewriteRuleRequestBody defines body for CreateanewRewriteRule for application/json ContentType.
type CreateanewRewriteRuleJSONRequestBody CreateanewRewriteRuleJSONBody

// ReplacechangeaspecificRewriteRuleRequestBody defines body for ReplacechangeaspecificRewriteRule for application/json ContentType.
type ReplacechangeaspecificRewriteRuleJSONRequestBody ReplacechangeaspecificRewriteRuleJSONBody

// CreateanewRewriteRuleSetRequestBody defines body for CreateanewRewriteRuleSet for application/json ContentType.
type CreateanewRewriteRuleSetJSONRequestBody CreateanewRewriteRuleSetJSONBody

// ReplacechangeaspecificRewriteRuleSetRequestBody defines body for ReplacechangeaspecificRewriteRuleSet for application/json ContentType.
type ReplacechangeaspecificRewriteRuleSetJSONRequestBody ReplacechangeaspecificRewriteRuleSetJSONBody

// ReplacechangeaspecificRtcAppRequestBody defines body for ReplacechangeaspecificRtcApp for application/json ContentType.
type ReplacechangeaspecificRtcAppJSONRequestBody ReplacechangeaspecificRtcAppJSONBody

// ReplacechangeaspecificRtcNetworkRequestBody defines body for ReplacechangeaspecificRtcNetwork for application/json ContentType.
type ReplacechangeaspecificRtcNetworkJSONRequestBody ReplacechangeaspecificRtcNetworkJSONBody

// CreateanewRtcSessionRequestBody defines body for CreateanewRtcSession for application/json ContentType.
type CreateanewRtcSessionJSONRequestBody CreateanewRtcSessionJSONBody

// CreateanewSMSRequestBody defines body for CreateanewSMS for application/json ContentType.
type CreateanewSMSJSONRequestBody CreateanewSMSJSONBody

// CreateanewSoundFileRequestBody defines body for CreateanewSoundFile for application/json ContentType.
type CreateanewSoundFileJSONRequestBody CreateanewSoundFileJSONBody

// ReplacechangeaspecificSoundFileRequestBody defines body for ReplacechangeaspecificSoundFile for application/json ContentType.
type ReplacechangeaspecificSoundFileJSONRequestBody ReplacechangeaspecificSoundFileJSONBody

// CreateanewSoundSetRequestBody defines body for CreateanewSoundSet for application/json ContentType.
type CreateanewSoundSetJSONRequestBody CreateanewSoundSetJSONBody

// ReplacechangeaspecificSoundSetRequestBody defines body for ReplacechangeaspecificSoundSet for application/json ContentType.
type ReplacechangeaspecificSoundSetJSONRequestBody ReplacechangeaspecificSoundSetJSONBody

// ReplacechangeaspecificSpeedDialRequestBody defines body for ReplacechangeaspecificSpeedDial for application/json ContentType.
type ReplacechangeaspecificSpeedDialJSONRequestBody ReplacechangeaspecificSpeedDialJSONBody

// ReplacechangeaspecificSubscriberPreferenceRequestBody defines body for ReplacechangeaspecificSubscriberPreference for application/json ContentType.
type ReplacechangeaspecificSubscriberPreferenceJSONRequestBody ReplacechangeaspecificSubscriberPreferenceJSONBody

// CreateanewSubscriberProfileRequestBody defines body for CreateanewSubscriberProfile for application/json ContentType.
type CreateanewSubscriberProfileJSONRequestBody CreateanewSubscriberProfileJSONBody

// ReplacechangeaspecificSubscriberProfileRequestBody defines body for ReplacechangeaspecificSubscriberProfile for application/json ContentType.
type ReplacechangeaspecificSubscriberProfileJSONRequestBody ReplacechangeaspecificSubscriberProfileJSONBody

// CreateanewSubscriberProfileSetRequestBody defines body for CreateanewSubscriberProfileSet for application/json ContentType.
type CreateanewSubscriberProfileSetJSONRequestBody CreateanewSubscriberProfileSetJSONBody

// ReplacechangeaspecificSubscriberProfileSetRequestBody defines body for ReplacechangeaspecificSubscriberProfileSet for application/json ContentType.
type ReplacechangeaspecificSubscriberProfileSetJSONRequestBody ReplacechangeaspecificSubscriberProfileSetJSONBody

// CreateanewSubscriberRegistrationRequestBody defines body for CreateanewSubscriberRegistration for application/json ContentType.
type CreateanewSubscriberRegistrationJSONRequestBody CreateanewSubscriberRegistrationJSONBody

// ReplacechangeaspecificSubscriberRegistrationRequestBody defines body for ReplacechangeaspecificSubscriberRegistration for application/json ContentType.
type ReplacechangeaspecificSubscriberRegistrationJSONRequestBody ReplacechangeaspecificSubscriberRegistrationJSONBody

// CreateanewSubscriberRequestBody defines body for CreateanewSubscriber for application/json ContentType.
type CreateanewSubscriberJSONRequestBody CreateanewSubscriberJSONBody

// ReplacechangeaspecificSubscriberRequestBody defines body for ReplacechangeaspecificSubscriber for application/json ContentType.
type ReplacechangeaspecificSubscriberJSONRequestBody ReplacechangeaspecificSubscriberJSONBody

// CreateanewSystemContactRequestBody defines body for CreateanewSystemContact for application/json ContentType.
type CreateanewSystemContactJSONRequestBody CreateanewSystemContactJSONBody

// ReplacechangeaspecificSystemContactRequestBody defines body for ReplacechangeaspecificSystemContact for application/json ContentType.
type ReplacechangeaspecificSystemContactJSONRequestBody ReplacechangeaspecificSystemContactJSONBody

// CreateanewTopupCashRequestBody defines body for CreateanewTopupCash for application/json ContentType.
type CreateanewTopupCashJSONRequestBody CreateanewTopupCashJSONBody

// CreateanewTopupVoucherRequestBody defines body for CreateanewTopupVoucher for application/json ContentType.
type CreateanewTopupVoucherJSONRequestBody CreateanewTopupVoucherJSONBody

// CreateanewTrustedSourceRequestBody defines body for CreateanewTrustedSource for application/json ContentType.
type CreateanewTrustedSourceJSONRequestBody CreateanewTrustedSourceJSONBody

// ReplacechangeaspecificTrustedSourceRequestBody defines body for ReplacechangeaspecificTrustedSource for application/json ContentType.
type ReplacechangeaspecificTrustedSourceJSONRequestBody ReplacechangeaspecificTrustedSourceJSONBody

// CreateanewUpnRewriteSetRequestBody defines body for CreateanewUpnRewriteSet for application/json ContentType.
type CreateanewUpnRewriteSetJSONRequestBody CreateanewUpnRewriteSetJSONBody

// ReplacechangeaspecificUpnRewriteSetRequestBody defines body for ReplacechangeaspecificUpnRewriteSet for application/json ContentType.
type ReplacechangeaspecificUpnRewriteSetJSONRequestBody ReplacechangeaspecificUpnRewriteSetJSONBody

// CreateanewVoicemailGreetingRequestBody defines body for CreateanewVoicemailGreeting for application/json ContentType.
type CreateanewVoicemailGreetingJSONRequestBody CreateanewVoicemailGreetingJSONBody

// ReplacechangeaspecificVoicemailGreetingRequestBody defines body for ReplacechangeaspecificVoicemailGreeting for application/json ContentType.
type ReplacechangeaspecificVoicemailGreetingJSONRequestBody ReplacechangeaspecificVoicemailGreetingJSONBody

// ReplacechangeaspecificVoicemailRequestBody defines body for ReplacechangeaspecificVoicemail for application/json ContentType.
type ReplacechangeaspecificVoicemailJSONRequestBody ReplacechangeaspecificVoicemailJSONBody

// ReplacechangeaspecificVoicemailSettingRequestBody defines body for ReplacechangeaspecificVoicemailSetting for application/json ContentType.
type ReplacechangeaspecificVoicemailSettingJSONRequestBody ReplacechangeaspecificVoicemailSettingJSONBody

// CreateanewVoucherRequestBody defines body for CreateanewVoucher for application/json ContentType.
type CreateanewVoucherJSONRequestBody CreateanewVoucherJSONBody

// ReplacechangeaspecificVoucherRequestBody defines body for ReplacechangeaspecificVoucher for application/json ContentType.
type ReplacechangeaspecificVoucherJSONRequestBody ReplacechangeaspecificVoucherJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditor = fn
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreateanewAdminCert request  with any body
	CreateanewAdminCertWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewAdminCert(ctx context.Context, body CreateanewAdminCertJSONRequestBody) (*http.Response, error)

	// GetAdminitems request
	GetAdminitems(ctx context.Context, params *GetAdminitemsParams) (*http.Response, error)

	// CreateanewAdmin request  with any body
	CreateanewAdminWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewAdmin(ctx context.Context, body CreateanewAdminJSONRequestBody) (*http.Response, error)

	// DeleteaspecificAdmin request
	DeleteaspecificAdmin(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificAdmin request
	GetaspecificAdmin(ctx context.Context, id string) (*http.Response, error)

	// CreateanewApplyRewrite request  with any body
	CreateanewApplyRewriteWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewApplyRewrite(ctx context.Context, body CreateanewApplyRewriteJSONRequestBody) (*http.Response, error)

	// GetAutoAttendantitems request
	GetAutoAttendantitems(ctx context.Context, params *GetAutoAttendantitemsParams) (*http.Response, error)

	// GetaspecificAutoAttendant request
	GetaspecificAutoAttendant(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificAutoAttendant request  with any body
	ChangeaspecificAutoAttendantWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificAutoAttendant request  with any body
	ReplacechangeaspecificAutoAttendantWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificAutoAttendant(ctx context.Context, id string, body ReplacechangeaspecificAutoAttendantJSONRequestBody) (*http.Response, error)

	// GetBalanceIntervalitems request
	GetBalanceIntervalitems(ctx context.Context, params *GetBalanceIntervalitemsParams) (*http.Response, error)

	// GetaspecificBalanceInterval request
	GetaspecificBalanceInterval(ctx context.Context, id string) (*http.Response, error)

	// GetBannedIpitems request
	GetBannedIpitems(ctx context.Context, params *GetBannedIpitemsParams) (*http.Response, error)

	// DeleteaspecificBannedIp request
	DeleteaspecificBannedIp(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificBannedIp request
	GetaspecificBannedIp(ctx context.Context, id string) (*http.Response, error)

	// GetBannedUseritems request
	GetBannedUseritems(ctx context.Context, params *GetBannedUseritemsParams) (*http.Response, error)

	// DeleteaspecificBannedUser request
	DeleteaspecificBannedUser(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificBannedUser request
	GetaspecificBannedUser(ctx context.Context, id string) (*http.Response, error)

	// GetBillingFeeitems request
	GetBillingFeeitems(ctx context.Context, params *GetBillingFeeitemsParams) (*http.Response, error)

	// CreateanewBillingFee request  with any body
	CreateanewBillingFeeWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewBillingFee(ctx context.Context, body CreateanewBillingFeeJSONRequestBody) (*http.Response, error)

	// DeleteaspecificBillingFee request
	DeleteaspecificBillingFee(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificBillingFee request
	GetaspecificBillingFee(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificBillingFee request  with any body
	ChangeaspecificBillingFeeWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificBillingFee request  with any body
	ReplacechangeaspecificBillingFeeWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificBillingFee(ctx context.Context, id string, body ReplacechangeaspecificBillingFeeJSONRequestBody) (*http.Response, error)

	// GetBillingNetworkitems request
	GetBillingNetworkitems(ctx context.Context, params *GetBillingNetworkitemsParams) (*http.Response, error)

	// CreateanewBillingNetwork request  with any body
	CreateanewBillingNetworkWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewBillingNetwork(ctx context.Context, body CreateanewBillingNetworkJSONRequestBody) (*http.Response, error)

	// GetaspecificBillingNetwork request
	GetaspecificBillingNetwork(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificBillingNetwork request  with any body
	ChangeaspecificBillingNetworkWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificBillingNetwork request  with any body
	ReplacechangeaspecificBillingNetworkWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificBillingNetwork(ctx context.Context, id string, body ReplacechangeaspecificBillingNetworkJSONRequestBody) (*http.Response, error)

	// GetBillingProfileitems request
	GetBillingProfileitems(ctx context.Context, params *GetBillingProfileitemsParams) (*http.Response, error)

	// CreateanewBillingProfile request  with any body
	CreateanewBillingProfileWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewBillingProfile(ctx context.Context, body CreateanewBillingProfileJSONRequestBody) (*http.Response, error)

	// GetaspecificBillingProfile request
	GetaspecificBillingProfile(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificBillingProfile request  with any body
	ChangeaspecificBillingProfileWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificBillingProfile request  with any body
	ReplacechangeaspecificBillingProfileWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificBillingProfile(ctx context.Context, id string, body ReplacechangeaspecificBillingProfileJSONRequestBody) (*http.Response, error)

	// GetBillingZoneitems request
	GetBillingZoneitems(ctx context.Context, params *GetBillingZoneitemsParams) (*http.Response, error)

	// CreateanewBillingZone request  with any body
	CreateanewBillingZoneWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewBillingZone(ctx context.Context, body CreateanewBillingZoneJSONRequestBody) (*http.Response, error)

	// DeleteaspecificBillingZone request
	DeleteaspecificBillingZone(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificBillingZone request
	GetaspecificBillingZone(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificBillingZone request  with any body
	ChangeaspecificBillingZoneWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificBillingZone request  with any body
	ReplacechangeaspecificBillingZoneWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificBillingZone(ctx context.Context, id string, body ReplacechangeaspecificBillingZoneJSONRequestBody) (*http.Response, error)

	// CreateanewCallControl request  with any body
	CreateanewCallControlWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewCallControl(ctx context.Context, body CreateanewCallControlJSONRequestBody) (*http.Response, error)

	// GetCallForwarditems request
	GetCallForwarditems(ctx context.Context, params *GetCallForwarditemsParams) (*http.Response, error)

	// DeleteaspecificCallForward request
	DeleteaspecificCallForward(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificCallForward request
	GetaspecificCallForward(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificCallForward request  with any body
	ChangeaspecificCallForwardWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificCallForward request  with any body
	ReplacechangeaspecificCallForwardWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificCallForward(ctx context.Context, id string, body ReplacechangeaspecificCallForwardJSONRequestBody) (*http.Response, error)

	// GetCallListitems request
	GetCallListitems(ctx context.Context, params *GetCallListitemsParams) (*http.Response, error)

	// GetaspecificCallList request
	GetaspecificCallList(ctx context.Context, id string) (*http.Response, error)

	// GetCallQueueitems request
	GetCallQueueitems(ctx context.Context, params *GetCallQueueitemsParams) (*http.Response, error)

	// GetaspecificCallQueue request
	GetaspecificCallQueue(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificCallRecordingFile request
	GetaspecificCallRecordingFile(ctx context.Context, id string) (*http.Response, error)

	// GetCallRecordingitems request
	GetCallRecordingitems(ctx context.Context, params *GetCallRecordingitemsParams) (*http.Response, error)

	// DeleteaspecificCallRecording request
	DeleteaspecificCallRecording(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificCallRecording request
	GetaspecificCallRecording(ctx context.Context, id string) (*http.Response, error)

	// GetCallRecordingStreamitems request
	GetCallRecordingStreamitems(ctx context.Context, params *GetCallRecordingStreamitemsParams) (*http.Response, error)

	// DeleteaspecificCallRecordingStream request
	DeleteaspecificCallRecordingStream(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificCallRecordingStream request
	GetaspecificCallRecordingStream(ctx context.Context, id string) (*http.Response, error)

	// GetCallitems request
	GetCallitems(ctx context.Context, params *GetCallitemsParams) (*http.Response, error)

	// GetaspecificCall request
	GetaspecificCall(ctx context.Context, id string) (*http.Response, error)

	// GetCapabilityitems request
	GetCapabilityitems(ctx context.Context, params *GetCapabilityitemsParams) (*http.Response, error)

	// GetaspecificCapability request
	GetaspecificCapability(ctx context.Context, id string) (*http.Response, error)

	// GetCCMapEntryitems request
	GetCCMapEntryitems(ctx context.Context, params *GetCCMapEntryitemsParams) (*http.Response, error)

	// DeleteaspecificCCMapEntry request
	DeleteaspecificCCMapEntry(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificCCMapEntry request
	GetaspecificCCMapEntry(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificCCMapEntry request  with any body
	ChangeaspecificCCMapEntryWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificCCMapEntry request  with any body
	ReplacechangeaspecificCCMapEntryWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificCCMapEntry(ctx context.Context, id string, body ReplacechangeaspecificCCMapEntryJSONRequestBody) (*http.Response, error)

	// GetCFBNumberSetitems request
	GetCFBNumberSetitems(ctx context.Context, params *GetCFBNumberSetitemsParams) (*http.Response, error)

	// CreateanewCFBNumberSet request  with any body
	CreateanewCFBNumberSetWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewCFBNumberSet(ctx context.Context, body CreateanewCFBNumberSetJSONRequestBody) (*http.Response, error)

	// DeleteaspecificCFBNumberSet request
	DeleteaspecificCFBNumberSet(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificCFBNumberSet request
	GetaspecificCFBNumberSet(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificCFBNumberSet request  with any body
	ChangeaspecificCFBNumberSetWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificCFBNumberSet request  with any body
	ReplacechangeaspecificCFBNumberSetWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificCFBNumberSet(ctx context.Context, id string, body ReplacechangeaspecificCFBNumberSetJSONRequestBody) (*http.Response, error)

	// GetCFDestinationSetitems request
	GetCFDestinationSetitems(ctx context.Context, params *GetCFDestinationSetitemsParams) (*http.Response, error)

	// CreateanewCFDestinationSet request  with any body
	CreateanewCFDestinationSetWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewCFDestinationSet(ctx context.Context, body CreateanewCFDestinationSetJSONRequestBody) (*http.Response, error)

	// DeleteaspecificCFDestinationSet request
	DeleteaspecificCFDestinationSet(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificCFDestinationSet request
	GetaspecificCFDestinationSet(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificCFDestinationSet request  with any body
	ChangeaspecificCFDestinationSetWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificCFDestinationSet request  with any body
	ReplacechangeaspecificCFDestinationSetWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificCFDestinationSet(ctx context.Context, id string, body ReplacechangeaspecificCFDestinationSetJSONRequestBody) (*http.Response, error)

	// GetCFMappingitems request
	GetCFMappingitems(ctx context.Context, params *GetCFMappingitemsParams) (*http.Response, error)

	// GetaspecificCFMapping request
	GetaspecificCFMapping(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificCFMapping request  with any body
	ChangeaspecificCFMappingWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificCFMapping request  with any body
	ReplacechangeaspecificCFMappingWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificCFMapping(ctx context.Context, id string, body ReplacechangeaspecificCFMappingJSONRequestBody) (*http.Response, error)

	// GetCFSourceSetitems request
	GetCFSourceSetitems(ctx context.Context, params *GetCFSourceSetitemsParams) (*http.Response, error)

	// CreateanewCFSourceSet request  with any body
	CreateanewCFSourceSetWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewCFSourceSet(ctx context.Context, body CreateanewCFSourceSetJSONRequestBody) (*http.Response, error)

	// DeleteaspecificCFSourceSet request
	DeleteaspecificCFSourceSet(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificCFSourceSet request
	GetaspecificCFSourceSet(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificCFSourceSet request  with any body
	ChangeaspecificCFSourceSetWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificCFSourceSet request  with any body
	ReplacechangeaspecificCFSourceSetWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificCFSourceSet(ctx context.Context, id string, body ReplacechangeaspecificCFSourceSetJSONRequestBody) (*http.Response, error)

	// GetCFTimeSetitems request
	GetCFTimeSetitems(ctx context.Context, params *GetCFTimeSetitemsParams) (*http.Response, error)

	// CreateanewCFTimeSet request  with any body
	CreateanewCFTimeSetWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewCFTimeSet(ctx context.Context, body CreateanewCFTimeSetJSONRequestBody) (*http.Response, error)

	// DeleteaspecificCFTimeSet request
	DeleteaspecificCFTimeSet(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificCFTimeSet request
	GetaspecificCFTimeSet(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificCFTimeSet request  with any body
	ChangeaspecificCFTimeSetWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificCFTimeSet request  with any body
	ReplacechangeaspecificCFTimeSetWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificCFTimeSet(ctx context.Context, id string, body ReplacechangeaspecificCFTimeSetJSONRequestBody) (*http.Response, error)

	// GetContractitems request
	GetContractitems(ctx context.Context, params *GetContractitemsParams) (*http.Response, error)

	// CreateanewContract request  with any body
	CreateanewContractWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewContract(ctx context.Context, body CreateanewContractJSONRequestBody) (*http.Response, error)

	// GetaspecificContract request
	GetaspecificContract(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificContract request  with any body
	ChangeaspecificContractWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificContract request  with any body
	ReplacechangeaspecificContractWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificContract(ctx context.Context, id string, body ReplacechangeaspecificContractJSONRequestBody) (*http.Response, error)

	// GetConversationitems request
	GetConversationitems(ctx context.Context, params *GetConversationitemsParams) (*http.Response, error)

	// GetaspecificConversation request
	GetaspecificConversation(ctx context.Context, id string) (*http.Response, error)

	// GetCustomerBalanceitems request
	GetCustomerBalanceitems(ctx context.Context, params *GetCustomerBalanceitemsParams) (*http.Response, error)

	// GetaspecificCustomerBalance request
	GetaspecificCustomerBalance(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificCustomerBalance request  with any body
	ChangeaspecificCustomerBalanceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificCustomerBalance request  with any body
	ReplacechangeaspecificCustomerBalanceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificCustomerBalance(ctx context.Context, id string, body ReplacechangeaspecificCustomerBalanceJSONRequestBody) (*http.Response, error)

	// GetCustomerContactitems request
	GetCustomerContactitems(ctx context.Context, params *GetCustomerContactitemsParams) (*http.Response, error)

	// CreateanewCustomerContact request  with any body
	CreateanewCustomerContactWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewCustomerContact(ctx context.Context, body CreateanewCustomerContactJSONRequestBody) (*http.Response, error)

	// DeleteaspecificCustomerContact request
	DeleteaspecificCustomerContact(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificCustomerContact request
	GetaspecificCustomerContact(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificCustomerContact request  with any body
	ChangeaspecificCustomerContactWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificCustomerContact request  with any body
	ReplacechangeaspecificCustomerContactWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificCustomerContact(ctx context.Context, id string, body ReplacechangeaspecificCustomerContactJSONRequestBody) (*http.Response, error)

	// GetCustomerFraudEventitems request
	GetCustomerFraudEventitems(ctx context.Context, params *GetCustomerFraudEventitemsParams) (*http.Response, error)

	// GetaspecificCustomerFraudEvent request
	GetaspecificCustomerFraudEvent(ctx context.Context, id string) (*http.Response, error)

	// GetCustomerFraudPreferenceitems request
	GetCustomerFraudPreferenceitems(ctx context.Context, params *GetCustomerFraudPreferenceitemsParams) (*http.Response, error)

	// GetaspecificCustomerFraudPreference request
	GetaspecificCustomerFraudPreference(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificCustomerFraudPreference request  with any body
	ChangeaspecificCustomerFraudPreferenceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificCustomerFraudPreference request  with any body
	ReplacechangeaspecificCustomerFraudPreferenceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificCustomerFraudPreference(ctx context.Context, id string, body ReplacechangeaspecificCustomerFraudPreferenceJSONRequestBody) (*http.Response, error)

	// GetCustomerLocationitems request
	GetCustomerLocationitems(ctx context.Context, params *GetCustomerLocationitemsParams) (*http.Response, error)

	// CreateanewCustomerLocation request  with any body
	CreateanewCustomerLocationWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewCustomerLocation(ctx context.Context, body CreateanewCustomerLocationJSONRequestBody) (*http.Response, error)

	// DeleteaspecificCustomerLocation request
	DeleteaspecificCustomerLocation(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificCustomerLocation request
	GetaspecificCustomerLocation(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificCustomerLocation request  with any body
	ChangeaspecificCustomerLocationWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificCustomerLocation request  with any body
	ReplacechangeaspecificCustomerLocationWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificCustomerLocation(ctx context.Context, id string, body ReplacechangeaspecificCustomerLocationJSONRequestBody) (*http.Response, error)

	// GetCustomerPreferenceitems request
	GetCustomerPreferenceitems(ctx context.Context, params *GetCustomerPreferenceitemsParams) (*http.Response, error)

	// GetaspecificCustomerPreference request
	GetaspecificCustomerPreference(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificCustomerPreference request  with any body
	ChangeaspecificCustomerPreferenceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificCustomerPreference request  with any body
	ReplacechangeaspecificCustomerPreferenceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificCustomerPreference(ctx context.Context, id string, body ReplacechangeaspecificCustomerPreferenceJSONRequestBody) (*http.Response, error)

	// GetCustomeritems request
	GetCustomeritems(ctx context.Context, params *GetCustomeritemsParams) (*http.Response, error)

	// CreateanewCustomer request  with any body
	CreateanewCustomerWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewCustomer(ctx context.Context, body CreateanewCustomerJSONRequestBody) (*http.Response, error)

	// GetaspecificCustomer request
	GetaspecificCustomer(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificCustomer request  with any body
	ChangeaspecificCustomerWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificCustomer request  with any body
	ReplacechangeaspecificCustomerWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificCustomer(ctx context.Context, id string, body ReplacechangeaspecificCustomerJSONRequestBody) (*http.Response, error)

	// GetCustomerZoneCostitems request
	GetCustomerZoneCostitems(ctx context.Context, params *GetCustomerZoneCostitemsParams) (*http.Response, error)

	// GetaspecificCustomerZoneCost request
	GetaspecificCustomerZoneCost(ctx context.Context, id string) (*http.Response, error)

	// GetDomainPreferenceitems request
	GetDomainPreferenceitems(ctx context.Context, params *GetDomainPreferenceitemsParams) (*http.Response, error)

	// GetaspecificDomainPreference request
	GetaspecificDomainPreference(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificDomainPreference request  with any body
	ChangeaspecificDomainPreferenceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificDomainPreference request  with any body
	ReplacechangeaspecificDomainPreferenceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificDomainPreference(ctx context.Context, id string, body ReplacechangeaspecificDomainPreferenceJSONRequestBody) (*http.Response, error)

	// GetDomainitems request
	GetDomainitems(ctx context.Context, params *GetDomainitemsParams) (*http.Response, error)

	// CreateanewDomain request  with any body
	CreateanewDomainWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewDomain(ctx context.Context, body CreateanewDomainJSONRequestBody) (*http.Response, error)

	// DeleteaspecificDomain request
	DeleteaspecificDomain(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificDomain request
	GetaspecificDomain(ctx context.Context, id string) (*http.Response, error)

	// GetEmailTemplateitems request
	GetEmailTemplateitems(ctx context.Context, params *GetEmailTemplateitemsParams) (*http.Response, error)

	// CreateanewEmailTemplate request  with any body
	CreateanewEmailTemplateWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewEmailTemplate(ctx context.Context, body CreateanewEmailTemplateJSONRequestBody) (*http.Response, error)

	// DeleteaspecificEmailTemplate request
	DeleteaspecificEmailTemplate(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificEmailTemplate request
	GetaspecificEmailTemplate(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificEmailTemplate request  with any body
	ChangeaspecificEmailTemplateWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificEmailTemplate request  with any body
	ReplacechangeaspecificEmailTemplateWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificEmailTemplate(ctx context.Context, id string, body ReplacechangeaspecificEmailTemplateJSONRequestBody) (*http.Response, error)

	// GetEmergencyMappingContaineritems request
	GetEmergencyMappingContaineritems(ctx context.Context, params *GetEmergencyMappingContaineritemsParams) (*http.Response, error)

	// CreateanewEmergencyMappingContainer request  with any body
	CreateanewEmergencyMappingContainerWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewEmergencyMappingContainer(ctx context.Context, body CreateanewEmergencyMappingContainerJSONRequestBody) (*http.Response, error)

	// DeleteaspecificEmergencyMappingContainer request
	DeleteaspecificEmergencyMappingContainer(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificEmergencyMappingContainer request
	GetaspecificEmergencyMappingContainer(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificEmergencyMappingContainer request  with any body
	ChangeaspecificEmergencyMappingContainerWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificEmergencyMappingContainer request  with any body
	ReplacechangeaspecificEmergencyMappingContainerWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificEmergencyMappingContainer(ctx context.Context, id string, body ReplacechangeaspecificEmergencyMappingContainerJSONRequestBody) (*http.Response, error)

	// GetEmergencyMappingitems request
	GetEmergencyMappingitems(ctx context.Context, params *GetEmergencyMappingitemsParams) (*http.Response, error)

	// CreateanewEmergencyMapping request  with any body
	CreateanewEmergencyMappingWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewEmergencyMapping(ctx context.Context, body CreateanewEmergencyMappingJSONRequestBody) (*http.Response, error)

	// DeleteaspecificEmergencyMapping request
	DeleteaspecificEmergencyMapping(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificEmergencyMapping request
	GetaspecificEmergencyMapping(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificEmergencyMapping request  with any body
	ChangeaspecificEmergencyMappingWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificEmergencyMapping request  with any body
	ReplacechangeaspecificEmergencyMappingWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificEmergencyMapping(ctx context.Context, id string, body ReplacechangeaspecificEmergencyMappingJSONRequestBody) (*http.Response, error)

	// GetEventitems request
	GetEventitems(ctx context.Context, params *GetEventitemsParams) (*http.Response, error)

	// GetaspecificEvent request
	GetaspecificEvent(ctx context.Context, id string) (*http.Response, error)

	// GetFaxitems request
	GetFaxitems(ctx context.Context, params *GetFaxitemsParams) (*http.Response, error)

	// CreateanewFax request  with any body
	CreateanewFaxWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewFax(ctx context.Context, body CreateanewFaxJSONRequestBody) (*http.Response, error)

	// GetaspecificFax request
	GetaspecificFax(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificFaxRecording request
	GetaspecificFaxRecording(ctx context.Context, id string) (*http.Response, error)

	// GetFaxserverSettingitems request
	GetFaxserverSettingitems(ctx context.Context, params *GetFaxserverSettingitemsParams) (*http.Response, error)

	// GetaspecificFaxserverSetting request
	GetaspecificFaxserverSetting(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificFaxserverSetting request  with any body
	ChangeaspecificFaxserverSettingWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificFaxserverSetting request  with any body
	ReplacechangeaspecificFaxserverSettingWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificFaxserverSetting(ctx context.Context, id string, body ReplacechangeaspecificFaxserverSettingJSONRequestBody) (*http.Response, error)

	// GetInterceptionitems request
	GetInterceptionitems(ctx context.Context, params *GetInterceptionitemsParams) (*http.Response, error)

	// CreateanewInterception request  with any body
	CreateanewInterceptionWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewInterception(ctx context.Context, body CreateanewInterceptionJSONRequestBody) (*http.Response, error)

	// DeleteaspecificInterception request
	DeleteaspecificInterception(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificInterception request
	GetaspecificInterception(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificInterception request  with any body
	ChangeaspecificInterceptionWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificInterception request  with any body
	ReplacechangeaspecificInterceptionWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificInterception(ctx context.Context, id string, body ReplacechangeaspecificInterceptionJSONRequestBody) (*http.Response, error)

	// GetInvoiceitems request
	GetInvoiceitems(ctx context.Context, params *GetInvoiceitemsParams) (*http.Response, error)

	// CreateanewInvoice request  with any body
	CreateanewInvoiceWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewInvoice(ctx context.Context, body CreateanewInvoiceJSONRequestBody) (*http.Response, error)

	// DeleteaspecificInvoice request
	DeleteaspecificInvoice(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificInvoice request
	GetaspecificInvoice(ctx context.Context, id string) (*http.Response, error)

	// GetInvoiceTemplateitems request
	GetInvoiceTemplateitems(ctx context.Context, params *GetInvoiceTemplateitemsParams) (*http.Response, error)

	// GetaspecificInvoiceTemplate request
	GetaspecificInvoiceTemplate(ctx context.Context, id string) (*http.Response, error)

	// GetLnpCarrieritems request
	GetLnpCarrieritems(ctx context.Context, params *GetLnpCarrieritemsParams) (*http.Response, error)

	// CreateanewLnpCarrier request  with any body
	CreateanewLnpCarrierWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewLnpCarrier(ctx context.Context, body CreateanewLnpCarrierJSONRequestBody) (*http.Response, error)

	// DeleteaspecificLnpCarrier request
	DeleteaspecificLnpCarrier(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificLnpCarrier request
	GetaspecificLnpCarrier(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificLnpCarrier request  with any body
	ChangeaspecificLnpCarrierWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificLnpCarrier request  with any body
	ReplacechangeaspecificLnpCarrierWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificLnpCarrier(ctx context.Context, id string, body ReplacechangeaspecificLnpCarrierJSONRequestBody) (*http.Response, error)

	// GetLnpNumberitems request
	GetLnpNumberitems(ctx context.Context, params *GetLnpNumberitemsParams) (*http.Response, error)

	// CreateanewLnpNumber request  with any body
	CreateanewLnpNumberWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewLnpNumber(ctx context.Context, body CreateanewLnpNumberJSONRequestBody) (*http.Response, error)

	// DeleteaspecificLnpNumber request
	DeleteaspecificLnpNumber(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificLnpNumber request
	GetaspecificLnpNumber(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificLnpNumber request  with any body
	ChangeaspecificLnpNumberWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificLnpNumber request  with any body
	ReplacechangeaspecificLnpNumberWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificLnpNumber(ctx context.Context, id string, body ReplacechangeaspecificLnpNumberJSONRequestBody) (*http.Response, error)

	// GetMailToFaxSettingitems request
	GetMailToFaxSettingitems(ctx context.Context, params *GetMailToFaxSettingitemsParams) (*http.Response, error)

	// GetaspecificMailToFaxSetting request
	GetaspecificMailToFaxSetting(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificMailToFaxSetting request  with any body
	ChangeaspecificMailToFaxSettingWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificMailToFaxSetting request  with any body
	ReplacechangeaspecificMailToFaxSettingWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificMailToFaxSetting(ctx context.Context, id string, body ReplacechangeaspecificMailToFaxSettingJSONRequestBody) (*http.Response, error)

	// GetMaliciousCallitems request
	GetMaliciousCallitems(ctx context.Context, params *GetMaliciousCallitemsParams) (*http.Response, error)

	// DeleteaspecificMaliciousCall request
	DeleteaspecificMaliciousCall(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificMaliciousCall request
	GetaspecificMaliciousCall(ctx context.Context, id string) (*http.Response, error)

	// GetManagerSecretaryitems request
	GetManagerSecretaryitems(ctx context.Context, params *GetManagerSecretaryitemsParams) (*http.Response, error)

	// DeleteaspecificManagerSecretary request
	DeleteaspecificManagerSecretary(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificManagerSecretary request
	GetaspecificManagerSecretary(ctx context.Context, id string) (*http.Response, error)

	// ReplacechangeaspecificManagerSecretary request  with any body
	ReplacechangeaspecificManagerSecretaryWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificManagerSecretary(ctx context.Context, id string, body ReplacechangeaspecificManagerSecretaryJSONRequestBody) (*http.Response, error)

	// GetNcosLevelitems request
	GetNcosLevelitems(ctx context.Context, params *GetNcosLevelitemsParams) (*http.Response, error)

	// CreateanewNcosLevel request  with any body
	CreateanewNcosLevelWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewNcosLevel(ctx context.Context, body CreateanewNcosLevelJSONRequestBody) (*http.Response, error)

	// DeleteaspecificNcosLevel request
	DeleteaspecificNcosLevel(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificNcosLevel request
	GetaspecificNcosLevel(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificNcosLevel request  with any body
	ChangeaspecificNcosLevelWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificNcosLevel request  with any body
	ReplacechangeaspecificNcosLevelWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificNcosLevel(ctx context.Context, id string, body ReplacechangeaspecificNcosLevelJSONRequestBody) (*http.Response, error)

	// GetNcosLnpCarrieritems request
	GetNcosLnpCarrieritems(ctx context.Context, params *GetNcosLnpCarrieritemsParams) (*http.Response, error)

	// CreateanewNcosLnpCarrier request  with any body
	CreateanewNcosLnpCarrierWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewNcosLnpCarrier(ctx context.Context, body CreateanewNcosLnpCarrierJSONRequestBody) (*http.Response, error)

	// DeleteaspecificNcosLnpCarrier request
	DeleteaspecificNcosLnpCarrier(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificNcosLnpCarrier request
	GetaspecificNcosLnpCarrier(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificNcosLnpCarrier request  with any body
	ChangeaspecificNcosLnpCarrierWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificNcosLnpCarrier request  with any body
	ReplacechangeaspecificNcosLnpCarrierWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificNcosLnpCarrier(ctx context.Context, id string, body ReplacechangeaspecificNcosLnpCarrierJSONRequestBody) (*http.Response, error)

	// GetNcosPatternitems request
	GetNcosPatternitems(ctx context.Context, params *GetNcosPatternitemsParams) (*http.Response, error)

	// CreateanewNcosPattern request  with any body
	CreateanewNcosPatternWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewNcosPattern(ctx context.Context, body CreateanewNcosPatternJSONRequestBody) (*http.Response, error)

	// DeleteaspecificNcosPattern request
	DeleteaspecificNcosPattern(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificNcosPattern request
	GetaspecificNcosPattern(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificNcosPattern request  with any body
	ChangeaspecificNcosPatternWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificNcosPattern request  with any body
	ReplacechangeaspecificNcosPatternWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificNcosPattern(ctx context.Context, id string, body ReplacechangeaspecificNcosPatternJSONRequestBody) (*http.Response, error)

	// GetNumberitems request
	GetNumberitems(ctx context.Context, params *GetNumberitemsParams) (*http.Response, error)

	// GetaspecificNumber request
	GetaspecificNumber(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificNumber request  with any body
	ChangeaspecificNumberWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificNumber request  with any body
	ReplacechangeaspecificNumberWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificNumber(ctx context.Context, id string, body ReplacechangeaspecificNumberJSONRequestBody) (*http.Response, error)

	// CreateanewPartyCallControl request  with any body
	CreateanewPartyCallControlWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewPartyCallControl(ctx context.Context, body CreateanewPartyCallControlJSONRequestBody) (*http.Response, error)

	// GetaspecificPbxDeviceConfigFile request
	GetaspecificPbxDeviceConfigFile(ctx context.Context, id string) (*http.Response, error)

	// GetPbxDeviceConfigitems request
	GetPbxDeviceConfigitems(ctx context.Context, params *GetPbxDeviceConfigitemsParams) (*http.Response, error)

	// CreateanewPbxDeviceConfig request  with any body
	CreateanewPbxDeviceConfigWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewPbxDeviceConfig(ctx context.Context, body CreateanewPbxDeviceConfigJSONRequestBody) (*http.Response, error)

	// GetaspecificPbxDeviceConfig request
	GetaspecificPbxDeviceConfig(ctx context.Context, id string) (*http.Response, error)

	// ReplacechangeaspecificPbxDeviceConfig request  with any body
	ReplacechangeaspecificPbxDeviceConfigWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificPbxDeviceConfig(ctx context.Context, id string, body ReplacechangeaspecificPbxDeviceConfigJSONRequestBody) (*http.Response, error)

	// GetaspecificPbxDeviceFirmwareBinary request
	GetaspecificPbxDeviceFirmwareBinary(ctx context.Context, id string) (*http.Response, error)

	// GetPbxDeviceFirmwareitems request
	GetPbxDeviceFirmwareitems(ctx context.Context, params *GetPbxDeviceFirmwareitemsParams) (*http.Response, error)

	// CreateanewPbxDeviceFirmware request  with any body
	CreateanewPbxDeviceFirmwareWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewPbxDeviceFirmware(ctx context.Context, body CreateanewPbxDeviceFirmwareJSONRequestBody) (*http.Response, error)

	// GetaspecificPbxDeviceFirmware request
	GetaspecificPbxDeviceFirmware(ctx context.Context, id string) (*http.Response, error)

	// ReplacechangeaspecificPbxDeviceFirmware request  with any body
	ReplacechangeaspecificPbxDeviceFirmwareWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificPbxDeviceFirmware(ctx context.Context, id string, body ReplacechangeaspecificPbxDeviceFirmwareJSONRequestBody) (*http.Response, error)

	// GetaspecificPbxDeviceModelImage request
	GetaspecificPbxDeviceModelImage(ctx context.Context, id string) (*http.Response, error)

	// GetPbxDeviceModelitems request
	GetPbxDeviceModelitems(ctx context.Context, params *GetPbxDeviceModelitemsParams) (*http.Response, error)

	// CreateanewPbxDeviceModel request  with any body
	CreateanewPbxDeviceModelWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewPbxDeviceModel(ctx context.Context, body CreateanewPbxDeviceModelJSONRequestBody) (*http.Response, error)

	// GetaspecificPbxDeviceModel request
	GetaspecificPbxDeviceModel(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificPbxDeviceModel request  with any body
	ChangeaspecificPbxDeviceModelWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificPbxDeviceModel request  with any body
	ReplacechangeaspecificPbxDeviceModelWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificPbxDeviceModel(ctx context.Context, id string, body ReplacechangeaspecificPbxDeviceModelJSONRequestBody) (*http.Response, error)

	// GetPbxDevicePreferenceitems request
	GetPbxDevicePreferenceitems(ctx context.Context, params *GetPbxDevicePreferenceitemsParams) (*http.Response, error)

	// GetaspecificPbxDevicePreference request
	GetaspecificPbxDevicePreference(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificPbxDevicePreference request  with any body
	ChangeaspecificPbxDevicePreferenceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificPbxDevicePreference request  with any body
	ReplacechangeaspecificPbxDevicePreferenceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificPbxDevicePreference(ctx context.Context, id string, body ReplacechangeaspecificPbxDevicePreferenceJSONRequestBody) (*http.Response, error)

	// GetPbxDeviceProfilePreferenceitems request
	GetPbxDeviceProfilePreferenceitems(ctx context.Context, params *GetPbxDeviceProfilePreferenceitemsParams) (*http.Response, error)

	// GetaspecificPbxDeviceProfilePreference request
	GetaspecificPbxDeviceProfilePreference(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificPbxDeviceProfilePreference request  with any body
	ChangeaspecificPbxDeviceProfilePreferenceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificPbxDeviceProfilePreference request  with any body
	ReplacechangeaspecificPbxDeviceProfilePreferenceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificPbxDeviceProfilePreference(ctx context.Context, id string, body ReplacechangeaspecificPbxDeviceProfilePreferenceJSONRequestBody) (*http.Response, error)

	// GetPbxDeviceProfileitems request
	GetPbxDeviceProfileitems(ctx context.Context, params *GetPbxDeviceProfileitemsParams) (*http.Response, error)

	// CreateanewPbxDeviceProfile request  with any body
	CreateanewPbxDeviceProfileWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewPbxDeviceProfile(ctx context.Context, body CreateanewPbxDeviceProfileJSONRequestBody) (*http.Response, error)

	// GetaspecificPbxDeviceProfile request
	GetaspecificPbxDeviceProfile(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificPbxDeviceProfile request  with any body
	ChangeaspecificPbxDeviceProfileWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificPbxDeviceProfile request  with any body
	ReplacechangeaspecificPbxDeviceProfileWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificPbxDeviceProfile(ctx context.Context, id string, body ReplacechangeaspecificPbxDeviceProfileJSONRequestBody) (*http.Response, error)

	// GetPbxDeviceitems request
	GetPbxDeviceitems(ctx context.Context, params *GetPbxDeviceitemsParams) (*http.Response, error)

	// CreateanewPbxDevice request  with any body
	CreateanewPbxDeviceWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewPbxDevice(ctx context.Context, body CreateanewPbxDeviceJSONRequestBody) (*http.Response, error)

	// DeleteaspecificPbxDevice request
	DeleteaspecificPbxDevice(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificPbxDevice request
	GetaspecificPbxDevice(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificPbxDevice request  with any body
	ChangeaspecificPbxDeviceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificPbxDevice request  with any body
	ReplacechangeaspecificPbxDeviceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificPbxDevice(ctx context.Context, id string, body ReplacechangeaspecificPbxDeviceJSONRequestBody) (*http.Response, error)

	// GetPbxFieldDevicePreferenceitems request
	GetPbxFieldDevicePreferenceitems(ctx context.Context, params *GetPbxFieldDevicePreferenceitemsParams) (*http.Response, error)

	// GetaspecificPbxFieldDevicePreference request
	GetaspecificPbxFieldDevicePreference(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificPbxFieldDevicePreference request  with any body
	ChangeaspecificPbxFieldDevicePreferenceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificPbxFieldDevicePreference request  with any body
	ReplacechangeaspecificPbxFieldDevicePreferenceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificPbxFieldDevicePreference(ctx context.Context, id string, body ReplacechangeaspecificPbxFieldDevicePreferenceJSONRequestBody) (*http.Response, error)

	// GetPeeringGroupitems request
	GetPeeringGroupitems(ctx context.Context, params *GetPeeringGroupitemsParams) (*http.Response, error)

	// CreateanewPeeringGroup request  with any body
	CreateanewPeeringGroupWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewPeeringGroup(ctx context.Context, body CreateanewPeeringGroupJSONRequestBody) (*http.Response, error)

	// DeleteaspecificPeeringGroup request
	DeleteaspecificPeeringGroup(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificPeeringGroup request
	GetaspecificPeeringGroup(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificPeeringGroup request  with any body
	ChangeaspecificPeeringGroupWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificPeeringGroup request  with any body
	ReplacechangeaspecificPeeringGroupWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificPeeringGroup(ctx context.Context, id string, body ReplacechangeaspecificPeeringGroupJSONRequestBody) (*http.Response, error)

	// GetPeeringInboundRuleitems request
	GetPeeringInboundRuleitems(ctx context.Context, params *GetPeeringInboundRuleitemsParams) (*http.Response, error)

	// CreateanewPeeringInboundRule request  with any body
	CreateanewPeeringInboundRuleWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewPeeringInboundRule(ctx context.Context, body CreateanewPeeringInboundRuleJSONRequestBody) (*http.Response, error)

	// DeleteaspecificPeeringInboundRule request
	DeleteaspecificPeeringInboundRule(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificPeeringInboundRule request
	GetaspecificPeeringInboundRule(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificPeeringInboundRule request  with any body
	ChangeaspecificPeeringInboundRuleWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificPeeringInboundRule request  with any body
	ReplacechangeaspecificPeeringInboundRuleWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificPeeringInboundRule(ctx context.Context, id string, body ReplacechangeaspecificPeeringInboundRuleJSONRequestBody) (*http.Response, error)

	// GetPeeringRuleitems request
	GetPeeringRuleitems(ctx context.Context, params *GetPeeringRuleitemsParams) (*http.Response, error)

	// CreateanewPeeringRule request  with any body
	CreateanewPeeringRuleWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewPeeringRule(ctx context.Context, body CreateanewPeeringRuleJSONRequestBody) (*http.Response, error)

	// DeleteaspecificPeeringRule request
	DeleteaspecificPeeringRule(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificPeeringRule request
	GetaspecificPeeringRule(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificPeeringRule request  with any body
	ChangeaspecificPeeringRuleWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificPeeringRule request  with any body
	ReplacechangeaspecificPeeringRuleWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificPeeringRule(ctx context.Context, id string, body ReplacechangeaspecificPeeringRuleJSONRequestBody) (*http.Response, error)

	// GetPeeringServerPreferenceitems request
	GetPeeringServerPreferenceitems(ctx context.Context, params *GetPeeringServerPreferenceitemsParams) (*http.Response, error)

	// GetaspecificPeeringServerPreference request
	GetaspecificPeeringServerPreference(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificPeeringServerPreference request  with any body
	ChangeaspecificPeeringServerPreferenceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificPeeringServerPreference request  with any body
	ReplacechangeaspecificPeeringServerPreferenceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificPeeringServerPreference(ctx context.Context, id string, body ReplacechangeaspecificPeeringServerPreferenceJSONRequestBody) (*http.Response, error)

	// GetPeeringServeritems request
	GetPeeringServeritems(ctx context.Context, params *GetPeeringServeritemsParams) (*http.Response, error)

	// CreateanewPeeringServer request  with any body
	CreateanewPeeringServerWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewPeeringServer(ctx context.Context, body CreateanewPeeringServerJSONRequestBody) (*http.Response, error)

	// DeleteaspecificPeeringServer request
	DeleteaspecificPeeringServer(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificPeeringServer request
	GetaspecificPeeringServer(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificPeeringServer request  with any body
	ChangeaspecificPeeringServerWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificPeeringServer request  with any body
	ReplacechangeaspecificPeeringServerWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificPeeringServer(ctx context.Context, id string, body ReplacechangeaspecificPeeringServerJSONRequestBody) (*http.Response, error)

	// GetPhonebookEntryitems request
	GetPhonebookEntryitems(ctx context.Context, params *GetPhonebookEntryitemsParams) (*http.Response, error)

	// CreateanewPhonebookEntry request  with any body
	CreateanewPhonebookEntryWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewPhonebookEntry(ctx context.Context, body CreateanewPhonebookEntryJSONRequestBody) (*http.Response, error)

	// DeleteaspecificPhonebookEntry request
	DeleteaspecificPhonebookEntry(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificPhonebookEntry request
	GetaspecificPhonebookEntry(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificPhonebookEntry request  with any body
	ChangeaspecificPhonebookEntryWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificPhonebookEntry request  with any body
	ReplacechangeaspecificPhonebookEntryWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificPhonebookEntry(ctx context.Context, id string, body ReplacechangeaspecificPhonebookEntryJSONRequestBody) (*http.Response, error)

	// GetPreferencesMetaEntryitems request
	GetPreferencesMetaEntryitems(ctx context.Context, params *GetPreferencesMetaEntryitemsParams) (*http.Response, error)

	// CreateanewPreferencesMetaEntry request  with any body
	CreateanewPreferencesMetaEntryWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewPreferencesMetaEntry(ctx context.Context, body CreateanewPreferencesMetaEntryJSONRequestBody) (*http.Response, error)

	// DeleteaspecificPreferencesMetaEntry request
	DeleteaspecificPreferencesMetaEntry(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificPreferencesMetaEntry request
	GetaspecificPreferencesMetaEntry(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificPreferencesMetaEntry request  with any body
	ChangeaspecificPreferencesMetaEntryWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificPreferencesMetaEntry request  with any body
	ReplacechangeaspecificPreferencesMetaEntryWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificPreferencesMetaEntry(ctx context.Context, id string, body ReplacechangeaspecificPreferencesMetaEntryJSONRequestBody) (*http.Response, error)

	// GetProfilePackageitems request
	GetProfilePackageitems(ctx context.Context, params *GetProfilePackageitemsParams) (*http.Response, error)

	// CreateanewProfilePackage request  with any body
	CreateanewProfilePackageWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewProfilePackage(ctx context.Context, body CreateanewProfilePackageJSONRequestBody) (*http.Response, error)

	// DeleteaspecificProfilePackage request
	DeleteaspecificProfilePackage(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificProfilePackage request
	GetaspecificProfilePackage(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificProfilePackage request  with any body
	ChangeaspecificProfilePackageWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificProfilePackage request  with any body
	ReplacechangeaspecificProfilePackageWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificProfilePackage(ctx context.Context, id string, body ReplacechangeaspecificProfilePackageJSONRequestBody) (*http.Response, error)

	// GetProfilePreferenceitems request
	GetProfilePreferenceitems(ctx context.Context, params *GetProfilePreferenceitemsParams) (*http.Response, error)

	// GetaspecificProfilePreference request
	GetaspecificProfilePreference(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificProfilePreference request  with any body
	ChangeaspecificProfilePreferenceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificProfilePreference request  with any body
	ReplacechangeaspecificProfilePreferenceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificProfilePreference(ctx context.Context, id string, body ReplacechangeaspecificProfilePreferenceJSONRequestBody) (*http.Response, error)

	// GetReminderitems request
	GetReminderitems(ctx context.Context, params *GetReminderitemsParams) (*http.Response, error)

	// CreateanewReminder request  with any body
	CreateanewReminderWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewReminder(ctx context.Context, body CreateanewReminderJSONRequestBody) (*http.Response, error)

	// DeleteaspecificReminder request
	DeleteaspecificReminder(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificReminder request
	GetaspecificReminder(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificReminder request  with any body
	ChangeaspecificReminderWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificReminder request  with any body
	ReplacechangeaspecificReminderWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificReminder(ctx context.Context, id string, body ReplacechangeaspecificReminderJSONRequestBody) (*http.Response, error)

	// GetReselleritems request
	GetReselleritems(ctx context.Context, params *GetReselleritemsParams) (*http.Response, error)

	// CreateanewReseller request  with any body
	CreateanewResellerWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewReseller(ctx context.Context, body CreateanewResellerJSONRequestBody) (*http.Response, error)

	// GetaspecificReseller request
	GetaspecificReseller(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificReseller request  with any body
	ChangeaspecificResellerWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificReseller request  with any body
	ReplacechangeaspecificResellerWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificReseller(ctx context.Context, id string, body ReplacechangeaspecificResellerJSONRequestBody) (*http.Response, error)

	// GetRewriteRuleitems request
	GetRewriteRuleitems(ctx context.Context, params *GetRewriteRuleitemsParams) (*http.Response, error)

	// CreateanewRewriteRule request  with any body
	CreateanewRewriteRuleWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewRewriteRule(ctx context.Context, body CreateanewRewriteRuleJSONRequestBody) (*http.Response, error)

	// DeleteaspecificRewriteRule request
	DeleteaspecificRewriteRule(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificRewriteRule request
	GetaspecificRewriteRule(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificRewriteRule request  with any body
	ChangeaspecificRewriteRuleWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificRewriteRule request  with any body
	ReplacechangeaspecificRewriteRuleWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificRewriteRule(ctx context.Context, id string, body ReplacechangeaspecificRewriteRuleJSONRequestBody) (*http.Response, error)

	// GetRewriteRuleSetitems request
	GetRewriteRuleSetitems(ctx context.Context, params *GetRewriteRuleSetitemsParams) (*http.Response, error)

	// CreateanewRewriteRuleSet request  with any body
	CreateanewRewriteRuleSetWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewRewriteRuleSet(ctx context.Context, body CreateanewRewriteRuleSetJSONRequestBody) (*http.Response, error)

	// DeleteaspecificRewriteRuleSet request
	DeleteaspecificRewriteRuleSet(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificRewriteRuleSet request
	GetaspecificRewriteRuleSet(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificRewriteRuleSet request  with any body
	ChangeaspecificRewriteRuleSetWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificRewriteRuleSet request  with any body
	ReplacechangeaspecificRewriteRuleSetWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificRewriteRuleSet(ctx context.Context, id string, body ReplacechangeaspecificRewriteRuleSetJSONRequestBody) (*http.Response, error)

	// GetRtcAppitems request
	GetRtcAppitems(ctx context.Context, params *GetRtcAppitemsParams) (*http.Response, error)

	// GetaspecificRtcApp request
	GetaspecificRtcApp(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificRtcApp request  with any body
	ChangeaspecificRtcAppWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificRtcApp request  with any body
	ReplacechangeaspecificRtcAppWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificRtcApp(ctx context.Context, id string, body ReplacechangeaspecificRtcAppJSONRequestBody) (*http.Response, error)

	// GetRtcNetworkitems request
	GetRtcNetworkitems(ctx context.Context, params *GetRtcNetworkitemsParams) (*http.Response, error)

	// GetaspecificRtcNetwork request
	GetaspecificRtcNetwork(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificRtcNetwork request  with any body
	ChangeaspecificRtcNetworkWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificRtcNetwork request  with any body
	ReplacechangeaspecificRtcNetworkWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificRtcNetwork(ctx context.Context, id string, body ReplacechangeaspecificRtcNetworkJSONRequestBody) (*http.Response, error)

	// GetRtcSessionitems request
	GetRtcSessionitems(ctx context.Context, params *GetRtcSessionitemsParams) (*http.Response, error)

	// CreateanewRtcSession request  with any body
	CreateanewRtcSessionWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewRtcSession(ctx context.Context, body CreateanewRtcSessionJSONRequestBody) (*http.Response, error)

	// GetaspecificRtcSession request
	GetaspecificRtcSession(ctx context.Context, id string) (*http.Response, error)

	// GetSIPCaptureitems request
	GetSIPCaptureitems(ctx context.Context, params *GetSIPCaptureitemsParams) (*http.Response, error)

	// GetaspecificSIPCapture request
	GetaspecificSIPCapture(ctx context.Context, id string) (*http.Response, error)

	// GetSMSitems request
	GetSMSitems(ctx context.Context, params *GetSMSitemsParams) (*http.Response, error)

	// CreateanewSMS request  with any body
	CreateanewSMSWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewSMS(ctx context.Context, body CreateanewSMSJSONRequestBody) (*http.Response, error)

	// GetaspecificSMS request
	GetaspecificSMS(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificSoundFileRecording request
	GetaspecificSoundFileRecording(ctx context.Context, id string) (*http.Response, error)

	// GetSoundFileitems request
	GetSoundFileitems(ctx context.Context, params *GetSoundFileitemsParams) (*http.Response, error)

	// CreateanewSoundFile request  with any body
	CreateanewSoundFileWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewSoundFile(ctx context.Context, body CreateanewSoundFileJSONRequestBody) (*http.Response, error)

	// DeleteaspecificSoundFile request
	DeleteaspecificSoundFile(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificSoundFile request
	GetaspecificSoundFile(ctx context.Context, id string) (*http.Response, error)

	// ReplacechangeaspecificSoundFile request  with any body
	ReplacechangeaspecificSoundFileWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificSoundFile(ctx context.Context, id string, body ReplacechangeaspecificSoundFileJSONRequestBody) (*http.Response, error)

	// GetSoundGroupitems request
	GetSoundGroupitems(ctx context.Context, params *GetSoundGroupitemsParams) (*http.Response, error)

	// GetaspecificSoundGroup request
	GetaspecificSoundGroup(ctx context.Context, id string) (*http.Response, error)

	// GetSoundHandleitems request
	GetSoundHandleitems(ctx context.Context, params *GetSoundHandleitemsParams) (*http.Response, error)

	// GetaspecificSoundHandle request
	GetaspecificSoundHandle(ctx context.Context, id string) (*http.Response, error)

	// GetSoundSetitems request
	GetSoundSetitems(ctx context.Context, params *GetSoundSetitemsParams) (*http.Response, error)

	// CreateanewSoundSet request  with any body
	CreateanewSoundSetWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewSoundSet(ctx context.Context, body CreateanewSoundSetJSONRequestBody) (*http.Response, error)

	// DeleteaspecificSoundSet request
	DeleteaspecificSoundSet(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificSoundSet request
	GetaspecificSoundSet(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificSoundSet request  with any body
	ChangeaspecificSoundSetWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificSoundSet request  with any body
	ReplacechangeaspecificSoundSetWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificSoundSet(ctx context.Context, id string, body ReplacechangeaspecificSoundSetJSONRequestBody) (*http.Response, error)

	// GetSpeedDialitems request
	GetSpeedDialitems(ctx context.Context, params *GetSpeedDialitemsParams) (*http.Response, error)

	// GetaspecificSpeedDial request
	GetaspecificSpeedDial(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificSpeedDial request  with any body
	ChangeaspecificSpeedDialWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificSpeedDial request  with any body
	ReplacechangeaspecificSpeedDialWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificSpeedDial(ctx context.Context, id string, body ReplacechangeaspecificSpeedDialJSONRequestBody) (*http.Response, error)

	// GetSubscriberPreferenceitems request
	GetSubscriberPreferenceitems(ctx context.Context, params *GetSubscriberPreferenceitemsParams) (*http.Response, error)

	// GetaspecificSubscriberPreference request
	GetaspecificSubscriberPreference(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificSubscriberPreference request  with any body
	ChangeaspecificSubscriberPreferenceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificSubscriberPreference request  with any body
	ReplacechangeaspecificSubscriberPreferenceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificSubscriberPreference(ctx context.Context, id string, body ReplacechangeaspecificSubscriberPreferenceJSONRequestBody) (*http.Response, error)

	// GetSubscriberProfileitems request
	GetSubscriberProfileitems(ctx context.Context, params *GetSubscriberProfileitemsParams) (*http.Response, error)

	// CreateanewSubscriberProfile request  with any body
	CreateanewSubscriberProfileWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewSubscriberProfile(ctx context.Context, body CreateanewSubscriberProfileJSONRequestBody) (*http.Response, error)

	// DeleteaspecificSubscriberProfile request
	DeleteaspecificSubscriberProfile(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificSubscriberProfile request
	GetaspecificSubscriberProfile(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificSubscriberProfile request  with any body
	ChangeaspecificSubscriberProfileWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificSubscriberProfile request  with any body
	ReplacechangeaspecificSubscriberProfileWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificSubscriberProfile(ctx context.Context, id string, body ReplacechangeaspecificSubscriberProfileJSONRequestBody) (*http.Response, error)

	// GetSubscriberProfileSetitems request
	GetSubscriberProfileSetitems(ctx context.Context, params *GetSubscriberProfileSetitemsParams) (*http.Response, error)

	// CreateanewSubscriberProfileSet request  with any body
	CreateanewSubscriberProfileSetWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewSubscriberProfileSet(ctx context.Context, body CreateanewSubscriberProfileSetJSONRequestBody) (*http.Response, error)

	// DeleteaspecificSubscriberProfileSet request
	DeleteaspecificSubscriberProfileSet(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificSubscriberProfileSet request
	GetaspecificSubscriberProfileSet(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificSubscriberProfileSet request  with any body
	ChangeaspecificSubscriberProfileSetWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificSubscriberProfileSet request  with any body
	ReplacechangeaspecificSubscriberProfileSetWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificSubscriberProfileSet(ctx context.Context, id string, body ReplacechangeaspecificSubscriberProfileSetJSONRequestBody) (*http.Response, error)

	// GetSubscriberRegistrationitems request
	GetSubscriberRegistrationitems(ctx context.Context, params *GetSubscriberRegistrationitemsParams) (*http.Response, error)

	// CreateanewSubscriberRegistration request  with any body
	CreateanewSubscriberRegistrationWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewSubscriberRegistration(ctx context.Context, body CreateanewSubscriberRegistrationJSONRequestBody) (*http.Response, error)

	// DeleteaspecificSubscriberRegistration request
	DeleteaspecificSubscriberRegistration(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificSubscriberRegistration request
	GetaspecificSubscriberRegistration(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificSubscriberRegistration request  with any body
	ChangeaspecificSubscriberRegistrationWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificSubscriberRegistration request  with any body
	ReplacechangeaspecificSubscriberRegistrationWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificSubscriberRegistration(ctx context.Context, id string, body ReplacechangeaspecificSubscriberRegistrationJSONRequestBody) (*http.Response, error)

	// GetSubscriberitems request
	GetSubscriberitems(ctx context.Context, params *GetSubscriberitemsParams) (*http.Response, error)

	// CreateanewSubscriber request  with any body
	CreateanewSubscriberWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewSubscriber(ctx context.Context, body CreateanewSubscriberJSONRequestBody) (*http.Response, error)

	// DeleteaspecificSubscriber request
	DeleteaspecificSubscriber(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificSubscriber request
	GetaspecificSubscriber(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificSubscriber request  with any body
	ChangeaspecificSubscriberWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificSubscriber request  with any body
	ReplacechangeaspecificSubscriberWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificSubscriber(ctx context.Context, id string, body ReplacechangeaspecificSubscriberJSONRequestBody) (*http.Response, error)

	// GetSystemContactitems request
	GetSystemContactitems(ctx context.Context, params *GetSystemContactitemsParams) (*http.Response, error)

	// CreateanewSystemContact request  with any body
	CreateanewSystemContactWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewSystemContact(ctx context.Context, body CreateanewSystemContactJSONRequestBody) (*http.Response, error)

	// DeleteaspecificSystemContact request
	DeleteaspecificSystemContact(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificSystemContact request
	GetaspecificSystemContact(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificSystemContact request  with any body
	ChangeaspecificSystemContactWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificSystemContact request  with any body
	ReplacechangeaspecificSystemContactWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificSystemContact(ctx context.Context, id string, body ReplacechangeaspecificSystemContactJSONRequestBody) (*http.Response, error)

	// CreateanewTopupCash request  with any body
	CreateanewTopupCashWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewTopupCash(ctx context.Context, body CreateanewTopupCashJSONRequestBody) (*http.Response, error)

	// GetTopupLogitems request
	GetTopupLogitems(ctx context.Context, params *GetTopupLogitemsParams) (*http.Response, error)

	// GetaspecificTopupLog request
	GetaspecificTopupLog(ctx context.Context, id string) (*http.Response, error)

	// CreateanewTopupVoucher request  with any body
	CreateanewTopupVoucherWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewTopupVoucher(ctx context.Context, body CreateanewTopupVoucherJSONRequestBody) (*http.Response, error)

	// GetTrustedSourceitems request
	GetTrustedSourceitems(ctx context.Context, params *GetTrustedSourceitemsParams) (*http.Response, error)

	// CreateanewTrustedSource request  with any body
	CreateanewTrustedSourceWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewTrustedSource(ctx context.Context, body CreateanewTrustedSourceJSONRequestBody) (*http.Response, error)

	// DeleteaspecificTrustedSource request
	DeleteaspecificTrustedSource(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificTrustedSource request
	GetaspecificTrustedSource(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificTrustedSource request  with any body
	ChangeaspecificTrustedSourceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificTrustedSource request  with any body
	ReplacechangeaspecificTrustedSourceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificTrustedSource(ctx context.Context, id string, body ReplacechangeaspecificTrustedSourceJSONRequestBody) (*http.Response, error)

	// GetUpnRewriteSetitems request
	GetUpnRewriteSetitems(ctx context.Context, params *GetUpnRewriteSetitemsParams) (*http.Response, error)

	// CreateanewUpnRewriteSet request  with any body
	CreateanewUpnRewriteSetWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewUpnRewriteSet(ctx context.Context, body CreateanewUpnRewriteSetJSONRequestBody) (*http.Response, error)

	// DeleteaspecificUpnRewriteSet request
	DeleteaspecificUpnRewriteSet(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificUpnRewriteSet request
	GetaspecificUpnRewriteSet(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificUpnRewriteSet request  with any body
	ChangeaspecificUpnRewriteSetWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificUpnRewriteSet request  with any body
	ReplacechangeaspecificUpnRewriteSetWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificUpnRewriteSet(ctx context.Context, id string, body ReplacechangeaspecificUpnRewriteSetJSONRequestBody) (*http.Response, error)

	// GetVoicemailGreetingitems request
	GetVoicemailGreetingitems(ctx context.Context, params *GetVoicemailGreetingitemsParams) (*http.Response, error)

	// CreateanewVoicemailGreeting request  with any body
	CreateanewVoicemailGreetingWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewVoicemailGreeting(ctx context.Context, body CreateanewVoicemailGreetingJSONRequestBody) (*http.Response, error)

	// DeleteaspecificVoicemailGreeting request
	DeleteaspecificVoicemailGreeting(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificVoicemailGreeting request
	GetaspecificVoicemailGreeting(ctx context.Context, id string) (*http.Response, error)

	// ReplacechangeaspecificVoicemailGreeting request  with any body
	ReplacechangeaspecificVoicemailGreetingWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificVoicemailGreeting(ctx context.Context, id string, body ReplacechangeaspecificVoicemailGreetingJSONRequestBody) (*http.Response, error)

	// GetaspecificVoicemailRecording request
	GetaspecificVoicemailRecording(ctx context.Context, id string) (*http.Response, error)

	// GetVoicemailitems request
	GetVoicemailitems(ctx context.Context, params *GetVoicemailitemsParams) (*http.Response, error)

	// DeleteaspecificVoicemail request
	DeleteaspecificVoicemail(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificVoicemail request
	GetaspecificVoicemail(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificVoicemail request  with any body
	ChangeaspecificVoicemailWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificVoicemail request  with any body
	ReplacechangeaspecificVoicemailWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificVoicemail(ctx context.Context, id string, body ReplacechangeaspecificVoicemailJSONRequestBody) (*http.Response, error)

	// GetVoicemailSettingitems request
	GetVoicemailSettingitems(ctx context.Context, params *GetVoicemailSettingitemsParams) (*http.Response, error)

	// GetaspecificVoicemailSetting request
	GetaspecificVoicemailSetting(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificVoicemailSetting request  with any body
	ChangeaspecificVoicemailSettingWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificVoicemailSetting request  with any body
	ReplacechangeaspecificVoicemailSettingWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificVoicemailSetting(ctx context.Context, id string, body ReplacechangeaspecificVoicemailSettingJSONRequestBody) (*http.Response, error)

	// GetVoucheritems request
	GetVoucheritems(ctx context.Context, params *GetVoucheritemsParams) (*http.Response, error)

	// CreateanewVoucher request  with any body
	CreateanewVoucherWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateanewVoucher(ctx context.Context, body CreateanewVoucherJSONRequestBody) (*http.Response, error)

	// DeleteaspecificVoucher request
	DeleteaspecificVoucher(ctx context.Context, id string) (*http.Response, error)

	// GetaspecificVoucher request
	GetaspecificVoucher(ctx context.Context, id string) (*http.Response, error)

	// ChangeaspecificVoucher request  with any body
	ChangeaspecificVoucherWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	// ReplacechangeaspecificVoucher request  with any body
	ReplacechangeaspecificVoucherWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	ReplacechangeaspecificVoucher(ctx context.Context, id string, body ReplacechangeaspecificVoucherJSONRequestBody) (*http.Response, error)
}

func (c *Client) CreateanewAdminCertWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewAdminCertRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewAdminCert(ctx context.Context, body CreateanewAdminCertJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewAdminCertRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminitems(ctx context.Context, params *GetAdminitemsParams) (*http.Response, error) {
	req, err := NewGetAdminitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewAdminWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewAdminRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewAdmin(ctx context.Context, body CreateanewAdminJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewAdminRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificAdmin(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificAdminRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificAdmin(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificAdminRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewApplyRewriteWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewApplyRewriteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewApplyRewrite(ctx context.Context, body CreateanewApplyRewriteJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewApplyRewriteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetAutoAttendantitems(ctx context.Context, params *GetAutoAttendantitemsParams) (*http.Response, error) {
	req, err := NewGetAutoAttendantitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificAutoAttendant(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificAutoAttendantRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificAutoAttendantWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificAutoAttendantRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificAutoAttendantWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificAutoAttendantRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificAutoAttendant(ctx context.Context, id string, body ReplacechangeaspecificAutoAttendantJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificAutoAttendantRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetBalanceIntervalitems(ctx context.Context, params *GetBalanceIntervalitemsParams) (*http.Response, error) {
	req, err := NewGetBalanceIntervalitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificBalanceInterval(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificBalanceIntervalRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetBannedIpitems(ctx context.Context, params *GetBannedIpitemsParams) (*http.Response, error) {
	req, err := NewGetBannedIpitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificBannedIp(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificBannedIpRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificBannedIp(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificBannedIpRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetBannedUseritems(ctx context.Context, params *GetBannedUseritemsParams) (*http.Response, error) {
	req, err := NewGetBannedUseritemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificBannedUser(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificBannedUserRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificBannedUser(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificBannedUserRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetBillingFeeitems(ctx context.Context, params *GetBillingFeeitemsParams) (*http.Response, error) {
	req, err := NewGetBillingFeeitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewBillingFeeWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewBillingFeeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewBillingFee(ctx context.Context, body CreateanewBillingFeeJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewBillingFeeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificBillingFee(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificBillingFeeRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificBillingFee(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificBillingFeeRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificBillingFeeWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificBillingFeeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificBillingFeeWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificBillingFeeRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificBillingFee(ctx context.Context, id string, body ReplacechangeaspecificBillingFeeJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificBillingFeeRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetBillingNetworkitems(ctx context.Context, params *GetBillingNetworkitemsParams) (*http.Response, error) {
	req, err := NewGetBillingNetworkitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewBillingNetworkWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewBillingNetworkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewBillingNetwork(ctx context.Context, body CreateanewBillingNetworkJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewBillingNetworkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificBillingNetwork(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificBillingNetworkRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificBillingNetworkWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificBillingNetworkRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificBillingNetworkWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificBillingNetworkRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificBillingNetwork(ctx context.Context, id string, body ReplacechangeaspecificBillingNetworkJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificBillingNetworkRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetBillingProfileitems(ctx context.Context, params *GetBillingProfileitemsParams) (*http.Response, error) {
	req, err := NewGetBillingProfileitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewBillingProfileWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewBillingProfileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewBillingProfile(ctx context.Context, body CreateanewBillingProfileJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewBillingProfileRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificBillingProfile(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificBillingProfileRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificBillingProfileWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificBillingProfileRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificBillingProfileWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificBillingProfileRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificBillingProfile(ctx context.Context, id string, body ReplacechangeaspecificBillingProfileJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificBillingProfileRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetBillingZoneitems(ctx context.Context, params *GetBillingZoneitemsParams) (*http.Response, error) {
	req, err := NewGetBillingZoneitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewBillingZoneWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewBillingZoneRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewBillingZone(ctx context.Context, body CreateanewBillingZoneJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewBillingZoneRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificBillingZone(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificBillingZoneRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificBillingZone(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificBillingZoneRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificBillingZoneWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificBillingZoneRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificBillingZoneWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificBillingZoneRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificBillingZone(ctx context.Context, id string, body ReplacechangeaspecificBillingZoneJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificBillingZoneRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewCallControlWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewCallControlRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewCallControl(ctx context.Context, body CreateanewCallControlJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewCallControlRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetCallForwarditems(ctx context.Context, params *GetCallForwarditemsParams) (*http.Response, error) {
	req, err := NewGetCallForwarditemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificCallForward(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificCallForwardRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificCallForward(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificCallForwardRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificCallForwardWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificCallForwardRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificCallForwardWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificCallForwardRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificCallForward(ctx context.Context, id string, body ReplacechangeaspecificCallForwardJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificCallForwardRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetCallListitems(ctx context.Context, params *GetCallListitemsParams) (*http.Response, error) {
	req, err := NewGetCallListitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificCallList(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificCallListRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetCallQueueitems(ctx context.Context, params *GetCallQueueitemsParams) (*http.Response, error) {
	req, err := NewGetCallQueueitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificCallQueue(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificCallQueueRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificCallRecordingFile(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificCallRecordingFileRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetCallRecordingitems(ctx context.Context, params *GetCallRecordingitemsParams) (*http.Response, error) {
	req, err := NewGetCallRecordingitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificCallRecording(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificCallRecordingRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificCallRecording(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificCallRecordingRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetCallRecordingStreamitems(ctx context.Context, params *GetCallRecordingStreamitemsParams) (*http.Response, error) {
	req, err := NewGetCallRecordingStreamitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificCallRecordingStream(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificCallRecordingStreamRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificCallRecordingStream(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificCallRecordingStreamRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetCallitems(ctx context.Context, params *GetCallitemsParams) (*http.Response, error) {
	req, err := NewGetCallitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificCall(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificCallRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetCapabilityitems(ctx context.Context, params *GetCapabilityitemsParams) (*http.Response, error) {
	req, err := NewGetCapabilityitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificCapability(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificCapabilityRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetCCMapEntryitems(ctx context.Context, params *GetCCMapEntryitemsParams) (*http.Response, error) {
	req, err := NewGetCCMapEntryitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificCCMapEntry(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificCCMapEntryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificCCMapEntry(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificCCMapEntryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificCCMapEntryWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificCCMapEntryRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificCCMapEntryWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificCCMapEntryRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificCCMapEntry(ctx context.Context, id string, body ReplacechangeaspecificCCMapEntryJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificCCMapEntryRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetCFBNumberSetitems(ctx context.Context, params *GetCFBNumberSetitemsParams) (*http.Response, error) {
	req, err := NewGetCFBNumberSetitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewCFBNumberSetWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewCFBNumberSetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewCFBNumberSet(ctx context.Context, body CreateanewCFBNumberSetJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewCFBNumberSetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificCFBNumberSet(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificCFBNumberSetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificCFBNumberSet(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificCFBNumberSetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificCFBNumberSetWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificCFBNumberSetRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificCFBNumberSetWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificCFBNumberSetRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificCFBNumberSet(ctx context.Context, id string, body ReplacechangeaspecificCFBNumberSetJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificCFBNumberSetRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetCFDestinationSetitems(ctx context.Context, params *GetCFDestinationSetitemsParams) (*http.Response, error) {
	req, err := NewGetCFDestinationSetitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewCFDestinationSetWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewCFDestinationSetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewCFDestinationSet(ctx context.Context, body CreateanewCFDestinationSetJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewCFDestinationSetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificCFDestinationSet(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificCFDestinationSetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificCFDestinationSet(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificCFDestinationSetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificCFDestinationSetWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificCFDestinationSetRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificCFDestinationSetWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificCFDestinationSetRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificCFDestinationSet(ctx context.Context, id string, body ReplacechangeaspecificCFDestinationSetJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificCFDestinationSetRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetCFMappingitems(ctx context.Context, params *GetCFMappingitemsParams) (*http.Response, error) {
	req, err := NewGetCFMappingitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificCFMapping(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificCFMappingRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificCFMappingWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificCFMappingRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificCFMappingWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificCFMappingRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificCFMapping(ctx context.Context, id string, body ReplacechangeaspecificCFMappingJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificCFMappingRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetCFSourceSetitems(ctx context.Context, params *GetCFSourceSetitemsParams) (*http.Response, error) {
	req, err := NewGetCFSourceSetitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewCFSourceSetWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewCFSourceSetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewCFSourceSet(ctx context.Context, body CreateanewCFSourceSetJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewCFSourceSetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificCFSourceSet(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificCFSourceSetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificCFSourceSet(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificCFSourceSetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificCFSourceSetWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificCFSourceSetRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificCFSourceSetWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificCFSourceSetRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificCFSourceSet(ctx context.Context, id string, body ReplacechangeaspecificCFSourceSetJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificCFSourceSetRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetCFTimeSetitems(ctx context.Context, params *GetCFTimeSetitemsParams) (*http.Response, error) {
	req, err := NewGetCFTimeSetitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewCFTimeSetWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewCFTimeSetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewCFTimeSet(ctx context.Context, body CreateanewCFTimeSetJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewCFTimeSetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificCFTimeSet(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificCFTimeSetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificCFTimeSet(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificCFTimeSetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificCFTimeSetWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificCFTimeSetRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificCFTimeSetWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificCFTimeSetRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificCFTimeSet(ctx context.Context, id string, body ReplacechangeaspecificCFTimeSetJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificCFTimeSetRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetContractitems(ctx context.Context, params *GetContractitemsParams) (*http.Response, error) {
	req, err := NewGetContractitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewContractWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewContractRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewContract(ctx context.Context, body CreateanewContractJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewContractRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificContract(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificContractRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificContractWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificContractRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificContractWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificContractRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificContract(ctx context.Context, id string, body ReplacechangeaspecificContractJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificContractRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetConversationitems(ctx context.Context, params *GetConversationitemsParams) (*http.Response, error) {
	req, err := NewGetConversationitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificConversation(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificConversationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomerBalanceitems(ctx context.Context, params *GetCustomerBalanceitemsParams) (*http.Response, error) {
	req, err := NewGetCustomerBalanceitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificCustomerBalance(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificCustomerBalanceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificCustomerBalanceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificCustomerBalanceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificCustomerBalanceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificCustomerBalanceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificCustomerBalance(ctx context.Context, id string, body ReplacechangeaspecificCustomerBalanceJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificCustomerBalanceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomerContactitems(ctx context.Context, params *GetCustomerContactitemsParams) (*http.Response, error) {
	req, err := NewGetCustomerContactitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewCustomerContactWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewCustomerContactRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewCustomerContact(ctx context.Context, body CreateanewCustomerContactJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewCustomerContactRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificCustomerContact(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificCustomerContactRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificCustomerContact(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificCustomerContactRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificCustomerContactWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificCustomerContactRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificCustomerContactWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificCustomerContactRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificCustomerContact(ctx context.Context, id string, body ReplacechangeaspecificCustomerContactJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificCustomerContactRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomerFraudEventitems(ctx context.Context, params *GetCustomerFraudEventitemsParams) (*http.Response, error) {
	req, err := NewGetCustomerFraudEventitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificCustomerFraudEvent(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificCustomerFraudEventRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomerFraudPreferenceitems(ctx context.Context, params *GetCustomerFraudPreferenceitemsParams) (*http.Response, error) {
	req, err := NewGetCustomerFraudPreferenceitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificCustomerFraudPreference(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificCustomerFraudPreferenceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificCustomerFraudPreferenceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificCustomerFraudPreferenceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificCustomerFraudPreferenceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificCustomerFraudPreferenceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificCustomerFraudPreference(ctx context.Context, id string, body ReplacechangeaspecificCustomerFraudPreferenceJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificCustomerFraudPreferenceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomerLocationitems(ctx context.Context, params *GetCustomerLocationitemsParams) (*http.Response, error) {
	req, err := NewGetCustomerLocationitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewCustomerLocationWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewCustomerLocationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewCustomerLocation(ctx context.Context, body CreateanewCustomerLocationJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewCustomerLocationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificCustomerLocation(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificCustomerLocationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificCustomerLocation(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificCustomerLocationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificCustomerLocationWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificCustomerLocationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificCustomerLocationWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificCustomerLocationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificCustomerLocation(ctx context.Context, id string, body ReplacechangeaspecificCustomerLocationJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificCustomerLocationRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomerPreferenceitems(ctx context.Context, params *GetCustomerPreferenceitemsParams) (*http.Response, error) {
	req, err := NewGetCustomerPreferenceitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificCustomerPreference(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificCustomerPreferenceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificCustomerPreferenceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificCustomerPreferenceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificCustomerPreferenceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificCustomerPreferenceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificCustomerPreference(ctx context.Context, id string, body ReplacechangeaspecificCustomerPreferenceJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificCustomerPreferenceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomeritems(ctx context.Context, params *GetCustomeritemsParams) (*http.Response, error) {
	req, err := NewGetCustomeritemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewCustomerWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewCustomerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewCustomer(ctx context.Context, body CreateanewCustomerJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewCustomerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificCustomer(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificCustomerRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificCustomerWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificCustomerRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificCustomerWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificCustomerRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificCustomer(ctx context.Context, id string, body ReplacechangeaspecificCustomerJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificCustomerRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomerZoneCostitems(ctx context.Context, params *GetCustomerZoneCostitemsParams) (*http.Response, error) {
	req, err := NewGetCustomerZoneCostitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificCustomerZoneCost(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificCustomerZoneCostRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetDomainPreferenceitems(ctx context.Context, params *GetDomainPreferenceitemsParams) (*http.Response, error) {
	req, err := NewGetDomainPreferenceitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificDomainPreference(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificDomainPreferenceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificDomainPreferenceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificDomainPreferenceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificDomainPreferenceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificDomainPreferenceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificDomainPreference(ctx context.Context, id string, body ReplacechangeaspecificDomainPreferenceJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificDomainPreferenceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetDomainitems(ctx context.Context, params *GetDomainitemsParams) (*http.Response, error) {
	req, err := NewGetDomainitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewDomainWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewDomainRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewDomain(ctx context.Context, body CreateanewDomainJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewDomainRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificDomain(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificDomainRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificDomain(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificDomainRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmailTemplateitems(ctx context.Context, params *GetEmailTemplateitemsParams) (*http.Response, error) {
	req, err := NewGetEmailTemplateitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewEmailTemplateWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewEmailTemplateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewEmailTemplate(ctx context.Context, body CreateanewEmailTemplateJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewEmailTemplateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificEmailTemplate(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificEmailTemplateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificEmailTemplate(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificEmailTemplateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificEmailTemplateWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificEmailTemplateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificEmailTemplateWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificEmailTemplateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificEmailTemplate(ctx context.Context, id string, body ReplacechangeaspecificEmailTemplateJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificEmailTemplateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmergencyMappingContaineritems(ctx context.Context, params *GetEmergencyMappingContaineritemsParams) (*http.Response, error) {
	req, err := NewGetEmergencyMappingContaineritemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewEmergencyMappingContainerWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewEmergencyMappingContainerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewEmergencyMappingContainer(ctx context.Context, body CreateanewEmergencyMappingContainerJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewEmergencyMappingContainerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificEmergencyMappingContainer(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificEmergencyMappingContainerRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificEmergencyMappingContainer(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificEmergencyMappingContainerRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificEmergencyMappingContainerWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificEmergencyMappingContainerRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificEmergencyMappingContainerWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificEmergencyMappingContainerRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificEmergencyMappingContainer(ctx context.Context, id string, body ReplacechangeaspecificEmergencyMappingContainerJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificEmergencyMappingContainerRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetEmergencyMappingitems(ctx context.Context, params *GetEmergencyMappingitemsParams) (*http.Response, error) {
	req, err := NewGetEmergencyMappingitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewEmergencyMappingWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewEmergencyMappingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewEmergencyMapping(ctx context.Context, body CreateanewEmergencyMappingJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewEmergencyMappingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificEmergencyMapping(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificEmergencyMappingRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificEmergencyMapping(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificEmergencyMappingRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificEmergencyMappingWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificEmergencyMappingRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificEmergencyMappingWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificEmergencyMappingRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificEmergencyMapping(ctx context.Context, id string, body ReplacechangeaspecificEmergencyMappingJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificEmergencyMappingRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetEventitems(ctx context.Context, params *GetEventitemsParams) (*http.Response, error) {
	req, err := NewGetEventitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificEvent(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificEventRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetFaxitems(ctx context.Context, params *GetFaxitemsParams) (*http.Response, error) {
	req, err := NewGetFaxitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewFaxWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewFaxRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewFax(ctx context.Context, body CreateanewFaxJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewFaxRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificFax(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificFaxRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificFaxRecording(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificFaxRecordingRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetFaxserverSettingitems(ctx context.Context, params *GetFaxserverSettingitemsParams) (*http.Response, error) {
	req, err := NewGetFaxserverSettingitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificFaxserverSetting(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificFaxserverSettingRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificFaxserverSettingWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificFaxserverSettingRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificFaxserverSettingWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificFaxserverSettingRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificFaxserverSetting(ctx context.Context, id string, body ReplacechangeaspecificFaxserverSettingJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificFaxserverSettingRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetInterceptionitems(ctx context.Context, params *GetInterceptionitemsParams) (*http.Response, error) {
	req, err := NewGetInterceptionitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewInterceptionWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewInterceptionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewInterception(ctx context.Context, body CreateanewInterceptionJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewInterceptionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificInterception(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificInterceptionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificInterception(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificInterceptionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificInterceptionWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificInterceptionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificInterceptionWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificInterceptionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificInterception(ctx context.Context, id string, body ReplacechangeaspecificInterceptionJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificInterceptionRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetInvoiceitems(ctx context.Context, params *GetInvoiceitemsParams) (*http.Response, error) {
	req, err := NewGetInvoiceitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewInvoiceWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewInvoiceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewInvoice(ctx context.Context, body CreateanewInvoiceJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewInvoiceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificInvoice(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificInvoiceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificInvoice(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificInvoiceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetInvoiceTemplateitems(ctx context.Context, params *GetInvoiceTemplateitemsParams) (*http.Response, error) {
	req, err := NewGetInvoiceTemplateitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificInvoiceTemplate(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificInvoiceTemplateRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetLnpCarrieritems(ctx context.Context, params *GetLnpCarrieritemsParams) (*http.Response, error) {
	req, err := NewGetLnpCarrieritemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewLnpCarrierWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewLnpCarrierRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewLnpCarrier(ctx context.Context, body CreateanewLnpCarrierJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewLnpCarrierRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificLnpCarrier(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificLnpCarrierRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificLnpCarrier(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificLnpCarrierRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificLnpCarrierWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificLnpCarrierRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificLnpCarrierWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificLnpCarrierRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificLnpCarrier(ctx context.Context, id string, body ReplacechangeaspecificLnpCarrierJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificLnpCarrierRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetLnpNumberitems(ctx context.Context, params *GetLnpNumberitemsParams) (*http.Response, error) {
	req, err := NewGetLnpNumberitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewLnpNumberWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewLnpNumberRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewLnpNumber(ctx context.Context, body CreateanewLnpNumberJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewLnpNumberRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificLnpNumber(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificLnpNumberRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificLnpNumber(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificLnpNumberRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificLnpNumberWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificLnpNumberRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificLnpNumberWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificLnpNumberRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificLnpNumber(ctx context.Context, id string, body ReplacechangeaspecificLnpNumberJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificLnpNumberRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetMailToFaxSettingitems(ctx context.Context, params *GetMailToFaxSettingitemsParams) (*http.Response, error) {
	req, err := NewGetMailToFaxSettingitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificMailToFaxSetting(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificMailToFaxSettingRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificMailToFaxSettingWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificMailToFaxSettingRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificMailToFaxSettingWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificMailToFaxSettingRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificMailToFaxSetting(ctx context.Context, id string, body ReplacechangeaspecificMailToFaxSettingJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificMailToFaxSettingRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetMaliciousCallitems(ctx context.Context, params *GetMaliciousCallitemsParams) (*http.Response, error) {
	req, err := NewGetMaliciousCallitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificMaliciousCall(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificMaliciousCallRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificMaliciousCall(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificMaliciousCallRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetManagerSecretaryitems(ctx context.Context, params *GetManagerSecretaryitemsParams) (*http.Response, error) {
	req, err := NewGetManagerSecretaryitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificManagerSecretary(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificManagerSecretaryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificManagerSecretary(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificManagerSecretaryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificManagerSecretaryWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificManagerSecretaryRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificManagerSecretary(ctx context.Context, id string, body ReplacechangeaspecificManagerSecretaryJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificManagerSecretaryRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetNcosLevelitems(ctx context.Context, params *GetNcosLevelitemsParams) (*http.Response, error) {
	req, err := NewGetNcosLevelitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewNcosLevelWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewNcosLevelRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewNcosLevel(ctx context.Context, body CreateanewNcosLevelJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewNcosLevelRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificNcosLevel(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificNcosLevelRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificNcosLevel(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificNcosLevelRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificNcosLevelWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificNcosLevelRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificNcosLevelWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificNcosLevelRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificNcosLevel(ctx context.Context, id string, body ReplacechangeaspecificNcosLevelJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificNcosLevelRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetNcosLnpCarrieritems(ctx context.Context, params *GetNcosLnpCarrieritemsParams) (*http.Response, error) {
	req, err := NewGetNcosLnpCarrieritemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewNcosLnpCarrierWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewNcosLnpCarrierRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewNcosLnpCarrier(ctx context.Context, body CreateanewNcosLnpCarrierJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewNcosLnpCarrierRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificNcosLnpCarrier(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificNcosLnpCarrierRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificNcosLnpCarrier(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificNcosLnpCarrierRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificNcosLnpCarrierWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificNcosLnpCarrierRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificNcosLnpCarrierWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificNcosLnpCarrierRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificNcosLnpCarrier(ctx context.Context, id string, body ReplacechangeaspecificNcosLnpCarrierJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificNcosLnpCarrierRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetNcosPatternitems(ctx context.Context, params *GetNcosPatternitemsParams) (*http.Response, error) {
	req, err := NewGetNcosPatternitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewNcosPatternWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewNcosPatternRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewNcosPattern(ctx context.Context, body CreateanewNcosPatternJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewNcosPatternRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificNcosPattern(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificNcosPatternRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificNcosPattern(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificNcosPatternRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificNcosPatternWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificNcosPatternRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificNcosPatternWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificNcosPatternRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificNcosPattern(ctx context.Context, id string, body ReplacechangeaspecificNcosPatternJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificNcosPatternRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetNumberitems(ctx context.Context, params *GetNumberitemsParams) (*http.Response, error) {
	req, err := NewGetNumberitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificNumber(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificNumberRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificNumberWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificNumberRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificNumberWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificNumberRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificNumber(ctx context.Context, id string, body ReplacechangeaspecificNumberJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificNumberRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewPartyCallControlWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewPartyCallControlRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewPartyCallControl(ctx context.Context, body CreateanewPartyCallControlJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewPartyCallControlRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificPbxDeviceConfigFile(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificPbxDeviceConfigFileRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetPbxDeviceConfigitems(ctx context.Context, params *GetPbxDeviceConfigitemsParams) (*http.Response, error) {
	req, err := NewGetPbxDeviceConfigitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewPbxDeviceConfigWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewPbxDeviceConfigRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewPbxDeviceConfig(ctx context.Context, body CreateanewPbxDeviceConfigJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewPbxDeviceConfigRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificPbxDeviceConfig(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificPbxDeviceConfigRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificPbxDeviceConfigWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificPbxDeviceConfigRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificPbxDeviceConfig(ctx context.Context, id string, body ReplacechangeaspecificPbxDeviceConfigJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificPbxDeviceConfigRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificPbxDeviceFirmwareBinary(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificPbxDeviceFirmwareBinaryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetPbxDeviceFirmwareitems(ctx context.Context, params *GetPbxDeviceFirmwareitemsParams) (*http.Response, error) {
	req, err := NewGetPbxDeviceFirmwareitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewPbxDeviceFirmwareWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewPbxDeviceFirmwareRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewPbxDeviceFirmware(ctx context.Context, body CreateanewPbxDeviceFirmwareJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewPbxDeviceFirmwareRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificPbxDeviceFirmware(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificPbxDeviceFirmwareRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificPbxDeviceFirmwareWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificPbxDeviceFirmwareRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificPbxDeviceFirmware(ctx context.Context, id string, body ReplacechangeaspecificPbxDeviceFirmwareJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificPbxDeviceFirmwareRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificPbxDeviceModelImage(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificPbxDeviceModelImageRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetPbxDeviceModelitems(ctx context.Context, params *GetPbxDeviceModelitemsParams) (*http.Response, error) {
	req, err := NewGetPbxDeviceModelitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewPbxDeviceModelWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewPbxDeviceModelRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewPbxDeviceModel(ctx context.Context, body CreateanewPbxDeviceModelJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewPbxDeviceModelRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificPbxDeviceModel(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificPbxDeviceModelRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificPbxDeviceModelWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificPbxDeviceModelRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificPbxDeviceModelWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificPbxDeviceModelRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificPbxDeviceModel(ctx context.Context, id string, body ReplacechangeaspecificPbxDeviceModelJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificPbxDeviceModelRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetPbxDevicePreferenceitems(ctx context.Context, params *GetPbxDevicePreferenceitemsParams) (*http.Response, error) {
	req, err := NewGetPbxDevicePreferenceitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificPbxDevicePreference(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificPbxDevicePreferenceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificPbxDevicePreferenceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificPbxDevicePreferenceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificPbxDevicePreferenceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificPbxDevicePreferenceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificPbxDevicePreference(ctx context.Context, id string, body ReplacechangeaspecificPbxDevicePreferenceJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificPbxDevicePreferenceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetPbxDeviceProfilePreferenceitems(ctx context.Context, params *GetPbxDeviceProfilePreferenceitemsParams) (*http.Response, error) {
	req, err := NewGetPbxDeviceProfilePreferenceitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificPbxDeviceProfilePreference(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificPbxDeviceProfilePreferenceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificPbxDeviceProfilePreferenceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificPbxDeviceProfilePreferenceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificPbxDeviceProfilePreferenceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificPbxDeviceProfilePreferenceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificPbxDeviceProfilePreference(ctx context.Context, id string, body ReplacechangeaspecificPbxDeviceProfilePreferenceJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificPbxDeviceProfilePreferenceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetPbxDeviceProfileitems(ctx context.Context, params *GetPbxDeviceProfileitemsParams) (*http.Response, error) {
	req, err := NewGetPbxDeviceProfileitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewPbxDeviceProfileWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewPbxDeviceProfileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewPbxDeviceProfile(ctx context.Context, body CreateanewPbxDeviceProfileJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewPbxDeviceProfileRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificPbxDeviceProfile(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificPbxDeviceProfileRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificPbxDeviceProfileWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificPbxDeviceProfileRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificPbxDeviceProfileWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificPbxDeviceProfileRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificPbxDeviceProfile(ctx context.Context, id string, body ReplacechangeaspecificPbxDeviceProfileJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificPbxDeviceProfileRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetPbxDeviceitems(ctx context.Context, params *GetPbxDeviceitemsParams) (*http.Response, error) {
	req, err := NewGetPbxDeviceitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewPbxDeviceWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewPbxDeviceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewPbxDevice(ctx context.Context, body CreateanewPbxDeviceJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewPbxDeviceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificPbxDevice(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificPbxDeviceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificPbxDevice(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificPbxDeviceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificPbxDeviceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificPbxDeviceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificPbxDeviceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificPbxDeviceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificPbxDevice(ctx context.Context, id string, body ReplacechangeaspecificPbxDeviceJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificPbxDeviceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetPbxFieldDevicePreferenceitems(ctx context.Context, params *GetPbxFieldDevicePreferenceitemsParams) (*http.Response, error) {
	req, err := NewGetPbxFieldDevicePreferenceitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificPbxFieldDevicePreference(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificPbxFieldDevicePreferenceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificPbxFieldDevicePreferenceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificPbxFieldDevicePreferenceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificPbxFieldDevicePreferenceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificPbxFieldDevicePreferenceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificPbxFieldDevicePreference(ctx context.Context, id string, body ReplacechangeaspecificPbxFieldDevicePreferenceJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificPbxFieldDevicePreferenceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetPeeringGroupitems(ctx context.Context, params *GetPeeringGroupitemsParams) (*http.Response, error) {
	req, err := NewGetPeeringGroupitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewPeeringGroupWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewPeeringGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewPeeringGroup(ctx context.Context, body CreateanewPeeringGroupJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewPeeringGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificPeeringGroup(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificPeeringGroupRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificPeeringGroup(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificPeeringGroupRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificPeeringGroupWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificPeeringGroupRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificPeeringGroupWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificPeeringGroupRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificPeeringGroup(ctx context.Context, id string, body ReplacechangeaspecificPeeringGroupJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificPeeringGroupRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetPeeringInboundRuleitems(ctx context.Context, params *GetPeeringInboundRuleitemsParams) (*http.Response, error) {
	req, err := NewGetPeeringInboundRuleitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewPeeringInboundRuleWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewPeeringInboundRuleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewPeeringInboundRule(ctx context.Context, body CreateanewPeeringInboundRuleJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewPeeringInboundRuleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificPeeringInboundRule(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificPeeringInboundRuleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificPeeringInboundRule(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificPeeringInboundRuleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificPeeringInboundRuleWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificPeeringInboundRuleRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificPeeringInboundRuleWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificPeeringInboundRuleRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificPeeringInboundRule(ctx context.Context, id string, body ReplacechangeaspecificPeeringInboundRuleJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificPeeringInboundRuleRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetPeeringRuleitems(ctx context.Context, params *GetPeeringRuleitemsParams) (*http.Response, error) {
	req, err := NewGetPeeringRuleitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewPeeringRuleWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewPeeringRuleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewPeeringRule(ctx context.Context, body CreateanewPeeringRuleJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewPeeringRuleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificPeeringRule(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificPeeringRuleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificPeeringRule(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificPeeringRuleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificPeeringRuleWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificPeeringRuleRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificPeeringRuleWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificPeeringRuleRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificPeeringRule(ctx context.Context, id string, body ReplacechangeaspecificPeeringRuleJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificPeeringRuleRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetPeeringServerPreferenceitems(ctx context.Context, params *GetPeeringServerPreferenceitemsParams) (*http.Response, error) {
	req, err := NewGetPeeringServerPreferenceitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificPeeringServerPreference(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificPeeringServerPreferenceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificPeeringServerPreferenceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificPeeringServerPreferenceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificPeeringServerPreferenceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificPeeringServerPreferenceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificPeeringServerPreference(ctx context.Context, id string, body ReplacechangeaspecificPeeringServerPreferenceJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificPeeringServerPreferenceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetPeeringServeritems(ctx context.Context, params *GetPeeringServeritemsParams) (*http.Response, error) {
	req, err := NewGetPeeringServeritemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewPeeringServerWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewPeeringServerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewPeeringServer(ctx context.Context, body CreateanewPeeringServerJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewPeeringServerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificPeeringServer(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificPeeringServerRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificPeeringServer(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificPeeringServerRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificPeeringServerWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificPeeringServerRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificPeeringServerWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificPeeringServerRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificPeeringServer(ctx context.Context, id string, body ReplacechangeaspecificPeeringServerJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificPeeringServerRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetPhonebookEntryitems(ctx context.Context, params *GetPhonebookEntryitemsParams) (*http.Response, error) {
	req, err := NewGetPhonebookEntryitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewPhonebookEntryWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewPhonebookEntryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewPhonebookEntry(ctx context.Context, body CreateanewPhonebookEntryJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewPhonebookEntryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificPhonebookEntry(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificPhonebookEntryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificPhonebookEntry(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificPhonebookEntryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificPhonebookEntryWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificPhonebookEntryRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificPhonebookEntryWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificPhonebookEntryRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificPhonebookEntry(ctx context.Context, id string, body ReplacechangeaspecificPhonebookEntryJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificPhonebookEntryRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetPreferencesMetaEntryitems(ctx context.Context, params *GetPreferencesMetaEntryitemsParams) (*http.Response, error) {
	req, err := NewGetPreferencesMetaEntryitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewPreferencesMetaEntryWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewPreferencesMetaEntryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewPreferencesMetaEntry(ctx context.Context, body CreateanewPreferencesMetaEntryJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewPreferencesMetaEntryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificPreferencesMetaEntry(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificPreferencesMetaEntryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificPreferencesMetaEntry(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificPreferencesMetaEntryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificPreferencesMetaEntryWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificPreferencesMetaEntryRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificPreferencesMetaEntryWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificPreferencesMetaEntryRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificPreferencesMetaEntry(ctx context.Context, id string, body ReplacechangeaspecificPreferencesMetaEntryJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificPreferencesMetaEntryRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetProfilePackageitems(ctx context.Context, params *GetProfilePackageitemsParams) (*http.Response, error) {
	req, err := NewGetProfilePackageitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewProfilePackageWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewProfilePackageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewProfilePackage(ctx context.Context, body CreateanewProfilePackageJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewProfilePackageRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificProfilePackage(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificProfilePackageRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificProfilePackage(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificProfilePackageRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificProfilePackageWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificProfilePackageRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificProfilePackageWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificProfilePackageRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificProfilePackage(ctx context.Context, id string, body ReplacechangeaspecificProfilePackageJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificProfilePackageRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetProfilePreferenceitems(ctx context.Context, params *GetProfilePreferenceitemsParams) (*http.Response, error) {
	req, err := NewGetProfilePreferenceitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificProfilePreference(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificProfilePreferenceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificProfilePreferenceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificProfilePreferenceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificProfilePreferenceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificProfilePreferenceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificProfilePreference(ctx context.Context, id string, body ReplacechangeaspecificProfilePreferenceJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificProfilePreferenceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetReminderitems(ctx context.Context, params *GetReminderitemsParams) (*http.Response, error) {
	req, err := NewGetReminderitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewReminderWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewReminderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewReminder(ctx context.Context, body CreateanewReminderJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewReminderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificReminder(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificReminderRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificReminder(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificReminderRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificReminderWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificReminderRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificReminderWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificReminderRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificReminder(ctx context.Context, id string, body ReplacechangeaspecificReminderJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificReminderRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetReselleritems(ctx context.Context, params *GetReselleritemsParams) (*http.Response, error) {
	req, err := NewGetReselleritemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewResellerWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewResellerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewReseller(ctx context.Context, body CreateanewResellerJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewResellerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificReseller(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificResellerRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificResellerWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificResellerRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificResellerWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificResellerRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificReseller(ctx context.Context, id string, body ReplacechangeaspecificResellerJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificResellerRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetRewriteRuleitems(ctx context.Context, params *GetRewriteRuleitemsParams) (*http.Response, error) {
	req, err := NewGetRewriteRuleitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewRewriteRuleWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewRewriteRuleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewRewriteRule(ctx context.Context, body CreateanewRewriteRuleJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewRewriteRuleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificRewriteRule(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificRewriteRuleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificRewriteRule(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificRewriteRuleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificRewriteRuleWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificRewriteRuleRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificRewriteRuleWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificRewriteRuleRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificRewriteRule(ctx context.Context, id string, body ReplacechangeaspecificRewriteRuleJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificRewriteRuleRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetRewriteRuleSetitems(ctx context.Context, params *GetRewriteRuleSetitemsParams) (*http.Response, error) {
	req, err := NewGetRewriteRuleSetitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewRewriteRuleSetWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewRewriteRuleSetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewRewriteRuleSet(ctx context.Context, body CreateanewRewriteRuleSetJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewRewriteRuleSetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificRewriteRuleSet(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificRewriteRuleSetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificRewriteRuleSet(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificRewriteRuleSetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificRewriteRuleSetWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificRewriteRuleSetRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificRewriteRuleSetWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificRewriteRuleSetRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificRewriteRuleSet(ctx context.Context, id string, body ReplacechangeaspecificRewriteRuleSetJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificRewriteRuleSetRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetRtcAppitems(ctx context.Context, params *GetRtcAppitemsParams) (*http.Response, error) {
	req, err := NewGetRtcAppitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificRtcApp(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificRtcAppRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificRtcAppWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificRtcAppRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificRtcAppWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificRtcAppRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificRtcApp(ctx context.Context, id string, body ReplacechangeaspecificRtcAppJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificRtcAppRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetRtcNetworkitems(ctx context.Context, params *GetRtcNetworkitemsParams) (*http.Response, error) {
	req, err := NewGetRtcNetworkitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificRtcNetwork(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificRtcNetworkRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificRtcNetworkWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificRtcNetworkRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificRtcNetworkWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificRtcNetworkRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificRtcNetwork(ctx context.Context, id string, body ReplacechangeaspecificRtcNetworkJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificRtcNetworkRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetRtcSessionitems(ctx context.Context, params *GetRtcSessionitemsParams) (*http.Response, error) {
	req, err := NewGetRtcSessionitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewRtcSessionWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewRtcSessionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewRtcSession(ctx context.Context, body CreateanewRtcSessionJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewRtcSessionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificRtcSession(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificRtcSessionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetSIPCaptureitems(ctx context.Context, params *GetSIPCaptureitemsParams) (*http.Response, error) {
	req, err := NewGetSIPCaptureitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificSIPCapture(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificSIPCaptureRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetSMSitems(ctx context.Context, params *GetSMSitemsParams) (*http.Response, error) {
	req, err := NewGetSMSitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewSMSWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewSMSRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewSMS(ctx context.Context, body CreateanewSMSJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewSMSRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificSMS(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificSMSRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificSoundFileRecording(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificSoundFileRecordingRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetSoundFileitems(ctx context.Context, params *GetSoundFileitemsParams) (*http.Response, error) {
	req, err := NewGetSoundFileitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewSoundFileWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewSoundFileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewSoundFile(ctx context.Context, body CreateanewSoundFileJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewSoundFileRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificSoundFile(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificSoundFileRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificSoundFile(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificSoundFileRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificSoundFileWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificSoundFileRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificSoundFile(ctx context.Context, id string, body ReplacechangeaspecificSoundFileJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificSoundFileRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetSoundGroupitems(ctx context.Context, params *GetSoundGroupitemsParams) (*http.Response, error) {
	req, err := NewGetSoundGroupitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificSoundGroup(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificSoundGroupRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetSoundHandleitems(ctx context.Context, params *GetSoundHandleitemsParams) (*http.Response, error) {
	req, err := NewGetSoundHandleitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificSoundHandle(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificSoundHandleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetSoundSetitems(ctx context.Context, params *GetSoundSetitemsParams) (*http.Response, error) {
	req, err := NewGetSoundSetitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewSoundSetWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewSoundSetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewSoundSet(ctx context.Context, body CreateanewSoundSetJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewSoundSetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificSoundSet(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificSoundSetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificSoundSet(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificSoundSetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificSoundSetWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificSoundSetRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificSoundSetWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificSoundSetRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificSoundSet(ctx context.Context, id string, body ReplacechangeaspecificSoundSetJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificSoundSetRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetSpeedDialitems(ctx context.Context, params *GetSpeedDialitemsParams) (*http.Response, error) {
	req, err := NewGetSpeedDialitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificSpeedDial(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificSpeedDialRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificSpeedDialWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificSpeedDialRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificSpeedDialWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificSpeedDialRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificSpeedDial(ctx context.Context, id string, body ReplacechangeaspecificSpeedDialJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificSpeedDialRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetSubscriberPreferenceitems(ctx context.Context, params *GetSubscriberPreferenceitemsParams) (*http.Response, error) {
	req, err := NewGetSubscriberPreferenceitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificSubscriberPreference(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificSubscriberPreferenceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificSubscriberPreferenceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificSubscriberPreferenceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificSubscriberPreferenceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificSubscriberPreferenceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificSubscriberPreference(ctx context.Context, id string, body ReplacechangeaspecificSubscriberPreferenceJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificSubscriberPreferenceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetSubscriberProfileitems(ctx context.Context, params *GetSubscriberProfileitemsParams) (*http.Response, error) {
	req, err := NewGetSubscriberProfileitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewSubscriberProfileWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewSubscriberProfileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewSubscriberProfile(ctx context.Context, body CreateanewSubscriberProfileJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewSubscriberProfileRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificSubscriberProfile(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificSubscriberProfileRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificSubscriberProfile(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificSubscriberProfileRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificSubscriberProfileWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificSubscriberProfileRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificSubscriberProfileWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificSubscriberProfileRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificSubscriberProfile(ctx context.Context, id string, body ReplacechangeaspecificSubscriberProfileJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificSubscriberProfileRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetSubscriberProfileSetitems(ctx context.Context, params *GetSubscriberProfileSetitemsParams) (*http.Response, error) {
	req, err := NewGetSubscriberProfileSetitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewSubscriberProfileSetWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewSubscriberProfileSetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewSubscriberProfileSet(ctx context.Context, body CreateanewSubscriberProfileSetJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewSubscriberProfileSetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificSubscriberProfileSet(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificSubscriberProfileSetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificSubscriberProfileSet(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificSubscriberProfileSetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificSubscriberProfileSetWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificSubscriberProfileSetRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificSubscriberProfileSetWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificSubscriberProfileSetRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificSubscriberProfileSet(ctx context.Context, id string, body ReplacechangeaspecificSubscriberProfileSetJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificSubscriberProfileSetRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetSubscriberRegistrationitems(ctx context.Context, params *GetSubscriberRegistrationitemsParams) (*http.Response, error) {
	req, err := NewGetSubscriberRegistrationitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewSubscriberRegistrationWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewSubscriberRegistrationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewSubscriberRegistration(ctx context.Context, body CreateanewSubscriberRegistrationJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewSubscriberRegistrationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificSubscriberRegistration(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificSubscriberRegistrationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificSubscriberRegistration(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificSubscriberRegistrationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificSubscriberRegistrationWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificSubscriberRegistrationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificSubscriberRegistrationWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificSubscriberRegistrationRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificSubscriberRegistration(ctx context.Context, id string, body ReplacechangeaspecificSubscriberRegistrationJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificSubscriberRegistrationRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetSubscriberitems(ctx context.Context, params *GetSubscriberitemsParams) (*http.Response, error) {
	req, err := NewGetSubscriberitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewSubscriberWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewSubscriberRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewSubscriber(ctx context.Context, body CreateanewSubscriberJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewSubscriberRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificSubscriber(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificSubscriberRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificSubscriber(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificSubscriberRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificSubscriberWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificSubscriberRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificSubscriberWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificSubscriberRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificSubscriber(ctx context.Context, id string, body ReplacechangeaspecificSubscriberJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificSubscriberRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemContactitems(ctx context.Context, params *GetSystemContactitemsParams) (*http.Response, error) {
	req, err := NewGetSystemContactitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewSystemContactWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewSystemContactRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewSystemContact(ctx context.Context, body CreateanewSystemContactJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewSystemContactRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificSystemContact(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificSystemContactRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificSystemContact(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificSystemContactRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificSystemContactWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificSystemContactRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificSystemContactWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificSystemContactRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificSystemContact(ctx context.Context, id string, body ReplacechangeaspecificSystemContactJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificSystemContactRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewTopupCashWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewTopupCashRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewTopupCash(ctx context.Context, body CreateanewTopupCashJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewTopupCashRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetTopupLogitems(ctx context.Context, params *GetTopupLogitemsParams) (*http.Response, error) {
	req, err := NewGetTopupLogitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificTopupLog(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificTopupLogRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewTopupVoucherWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewTopupVoucherRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewTopupVoucher(ctx context.Context, body CreateanewTopupVoucherJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewTopupVoucherRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetTrustedSourceitems(ctx context.Context, params *GetTrustedSourceitemsParams) (*http.Response, error) {
	req, err := NewGetTrustedSourceitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewTrustedSourceWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewTrustedSourceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewTrustedSource(ctx context.Context, body CreateanewTrustedSourceJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewTrustedSourceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificTrustedSource(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificTrustedSourceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificTrustedSource(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificTrustedSourceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificTrustedSourceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificTrustedSourceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificTrustedSourceWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificTrustedSourceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificTrustedSource(ctx context.Context, id string, body ReplacechangeaspecificTrustedSourceJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificTrustedSourceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetUpnRewriteSetitems(ctx context.Context, params *GetUpnRewriteSetitemsParams) (*http.Response, error) {
	req, err := NewGetUpnRewriteSetitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewUpnRewriteSetWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewUpnRewriteSetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewUpnRewriteSet(ctx context.Context, body CreateanewUpnRewriteSetJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewUpnRewriteSetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificUpnRewriteSet(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificUpnRewriteSetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificUpnRewriteSet(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificUpnRewriteSetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificUpnRewriteSetWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificUpnRewriteSetRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificUpnRewriteSetWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificUpnRewriteSetRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificUpnRewriteSet(ctx context.Context, id string, body ReplacechangeaspecificUpnRewriteSetJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificUpnRewriteSetRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetVoicemailGreetingitems(ctx context.Context, params *GetVoicemailGreetingitemsParams) (*http.Response, error) {
	req, err := NewGetVoicemailGreetingitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewVoicemailGreetingWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewVoicemailGreetingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewVoicemailGreeting(ctx context.Context, body CreateanewVoicemailGreetingJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewVoicemailGreetingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificVoicemailGreeting(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificVoicemailGreetingRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificVoicemailGreeting(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificVoicemailGreetingRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificVoicemailGreetingWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificVoicemailGreetingRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificVoicemailGreeting(ctx context.Context, id string, body ReplacechangeaspecificVoicemailGreetingJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificVoicemailGreetingRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificVoicemailRecording(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificVoicemailRecordingRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetVoicemailitems(ctx context.Context, params *GetVoicemailitemsParams) (*http.Response, error) {
	req, err := NewGetVoicemailitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificVoicemail(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificVoicemailRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificVoicemail(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificVoicemailRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificVoicemailWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificVoicemailRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificVoicemailWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificVoicemailRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificVoicemail(ctx context.Context, id string, body ReplacechangeaspecificVoicemailJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificVoicemailRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetVoicemailSettingitems(ctx context.Context, params *GetVoicemailSettingitemsParams) (*http.Response, error) {
	req, err := NewGetVoicemailSettingitemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificVoicemailSetting(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificVoicemailSettingRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificVoicemailSettingWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificVoicemailSettingRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificVoicemailSettingWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificVoicemailSettingRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificVoicemailSetting(ctx context.Context, id string, body ReplacechangeaspecificVoicemailSettingJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificVoicemailSettingRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetVoucheritems(ctx context.Context, params *GetVoucheritemsParams) (*http.Response, error) {
	req, err := NewGetVoucheritemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewVoucherWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateanewVoucherRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateanewVoucher(ctx context.Context, body CreateanewVoucherJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateanewVoucherRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteaspecificVoucher(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewDeleteaspecificVoucherRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetaspecificVoucher(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetaspecificVoucherRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeaspecificVoucherWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeaspecificVoucherRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificVoucherWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewReplacechangeaspecificVoucherRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReplacechangeaspecificVoucher(ctx context.Context, id string, body ReplacechangeaspecificVoucherJSONRequestBody) (*http.Response, error) {
	req, err := NewReplacechangeaspecificVoucherRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewCreateanewAdminCertRequest calls the generic CreateanewAdminCert builder with application/json body
func NewCreateanewAdminCertRequest(server string, body CreateanewAdminCertJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewAdminCertRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewAdminCertRequestWithBody generates requests for CreateanewAdminCert with any type of body
func NewCreateanewAdminCertRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/admincerts")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetAdminitemsRequest generates requests for GetAdminitems
func NewGetAdminitemsRequest(server string, params *GetAdminitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/admins")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "reseller_id", params.ResellerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "login", params.Login); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewAdminRequest calls the generic CreateanewAdmin builder with application/json body
func NewCreateanewAdminRequest(server string, body CreateanewAdminJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewAdminRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewAdminRequestWithBody generates requests for CreateanewAdmin with any type of body
func NewCreateanewAdminRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/admins")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteaspecificAdminRequest generates requests for DeleteaspecificAdmin
func NewDeleteaspecificAdminRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/admins/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificAdminRequest generates requests for GetaspecificAdmin
func NewGetaspecificAdminRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/admins/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewApplyRewriteRequest calls the generic CreateanewApplyRewrite builder with application/json body
func NewCreateanewApplyRewriteRequest(server string, body CreateanewApplyRewriteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewApplyRewriteRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewApplyRewriteRequestWithBody generates requests for CreateanewApplyRewrite with any type of body
func NewCreateanewApplyRewriteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/applyrewrites")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetAutoAttendantitemsRequest generates requests for GetAutoAttendantitems
func NewGetAutoAttendantitemsRequest(server string, params *GetAutoAttendantitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/autoattendants")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificAutoAttendantRequest generates requests for GetaspecificAutoAttendant
func NewGetaspecificAutoAttendantRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/autoattendants/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificAutoAttendantRequestWithBody generates requests for ChangeaspecificAutoAttendant with any type of body
func NewChangeaspecificAutoAttendantRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/autoattendants/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificAutoAttendantRequest calls the generic ReplacechangeaspecificAutoAttendant builder with application/json body
func NewReplacechangeaspecificAutoAttendantRequest(server string, id string, body ReplacechangeaspecificAutoAttendantJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificAutoAttendantRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificAutoAttendantRequestWithBody generates requests for ReplacechangeaspecificAutoAttendant with any type of body
func NewReplacechangeaspecificAutoAttendantRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/autoattendants/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetBalanceIntervalitemsRequest generates requests for GetBalanceIntervalitems
func NewGetBalanceIntervalitemsRequest(server string, params *GetBalanceIntervalitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/balanceintervals")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "reseller_id", params.ResellerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "contact_id", params.ContactId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "status", params.Status); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "external_id", params.ExternalId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificBalanceIntervalRequest generates requests for GetaspecificBalanceInterval
func NewGetaspecificBalanceIntervalRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/balanceintervals/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBannedIpitemsRequest generates requests for GetBannedIpitems
func NewGetBannedIpitemsRequest(server string, params *GetBannedIpitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/bannedips")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteaspecificBannedIpRequest generates requests for DeleteaspecificBannedIp
func NewDeleteaspecificBannedIpRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/bannedips/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificBannedIpRequest generates requests for GetaspecificBannedIp
func NewGetaspecificBannedIpRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/bannedips/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBannedUseritemsRequest generates requests for GetBannedUseritems
func NewGetBannedUseritemsRequest(server string, params *GetBannedUseritemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/bannedusers")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteaspecificBannedUserRequest generates requests for DeleteaspecificBannedUser
func NewDeleteaspecificBannedUserRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/bannedusers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificBannedUserRequest generates requests for GetaspecificBannedUser
func NewGetaspecificBannedUserRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/bannedusers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBillingFeeitemsRequest generates requests for GetBillingFeeitems
func NewGetBillingFeeitemsRequest(server string, params *GetBillingFeeitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/billingfees")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "billing_profile_id", params.BillingProfileId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "billing_zone_id", params.BillingZoneId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewBillingFeeRequest calls the generic CreateanewBillingFee builder with application/json body
func NewCreateanewBillingFeeRequest(server string, body CreateanewBillingFeeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewBillingFeeRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewBillingFeeRequestWithBody generates requests for CreateanewBillingFee with any type of body
func NewCreateanewBillingFeeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/billingfees")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteaspecificBillingFeeRequest generates requests for DeleteaspecificBillingFee
func NewDeleteaspecificBillingFeeRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/billingfees/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificBillingFeeRequest generates requests for GetaspecificBillingFee
func NewGetaspecificBillingFeeRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/billingfees/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificBillingFeeRequestWithBody generates requests for ChangeaspecificBillingFee with any type of body
func NewChangeaspecificBillingFeeRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/billingfees/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificBillingFeeRequest calls the generic ReplacechangeaspecificBillingFee builder with application/json body
func NewReplacechangeaspecificBillingFeeRequest(server string, id string, body ReplacechangeaspecificBillingFeeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificBillingFeeRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificBillingFeeRequestWithBody generates requests for ReplacechangeaspecificBillingFee with any type of body
func NewReplacechangeaspecificBillingFeeRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/billingfees/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetBillingNetworkitemsRequest generates requests for GetBillingNetworkitems
func NewGetBillingNetworkitemsRequest(server string, params *GetBillingNetworkitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/billingnetworks")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "reseller_id", params.ResellerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "ip", params.Ip); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "name", params.Name); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewBillingNetworkRequest calls the generic CreateanewBillingNetwork builder with application/json body
func NewCreateanewBillingNetworkRequest(server string, body CreateanewBillingNetworkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewBillingNetworkRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewBillingNetworkRequestWithBody generates requests for CreateanewBillingNetwork with any type of body
func NewCreateanewBillingNetworkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/billingnetworks")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetaspecificBillingNetworkRequest generates requests for GetaspecificBillingNetwork
func NewGetaspecificBillingNetworkRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/billingnetworks/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificBillingNetworkRequestWithBody generates requests for ChangeaspecificBillingNetwork with any type of body
func NewChangeaspecificBillingNetworkRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/billingnetworks/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificBillingNetworkRequest calls the generic ReplacechangeaspecificBillingNetwork builder with application/json body
func NewReplacechangeaspecificBillingNetworkRequest(server string, id string, body ReplacechangeaspecificBillingNetworkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificBillingNetworkRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificBillingNetworkRequestWithBody generates requests for ReplacechangeaspecificBillingNetwork with any type of body
func NewReplacechangeaspecificBillingNetworkRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/billingnetworks/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetBillingProfileitemsRequest generates requests for GetBillingProfileitems
func NewGetBillingProfileitemsRequest(server string, params *GetBillingProfileitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/billingprofiles")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "reseller_id", params.ResellerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "handle", params.Handle); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewBillingProfileRequest calls the generic CreateanewBillingProfile builder with application/json body
func NewCreateanewBillingProfileRequest(server string, body CreateanewBillingProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewBillingProfileRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewBillingProfileRequestWithBody generates requests for CreateanewBillingProfile with any type of body
func NewCreateanewBillingProfileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/billingprofiles")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetaspecificBillingProfileRequest generates requests for GetaspecificBillingProfile
func NewGetaspecificBillingProfileRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/billingprofiles/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificBillingProfileRequestWithBody generates requests for ChangeaspecificBillingProfile with any type of body
func NewChangeaspecificBillingProfileRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/billingprofiles/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificBillingProfileRequest calls the generic ReplacechangeaspecificBillingProfile builder with application/json body
func NewReplacechangeaspecificBillingProfileRequest(server string, id string, body ReplacechangeaspecificBillingProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificBillingProfileRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificBillingProfileRequestWithBody generates requests for ReplacechangeaspecificBillingProfile with any type of body
func NewReplacechangeaspecificBillingProfileRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/billingprofiles/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetBillingZoneitemsRequest generates requests for GetBillingZoneitems
func NewGetBillingZoneitemsRequest(server string, params *GetBillingZoneitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/billingzones")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "billing_profile_id", params.BillingProfileId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "zone", params.Zone); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewBillingZoneRequest calls the generic CreateanewBillingZone builder with application/json body
func NewCreateanewBillingZoneRequest(server string, body CreateanewBillingZoneJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewBillingZoneRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewBillingZoneRequestWithBody generates requests for CreateanewBillingZone with any type of body
func NewCreateanewBillingZoneRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/billingzones")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteaspecificBillingZoneRequest generates requests for DeleteaspecificBillingZone
func NewDeleteaspecificBillingZoneRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/billingzones/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificBillingZoneRequest generates requests for GetaspecificBillingZone
func NewGetaspecificBillingZoneRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/billingzones/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificBillingZoneRequestWithBody generates requests for ChangeaspecificBillingZone with any type of body
func NewChangeaspecificBillingZoneRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/billingzones/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificBillingZoneRequest calls the generic ReplacechangeaspecificBillingZone builder with application/json body
func NewReplacechangeaspecificBillingZoneRequest(server string, id string, body ReplacechangeaspecificBillingZoneJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificBillingZoneRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificBillingZoneRequestWithBody generates requests for ReplacechangeaspecificBillingZone with any type of body
func NewReplacechangeaspecificBillingZoneRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/billingzones/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewCreateanewCallControlRequest calls the generic CreateanewCallControl builder with application/json body
func NewCreateanewCallControlRequest(server string, body CreateanewCallControlJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewCallControlRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewCallControlRequestWithBody generates requests for CreateanewCallControl with any type of body
func NewCreateanewCallControlRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/callcontrols")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetCallForwarditemsRequest generates requests for GetCallForwarditems
func NewGetCallForwarditemsRequest(server string, params *GetCallForwarditemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/callforwards")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteaspecificCallForwardRequest generates requests for DeleteaspecificCallForward
func NewDeleteaspecificCallForwardRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/callforwards/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificCallForwardRequest generates requests for GetaspecificCallForward
func NewGetaspecificCallForwardRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/callforwards/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificCallForwardRequestWithBody generates requests for ChangeaspecificCallForward with any type of body
func NewChangeaspecificCallForwardRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/callforwards/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificCallForwardRequest calls the generic ReplacechangeaspecificCallForward builder with application/json body
func NewReplacechangeaspecificCallForwardRequest(server string, id string, body ReplacechangeaspecificCallForwardJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificCallForwardRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificCallForwardRequestWithBody generates requests for ReplacechangeaspecificCallForward with any type of body
func NewReplacechangeaspecificCallForwardRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/callforwards/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetCallListitemsRequest generates requests for GetCallListitems
func NewGetCallListitemsRequest(server string, params *GetCallListitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/calllists")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "tz", params.Tz); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "use_owner_tz", params.UseOwnerTz); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "subscriber_id", params.SubscriberId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "customer_id", params.CustomerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "alias_field", params.AliasField); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "status", params.Status); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "status_ne", params.StatusNe); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rating_status", params.RatingStatus); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rating_status_ne", params.RatingStatusNe); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "type", params.Type); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "type_ne", params.TypeNe); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "direction", params.Direction); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "start_ge", params.StartGe); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "start_le", params.StartLe); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "init_ge", params.InitGe); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "init_le", params.InitLe); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "call_id", params.CallId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "own_cli", params.OwnCli); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificCallListRequest generates requests for GetaspecificCallList
func NewGetaspecificCallListRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/calllists/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCallQueueitemsRequest generates requests for GetCallQueueitems
func NewGetCallQueueitemsRequest(server string, params *GetCallQueueitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/callqueues")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "reseller_id", params.ResellerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "number", params.Number); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificCallQueueRequest generates requests for GetaspecificCallQueue
func NewGetaspecificCallQueueRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/callqueues/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificCallRecordingFileRequest generates requests for GetaspecificCallRecordingFile
func NewGetaspecificCallRecordingFileRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/callrecordingfiles/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCallRecordingitemsRequest generates requests for GetCallRecordingitems
func NewGetCallRecordingitemsRequest(server string, params *GetCallRecordingitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/callrecordings")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "reseller_id", params.ResellerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "status", params.Status); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "subscriber_id", params.SubscriberId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "tz", params.Tz); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "force_delete", params.ForceDelete); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteaspecificCallRecordingRequest generates requests for DeleteaspecificCallRecording
func NewDeleteaspecificCallRecordingRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/callrecordings/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificCallRecordingRequest generates requests for GetaspecificCallRecording
func NewGetaspecificCallRecordingRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/callrecordings/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCallRecordingStreamitemsRequest generates requests for GetCallRecordingStreamitems
func NewGetCallRecordingStreamitemsRequest(server string, params *GetCallRecordingStreamitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/callrecordingstreams")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "recording_id", params.RecordingId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "type", params.Type); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "tz", params.Tz); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteaspecificCallRecordingStreamRequest generates requests for DeleteaspecificCallRecordingStream
func NewDeleteaspecificCallRecordingStreamRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/callrecordingstreams/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificCallRecordingStreamRequest generates requests for GetaspecificCallRecordingStream
func NewGetaspecificCallRecordingStreamRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/callrecordingstreams/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCallitemsRequest generates requests for GetCallitems
func NewGetCallitemsRequest(server string, params *GetCallitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/calls")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "customer_id", params.CustomerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "subscriber_id", params.SubscriberId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificCallRequest generates requests for GetaspecificCall
func NewGetaspecificCallRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/calls/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCapabilityitemsRequest generates requests for GetCapabilityitems
func NewGetCapabilityitemsRequest(server string, params *GetCapabilityitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/capabilities")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "name", params.Name); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificCapabilityRequest generates requests for GetaspecificCapability
func NewGetaspecificCapabilityRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/capabilities/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCCMapEntryitemsRequest generates requests for GetCCMapEntryitems
func NewGetCCMapEntryitemsRequest(server string, params *GetCCMapEntryitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ccmapentries")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteaspecificCCMapEntryRequest generates requests for DeleteaspecificCCMapEntry
func NewDeleteaspecificCCMapEntryRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ccmapentries/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificCCMapEntryRequest generates requests for GetaspecificCCMapEntry
func NewGetaspecificCCMapEntryRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ccmapentries/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificCCMapEntryRequestWithBody generates requests for ChangeaspecificCCMapEntry with any type of body
func NewChangeaspecificCCMapEntryRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ccmapentries/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificCCMapEntryRequest calls the generic ReplacechangeaspecificCCMapEntry builder with application/json body
func NewReplacechangeaspecificCCMapEntryRequest(server string, id string, body ReplacechangeaspecificCCMapEntryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificCCMapEntryRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificCCMapEntryRequestWithBody generates requests for ReplacechangeaspecificCCMapEntry with any type of body
func NewReplacechangeaspecificCCMapEntryRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ccmapentries/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetCFBNumberSetitemsRequest generates requests for GetCFBNumberSetitems
func NewGetCFBNumberSetitemsRequest(server string, params *GetCFBNumberSetitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cfbnumbersets")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "subscriber_id", params.SubscriberId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "name", params.Name); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewCFBNumberSetRequest calls the generic CreateanewCFBNumberSet builder with application/json body
func NewCreateanewCFBNumberSetRequest(server string, body CreateanewCFBNumberSetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewCFBNumberSetRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewCFBNumberSetRequestWithBody generates requests for CreateanewCFBNumberSet with any type of body
func NewCreateanewCFBNumberSetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cfbnumbersets")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteaspecificCFBNumberSetRequest generates requests for DeleteaspecificCFBNumberSet
func NewDeleteaspecificCFBNumberSetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cfbnumbersets/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificCFBNumberSetRequest generates requests for GetaspecificCFBNumberSet
func NewGetaspecificCFBNumberSetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cfbnumbersets/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificCFBNumberSetRequestWithBody generates requests for ChangeaspecificCFBNumberSet with any type of body
func NewChangeaspecificCFBNumberSetRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cfbnumbersets/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificCFBNumberSetRequest calls the generic ReplacechangeaspecificCFBNumberSet builder with application/json body
func NewReplacechangeaspecificCFBNumberSetRequest(server string, id string, body ReplacechangeaspecificCFBNumberSetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificCFBNumberSetRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificCFBNumberSetRequestWithBody generates requests for ReplacechangeaspecificCFBNumberSet with any type of body
func NewReplacechangeaspecificCFBNumberSetRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cfbnumbersets/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetCFDestinationSetitemsRequest generates requests for GetCFDestinationSetitems
func NewGetCFDestinationSetitemsRequest(server string, params *GetCFDestinationSetitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cfdestinationsets")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "subscriber_id", params.SubscriberId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "name", params.Name); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewCFDestinationSetRequest calls the generic CreateanewCFDestinationSet builder with application/json body
func NewCreateanewCFDestinationSetRequest(server string, body CreateanewCFDestinationSetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewCFDestinationSetRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewCFDestinationSetRequestWithBody generates requests for CreateanewCFDestinationSet with any type of body
func NewCreateanewCFDestinationSetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cfdestinationsets")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteaspecificCFDestinationSetRequest generates requests for DeleteaspecificCFDestinationSet
func NewDeleteaspecificCFDestinationSetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cfdestinationsets/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificCFDestinationSetRequest generates requests for GetaspecificCFDestinationSet
func NewGetaspecificCFDestinationSetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cfdestinationsets/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificCFDestinationSetRequestWithBody generates requests for ChangeaspecificCFDestinationSet with any type of body
func NewChangeaspecificCFDestinationSetRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cfdestinationsets/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificCFDestinationSetRequest calls the generic ReplacechangeaspecificCFDestinationSet builder with application/json body
func NewReplacechangeaspecificCFDestinationSetRequest(server string, id string, body ReplacechangeaspecificCFDestinationSetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificCFDestinationSetRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificCFDestinationSetRequestWithBody generates requests for ReplacechangeaspecificCFDestinationSet with any type of body
func NewReplacechangeaspecificCFDestinationSetRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cfdestinationsets/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetCFMappingitemsRequest generates requests for GetCFMappingitems
func NewGetCFMappingitemsRequest(server string, params *GetCFMappingitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cfmappings")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificCFMappingRequest generates requests for GetaspecificCFMapping
func NewGetaspecificCFMappingRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cfmappings/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificCFMappingRequestWithBody generates requests for ChangeaspecificCFMapping with any type of body
func NewChangeaspecificCFMappingRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cfmappings/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificCFMappingRequest calls the generic ReplacechangeaspecificCFMapping builder with application/json body
func NewReplacechangeaspecificCFMappingRequest(server string, id string, body ReplacechangeaspecificCFMappingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificCFMappingRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificCFMappingRequestWithBody generates requests for ReplacechangeaspecificCFMapping with any type of body
func NewReplacechangeaspecificCFMappingRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cfmappings/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetCFSourceSetitemsRequest generates requests for GetCFSourceSetitems
func NewGetCFSourceSetitemsRequest(server string, params *GetCFSourceSetitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cfsourcesets")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "subscriber_id", params.SubscriberId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "name", params.Name); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewCFSourceSetRequest calls the generic CreateanewCFSourceSet builder with application/json body
func NewCreateanewCFSourceSetRequest(server string, body CreateanewCFSourceSetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewCFSourceSetRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewCFSourceSetRequestWithBody generates requests for CreateanewCFSourceSet with any type of body
func NewCreateanewCFSourceSetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cfsourcesets")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteaspecificCFSourceSetRequest generates requests for DeleteaspecificCFSourceSet
func NewDeleteaspecificCFSourceSetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cfsourcesets/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificCFSourceSetRequest generates requests for GetaspecificCFSourceSet
func NewGetaspecificCFSourceSetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cfsourcesets/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificCFSourceSetRequestWithBody generates requests for ChangeaspecificCFSourceSet with any type of body
func NewChangeaspecificCFSourceSetRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cfsourcesets/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificCFSourceSetRequest calls the generic ReplacechangeaspecificCFSourceSet builder with application/json body
func NewReplacechangeaspecificCFSourceSetRequest(server string, id string, body ReplacechangeaspecificCFSourceSetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificCFSourceSetRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificCFSourceSetRequestWithBody generates requests for ReplacechangeaspecificCFSourceSet with any type of body
func NewReplacechangeaspecificCFSourceSetRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cfsourcesets/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetCFTimeSetitemsRequest generates requests for GetCFTimeSetitems
func NewGetCFTimeSetitemsRequest(server string, params *GetCFTimeSetitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cftimesets")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "subscriber_id", params.SubscriberId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "name", params.Name); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewCFTimeSetRequest calls the generic CreateanewCFTimeSet builder with application/json body
func NewCreateanewCFTimeSetRequest(server string, body CreateanewCFTimeSetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewCFTimeSetRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewCFTimeSetRequestWithBody generates requests for CreateanewCFTimeSet with any type of body
func NewCreateanewCFTimeSetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cftimesets")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteaspecificCFTimeSetRequest generates requests for DeleteaspecificCFTimeSet
func NewDeleteaspecificCFTimeSetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cftimesets/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificCFTimeSetRequest generates requests for GetaspecificCFTimeSet
func NewGetaspecificCFTimeSetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cftimesets/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificCFTimeSetRequestWithBody generates requests for ChangeaspecificCFTimeSet with any type of body
func NewChangeaspecificCFTimeSetRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cftimesets/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificCFTimeSetRequest calls the generic ReplacechangeaspecificCFTimeSet builder with application/json body
func NewReplacechangeaspecificCFTimeSetRequest(server string, id string, body ReplacechangeaspecificCFTimeSetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificCFTimeSetRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificCFTimeSetRequestWithBody generates requests for ReplacechangeaspecificCFTimeSet with any type of body
func NewReplacechangeaspecificCFTimeSetRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/cftimesets/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetContractitemsRequest generates requests for GetContractitems
func NewGetContractitemsRequest(server string, params *GetContractitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/contracts")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "contact_id", params.ContactId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "status", params.Status); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "external_id", params.ExternalId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewContractRequest calls the generic CreateanewContract builder with application/json body
func NewCreateanewContractRequest(server string, body CreateanewContractJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewContractRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewContractRequestWithBody generates requests for CreateanewContract with any type of body
func NewCreateanewContractRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/contracts")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetaspecificContractRequest generates requests for GetaspecificContract
func NewGetaspecificContractRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/contracts/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificContractRequestWithBody generates requests for ChangeaspecificContract with any type of body
func NewChangeaspecificContractRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/contracts/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificContractRequest calls the generic ReplacechangeaspecificContract builder with application/json body
func NewReplacechangeaspecificContractRequest(server string, id string, body ReplacechangeaspecificContractJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificContractRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificContractRequestWithBody generates requests for ReplacechangeaspecificContract with any type of body
func NewReplacechangeaspecificContractRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/contracts/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetConversationitemsRequest generates requests for GetConversationitems
func NewGetConversationitemsRequest(server string, params *GetConversationitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/conversations")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "tz", params.Tz); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "use_owner_tz", params.UseOwnerTz); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "subscriber_id", params.SubscriberId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "customer_id", params.CustomerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "direction", params.Direction); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "status", params.Status); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "type", params.Type); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "from", params.From); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "to", params.To); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "fax_number_rewrite_mode", params.FaxNumberRewriteMode); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificConversationRequest generates requests for GetaspecificConversation
func NewGetaspecificConversationRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/conversations/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCustomerBalanceitemsRequest generates requests for GetCustomerBalanceitems
func NewGetCustomerBalanceitemsRequest(server string, params *GetCustomerBalanceitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customerbalances")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "reseller_id", params.ResellerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "contact_id", params.ContactId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "status", params.Status); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "external_id", params.ExternalId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "domain", params.Domain); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "prepaid", params.Prepaid); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificCustomerBalanceRequest generates requests for GetaspecificCustomerBalance
func NewGetaspecificCustomerBalanceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customerbalances/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificCustomerBalanceRequestWithBody generates requests for ChangeaspecificCustomerBalance with any type of body
func NewChangeaspecificCustomerBalanceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customerbalances/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificCustomerBalanceRequest calls the generic ReplacechangeaspecificCustomerBalance builder with application/json body
func NewReplacechangeaspecificCustomerBalanceRequest(server string, id string, body ReplacechangeaspecificCustomerBalanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificCustomerBalanceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificCustomerBalanceRequestWithBody generates requests for ReplacechangeaspecificCustomerBalance with any type of body
func NewReplacechangeaspecificCustomerBalanceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customerbalances/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetCustomerContactitemsRequest generates requests for GetCustomerContactitems
func NewGetCustomerContactitemsRequest(server string, params *GetCustomerContactitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customercontacts")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "email", params.Email); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "reseller_id", params.ResellerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewCustomerContactRequest calls the generic CreateanewCustomerContact builder with application/json body
func NewCreateanewCustomerContactRequest(server string, body CreateanewCustomerContactJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewCustomerContactRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewCustomerContactRequestWithBody generates requests for CreateanewCustomerContact with any type of body
func NewCreateanewCustomerContactRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customercontacts")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteaspecificCustomerContactRequest generates requests for DeleteaspecificCustomerContact
func NewDeleteaspecificCustomerContactRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customercontacts/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificCustomerContactRequest generates requests for GetaspecificCustomerContact
func NewGetaspecificCustomerContactRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customercontacts/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificCustomerContactRequestWithBody generates requests for ChangeaspecificCustomerContact with any type of body
func NewChangeaspecificCustomerContactRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customercontacts/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificCustomerContactRequest calls the generic ReplacechangeaspecificCustomerContact builder with application/json body
func NewReplacechangeaspecificCustomerContactRequest(server string, id string, body ReplacechangeaspecificCustomerContactJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificCustomerContactRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificCustomerContactRequestWithBody generates requests for ReplacechangeaspecificCustomerContact with any type of body
func NewReplacechangeaspecificCustomerContactRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customercontacts/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetCustomerFraudEventitemsRequest generates requests for GetCustomerFraudEventitems
func NewGetCustomerFraudEventitemsRequest(server string, params *GetCustomerFraudEventitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customerfraudevents")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "reseller_id", params.ResellerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "interval", params.Interval); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificCustomerFraudEventRequest generates requests for GetaspecificCustomerFraudEvent
func NewGetaspecificCustomerFraudEventRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customerfraudevents/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCustomerFraudPreferenceitemsRequest generates requests for GetCustomerFraudPreferenceitems
func NewGetCustomerFraudPreferenceitemsRequest(server string, params *GetCustomerFraudPreferenceitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customerfraudpreferences")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "reseller_id", params.ResellerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "contact_id", params.ContactId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "notify", params.Notify); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificCustomerFraudPreferenceRequest generates requests for GetaspecificCustomerFraudPreference
func NewGetaspecificCustomerFraudPreferenceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customerfraudpreferences/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificCustomerFraudPreferenceRequestWithBody generates requests for ChangeaspecificCustomerFraudPreference with any type of body
func NewChangeaspecificCustomerFraudPreferenceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customerfraudpreferences/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificCustomerFraudPreferenceRequest calls the generic ReplacechangeaspecificCustomerFraudPreference builder with application/json body
func NewReplacechangeaspecificCustomerFraudPreferenceRequest(server string, id string, body ReplacechangeaspecificCustomerFraudPreferenceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificCustomerFraudPreferenceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificCustomerFraudPreferenceRequestWithBody generates requests for ReplacechangeaspecificCustomerFraudPreference with any type of body
func NewReplacechangeaspecificCustomerFraudPreferenceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customerfraudpreferences/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetCustomerLocationitemsRequest generates requests for GetCustomerLocationitems
func NewGetCustomerLocationitemsRequest(server string, params *GetCustomerLocationitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customerlocations")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "ip", params.Ip); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "name", params.Name); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewCustomerLocationRequest calls the generic CreateanewCustomerLocation builder with application/json body
func NewCreateanewCustomerLocationRequest(server string, body CreateanewCustomerLocationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewCustomerLocationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewCustomerLocationRequestWithBody generates requests for CreateanewCustomerLocation with any type of body
func NewCreateanewCustomerLocationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customerlocations")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteaspecificCustomerLocationRequest generates requests for DeleteaspecificCustomerLocation
func NewDeleteaspecificCustomerLocationRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customerlocations/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificCustomerLocationRequest generates requests for GetaspecificCustomerLocation
func NewGetaspecificCustomerLocationRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customerlocations/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificCustomerLocationRequestWithBody generates requests for ChangeaspecificCustomerLocation with any type of body
func NewChangeaspecificCustomerLocationRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customerlocations/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificCustomerLocationRequest calls the generic ReplacechangeaspecificCustomerLocation builder with application/json body
func NewReplacechangeaspecificCustomerLocationRequest(server string, id string, body ReplacechangeaspecificCustomerLocationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificCustomerLocationRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificCustomerLocationRequestWithBody generates requests for ReplacechangeaspecificCustomerLocation with any type of body
func NewReplacechangeaspecificCustomerLocationRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customerlocations/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetCustomerPreferenceitemsRequest generates requests for GetCustomerPreferenceitems
func NewGetCustomerPreferenceitemsRequest(server string, params *GetCustomerPreferenceitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customerpreferences")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "location_id", params.LocationId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificCustomerPreferenceRequest generates requests for GetaspecificCustomerPreference
func NewGetaspecificCustomerPreferenceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customerpreferences/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificCustomerPreferenceRequestWithBody generates requests for ChangeaspecificCustomerPreference with any type of body
func NewChangeaspecificCustomerPreferenceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customerpreferences/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificCustomerPreferenceRequest calls the generic ReplacechangeaspecificCustomerPreference builder with application/json body
func NewReplacechangeaspecificCustomerPreferenceRequest(server string, id string, body ReplacechangeaspecificCustomerPreferenceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificCustomerPreferenceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificCustomerPreferenceRequestWithBody generates requests for ReplacechangeaspecificCustomerPreference with any type of body
func NewReplacechangeaspecificCustomerPreferenceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customerpreferences/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetCustomeritemsRequest generates requests for GetCustomeritems
func NewGetCustomeritemsRequest(server string, params *GetCustomeritemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customers")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "status", params.Status); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "not_status", params.NotStatus); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "reseller_id", params.ResellerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "external_id", params.ExternalId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "contact_id", params.ContactId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "package_id", params.PackageId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "create_timestamp_gt", params.CreateTimestampGt); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "create_timestamp_lt", params.CreateTimestampLt); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "activate_timestamp_gt", params.ActivateTimestampGt); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "activate_timestamp_lt", params.ActivateTimestampLt); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "modify_timestamp_gt", params.ModifyTimestampGt); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "modify_timestamp_lt", params.ModifyTimestampLt); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "terminate_timestamp_gt", params.TerminateTimestampGt); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "terminate_timestamp_lt", params.TerminateTimestampLt); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewCustomerRequest calls the generic CreateanewCustomer builder with application/json body
func NewCreateanewCustomerRequest(server string, body CreateanewCustomerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewCustomerRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewCustomerRequestWithBody generates requests for CreateanewCustomer with any type of body
func NewCreateanewCustomerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customers")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetaspecificCustomerRequest generates requests for GetaspecificCustomer
func NewGetaspecificCustomerRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificCustomerRequestWithBody generates requests for ChangeaspecificCustomer with any type of body
func NewChangeaspecificCustomerRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificCustomerRequest calls the generic ReplacechangeaspecificCustomer builder with application/json body
func NewReplacechangeaspecificCustomerRequest(server string, id string, body ReplacechangeaspecificCustomerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificCustomerRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificCustomerRequestWithBody generates requests for ReplacechangeaspecificCustomer with any type of body
func NewReplacechangeaspecificCustomerRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetCustomerZoneCostitemsRequest generates requests for GetCustomerZoneCostitems
func NewGetCustomerZoneCostitemsRequest(server string, params *GetCustomerZoneCostitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customerzonecosts")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "customer_id", params.CustomerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "start", params.Start); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "end", params.End); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificCustomerZoneCostRequest generates requests for GetaspecificCustomerZoneCost
func NewGetaspecificCustomerZoneCostRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/customerzonecosts/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDomainPreferenceitemsRequest generates requests for GetDomainPreferenceitems
func NewGetDomainPreferenceitemsRequest(server string, params *GetDomainPreferenceitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domainpreferences")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificDomainPreferenceRequest generates requests for GetaspecificDomainPreference
func NewGetaspecificDomainPreferenceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domainpreferences/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificDomainPreferenceRequestWithBody generates requests for ChangeaspecificDomainPreference with any type of body
func NewChangeaspecificDomainPreferenceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domainpreferences/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificDomainPreferenceRequest calls the generic ReplacechangeaspecificDomainPreference builder with application/json body
func NewReplacechangeaspecificDomainPreferenceRequest(server string, id string, body ReplacechangeaspecificDomainPreferenceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificDomainPreferenceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificDomainPreferenceRequestWithBody generates requests for ReplacechangeaspecificDomainPreference with any type of body
func NewReplacechangeaspecificDomainPreferenceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domainpreferences/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetDomainitemsRequest generates requests for GetDomainitems
func NewGetDomainitemsRequest(server string, params *GetDomainitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domains")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "reseller_id", params.ResellerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "domain", params.Domain); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewDomainRequest calls the generic CreateanewDomain builder with application/json body
func NewCreateanewDomainRequest(server string, body CreateanewDomainJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewDomainRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewDomainRequestWithBody generates requests for CreateanewDomain with any type of body
func NewCreateanewDomainRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domains")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteaspecificDomainRequest generates requests for DeleteaspecificDomain
func NewDeleteaspecificDomainRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domains/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificDomainRequest generates requests for GetaspecificDomain
func NewGetaspecificDomainRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/domains/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEmailTemplateitemsRequest generates requests for GetEmailTemplateitems
func NewGetEmailTemplateitemsRequest(server string, params *GetEmailTemplateitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/emailtemplates")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "reseller_id", params.ResellerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "name", params.Name); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewEmailTemplateRequest calls the generic CreateanewEmailTemplate builder with application/json body
func NewCreateanewEmailTemplateRequest(server string, body CreateanewEmailTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewEmailTemplateRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewEmailTemplateRequestWithBody generates requests for CreateanewEmailTemplate with any type of body
func NewCreateanewEmailTemplateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/emailtemplates")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteaspecificEmailTemplateRequest generates requests for DeleteaspecificEmailTemplate
func NewDeleteaspecificEmailTemplateRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/emailtemplates/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificEmailTemplateRequest generates requests for GetaspecificEmailTemplate
func NewGetaspecificEmailTemplateRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/emailtemplates/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificEmailTemplateRequestWithBody generates requests for ChangeaspecificEmailTemplate with any type of body
func NewChangeaspecificEmailTemplateRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/emailtemplates/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificEmailTemplateRequest calls the generic ReplacechangeaspecificEmailTemplate builder with application/json body
func NewReplacechangeaspecificEmailTemplateRequest(server string, id string, body ReplacechangeaspecificEmailTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificEmailTemplateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificEmailTemplateRequestWithBody generates requests for ReplacechangeaspecificEmailTemplate with any type of body
func NewReplacechangeaspecificEmailTemplateRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/emailtemplates/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetEmergencyMappingContaineritemsRequest generates requests for GetEmergencyMappingContaineritems
func NewGetEmergencyMappingContaineritemsRequest(server string, params *GetEmergencyMappingContaineritemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/emergencymappingcontainers")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "name", params.Name); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "reseller_id", params.ResellerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewEmergencyMappingContainerRequest calls the generic CreateanewEmergencyMappingContainer builder with application/json body
func NewCreateanewEmergencyMappingContainerRequest(server string, body CreateanewEmergencyMappingContainerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewEmergencyMappingContainerRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewEmergencyMappingContainerRequestWithBody generates requests for CreateanewEmergencyMappingContainer with any type of body
func NewCreateanewEmergencyMappingContainerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/emergencymappingcontainers")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteaspecificEmergencyMappingContainerRequest generates requests for DeleteaspecificEmergencyMappingContainer
func NewDeleteaspecificEmergencyMappingContainerRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/emergencymappingcontainers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificEmergencyMappingContainerRequest generates requests for GetaspecificEmergencyMappingContainer
func NewGetaspecificEmergencyMappingContainerRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/emergencymappingcontainers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificEmergencyMappingContainerRequestWithBody generates requests for ChangeaspecificEmergencyMappingContainer with any type of body
func NewChangeaspecificEmergencyMappingContainerRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/emergencymappingcontainers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificEmergencyMappingContainerRequest calls the generic ReplacechangeaspecificEmergencyMappingContainer builder with application/json body
func NewReplacechangeaspecificEmergencyMappingContainerRequest(server string, id string, body ReplacechangeaspecificEmergencyMappingContainerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificEmergencyMappingContainerRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificEmergencyMappingContainerRequestWithBody generates requests for ReplacechangeaspecificEmergencyMappingContainer with any type of body
func NewReplacechangeaspecificEmergencyMappingContainerRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/emergencymappingcontainers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetEmergencyMappingitemsRequest generates requests for GetEmergencyMappingitems
func NewGetEmergencyMappingitemsRequest(server string, params *GetEmergencyMappingitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/emergencymappings")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "emergency_container_id", params.EmergencyContainerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "reseller_id", params.ResellerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "code", params.Code); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewEmergencyMappingRequest calls the generic CreateanewEmergencyMapping builder with application/json body
func NewCreateanewEmergencyMappingRequest(server string, body CreateanewEmergencyMappingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewEmergencyMappingRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewEmergencyMappingRequestWithBody generates requests for CreateanewEmergencyMapping with any type of body
func NewCreateanewEmergencyMappingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/emergencymappings")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteaspecificEmergencyMappingRequest generates requests for DeleteaspecificEmergencyMapping
func NewDeleteaspecificEmergencyMappingRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/emergencymappings/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificEmergencyMappingRequest generates requests for GetaspecificEmergencyMapping
func NewGetaspecificEmergencyMappingRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/emergencymappings/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificEmergencyMappingRequestWithBody generates requests for ChangeaspecificEmergencyMapping with any type of body
func NewChangeaspecificEmergencyMappingRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/emergencymappings/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificEmergencyMappingRequest calls the generic ReplacechangeaspecificEmergencyMapping builder with application/json body
func NewReplacechangeaspecificEmergencyMappingRequest(server string, id string, body ReplacechangeaspecificEmergencyMappingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificEmergencyMappingRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificEmergencyMappingRequestWithBody generates requests for ReplacechangeaspecificEmergencyMapping with any type of body
func NewReplacechangeaspecificEmergencyMappingRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/emergencymappings/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetEventitemsRequest generates requests for GetEventitems
func NewGetEventitemsRequest(server string, params *GetEventitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/events")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "subscriber_id", params.SubscriberId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "reseller_id", params.ResellerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "type", params.Type); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "timestamp_from", params.TimestampFrom); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "timestamp_to", params.TimestampTo); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificEventRequest generates requests for GetaspecificEvent
func NewGetaspecificEventRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/events/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFaxitemsRequest generates requests for GetFaxitems
func NewGetFaxitemsRequest(server string, params *GetFaxitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/faxes")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "tz", params.Tz); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "use_owner_tz", params.UseOwnerTz); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "subscriber_id", params.SubscriberId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "time_from", params.TimeFrom); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "time_to", params.TimeTo); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "sid", params.Sid); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "number_rewrite_mode", params.NumberRewriteMode); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewFaxRequest calls the generic CreateanewFax builder with application/json body
func NewCreateanewFaxRequest(server string, body CreateanewFaxJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewFaxRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewFaxRequestWithBody generates requests for CreateanewFax with any type of body
func NewCreateanewFaxRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/faxes")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetaspecificFaxRequest generates requests for GetaspecificFax
func NewGetaspecificFaxRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/faxes/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificFaxRecordingRequest generates requests for GetaspecificFaxRecording
func NewGetaspecificFaxRecordingRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/faxrecordings/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFaxserverSettingitemsRequest generates requests for GetFaxserverSettingitems
func NewGetFaxserverSettingitemsRequest(server string, params *GetFaxserverSettingitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/faxserversettings")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "name_or_password", params.NameOrPassword); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "active", params.Active); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificFaxserverSettingRequest generates requests for GetaspecificFaxserverSetting
func NewGetaspecificFaxserverSettingRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/faxserversettings/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificFaxserverSettingRequestWithBody generates requests for ChangeaspecificFaxserverSetting with any type of body
func NewChangeaspecificFaxserverSettingRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/faxserversettings/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificFaxserverSettingRequest calls the generic ReplacechangeaspecificFaxserverSetting builder with application/json body
func NewReplacechangeaspecificFaxserverSettingRequest(server string, id string, body ReplacechangeaspecificFaxserverSettingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificFaxserverSettingRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificFaxserverSettingRequestWithBody generates requests for ReplacechangeaspecificFaxserverSetting with any type of body
func NewReplacechangeaspecificFaxserverSettingRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/faxserversettings/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetInterceptionitemsRequest generates requests for GetInterceptionitems
func NewGetInterceptionitemsRequest(server string, params *GetInterceptionitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/interceptions")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "liid", params.Liid); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "number", params.Number); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewInterceptionRequest calls the generic CreateanewInterception builder with application/json body
func NewCreateanewInterceptionRequest(server string, body CreateanewInterceptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewInterceptionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewInterceptionRequestWithBody generates requests for CreateanewInterception with any type of body
func NewCreateanewInterceptionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/interceptions")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteaspecificInterceptionRequest generates requests for DeleteaspecificInterception
func NewDeleteaspecificInterceptionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/interceptions/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificInterceptionRequest generates requests for GetaspecificInterception
func NewGetaspecificInterceptionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/interceptions/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificInterceptionRequestWithBody generates requests for ChangeaspecificInterception with any type of body
func NewChangeaspecificInterceptionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/interceptions/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificInterceptionRequest calls the generic ReplacechangeaspecificInterception builder with application/json body
func NewReplacechangeaspecificInterceptionRequest(server string, id string, body ReplacechangeaspecificInterceptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificInterceptionRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificInterceptionRequestWithBody generates requests for ReplacechangeaspecificInterception with any type of body
func NewReplacechangeaspecificInterceptionRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/interceptions/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetInvoiceitemsRequest generates requests for GetInvoiceitems
func NewGetInvoiceitemsRequest(server string, params *GetInvoiceitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/invoices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "period_start_ge", params.PeriodStartGe); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "period_end_le", params.PeriodEndLe); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "reseller_id", params.ResellerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "customer_id", params.CustomerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "serial", params.Serial); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewInvoiceRequest calls the generic CreateanewInvoice builder with application/json body
func NewCreateanewInvoiceRequest(server string, body CreateanewInvoiceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewInvoiceRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewInvoiceRequestWithBody generates requests for CreateanewInvoice with any type of body
func NewCreateanewInvoiceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/invoices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteaspecificInvoiceRequest generates requests for DeleteaspecificInvoice
func NewDeleteaspecificInvoiceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/invoices/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificInvoiceRequest generates requests for GetaspecificInvoice
func NewGetaspecificInvoiceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/invoices/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInvoiceTemplateitemsRequest generates requests for GetInvoiceTemplateitems
func NewGetInvoiceTemplateitemsRequest(server string, params *GetInvoiceTemplateitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/invoicetemplates")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "reseller_id", params.ResellerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "name", params.Name); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificInvoiceTemplateRequest generates requests for GetaspecificInvoiceTemplate
func NewGetaspecificInvoiceTemplateRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/invoicetemplates/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLnpCarrieritemsRequest generates requests for GetLnpCarrieritems
func NewGetLnpCarrieritemsRequest(server string, params *GetLnpCarrieritemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/lnpcarriers")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "prefix", params.Prefix); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "name", params.Name); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewLnpCarrierRequest calls the generic CreateanewLnpCarrier builder with application/json body
func NewCreateanewLnpCarrierRequest(server string, body CreateanewLnpCarrierJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewLnpCarrierRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewLnpCarrierRequestWithBody generates requests for CreateanewLnpCarrier with any type of body
func NewCreateanewLnpCarrierRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/lnpcarriers")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteaspecificLnpCarrierRequest generates requests for DeleteaspecificLnpCarrier
func NewDeleteaspecificLnpCarrierRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/lnpcarriers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificLnpCarrierRequest generates requests for GetaspecificLnpCarrier
func NewGetaspecificLnpCarrierRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/lnpcarriers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificLnpCarrierRequestWithBody generates requests for ChangeaspecificLnpCarrier with any type of body
func NewChangeaspecificLnpCarrierRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/lnpcarriers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificLnpCarrierRequest calls the generic ReplacechangeaspecificLnpCarrier builder with application/json body
func NewReplacechangeaspecificLnpCarrierRequest(server string, id string, body ReplacechangeaspecificLnpCarrierJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificLnpCarrierRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificLnpCarrierRequestWithBody generates requests for ReplacechangeaspecificLnpCarrier with any type of body
func NewReplacechangeaspecificLnpCarrierRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/lnpcarriers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetLnpNumberitemsRequest generates requests for GetLnpNumberitems
func NewGetLnpNumberitemsRequest(server string, params *GetLnpNumberitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/lnpnumbers")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "carrier_id", params.CarrierId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "number", params.Number); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "actual", params.Actual); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewLnpNumberRequest calls the generic CreateanewLnpNumber builder with application/json body
func NewCreateanewLnpNumberRequest(server string, body CreateanewLnpNumberJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewLnpNumberRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewLnpNumberRequestWithBody generates requests for CreateanewLnpNumber with any type of body
func NewCreateanewLnpNumberRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/lnpnumbers")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteaspecificLnpNumberRequest generates requests for DeleteaspecificLnpNumber
func NewDeleteaspecificLnpNumberRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/lnpnumbers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificLnpNumberRequest generates requests for GetaspecificLnpNumber
func NewGetaspecificLnpNumberRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/lnpnumbers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificLnpNumberRequestWithBody generates requests for ChangeaspecificLnpNumber with any type of body
func NewChangeaspecificLnpNumberRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/lnpnumbers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificLnpNumberRequest calls the generic ReplacechangeaspecificLnpNumber builder with application/json body
func NewReplacechangeaspecificLnpNumberRequest(server string, id string, body ReplacechangeaspecificLnpNumberJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificLnpNumberRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificLnpNumberRequestWithBody generates requests for ReplacechangeaspecificLnpNumber with any type of body
func NewReplacechangeaspecificLnpNumberRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/lnpnumbers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetMailToFaxSettingitemsRequest generates requests for GetMailToFaxSettingitems
func NewGetMailToFaxSettingitemsRequest(server string, params *GetMailToFaxSettingitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/mailtofaxsettings")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "active", params.Active); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "secret_key_renew", params.SecretKeyRenew); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificMailToFaxSettingRequest generates requests for GetaspecificMailToFaxSetting
func NewGetaspecificMailToFaxSettingRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/mailtofaxsettings/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificMailToFaxSettingRequestWithBody generates requests for ChangeaspecificMailToFaxSetting with any type of body
func NewChangeaspecificMailToFaxSettingRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/mailtofaxsettings/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificMailToFaxSettingRequest calls the generic ReplacechangeaspecificMailToFaxSetting builder with application/json body
func NewReplacechangeaspecificMailToFaxSettingRequest(server string, id string, body ReplacechangeaspecificMailToFaxSettingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificMailToFaxSettingRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificMailToFaxSettingRequestWithBody generates requests for ReplacechangeaspecificMailToFaxSetting with any type of body
func NewReplacechangeaspecificMailToFaxSettingRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/mailtofaxsettings/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetMaliciousCallitemsRequest generates requests for GetMaliciousCallitems
func NewGetMaliciousCallitemsRequest(server string, params *GetMaliciousCallitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/maliciouscalls")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "reseller_id", params.ResellerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "callid", params.Callid); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "caller", params.Caller); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "callee", params.Callee); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "start_le", params.StartLe); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "start_ge", params.StartGe); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteaspecificMaliciousCallRequest generates requests for DeleteaspecificMaliciousCall
func NewDeleteaspecificMaliciousCallRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/maliciouscalls/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificMaliciousCallRequest generates requests for GetaspecificMaliciousCall
func NewGetaspecificMaliciousCallRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/maliciouscalls/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetManagerSecretaryitemsRequest generates requests for GetManagerSecretaryitems
func NewGetManagerSecretaryitemsRequest(server string, params *GetManagerSecretaryitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/managersecretary")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteaspecificManagerSecretaryRequest generates requests for DeleteaspecificManagerSecretary
func NewDeleteaspecificManagerSecretaryRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/managersecretary/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificManagerSecretaryRequest generates requests for GetaspecificManagerSecretary
func NewGetaspecificManagerSecretaryRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/managersecretary/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplacechangeaspecificManagerSecretaryRequest calls the generic ReplacechangeaspecificManagerSecretary builder with application/json body
func NewReplacechangeaspecificManagerSecretaryRequest(server string, id string, body ReplacechangeaspecificManagerSecretaryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificManagerSecretaryRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificManagerSecretaryRequestWithBody generates requests for ReplacechangeaspecificManagerSecretary with any type of body
func NewReplacechangeaspecificManagerSecretaryRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/managersecretary/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetNcosLevelitemsRequest generates requests for GetNcosLevelitems
func NewGetNcosLevelitemsRequest(server string, params *GetNcosLevelitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ncoslevels")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "reseller_id", params.ResellerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "level", params.Level); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewNcosLevelRequest calls the generic CreateanewNcosLevel builder with application/json body
func NewCreateanewNcosLevelRequest(server string, body CreateanewNcosLevelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewNcosLevelRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewNcosLevelRequestWithBody generates requests for CreateanewNcosLevel with any type of body
func NewCreateanewNcosLevelRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ncoslevels")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteaspecificNcosLevelRequest generates requests for DeleteaspecificNcosLevel
func NewDeleteaspecificNcosLevelRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ncoslevels/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificNcosLevelRequest generates requests for GetaspecificNcosLevel
func NewGetaspecificNcosLevelRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ncoslevels/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificNcosLevelRequestWithBody generates requests for ChangeaspecificNcosLevel with any type of body
func NewChangeaspecificNcosLevelRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ncoslevels/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificNcosLevelRequest calls the generic ReplacechangeaspecificNcosLevel builder with application/json body
func NewReplacechangeaspecificNcosLevelRequest(server string, id string, body ReplacechangeaspecificNcosLevelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificNcosLevelRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificNcosLevelRequestWithBody generates requests for ReplacechangeaspecificNcosLevel with any type of body
func NewReplacechangeaspecificNcosLevelRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ncoslevels/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetNcosLnpCarrieritemsRequest generates requests for GetNcosLnpCarrieritems
func NewGetNcosLnpCarrieritemsRequest(server string, params *GetNcosLnpCarrieritemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ncoslnpcarriers")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "ncos_level_id", params.NcosLevelId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "carrier_id", params.CarrierId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewNcosLnpCarrierRequest calls the generic CreateanewNcosLnpCarrier builder with application/json body
func NewCreateanewNcosLnpCarrierRequest(server string, body CreateanewNcosLnpCarrierJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewNcosLnpCarrierRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewNcosLnpCarrierRequestWithBody generates requests for CreateanewNcosLnpCarrier with any type of body
func NewCreateanewNcosLnpCarrierRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ncoslnpcarriers")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteaspecificNcosLnpCarrierRequest generates requests for DeleteaspecificNcosLnpCarrier
func NewDeleteaspecificNcosLnpCarrierRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ncoslnpcarriers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificNcosLnpCarrierRequest generates requests for GetaspecificNcosLnpCarrier
func NewGetaspecificNcosLnpCarrierRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ncoslnpcarriers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificNcosLnpCarrierRequestWithBody generates requests for ChangeaspecificNcosLnpCarrier with any type of body
func NewChangeaspecificNcosLnpCarrierRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ncoslnpcarriers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificNcosLnpCarrierRequest calls the generic ReplacechangeaspecificNcosLnpCarrier builder with application/json body
func NewReplacechangeaspecificNcosLnpCarrierRequest(server string, id string, body ReplacechangeaspecificNcosLnpCarrierJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificNcosLnpCarrierRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificNcosLnpCarrierRequestWithBody generates requests for ReplacechangeaspecificNcosLnpCarrier with any type of body
func NewReplacechangeaspecificNcosLnpCarrierRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ncoslnpcarriers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetNcosPatternitemsRequest generates requests for GetNcosPatternitems
func NewGetNcosPatternitemsRequest(server string, params *GetNcosPatternitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ncospatterns")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "ncos_level_id", params.NcosLevelId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewNcosPatternRequest calls the generic CreateanewNcosPattern builder with application/json body
func NewCreateanewNcosPatternRequest(server string, body CreateanewNcosPatternJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewNcosPatternRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewNcosPatternRequestWithBody generates requests for CreateanewNcosPattern with any type of body
func NewCreateanewNcosPatternRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ncospatterns")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteaspecificNcosPatternRequest generates requests for DeleteaspecificNcosPattern
func NewDeleteaspecificNcosPatternRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ncospatterns/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificNcosPatternRequest generates requests for GetaspecificNcosPattern
func NewGetaspecificNcosPatternRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ncospatterns/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificNcosPatternRequestWithBody generates requests for ChangeaspecificNcosPattern with any type of body
func NewChangeaspecificNcosPatternRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ncospatterns/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificNcosPatternRequest calls the generic ReplacechangeaspecificNcosPattern builder with application/json body
func NewReplacechangeaspecificNcosPatternRequest(server string, id string, body ReplacechangeaspecificNcosPatternJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificNcosPatternRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificNcosPatternRequestWithBody generates requests for ReplacechangeaspecificNcosPattern with any type of body
func NewReplacechangeaspecificNcosPatternRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ncospatterns/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetNumberitemsRequest generates requests for GetNumberitems
func NewGetNumberitemsRequest(server string, params *GetNumberitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/numbers")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "reseller_id", params.ResellerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "customer_id", params.CustomerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "subscriber_id", params.SubscriberId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "ac", params.Ac); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "cc", params.Cc); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "sn", params.Sn); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "type", params.Type); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificNumberRequest generates requests for GetaspecificNumber
func NewGetaspecificNumberRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/numbers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificNumberRequestWithBody generates requests for ChangeaspecificNumber with any type of body
func NewChangeaspecificNumberRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/numbers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificNumberRequest calls the generic ReplacechangeaspecificNumber builder with application/json body
func NewReplacechangeaspecificNumberRequest(server string, id string, body ReplacechangeaspecificNumberJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificNumberRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificNumberRequestWithBody generates requests for ReplacechangeaspecificNumber with any type of body
func NewReplacechangeaspecificNumberRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/numbers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewCreateanewPartyCallControlRequest calls the generic CreateanewPartyCallControl builder with application/json body
func NewCreateanewPartyCallControlRequest(server string, body CreateanewPartyCallControlJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewPartyCallControlRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewPartyCallControlRequestWithBody generates requests for CreateanewPartyCallControl with any type of body
func NewCreateanewPartyCallControlRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/partycallcontrols")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetaspecificPbxDeviceConfigFileRequest generates requests for GetaspecificPbxDeviceConfigFile
func NewGetaspecificPbxDeviceConfigFileRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pbxdeviceconfigfiles/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPbxDeviceConfigitemsRequest generates requests for GetPbxDeviceConfigitems
func NewGetPbxDeviceConfigitemsRequest(server string, params *GetPbxDeviceConfigitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pbxdeviceconfigs")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "device_id", params.DeviceId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "version", params.Version); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "content_type", params.ContentType); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewPbxDeviceConfigRequest calls the generic CreateanewPbxDeviceConfig builder with application/json body
func NewCreateanewPbxDeviceConfigRequest(server string, body CreateanewPbxDeviceConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewPbxDeviceConfigRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewPbxDeviceConfigRequestWithBody generates requests for CreateanewPbxDeviceConfig with any type of body
func NewCreateanewPbxDeviceConfigRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pbxdeviceconfigs")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetaspecificPbxDeviceConfigRequest generates requests for GetaspecificPbxDeviceConfig
func NewGetaspecificPbxDeviceConfigRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pbxdeviceconfigs/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplacechangeaspecificPbxDeviceConfigRequest calls the generic ReplacechangeaspecificPbxDeviceConfig builder with application/json body
func NewReplacechangeaspecificPbxDeviceConfigRequest(server string, id string, body ReplacechangeaspecificPbxDeviceConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificPbxDeviceConfigRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificPbxDeviceConfigRequestWithBody generates requests for ReplacechangeaspecificPbxDeviceConfig with any type of body
func NewReplacechangeaspecificPbxDeviceConfigRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pbxdeviceconfigs/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetaspecificPbxDeviceFirmwareBinaryRequest generates requests for GetaspecificPbxDeviceFirmwareBinary
func NewGetaspecificPbxDeviceFirmwareBinaryRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pbxdevicefirmwarebinaries/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPbxDeviceFirmwareitemsRequest generates requests for GetPbxDeviceFirmwareitems
func NewGetPbxDeviceFirmwareitemsRequest(server string, params *GetPbxDeviceFirmwareitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pbxdevicefirmwares")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "device_id", params.DeviceId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "version", params.Version); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "filename", params.Filename); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewPbxDeviceFirmwareRequest calls the generic CreateanewPbxDeviceFirmware builder with application/json body
func NewCreateanewPbxDeviceFirmwareRequest(server string, body CreateanewPbxDeviceFirmwareJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewPbxDeviceFirmwareRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewPbxDeviceFirmwareRequestWithBody generates requests for CreateanewPbxDeviceFirmware with any type of body
func NewCreateanewPbxDeviceFirmwareRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pbxdevicefirmwares")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetaspecificPbxDeviceFirmwareRequest generates requests for GetaspecificPbxDeviceFirmware
func NewGetaspecificPbxDeviceFirmwareRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pbxdevicefirmwares/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplacechangeaspecificPbxDeviceFirmwareRequest calls the generic ReplacechangeaspecificPbxDeviceFirmware builder with application/json body
func NewReplacechangeaspecificPbxDeviceFirmwareRequest(server string, id string, body ReplacechangeaspecificPbxDeviceFirmwareJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificPbxDeviceFirmwareRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificPbxDeviceFirmwareRequestWithBody generates requests for ReplacechangeaspecificPbxDeviceFirmware with any type of body
func NewReplacechangeaspecificPbxDeviceFirmwareRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pbxdevicefirmwares/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetaspecificPbxDeviceModelImageRequest generates requests for GetaspecificPbxDeviceModelImage
func NewGetaspecificPbxDeviceModelImageRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pbxdevicemodelimages/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPbxDeviceModelitemsRequest generates requests for GetPbxDeviceModelitems
func NewGetPbxDeviceModelitemsRequest(server string, params *GetPbxDeviceModelitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pbxdevicemodels")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "reseller_id", params.ResellerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "vendor", params.Vendor); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "model", params.Model); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewPbxDeviceModelRequest calls the generic CreateanewPbxDeviceModel builder with application/json body
func NewCreateanewPbxDeviceModelRequest(server string, body CreateanewPbxDeviceModelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewPbxDeviceModelRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewPbxDeviceModelRequestWithBody generates requests for CreateanewPbxDeviceModel with any type of body
func NewCreateanewPbxDeviceModelRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pbxdevicemodels")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetaspecificPbxDeviceModelRequest generates requests for GetaspecificPbxDeviceModel
func NewGetaspecificPbxDeviceModelRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pbxdevicemodels/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificPbxDeviceModelRequestWithBody generates requests for ChangeaspecificPbxDeviceModel with any type of body
func NewChangeaspecificPbxDeviceModelRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pbxdevicemodels/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificPbxDeviceModelRequest calls the generic ReplacechangeaspecificPbxDeviceModel builder with application/json body
func NewReplacechangeaspecificPbxDeviceModelRequest(server string, id string, body ReplacechangeaspecificPbxDeviceModelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificPbxDeviceModelRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificPbxDeviceModelRequestWithBody generates requests for ReplacechangeaspecificPbxDeviceModel with any type of body
func NewReplacechangeaspecificPbxDeviceModelRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pbxdevicemodels/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetPbxDevicePreferenceitemsRequest generates requests for GetPbxDevicePreferenceitems
func NewGetPbxDevicePreferenceitemsRequest(server string, params *GetPbxDevicePreferenceitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pbxdevicepreferences")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificPbxDevicePreferenceRequest generates requests for GetaspecificPbxDevicePreference
func NewGetaspecificPbxDevicePreferenceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pbxdevicepreferences/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificPbxDevicePreferenceRequestWithBody generates requests for ChangeaspecificPbxDevicePreference with any type of body
func NewChangeaspecificPbxDevicePreferenceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pbxdevicepreferences/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificPbxDevicePreferenceRequest calls the generic ReplacechangeaspecificPbxDevicePreference builder with application/json body
func NewReplacechangeaspecificPbxDevicePreferenceRequest(server string, id string, body ReplacechangeaspecificPbxDevicePreferenceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificPbxDevicePreferenceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificPbxDevicePreferenceRequestWithBody generates requests for ReplacechangeaspecificPbxDevicePreference with any type of body
func NewReplacechangeaspecificPbxDevicePreferenceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pbxdevicepreferences/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetPbxDeviceProfilePreferenceitemsRequest generates requests for GetPbxDeviceProfilePreferenceitems
func NewGetPbxDeviceProfilePreferenceitemsRequest(server string, params *GetPbxDeviceProfilePreferenceitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pbxdeviceprofilepreferences")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificPbxDeviceProfilePreferenceRequest generates requests for GetaspecificPbxDeviceProfilePreference
func NewGetaspecificPbxDeviceProfilePreferenceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pbxdeviceprofilepreferences/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificPbxDeviceProfilePreferenceRequestWithBody generates requests for ChangeaspecificPbxDeviceProfilePreference with any type of body
func NewChangeaspecificPbxDeviceProfilePreferenceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pbxdeviceprofilepreferences/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificPbxDeviceProfilePreferenceRequest calls the generic ReplacechangeaspecificPbxDeviceProfilePreference builder with application/json body
func NewReplacechangeaspecificPbxDeviceProfilePreferenceRequest(server string, id string, body ReplacechangeaspecificPbxDeviceProfilePreferenceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificPbxDeviceProfilePreferenceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificPbxDeviceProfilePreferenceRequestWithBody generates requests for ReplacechangeaspecificPbxDeviceProfilePreference with any type of body
func NewReplacechangeaspecificPbxDeviceProfilePreferenceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pbxdeviceprofilepreferences/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetPbxDeviceProfileitemsRequest generates requests for GetPbxDeviceProfileitems
func NewGetPbxDeviceProfileitemsRequest(server string, params *GetPbxDeviceProfileitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pbxdeviceprofiles")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "name", params.Name); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "config_id", params.ConfigId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewPbxDeviceProfileRequest calls the generic CreateanewPbxDeviceProfile builder with application/json body
func NewCreateanewPbxDeviceProfileRequest(server string, body CreateanewPbxDeviceProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewPbxDeviceProfileRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewPbxDeviceProfileRequestWithBody generates requests for CreateanewPbxDeviceProfile with any type of body
func NewCreateanewPbxDeviceProfileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pbxdeviceprofiles")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetaspecificPbxDeviceProfileRequest generates requests for GetaspecificPbxDeviceProfile
func NewGetaspecificPbxDeviceProfileRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pbxdeviceprofiles/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificPbxDeviceProfileRequestWithBody generates requests for ChangeaspecificPbxDeviceProfile with any type of body
func NewChangeaspecificPbxDeviceProfileRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pbxdeviceprofiles/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificPbxDeviceProfileRequest calls the generic ReplacechangeaspecificPbxDeviceProfile builder with application/json body
func NewReplacechangeaspecificPbxDeviceProfileRequest(server string, id string, body ReplacechangeaspecificPbxDeviceProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificPbxDeviceProfileRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificPbxDeviceProfileRequestWithBody generates requests for ReplacechangeaspecificPbxDeviceProfile with any type of body
func NewReplacechangeaspecificPbxDeviceProfileRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pbxdeviceprofiles/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetPbxDeviceitemsRequest generates requests for GetPbxDeviceitems
func NewGetPbxDeviceitemsRequest(server string, params *GetPbxDeviceitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pbxdevices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "customer_id", params.CustomerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "profile_id", params.ProfileId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "identifier", params.Identifier); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "station_name", params.StationName); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewPbxDeviceRequest calls the generic CreateanewPbxDevice builder with application/json body
func NewCreateanewPbxDeviceRequest(server string, body CreateanewPbxDeviceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewPbxDeviceRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewPbxDeviceRequestWithBody generates requests for CreateanewPbxDevice with any type of body
func NewCreateanewPbxDeviceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pbxdevices")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteaspecificPbxDeviceRequest generates requests for DeleteaspecificPbxDevice
func NewDeleteaspecificPbxDeviceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pbxdevices/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificPbxDeviceRequest generates requests for GetaspecificPbxDevice
func NewGetaspecificPbxDeviceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pbxdevices/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificPbxDeviceRequestWithBody generates requests for ChangeaspecificPbxDevice with any type of body
func NewChangeaspecificPbxDeviceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pbxdevices/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificPbxDeviceRequest calls the generic ReplacechangeaspecificPbxDevice builder with application/json body
func NewReplacechangeaspecificPbxDeviceRequest(server string, id string, body ReplacechangeaspecificPbxDeviceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificPbxDeviceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificPbxDeviceRequestWithBody generates requests for ReplacechangeaspecificPbxDevice with any type of body
func NewReplacechangeaspecificPbxDeviceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pbxdevices/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetPbxFieldDevicePreferenceitemsRequest generates requests for GetPbxFieldDevicePreferenceitems
func NewGetPbxFieldDevicePreferenceitemsRequest(server string, params *GetPbxFieldDevicePreferenceitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pbxfielddevicepreferences")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificPbxFieldDevicePreferenceRequest generates requests for GetaspecificPbxFieldDevicePreference
func NewGetaspecificPbxFieldDevicePreferenceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pbxfielddevicepreferences/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificPbxFieldDevicePreferenceRequestWithBody generates requests for ChangeaspecificPbxFieldDevicePreference with any type of body
func NewChangeaspecificPbxFieldDevicePreferenceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pbxfielddevicepreferences/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificPbxFieldDevicePreferenceRequest calls the generic ReplacechangeaspecificPbxFieldDevicePreference builder with application/json body
func NewReplacechangeaspecificPbxFieldDevicePreferenceRequest(server string, id string, body ReplacechangeaspecificPbxFieldDevicePreferenceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificPbxFieldDevicePreferenceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificPbxFieldDevicePreferenceRequestWithBody generates requests for ReplacechangeaspecificPbxFieldDevicePreference with any type of body
func NewReplacechangeaspecificPbxFieldDevicePreferenceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/pbxfielddevicepreferences/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetPeeringGroupitemsRequest generates requests for GetPeeringGroupitems
func NewGetPeeringGroupitemsRequest(server string, params *GetPeeringGroupitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/peeringgroups")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "name", params.Name); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "description", params.Description); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewPeeringGroupRequest calls the generic CreateanewPeeringGroup builder with application/json body
func NewCreateanewPeeringGroupRequest(server string, body CreateanewPeeringGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewPeeringGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewPeeringGroupRequestWithBody generates requests for CreateanewPeeringGroup with any type of body
func NewCreateanewPeeringGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/peeringgroups")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteaspecificPeeringGroupRequest generates requests for DeleteaspecificPeeringGroup
func NewDeleteaspecificPeeringGroupRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/peeringgroups/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificPeeringGroupRequest generates requests for GetaspecificPeeringGroup
func NewGetaspecificPeeringGroupRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/peeringgroups/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificPeeringGroupRequestWithBody generates requests for ChangeaspecificPeeringGroup with any type of body
func NewChangeaspecificPeeringGroupRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/peeringgroups/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificPeeringGroupRequest calls the generic ReplacechangeaspecificPeeringGroup builder with application/json body
func NewReplacechangeaspecificPeeringGroupRequest(server string, id string, body ReplacechangeaspecificPeeringGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificPeeringGroupRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificPeeringGroupRequestWithBody generates requests for ReplacechangeaspecificPeeringGroup with any type of body
func NewReplacechangeaspecificPeeringGroupRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/peeringgroups/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetPeeringInboundRuleitemsRequest generates requests for GetPeeringInboundRuleitems
func NewGetPeeringInboundRuleitemsRequest(server string, params *GetPeeringInboundRuleitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/peeringinboundrules")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "group_id", params.GroupId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "field", params.Field); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "enabled", params.Enabled); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewPeeringInboundRuleRequest calls the generic CreateanewPeeringInboundRule builder with application/json body
func NewCreateanewPeeringInboundRuleRequest(server string, body CreateanewPeeringInboundRuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewPeeringInboundRuleRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewPeeringInboundRuleRequestWithBody generates requests for CreateanewPeeringInboundRule with any type of body
func NewCreateanewPeeringInboundRuleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/peeringinboundrules")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteaspecificPeeringInboundRuleRequest generates requests for DeleteaspecificPeeringInboundRule
func NewDeleteaspecificPeeringInboundRuleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/peeringinboundrules/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificPeeringInboundRuleRequest generates requests for GetaspecificPeeringInboundRule
func NewGetaspecificPeeringInboundRuleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/peeringinboundrules/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificPeeringInboundRuleRequestWithBody generates requests for ChangeaspecificPeeringInboundRule with any type of body
func NewChangeaspecificPeeringInboundRuleRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/peeringinboundrules/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificPeeringInboundRuleRequest calls the generic ReplacechangeaspecificPeeringInboundRule builder with application/json body
func NewReplacechangeaspecificPeeringInboundRuleRequest(server string, id string, body ReplacechangeaspecificPeeringInboundRuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificPeeringInboundRuleRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificPeeringInboundRuleRequestWithBody generates requests for ReplacechangeaspecificPeeringInboundRule with any type of body
func NewReplacechangeaspecificPeeringInboundRuleRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/peeringinboundrules/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetPeeringRuleitemsRequest generates requests for GetPeeringRuleitems
func NewGetPeeringRuleitemsRequest(server string, params *GetPeeringRuleitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/peeringrules")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "group_id", params.GroupId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "description", params.Description); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "enabled", params.Enabled); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewPeeringRuleRequest calls the generic CreateanewPeeringRule builder with application/json body
func NewCreateanewPeeringRuleRequest(server string, body CreateanewPeeringRuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewPeeringRuleRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewPeeringRuleRequestWithBody generates requests for CreateanewPeeringRule with any type of body
func NewCreateanewPeeringRuleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/peeringrules")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteaspecificPeeringRuleRequest generates requests for DeleteaspecificPeeringRule
func NewDeleteaspecificPeeringRuleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/peeringrules/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificPeeringRuleRequest generates requests for GetaspecificPeeringRule
func NewGetaspecificPeeringRuleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/peeringrules/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificPeeringRuleRequestWithBody generates requests for ChangeaspecificPeeringRule with any type of body
func NewChangeaspecificPeeringRuleRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/peeringrules/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificPeeringRuleRequest calls the generic ReplacechangeaspecificPeeringRule builder with application/json body
func NewReplacechangeaspecificPeeringRuleRequest(server string, id string, body ReplacechangeaspecificPeeringRuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificPeeringRuleRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificPeeringRuleRequestWithBody generates requests for ReplacechangeaspecificPeeringRule with any type of body
func NewReplacechangeaspecificPeeringRuleRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/peeringrules/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetPeeringServerPreferenceitemsRequest generates requests for GetPeeringServerPreferenceitems
func NewGetPeeringServerPreferenceitemsRequest(server string, params *GetPeeringServerPreferenceitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/peeringserverpreferences")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificPeeringServerPreferenceRequest generates requests for GetaspecificPeeringServerPreference
func NewGetaspecificPeeringServerPreferenceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/peeringserverpreferences/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificPeeringServerPreferenceRequestWithBody generates requests for ChangeaspecificPeeringServerPreference with any type of body
func NewChangeaspecificPeeringServerPreferenceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/peeringserverpreferences/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificPeeringServerPreferenceRequest calls the generic ReplacechangeaspecificPeeringServerPreference builder with application/json body
func NewReplacechangeaspecificPeeringServerPreferenceRequest(server string, id string, body ReplacechangeaspecificPeeringServerPreferenceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificPeeringServerPreferenceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificPeeringServerPreferenceRequestWithBody generates requests for ReplacechangeaspecificPeeringServerPreference with any type of body
func NewReplacechangeaspecificPeeringServerPreferenceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/peeringserverpreferences/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetPeeringServeritemsRequest generates requests for GetPeeringServeritems
func NewGetPeeringServeritemsRequest(server string, params *GetPeeringServeritemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/peeringservers")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "group_id", params.GroupId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "name", params.Name); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "host", params.Host); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "ip", params.Ip); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "enabled", params.Enabled); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewPeeringServerRequest calls the generic CreateanewPeeringServer builder with application/json body
func NewCreateanewPeeringServerRequest(server string, body CreateanewPeeringServerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewPeeringServerRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewPeeringServerRequestWithBody generates requests for CreateanewPeeringServer with any type of body
func NewCreateanewPeeringServerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/peeringservers")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteaspecificPeeringServerRequest generates requests for DeleteaspecificPeeringServer
func NewDeleteaspecificPeeringServerRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/peeringservers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificPeeringServerRequest generates requests for GetaspecificPeeringServer
func NewGetaspecificPeeringServerRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/peeringservers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificPeeringServerRequestWithBody generates requests for ChangeaspecificPeeringServer with any type of body
func NewChangeaspecificPeeringServerRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/peeringservers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificPeeringServerRequest calls the generic ReplacechangeaspecificPeeringServer builder with application/json body
func NewReplacechangeaspecificPeeringServerRequest(server string, id string, body ReplacechangeaspecificPeeringServerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificPeeringServerRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificPeeringServerRequestWithBody generates requests for ReplacechangeaspecificPeeringServer with any type of body
func NewReplacechangeaspecificPeeringServerRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/peeringservers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetPhonebookEntryitemsRequest generates requests for GetPhonebookEntryitems
func NewGetPhonebookEntryitemsRequest(server string, params *GetPhonebookEntryitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/phonebookentries")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "reseller_id", params.ResellerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "customer_id", params.CustomerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "subscriber_id", params.SubscriberId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "number", params.Number); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "name", params.Name); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewPhonebookEntryRequest calls the generic CreateanewPhonebookEntry builder with application/json body
func NewCreateanewPhonebookEntryRequest(server string, body CreateanewPhonebookEntryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewPhonebookEntryRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewPhonebookEntryRequestWithBody generates requests for CreateanewPhonebookEntry with any type of body
func NewCreateanewPhonebookEntryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/phonebookentries")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteaspecificPhonebookEntryRequest generates requests for DeleteaspecificPhonebookEntry
func NewDeleteaspecificPhonebookEntryRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/phonebookentries/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificPhonebookEntryRequest generates requests for GetaspecificPhonebookEntry
func NewGetaspecificPhonebookEntryRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/phonebookentries/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificPhonebookEntryRequestWithBody generates requests for ChangeaspecificPhonebookEntry with any type of body
func NewChangeaspecificPhonebookEntryRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/phonebookentries/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificPhonebookEntryRequest calls the generic ReplacechangeaspecificPhonebookEntry builder with application/json body
func NewReplacechangeaspecificPhonebookEntryRequest(server string, id string, body ReplacechangeaspecificPhonebookEntryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificPhonebookEntryRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificPhonebookEntryRequestWithBody generates requests for ReplacechangeaspecificPhonebookEntry with any type of body
func NewReplacechangeaspecificPhonebookEntryRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/phonebookentries/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetPreferencesMetaEntryitemsRequest generates requests for GetPreferencesMetaEntryitems
func NewGetPreferencesMetaEntryitemsRequest(server string, params *GetPreferencesMetaEntryitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/preferencesmetaentries")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "attribute", params.Attribute); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "model_id", params.ModelId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "reseller_id", params.ResellerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewPreferencesMetaEntryRequest calls the generic CreateanewPreferencesMetaEntry builder with application/json body
func NewCreateanewPreferencesMetaEntryRequest(server string, body CreateanewPreferencesMetaEntryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewPreferencesMetaEntryRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewPreferencesMetaEntryRequestWithBody generates requests for CreateanewPreferencesMetaEntry with any type of body
func NewCreateanewPreferencesMetaEntryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/preferencesmetaentries")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteaspecificPreferencesMetaEntryRequest generates requests for DeleteaspecificPreferencesMetaEntry
func NewDeleteaspecificPreferencesMetaEntryRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/preferencesmetaentries/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificPreferencesMetaEntryRequest generates requests for GetaspecificPreferencesMetaEntry
func NewGetaspecificPreferencesMetaEntryRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/preferencesmetaentries/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificPreferencesMetaEntryRequestWithBody generates requests for ChangeaspecificPreferencesMetaEntry with any type of body
func NewChangeaspecificPreferencesMetaEntryRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/preferencesmetaentries/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificPreferencesMetaEntryRequest calls the generic ReplacechangeaspecificPreferencesMetaEntry builder with application/json body
func NewReplacechangeaspecificPreferencesMetaEntryRequest(server string, id string, body ReplacechangeaspecificPreferencesMetaEntryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificPreferencesMetaEntryRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificPreferencesMetaEntryRequestWithBody generates requests for ReplacechangeaspecificPreferencesMetaEntry with any type of body
func NewReplacechangeaspecificPreferencesMetaEntryRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/preferencesmetaentries/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetProfilePackageitemsRequest generates requests for GetProfilePackageitems
func NewGetProfilePackageitemsRequest(server string, params *GetProfilePackageitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/profilepackages")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "reseller_id", params.ResellerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "name", params.Name); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "profile_name", params.ProfileName); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "network_name", params.NetworkName); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewProfilePackageRequest calls the generic CreateanewProfilePackage builder with application/json body
func NewCreateanewProfilePackageRequest(server string, body CreateanewProfilePackageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewProfilePackageRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewProfilePackageRequestWithBody generates requests for CreateanewProfilePackage with any type of body
func NewCreateanewProfilePackageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/profilepackages")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteaspecificProfilePackageRequest generates requests for DeleteaspecificProfilePackage
func NewDeleteaspecificProfilePackageRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/profilepackages/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificProfilePackageRequest generates requests for GetaspecificProfilePackage
func NewGetaspecificProfilePackageRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/profilepackages/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificProfilePackageRequestWithBody generates requests for ChangeaspecificProfilePackage with any type of body
func NewChangeaspecificProfilePackageRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/profilepackages/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificProfilePackageRequest calls the generic ReplacechangeaspecificProfilePackage builder with application/json body
func NewReplacechangeaspecificProfilePackageRequest(server string, id string, body ReplacechangeaspecificProfilePackageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificProfilePackageRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificProfilePackageRequestWithBody generates requests for ReplacechangeaspecificProfilePackage with any type of body
func NewReplacechangeaspecificProfilePackageRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/profilepackages/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetProfilePreferenceitemsRequest generates requests for GetProfilePreferenceitems
func NewGetProfilePreferenceitemsRequest(server string, params *GetProfilePreferenceitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/profilepreferences")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificProfilePreferenceRequest generates requests for GetaspecificProfilePreference
func NewGetaspecificProfilePreferenceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/profilepreferences/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificProfilePreferenceRequestWithBody generates requests for ChangeaspecificProfilePreference with any type of body
func NewChangeaspecificProfilePreferenceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/profilepreferences/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificProfilePreferenceRequest calls the generic ReplacechangeaspecificProfilePreference builder with application/json body
func NewReplacechangeaspecificProfilePreferenceRequest(server string, id string, body ReplacechangeaspecificProfilePreferenceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificProfilePreferenceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificProfilePreferenceRequestWithBody generates requests for ReplacechangeaspecificProfilePreference with any type of body
func NewReplacechangeaspecificProfilePreferenceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/profilepreferences/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetReminderitemsRequest generates requests for GetReminderitems
func NewGetReminderitemsRequest(server string, params *GetReminderitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/reminders")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "subscriber_id", params.SubscriberId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "active", params.Active); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewReminderRequest calls the generic CreateanewReminder builder with application/json body
func NewCreateanewReminderRequest(server string, body CreateanewReminderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewReminderRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewReminderRequestWithBody generates requests for CreateanewReminder with any type of body
func NewCreateanewReminderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/reminders")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteaspecificReminderRequest generates requests for DeleteaspecificReminder
func NewDeleteaspecificReminderRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/reminders/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificReminderRequest generates requests for GetaspecificReminder
func NewGetaspecificReminderRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/reminders/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificReminderRequestWithBody generates requests for ChangeaspecificReminder with any type of body
func NewChangeaspecificReminderRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/reminders/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificReminderRequest calls the generic ReplacechangeaspecificReminder builder with application/json body
func NewReplacechangeaspecificReminderRequest(server string, id string, body ReplacechangeaspecificReminderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificReminderRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificReminderRequestWithBody generates requests for ReplacechangeaspecificReminder with any type of body
func NewReplacechangeaspecificReminderRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/reminders/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetReselleritemsRequest generates requests for GetReselleritems
func NewGetReselleritemsRequest(server string, params *GetReselleritemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/resellers")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "name", params.Name); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewResellerRequest calls the generic CreateanewReseller builder with application/json body
func NewCreateanewResellerRequest(server string, body CreateanewResellerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewResellerRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewResellerRequestWithBody generates requests for CreateanewReseller with any type of body
func NewCreateanewResellerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/resellers")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetaspecificResellerRequest generates requests for GetaspecificReseller
func NewGetaspecificResellerRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/resellers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificResellerRequestWithBody generates requests for ChangeaspecificReseller with any type of body
func NewChangeaspecificResellerRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/resellers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificResellerRequest calls the generic ReplacechangeaspecificReseller builder with application/json body
func NewReplacechangeaspecificResellerRequest(server string, id string, body ReplacechangeaspecificResellerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificResellerRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificResellerRequestWithBody generates requests for ReplacechangeaspecificReseller with any type of body
func NewReplacechangeaspecificResellerRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/resellers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetRewriteRuleitemsRequest generates requests for GetRewriteRuleitems
func NewGetRewriteRuleitemsRequest(server string, params *GetRewriteRuleitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rewriterules")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "description", params.Description); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "set_id", params.SetId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "reseller_id", params.ResellerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewRewriteRuleRequest calls the generic CreateanewRewriteRule builder with application/json body
func NewCreateanewRewriteRuleRequest(server string, body CreateanewRewriteRuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewRewriteRuleRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewRewriteRuleRequestWithBody generates requests for CreateanewRewriteRule with any type of body
func NewCreateanewRewriteRuleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rewriterules")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteaspecificRewriteRuleRequest generates requests for DeleteaspecificRewriteRule
func NewDeleteaspecificRewriteRuleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rewriterules/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificRewriteRuleRequest generates requests for GetaspecificRewriteRule
func NewGetaspecificRewriteRuleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rewriterules/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificRewriteRuleRequestWithBody generates requests for ChangeaspecificRewriteRule with any type of body
func NewChangeaspecificRewriteRuleRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rewriterules/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificRewriteRuleRequest calls the generic ReplacechangeaspecificRewriteRule builder with application/json body
func NewReplacechangeaspecificRewriteRuleRequest(server string, id string, body ReplacechangeaspecificRewriteRuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificRewriteRuleRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificRewriteRuleRequestWithBody generates requests for ReplacechangeaspecificRewriteRule with any type of body
func NewReplacechangeaspecificRewriteRuleRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rewriterules/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetRewriteRuleSetitemsRequest generates requests for GetRewriteRuleSetitems
func NewGetRewriteRuleSetitemsRequest(server string, params *GetRewriteRuleSetitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rewriterulesets")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "reseller_id", params.ResellerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "description", params.Description); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "name", params.Name); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewRewriteRuleSetRequest calls the generic CreateanewRewriteRuleSet builder with application/json body
func NewCreateanewRewriteRuleSetRequest(server string, body CreateanewRewriteRuleSetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewRewriteRuleSetRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewRewriteRuleSetRequestWithBody generates requests for CreateanewRewriteRuleSet with any type of body
func NewCreateanewRewriteRuleSetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rewriterulesets")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteaspecificRewriteRuleSetRequest generates requests for DeleteaspecificRewriteRuleSet
func NewDeleteaspecificRewriteRuleSetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rewriterulesets/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificRewriteRuleSetRequest generates requests for GetaspecificRewriteRuleSet
func NewGetaspecificRewriteRuleSetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rewriterulesets/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificRewriteRuleSetRequestWithBody generates requests for ChangeaspecificRewriteRuleSet with any type of body
func NewChangeaspecificRewriteRuleSetRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rewriterulesets/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificRewriteRuleSetRequest calls the generic ReplacechangeaspecificRewriteRuleSet builder with application/json body
func NewReplacechangeaspecificRewriteRuleSetRequest(server string, id string, body ReplacechangeaspecificRewriteRuleSetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificRewriteRuleSetRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificRewriteRuleSetRequestWithBody generates requests for ReplacechangeaspecificRewriteRuleSet with any type of body
func NewReplacechangeaspecificRewriteRuleSetRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rewriterulesets/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetRtcAppitemsRequest generates requests for GetRtcAppitems
func NewGetRtcAppitemsRequest(server string, params *GetRtcAppitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rtcapps")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificRtcAppRequest generates requests for GetaspecificRtcApp
func NewGetaspecificRtcAppRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rtcapps/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificRtcAppRequestWithBody generates requests for ChangeaspecificRtcApp with any type of body
func NewChangeaspecificRtcAppRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rtcapps/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificRtcAppRequest calls the generic ReplacechangeaspecificRtcApp builder with application/json body
func NewReplacechangeaspecificRtcAppRequest(server string, id string, body ReplacechangeaspecificRtcAppJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificRtcAppRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificRtcAppRequestWithBody generates requests for ReplacechangeaspecificRtcApp with any type of body
func NewReplacechangeaspecificRtcAppRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rtcapps/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetRtcNetworkitemsRequest generates requests for GetRtcNetworkitems
func NewGetRtcNetworkitemsRequest(server string, params *GetRtcNetworkitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rtcnetworks")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificRtcNetworkRequest generates requests for GetaspecificRtcNetwork
func NewGetaspecificRtcNetworkRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rtcnetworks/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificRtcNetworkRequestWithBody generates requests for ChangeaspecificRtcNetwork with any type of body
func NewChangeaspecificRtcNetworkRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rtcnetworks/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificRtcNetworkRequest calls the generic ReplacechangeaspecificRtcNetwork builder with application/json body
func NewReplacechangeaspecificRtcNetworkRequest(server string, id string, body ReplacechangeaspecificRtcNetworkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificRtcNetworkRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificRtcNetworkRequestWithBody generates requests for ReplacechangeaspecificRtcNetwork with any type of body
func NewReplacechangeaspecificRtcNetworkRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rtcnetworks/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetRtcSessionitemsRequest generates requests for GetRtcSessionitems
func NewGetRtcSessionitemsRequest(server string, params *GetRtcSessionitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rtcsessions")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewRtcSessionRequest calls the generic CreateanewRtcSession builder with application/json body
func NewCreateanewRtcSessionRequest(server string, body CreateanewRtcSessionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewRtcSessionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewRtcSessionRequestWithBody generates requests for CreateanewRtcSession with any type of body
func NewCreateanewRtcSessionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rtcsessions")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetaspecificRtcSessionRequest generates requests for GetaspecificRtcSession
func NewGetaspecificRtcSessionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/rtcsessions/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSIPCaptureitemsRequest generates requests for GetSIPCaptureitems
func NewGetSIPCaptureitemsRequest(server string, params *GetSIPCaptureitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sipcaptures")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "call_id", params.CallId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "start_ge", params.StartGe); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "start_le", params.StartLe); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "method", params.Method); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "subscriber_id", params.SubscriberId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "tz", params.Tz); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificSIPCaptureRequest generates requests for GetaspecificSIPCapture
func NewGetaspecificSIPCaptureRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sipcaptures/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSMSitemsRequest generates requests for GetSMSitems
func NewGetSMSitemsRequest(server string, params *GetSMSitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sms")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "subscriber_id", params.SubscriberId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "customer_id", params.CustomerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "reseller_id", params.ResellerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "time_ge", params.TimeGe); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "time_le", params.TimeLe); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "direction", params.Direction); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewSMSRequest calls the generic CreateanewSMS builder with application/json body
func NewCreateanewSMSRequest(server string, body CreateanewSMSJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewSMSRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewSMSRequestWithBody generates requests for CreateanewSMS with any type of body
func NewCreateanewSMSRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sms")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetaspecificSMSRequest generates requests for GetaspecificSMS
func NewGetaspecificSMSRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sms/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificSoundFileRecordingRequest generates requests for GetaspecificSoundFileRecording
func NewGetaspecificSoundFileRecordingRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/soundfilerecordings/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSoundFileitemsRequest generates requests for GetSoundFileitems
func NewGetSoundFileitemsRequest(server string, params *GetSoundFileitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/soundfiles")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "set_id", params.SetId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewSoundFileRequest calls the generic CreateanewSoundFile builder with application/json body
func NewCreateanewSoundFileRequest(server string, body CreateanewSoundFileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewSoundFileRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewSoundFileRequestWithBody generates requests for CreateanewSoundFile with any type of body
func NewCreateanewSoundFileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/soundfiles")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteaspecificSoundFileRequest generates requests for DeleteaspecificSoundFile
func NewDeleteaspecificSoundFileRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/soundfiles/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificSoundFileRequest generates requests for GetaspecificSoundFile
func NewGetaspecificSoundFileRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/soundfiles/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplacechangeaspecificSoundFileRequest calls the generic ReplacechangeaspecificSoundFile builder with application/json body
func NewReplacechangeaspecificSoundFileRequest(server string, id string, body ReplacechangeaspecificSoundFileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificSoundFileRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificSoundFileRequestWithBody generates requests for ReplacechangeaspecificSoundFile with any type of body
func NewReplacechangeaspecificSoundFileRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/soundfiles/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetSoundGroupitemsRequest generates requests for GetSoundGroupitems
func NewGetSoundGroupitemsRequest(server string, params *GetSoundGroupitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/soundgroups")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "name", params.Name); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificSoundGroupRequest generates requests for GetaspecificSoundGroup
func NewGetaspecificSoundGroupRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/soundgroups/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSoundHandleitemsRequest generates requests for GetSoundHandleitems
func NewGetSoundHandleitemsRequest(server string, params *GetSoundHandleitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/soundhandles")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "group", params.Group); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificSoundHandleRequest generates requests for GetaspecificSoundHandle
func NewGetaspecificSoundHandleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/soundhandles/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSoundSetitemsRequest generates requests for GetSoundSetitems
func NewGetSoundSetitemsRequest(server string, params *GetSoundSetitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/soundsets")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "customer_id", params.CustomerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "reseller_id", params.ResellerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "name", params.Name); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewSoundSetRequest calls the generic CreateanewSoundSet builder with application/json body
func NewCreateanewSoundSetRequest(server string, body CreateanewSoundSetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewSoundSetRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewSoundSetRequestWithBody generates requests for CreateanewSoundSet with any type of body
func NewCreateanewSoundSetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/soundsets")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteaspecificSoundSetRequest generates requests for DeleteaspecificSoundSet
func NewDeleteaspecificSoundSetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/soundsets/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificSoundSetRequest generates requests for GetaspecificSoundSet
func NewGetaspecificSoundSetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/soundsets/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificSoundSetRequestWithBody generates requests for ChangeaspecificSoundSet with any type of body
func NewChangeaspecificSoundSetRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/soundsets/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificSoundSetRequest calls the generic ReplacechangeaspecificSoundSet builder with application/json body
func NewReplacechangeaspecificSoundSetRequest(server string, id string, body ReplacechangeaspecificSoundSetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificSoundSetRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificSoundSetRequestWithBody generates requests for ReplacechangeaspecificSoundSet with any type of body
func NewReplacechangeaspecificSoundSetRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/soundsets/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetSpeedDialitemsRequest generates requests for GetSpeedDialitems
func NewGetSpeedDialitemsRequest(server string, params *GetSpeedDialitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/speeddials")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "nonempty", params.Nonempty); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificSpeedDialRequest generates requests for GetaspecificSpeedDial
func NewGetaspecificSpeedDialRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/speeddials/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificSpeedDialRequestWithBody generates requests for ChangeaspecificSpeedDial with any type of body
func NewChangeaspecificSpeedDialRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/speeddials/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificSpeedDialRequest calls the generic ReplacechangeaspecificSpeedDial builder with application/json body
func NewReplacechangeaspecificSpeedDialRequest(server string, id string, body ReplacechangeaspecificSpeedDialJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificSpeedDialRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificSpeedDialRequestWithBody generates requests for ReplacechangeaspecificSpeedDial with any type of body
func NewReplacechangeaspecificSpeedDialRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/speeddials/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetSubscriberPreferenceitemsRequest generates requests for GetSubscriberPreferenceitems
func NewGetSubscriberPreferenceitemsRequest(server string, params *GetSubscriberPreferenceitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/subscriberpreferences")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "reseller_id", params.ResellerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "contact_id", params.ContactId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificSubscriberPreferenceRequest generates requests for GetaspecificSubscriberPreference
func NewGetaspecificSubscriberPreferenceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/subscriberpreferences/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificSubscriberPreferenceRequestWithBody generates requests for ChangeaspecificSubscriberPreference with any type of body
func NewChangeaspecificSubscriberPreferenceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/subscriberpreferences/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificSubscriberPreferenceRequest calls the generic ReplacechangeaspecificSubscriberPreference builder with application/json body
func NewReplacechangeaspecificSubscriberPreferenceRequest(server string, id string, body ReplacechangeaspecificSubscriberPreferenceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificSubscriberPreferenceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificSubscriberPreferenceRequestWithBody generates requests for ReplacechangeaspecificSubscriberPreference with any type of body
func NewReplacechangeaspecificSubscriberPreferenceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/subscriberpreferences/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetSubscriberProfileitemsRequest generates requests for GetSubscriberProfileitems
func NewGetSubscriberProfileitemsRequest(server string, params *GetSubscriberProfileitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/subscriberprofiles")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "profile_set_id", params.ProfileSetId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "name", params.Name); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewSubscriberProfileRequest calls the generic CreateanewSubscriberProfile builder with application/json body
func NewCreateanewSubscriberProfileRequest(server string, body CreateanewSubscriberProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewSubscriberProfileRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewSubscriberProfileRequestWithBody generates requests for CreateanewSubscriberProfile with any type of body
func NewCreateanewSubscriberProfileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/subscriberprofiles")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteaspecificSubscriberProfileRequest generates requests for DeleteaspecificSubscriberProfile
func NewDeleteaspecificSubscriberProfileRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/subscriberprofiles/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificSubscriberProfileRequest generates requests for GetaspecificSubscriberProfile
func NewGetaspecificSubscriberProfileRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/subscriberprofiles/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificSubscriberProfileRequestWithBody generates requests for ChangeaspecificSubscriberProfile with any type of body
func NewChangeaspecificSubscriberProfileRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/subscriberprofiles/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificSubscriberProfileRequest calls the generic ReplacechangeaspecificSubscriberProfile builder with application/json body
func NewReplacechangeaspecificSubscriberProfileRequest(server string, id string, body ReplacechangeaspecificSubscriberProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificSubscriberProfileRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificSubscriberProfileRequestWithBody generates requests for ReplacechangeaspecificSubscriberProfile with any type of body
func NewReplacechangeaspecificSubscriberProfileRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/subscriberprofiles/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetSubscriberProfileSetitemsRequest generates requests for GetSubscriberProfileSetitems
func NewGetSubscriberProfileSetitemsRequest(server string, params *GetSubscriberProfileSetitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/subscriberprofilesets")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "reseller_id", params.ResellerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "name", params.Name); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewSubscriberProfileSetRequest calls the generic CreateanewSubscriberProfileSet builder with application/json body
func NewCreateanewSubscriberProfileSetRequest(server string, body CreateanewSubscriberProfileSetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewSubscriberProfileSetRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewSubscriberProfileSetRequestWithBody generates requests for CreateanewSubscriberProfileSet with any type of body
func NewCreateanewSubscriberProfileSetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/subscriberprofilesets")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteaspecificSubscriberProfileSetRequest generates requests for DeleteaspecificSubscriberProfileSet
func NewDeleteaspecificSubscriberProfileSetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/subscriberprofilesets/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificSubscriberProfileSetRequest generates requests for GetaspecificSubscriberProfileSet
func NewGetaspecificSubscriberProfileSetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/subscriberprofilesets/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificSubscriberProfileSetRequestWithBody generates requests for ChangeaspecificSubscriberProfileSet with any type of body
func NewChangeaspecificSubscriberProfileSetRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/subscriberprofilesets/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificSubscriberProfileSetRequest calls the generic ReplacechangeaspecificSubscriberProfileSet builder with application/json body
func NewReplacechangeaspecificSubscriberProfileSetRequest(server string, id string, body ReplacechangeaspecificSubscriberProfileSetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificSubscriberProfileSetRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificSubscriberProfileSetRequestWithBody generates requests for ReplacechangeaspecificSubscriberProfileSet with any type of body
func NewReplacechangeaspecificSubscriberProfileSetRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/subscriberprofilesets/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetSubscriberRegistrationitemsRequest generates requests for GetSubscriberRegistrationitems
func NewGetSubscriberRegistrationitemsRequest(server string, params *GetSubscriberRegistrationitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/subscriberregistrations")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "subscriber_id", params.SubscriberId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewSubscriberRegistrationRequest calls the generic CreateanewSubscriberRegistration builder with application/json body
func NewCreateanewSubscriberRegistrationRequest(server string, body CreateanewSubscriberRegistrationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewSubscriberRegistrationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewSubscriberRegistrationRequestWithBody generates requests for CreateanewSubscriberRegistration with any type of body
func NewCreateanewSubscriberRegistrationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/subscriberregistrations")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteaspecificSubscriberRegistrationRequest generates requests for DeleteaspecificSubscriberRegistration
func NewDeleteaspecificSubscriberRegistrationRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/subscriberregistrations/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificSubscriberRegistrationRequest generates requests for GetaspecificSubscriberRegistration
func NewGetaspecificSubscriberRegistrationRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/subscriberregistrations/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificSubscriberRegistrationRequestWithBody generates requests for ChangeaspecificSubscriberRegistration with any type of body
func NewChangeaspecificSubscriberRegistrationRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/subscriberregistrations/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificSubscriberRegistrationRequest calls the generic ReplacechangeaspecificSubscriberRegistration builder with application/json body
func NewReplacechangeaspecificSubscriberRegistrationRequest(server string, id string, body ReplacechangeaspecificSubscriberRegistrationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificSubscriberRegistrationRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificSubscriberRegistrationRequestWithBody generates requests for ReplacechangeaspecificSubscriberRegistration with any type of body
func NewReplacechangeaspecificSubscriberRegistrationRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/subscriberregistrations/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetSubscriberitemsRequest generates requests for GetSubscriberitems
func NewGetSubscriberitemsRequest(server string, params *GetSubscriberitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/subscribers")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "profile_id", params.ProfileId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "username", params.Username); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "webusername", params.Webusername); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "webpassword", params.Webpassword); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "domain", params.Domain); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "customer_id", params.CustomerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "customer_external_id", params.CustomerExternalId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "subscriber_external_id", params.SubscriberExternalId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "is_pbx_group", params.IsPbxGroup); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "is_admin", params.IsAdmin); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "is_pbx_pilot", params.IsPbxPilot); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "alias", params.Alias); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "reseller_id", params.ResellerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "contact_id", params.ContactId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "create_timestamp_gt", params.CreateTimestampGt); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "create_timestamp_lt", params.CreateTimestampLt); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "modify_timestamp_gt", params.ModifyTimestampGt); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "modify_timestamp_lt", params.ModifyTimestampLt); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewSubscriberRequest calls the generic CreateanewSubscriber builder with application/json body
func NewCreateanewSubscriberRequest(server string, body CreateanewSubscriberJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewSubscriberRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewSubscriberRequestWithBody generates requests for CreateanewSubscriber with any type of body
func NewCreateanewSubscriberRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/subscribers")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteaspecificSubscriberRequest generates requests for DeleteaspecificSubscriber
func NewDeleteaspecificSubscriberRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/subscribers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificSubscriberRequest generates requests for GetaspecificSubscriber
func NewGetaspecificSubscriberRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/subscribers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificSubscriberRequestWithBody generates requests for ChangeaspecificSubscriber with any type of body
func NewChangeaspecificSubscriberRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/subscribers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificSubscriberRequest calls the generic ReplacechangeaspecificSubscriber builder with application/json body
func NewReplacechangeaspecificSubscriberRequest(server string, id string, body ReplacechangeaspecificSubscriberJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificSubscriberRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificSubscriberRequestWithBody generates requests for ReplacechangeaspecificSubscriber with any type of body
func NewReplacechangeaspecificSubscriberRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/subscribers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetSystemContactitemsRequest generates requests for GetSystemContactitems
func NewGetSystemContactitemsRequest(server string, params *GetSystemContactitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/systemcontacts")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "email", params.Email); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewSystemContactRequest calls the generic CreateanewSystemContact builder with application/json body
func NewCreateanewSystemContactRequest(server string, body CreateanewSystemContactJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewSystemContactRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewSystemContactRequestWithBody generates requests for CreateanewSystemContact with any type of body
func NewCreateanewSystemContactRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/systemcontacts")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteaspecificSystemContactRequest generates requests for DeleteaspecificSystemContact
func NewDeleteaspecificSystemContactRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/systemcontacts/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificSystemContactRequest generates requests for GetaspecificSystemContact
func NewGetaspecificSystemContactRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/systemcontacts/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificSystemContactRequestWithBody generates requests for ChangeaspecificSystemContact with any type of body
func NewChangeaspecificSystemContactRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/systemcontacts/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificSystemContactRequest calls the generic ReplacechangeaspecificSystemContact builder with application/json body
func NewReplacechangeaspecificSystemContactRequest(server string, id string, body ReplacechangeaspecificSystemContactJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificSystemContactRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificSystemContactRequestWithBody generates requests for ReplacechangeaspecificSystemContact with any type of body
func NewReplacechangeaspecificSystemContactRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/systemcontacts/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewCreateanewTopupCashRequest calls the generic CreateanewTopupCash builder with application/json body
func NewCreateanewTopupCashRequest(server string, body CreateanewTopupCashJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewTopupCashRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewTopupCashRequestWithBody generates requests for CreateanewTopupCash with any type of body
func NewCreateanewTopupCashRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/topupcash")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetTopupLogitemsRequest generates requests for GetTopupLogitems
func NewGetTopupLogitemsRequest(server string, params *GetTopupLogitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/topuplogs")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "reseller_id", params.ResellerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "request_token", params.RequestToken); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "timestamp_from", params.TimestampFrom); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "timestamp_to", params.TimestampTo); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "contract_id", params.ContractId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "subscriber_id", params.SubscriberId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "voucher_id", params.VoucherId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "outcome", params.Outcome); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "amount_above", params.AmountAbove); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "amount_below", params.AmountBelow); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificTopupLogRequest generates requests for GetaspecificTopupLog
func NewGetaspecificTopupLogRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/topuplogs/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewTopupVoucherRequest calls the generic CreateanewTopupVoucher builder with application/json body
func NewCreateanewTopupVoucherRequest(server string, body CreateanewTopupVoucherJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewTopupVoucherRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewTopupVoucherRequestWithBody generates requests for CreateanewTopupVoucher with any type of body
func NewCreateanewTopupVoucherRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/topupvouchers")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetTrustedSourceitemsRequest generates requests for GetTrustedSourceitems
func NewGetTrustedSourceitemsRequest(server string, params *GetTrustedSourceitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/trustedsources")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "subscriber_id", params.SubscriberId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewTrustedSourceRequest calls the generic CreateanewTrustedSource builder with application/json body
func NewCreateanewTrustedSourceRequest(server string, body CreateanewTrustedSourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewTrustedSourceRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewTrustedSourceRequestWithBody generates requests for CreateanewTrustedSource with any type of body
func NewCreateanewTrustedSourceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/trustedsources")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteaspecificTrustedSourceRequest generates requests for DeleteaspecificTrustedSource
func NewDeleteaspecificTrustedSourceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/trustedsources/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificTrustedSourceRequest generates requests for GetaspecificTrustedSource
func NewGetaspecificTrustedSourceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/trustedsources/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificTrustedSourceRequestWithBody generates requests for ChangeaspecificTrustedSource with any type of body
func NewChangeaspecificTrustedSourceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/trustedsources/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificTrustedSourceRequest calls the generic ReplacechangeaspecificTrustedSource builder with application/json body
func NewReplacechangeaspecificTrustedSourceRequest(server string, id string, body ReplacechangeaspecificTrustedSourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificTrustedSourceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificTrustedSourceRequestWithBody generates requests for ReplacechangeaspecificTrustedSource with any type of body
func NewReplacechangeaspecificTrustedSourceRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/trustedsources/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetUpnRewriteSetitemsRequest generates requests for GetUpnRewriteSetitems
func NewGetUpnRewriteSetitemsRequest(server string, params *GetUpnRewriteSetitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/upnrewritesets")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "subscriber_id", params.SubscriberId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewUpnRewriteSetRequest calls the generic CreateanewUpnRewriteSet builder with application/json body
func NewCreateanewUpnRewriteSetRequest(server string, body CreateanewUpnRewriteSetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewUpnRewriteSetRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewUpnRewriteSetRequestWithBody generates requests for CreateanewUpnRewriteSet with any type of body
func NewCreateanewUpnRewriteSetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/upnrewritesets")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteaspecificUpnRewriteSetRequest generates requests for DeleteaspecificUpnRewriteSet
func NewDeleteaspecificUpnRewriteSetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/upnrewritesets/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificUpnRewriteSetRequest generates requests for GetaspecificUpnRewriteSet
func NewGetaspecificUpnRewriteSetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/upnrewritesets/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificUpnRewriteSetRequestWithBody generates requests for ChangeaspecificUpnRewriteSet with any type of body
func NewChangeaspecificUpnRewriteSetRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/upnrewritesets/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificUpnRewriteSetRequest calls the generic ReplacechangeaspecificUpnRewriteSet builder with application/json body
func NewReplacechangeaspecificUpnRewriteSetRequest(server string, id string, body ReplacechangeaspecificUpnRewriteSetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificUpnRewriteSetRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificUpnRewriteSetRequestWithBody generates requests for ReplacechangeaspecificUpnRewriteSet with any type of body
func NewReplacechangeaspecificUpnRewriteSetRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/upnrewritesets/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetVoicemailGreetingitemsRequest generates requests for GetVoicemailGreetingitems
func NewGetVoicemailGreetingitemsRequest(server string, params *GetVoicemailGreetingitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/voicemailgreetings")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "subscriber_id", params.SubscriberId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "type", params.Type); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewVoicemailGreetingRequest calls the generic CreateanewVoicemailGreeting builder with application/json body
func NewCreateanewVoicemailGreetingRequest(server string, body CreateanewVoicemailGreetingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewVoicemailGreetingRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewVoicemailGreetingRequestWithBody generates requests for CreateanewVoicemailGreeting with any type of body
func NewCreateanewVoicemailGreetingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/voicemailgreetings")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteaspecificVoicemailGreetingRequest generates requests for DeleteaspecificVoicemailGreeting
func NewDeleteaspecificVoicemailGreetingRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/voicemailgreetings/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificVoicemailGreetingRequest generates requests for GetaspecificVoicemailGreeting
func NewGetaspecificVoicemailGreetingRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/voicemailgreetings/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplacechangeaspecificVoicemailGreetingRequest calls the generic ReplacechangeaspecificVoicemailGreeting builder with application/json body
func NewReplacechangeaspecificVoicemailGreetingRequest(server string, id string, body ReplacechangeaspecificVoicemailGreetingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificVoicemailGreetingRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificVoicemailGreetingRequestWithBody generates requests for ReplacechangeaspecificVoicemailGreeting with any type of body
func NewReplacechangeaspecificVoicemailGreetingRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/voicemailgreetings/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetaspecificVoicemailRecordingRequest generates requests for GetaspecificVoicemailRecording
func NewGetaspecificVoicemailRecordingRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/voicemailrecordings/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVoicemailitemsRequest generates requests for GetVoicemailitems
func NewGetVoicemailitemsRequest(server string, params *GetVoicemailitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/voicemails")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "tz", params.Tz); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "use_owner_tz", params.UseOwnerTz); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "subscriber_id", params.SubscriberId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "folder", params.Folder); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteaspecificVoicemailRequest generates requests for DeleteaspecificVoicemail
func NewDeleteaspecificVoicemailRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/voicemails/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificVoicemailRequest generates requests for GetaspecificVoicemail
func NewGetaspecificVoicemailRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/voicemails/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificVoicemailRequestWithBody generates requests for ChangeaspecificVoicemail with any type of body
func NewChangeaspecificVoicemailRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/voicemails/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificVoicemailRequest calls the generic ReplacechangeaspecificVoicemail builder with application/json body
func NewReplacechangeaspecificVoicemailRequest(server string, id string, body ReplacechangeaspecificVoicemailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificVoicemailRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificVoicemailRequestWithBody generates requests for ReplacechangeaspecificVoicemail with any type of body
func NewReplacechangeaspecificVoicemailRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/voicemails/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetVoicemailSettingitemsRequest generates requests for GetVoicemailSettingitems
func NewGetVoicemailSettingitemsRequest(server string, params *GetVoicemailSettingitemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/voicemailsettings")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "subscriber_id", params.SubscriberId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificVoicemailSettingRequest generates requests for GetaspecificVoicemailSetting
func NewGetaspecificVoicemailSettingRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/voicemailsettings/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificVoicemailSettingRequestWithBody generates requests for ChangeaspecificVoicemailSetting with any type of body
func NewChangeaspecificVoicemailSettingRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/voicemailsettings/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificVoicemailSettingRequest calls the generic ReplacechangeaspecificVoicemailSetting builder with application/json body
func NewReplacechangeaspecificVoicemailSettingRequest(server string, id string, body ReplacechangeaspecificVoicemailSettingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificVoicemailSettingRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificVoicemailSettingRequestWithBody generates requests for ReplacechangeaspecificVoicemailSetting with any type of body
func NewReplacechangeaspecificVoicemailSettingRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/voicemailsettings/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetVoucheritemsRequest generates requests for GetVoucheritems
func NewGetVoucheritemsRequest(server string, params *GetVoucheritemsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/vouchers")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "reseller_id", params.ResellerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "package_id", params.PackageId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by", params.OrderBy); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "order_by_direction", params.OrderByDirection); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "page", params.Page); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParam("form", true, "rows", params.Rows); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateanewVoucherRequest calls the generic CreateanewVoucher builder with application/json body
func NewCreateanewVoucherRequest(server string, body CreateanewVoucherJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateanewVoucherRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateanewVoucherRequestWithBody generates requests for CreateanewVoucher with any type of body
func NewCreateanewVoucherRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/vouchers")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteaspecificVoucherRequest generates requests for DeleteaspecificVoucher
func NewDeleteaspecificVoucherRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/vouchers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetaspecificVoucherRequest generates requests for GetaspecificVoucher
func NewGetaspecificVoucherRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/vouchers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeaspecificVoucherRequestWithBody generates requests for ChangeaspecificVoucher with any type of body
func NewChangeaspecificVoucherRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/vouchers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReplacechangeaspecificVoucherRequest calls the generic ReplacechangeaspecificVoucher builder with application/json body
func NewReplacechangeaspecificVoucherRequest(server string, id string, body ReplacechangeaspecificVoucherJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplacechangeaspecificVoucherRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReplacechangeaspecificVoucherRequestWithBody generates requests for ReplacechangeaspecificVoucher with any type of body
func NewReplacechangeaspecificVoucherRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/vouchers/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreateanewAdminCert request  with any body
	CreateanewAdminCertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewAdminCertResponse, error)

	CreateanewAdminCertWithResponse(ctx context.Context, body CreateanewAdminCertJSONRequestBody) (*CreateanewAdminCertResponse, error)

	// GetAdminitems request
	GetAdminitemsWithResponse(ctx context.Context, params *GetAdminitemsParams) (*GetAdminitemsResponse, error)

	// CreateanewAdmin request  with any body
	CreateanewAdminWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewAdminResponse, error)

	CreateanewAdminWithResponse(ctx context.Context, body CreateanewAdminJSONRequestBody) (*CreateanewAdminResponse, error)

	// DeleteaspecificAdmin request
	DeleteaspecificAdminWithResponse(ctx context.Context, id string) (*DeleteaspecificAdminResponse, error)

	// GetaspecificAdmin request
	GetaspecificAdminWithResponse(ctx context.Context, id string) (*GetaspecificAdminResponse, error)

	// CreateanewApplyRewrite request  with any body
	CreateanewApplyRewriteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewApplyRewriteResponse, error)

	CreateanewApplyRewriteWithResponse(ctx context.Context, body CreateanewApplyRewriteJSONRequestBody) (*CreateanewApplyRewriteResponse, error)

	// GetAutoAttendantitems request
	GetAutoAttendantitemsWithResponse(ctx context.Context, params *GetAutoAttendantitemsParams) (*GetAutoAttendantitemsResponse, error)

	// GetaspecificAutoAttendant request
	GetaspecificAutoAttendantWithResponse(ctx context.Context, id string) (*GetaspecificAutoAttendantResponse, error)

	// ChangeaspecificAutoAttendant request  with any body
	ChangeaspecificAutoAttendantWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificAutoAttendantResponse, error)

	// ReplacechangeaspecificAutoAttendant request  with any body
	ReplacechangeaspecificAutoAttendantWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificAutoAttendantResponse, error)

	ReplacechangeaspecificAutoAttendantWithResponse(ctx context.Context, id string, body ReplacechangeaspecificAutoAttendantJSONRequestBody) (*ReplacechangeaspecificAutoAttendantResponse, error)

	// GetBalanceIntervalitems request
	GetBalanceIntervalitemsWithResponse(ctx context.Context, params *GetBalanceIntervalitemsParams) (*GetBalanceIntervalitemsResponse, error)

	// GetaspecificBalanceInterval request
	GetaspecificBalanceIntervalWithResponse(ctx context.Context, id string) (*GetaspecificBalanceIntervalResponse, error)

	// GetBannedIpitems request
	GetBannedIpitemsWithResponse(ctx context.Context, params *GetBannedIpitemsParams) (*GetBannedIpitemsResponse, error)

	// DeleteaspecificBannedIp request
	DeleteaspecificBannedIpWithResponse(ctx context.Context, id string) (*DeleteaspecificBannedIpResponse, error)

	// GetaspecificBannedIp request
	GetaspecificBannedIpWithResponse(ctx context.Context, id string) (*GetaspecificBannedIpResponse, error)

	// GetBannedUseritems request
	GetBannedUseritemsWithResponse(ctx context.Context, params *GetBannedUseritemsParams) (*GetBannedUseritemsResponse, error)

	// DeleteaspecificBannedUser request
	DeleteaspecificBannedUserWithResponse(ctx context.Context, id string) (*DeleteaspecificBannedUserResponse, error)

	// GetaspecificBannedUser request
	GetaspecificBannedUserWithResponse(ctx context.Context, id string) (*GetaspecificBannedUserResponse, error)

	// GetBillingFeeitems request
	GetBillingFeeitemsWithResponse(ctx context.Context, params *GetBillingFeeitemsParams) (*GetBillingFeeitemsResponse, error)

	// CreateanewBillingFee request  with any body
	CreateanewBillingFeeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewBillingFeeResponse, error)

	CreateanewBillingFeeWithResponse(ctx context.Context, body CreateanewBillingFeeJSONRequestBody) (*CreateanewBillingFeeResponse, error)

	// DeleteaspecificBillingFee request
	DeleteaspecificBillingFeeWithResponse(ctx context.Context, id string) (*DeleteaspecificBillingFeeResponse, error)

	// GetaspecificBillingFee request
	GetaspecificBillingFeeWithResponse(ctx context.Context, id string) (*GetaspecificBillingFeeResponse, error)

	// ChangeaspecificBillingFee request  with any body
	ChangeaspecificBillingFeeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificBillingFeeResponse, error)

	// ReplacechangeaspecificBillingFee request  with any body
	ReplacechangeaspecificBillingFeeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificBillingFeeResponse, error)

	ReplacechangeaspecificBillingFeeWithResponse(ctx context.Context, id string, body ReplacechangeaspecificBillingFeeJSONRequestBody) (*ReplacechangeaspecificBillingFeeResponse, error)

	// GetBillingNetworkitems request
	GetBillingNetworkitemsWithResponse(ctx context.Context, params *GetBillingNetworkitemsParams) (*GetBillingNetworkitemsResponse, error)

	// CreateanewBillingNetwork request  with any body
	CreateanewBillingNetworkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewBillingNetworkResponse, error)

	CreateanewBillingNetworkWithResponse(ctx context.Context, body CreateanewBillingNetworkJSONRequestBody) (*CreateanewBillingNetworkResponse, error)

	// GetaspecificBillingNetwork request
	GetaspecificBillingNetworkWithResponse(ctx context.Context, id string) (*GetaspecificBillingNetworkResponse, error)

	// ChangeaspecificBillingNetwork request  with any body
	ChangeaspecificBillingNetworkWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificBillingNetworkResponse, error)

	// ReplacechangeaspecificBillingNetwork request  with any body
	ReplacechangeaspecificBillingNetworkWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificBillingNetworkResponse, error)

	ReplacechangeaspecificBillingNetworkWithResponse(ctx context.Context, id string, body ReplacechangeaspecificBillingNetworkJSONRequestBody) (*ReplacechangeaspecificBillingNetworkResponse, error)

	// GetBillingProfileitems request
	GetBillingProfileitemsWithResponse(ctx context.Context, params *GetBillingProfileitemsParams) (*GetBillingProfileitemsResponse, error)

	// CreateanewBillingProfile request  with any body
	CreateanewBillingProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewBillingProfileResponse, error)

	CreateanewBillingProfileWithResponse(ctx context.Context, body CreateanewBillingProfileJSONRequestBody) (*CreateanewBillingProfileResponse, error)

	// GetaspecificBillingProfile request
	GetaspecificBillingProfileWithResponse(ctx context.Context, id string) (*GetaspecificBillingProfileResponse, error)

	// ChangeaspecificBillingProfile request  with any body
	ChangeaspecificBillingProfileWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificBillingProfileResponse, error)

	// ReplacechangeaspecificBillingProfile request  with any body
	ReplacechangeaspecificBillingProfileWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificBillingProfileResponse, error)

	ReplacechangeaspecificBillingProfileWithResponse(ctx context.Context, id string, body ReplacechangeaspecificBillingProfileJSONRequestBody) (*ReplacechangeaspecificBillingProfileResponse, error)

	// GetBillingZoneitems request
	GetBillingZoneitemsWithResponse(ctx context.Context, params *GetBillingZoneitemsParams) (*GetBillingZoneitemsResponse, error)

	// CreateanewBillingZone request  with any body
	CreateanewBillingZoneWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewBillingZoneResponse, error)

	CreateanewBillingZoneWithResponse(ctx context.Context, body CreateanewBillingZoneJSONRequestBody) (*CreateanewBillingZoneResponse, error)

	// DeleteaspecificBillingZone request
	DeleteaspecificBillingZoneWithResponse(ctx context.Context, id string) (*DeleteaspecificBillingZoneResponse, error)

	// GetaspecificBillingZone request
	GetaspecificBillingZoneWithResponse(ctx context.Context, id string) (*GetaspecificBillingZoneResponse, error)

	// ChangeaspecificBillingZone request  with any body
	ChangeaspecificBillingZoneWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificBillingZoneResponse, error)

	// ReplacechangeaspecificBillingZone request  with any body
	ReplacechangeaspecificBillingZoneWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificBillingZoneResponse, error)

	ReplacechangeaspecificBillingZoneWithResponse(ctx context.Context, id string, body ReplacechangeaspecificBillingZoneJSONRequestBody) (*ReplacechangeaspecificBillingZoneResponse, error)

	// CreateanewCallControl request  with any body
	CreateanewCallControlWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewCallControlResponse, error)

	CreateanewCallControlWithResponse(ctx context.Context, body CreateanewCallControlJSONRequestBody) (*CreateanewCallControlResponse, error)

	// GetCallForwarditems request
	GetCallForwarditemsWithResponse(ctx context.Context, params *GetCallForwarditemsParams) (*GetCallForwarditemsResponse, error)

	// DeleteaspecificCallForward request
	DeleteaspecificCallForwardWithResponse(ctx context.Context, id string) (*DeleteaspecificCallForwardResponse, error)

	// GetaspecificCallForward request
	GetaspecificCallForwardWithResponse(ctx context.Context, id string) (*GetaspecificCallForwardResponse, error)

	// ChangeaspecificCallForward request  with any body
	ChangeaspecificCallForwardWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificCallForwardResponse, error)

	// ReplacechangeaspecificCallForward request  with any body
	ReplacechangeaspecificCallForwardWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificCallForwardResponse, error)

	ReplacechangeaspecificCallForwardWithResponse(ctx context.Context, id string, body ReplacechangeaspecificCallForwardJSONRequestBody) (*ReplacechangeaspecificCallForwardResponse, error)

	// GetCallListitems request
	GetCallListitemsWithResponse(ctx context.Context, params *GetCallListitemsParams) (*GetCallListitemsResponse, error)

	// GetaspecificCallList request
	GetaspecificCallListWithResponse(ctx context.Context, id string) (*GetaspecificCallListResponse, error)

	// GetCallQueueitems request
	GetCallQueueitemsWithResponse(ctx context.Context, params *GetCallQueueitemsParams) (*GetCallQueueitemsResponse, error)

	// GetaspecificCallQueue request
	GetaspecificCallQueueWithResponse(ctx context.Context, id string) (*GetaspecificCallQueueResponse, error)

	// GetaspecificCallRecordingFile request
	GetaspecificCallRecordingFileWithResponse(ctx context.Context, id string) (*GetaspecificCallRecordingFileResponse, error)

	// GetCallRecordingitems request
	GetCallRecordingitemsWithResponse(ctx context.Context, params *GetCallRecordingitemsParams) (*GetCallRecordingitemsResponse, error)

	// DeleteaspecificCallRecording request
	DeleteaspecificCallRecordingWithResponse(ctx context.Context, id string) (*DeleteaspecificCallRecordingResponse, error)

	// GetaspecificCallRecording request
	GetaspecificCallRecordingWithResponse(ctx context.Context, id string) (*GetaspecificCallRecordingResponse, error)

	// GetCallRecordingStreamitems request
	GetCallRecordingStreamitemsWithResponse(ctx context.Context, params *GetCallRecordingStreamitemsParams) (*GetCallRecordingStreamitemsResponse, error)

	// DeleteaspecificCallRecordingStream request
	DeleteaspecificCallRecordingStreamWithResponse(ctx context.Context, id string) (*DeleteaspecificCallRecordingStreamResponse, error)

	// GetaspecificCallRecordingStream request
	GetaspecificCallRecordingStreamWithResponse(ctx context.Context, id string) (*GetaspecificCallRecordingStreamResponse, error)

	// GetCallitems request
	GetCallitemsWithResponse(ctx context.Context, params *GetCallitemsParams) (*GetCallitemsResponse, error)

	// GetaspecificCall request
	GetaspecificCallWithResponse(ctx context.Context, id string) (*GetaspecificCallResponse, error)

	// GetCapabilityitems request
	GetCapabilityitemsWithResponse(ctx context.Context, params *GetCapabilityitemsParams) (*GetCapabilityitemsResponse, error)

	// GetaspecificCapability request
	GetaspecificCapabilityWithResponse(ctx context.Context, id string) (*GetaspecificCapabilityResponse, error)

	// GetCCMapEntryitems request
	GetCCMapEntryitemsWithResponse(ctx context.Context, params *GetCCMapEntryitemsParams) (*GetCCMapEntryitemsResponse, error)

	// DeleteaspecificCCMapEntry request
	DeleteaspecificCCMapEntryWithResponse(ctx context.Context, id string) (*DeleteaspecificCCMapEntryResponse, error)

	// GetaspecificCCMapEntry request
	GetaspecificCCMapEntryWithResponse(ctx context.Context, id string) (*GetaspecificCCMapEntryResponse, error)

	// ChangeaspecificCCMapEntry request  with any body
	ChangeaspecificCCMapEntryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificCCMapEntryResponse, error)

	// ReplacechangeaspecificCCMapEntry request  with any body
	ReplacechangeaspecificCCMapEntryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificCCMapEntryResponse, error)

	ReplacechangeaspecificCCMapEntryWithResponse(ctx context.Context, id string, body ReplacechangeaspecificCCMapEntryJSONRequestBody) (*ReplacechangeaspecificCCMapEntryResponse, error)

	// GetCFBNumberSetitems request
	GetCFBNumberSetitemsWithResponse(ctx context.Context, params *GetCFBNumberSetitemsParams) (*GetCFBNumberSetitemsResponse, error)

	// CreateanewCFBNumberSet request  with any body
	CreateanewCFBNumberSetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewCFBNumberSetResponse, error)

	CreateanewCFBNumberSetWithResponse(ctx context.Context, body CreateanewCFBNumberSetJSONRequestBody) (*CreateanewCFBNumberSetResponse, error)

	// DeleteaspecificCFBNumberSet request
	DeleteaspecificCFBNumberSetWithResponse(ctx context.Context, id string) (*DeleteaspecificCFBNumberSetResponse, error)

	// GetaspecificCFBNumberSet request
	GetaspecificCFBNumberSetWithResponse(ctx context.Context, id string) (*GetaspecificCFBNumberSetResponse, error)

	// ChangeaspecificCFBNumberSet request  with any body
	ChangeaspecificCFBNumberSetWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificCFBNumberSetResponse, error)

	// ReplacechangeaspecificCFBNumberSet request  with any body
	ReplacechangeaspecificCFBNumberSetWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificCFBNumberSetResponse, error)

	ReplacechangeaspecificCFBNumberSetWithResponse(ctx context.Context, id string, body ReplacechangeaspecificCFBNumberSetJSONRequestBody) (*ReplacechangeaspecificCFBNumberSetResponse, error)

	// GetCFDestinationSetitems request
	GetCFDestinationSetitemsWithResponse(ctx context.Context, params *GetCFDestinationSetitemsParams) (*GetCFDestinationSetitemsResponse, error)

	// CreateanewCFDestinationSet request  with any body
	CreateanewCFDestinationSetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewCFDestinationSetResponse, error)

	CreateanewCFDestinationSetWithResponse(ctx context.Context, body CreateanewCFDestinationSetJSONRequestBody) (*CreateanewCFDestinationSetResponse, error)

	// DeleteaspecificCFDestinationSet request
	DeleteaspecificCFDestinationSetWithResponse(ctx context.Context, id string) (*DeleteaspecificCFDestinationSetResponse, error)

	// GetaspecificCFDestinationSet request
	GetaspecificCFDestinationSetWithResponse(ctx context.Context, id string) (*GetaspecificCFDestinationSetResponse, error)

	// ChangeaspecificCFDestinationSet request  with any body
	ChangeaspecificCFDestinationSetWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificCFDestinationSetResponse, error)

	// ReplacechangeaspecificCFDestinationSet request  with any body
	ReplacechangeaspecificCFDestinationSetWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificCFDestinationSetResponse, error)

	ReplacechangeaspecificCFDestinationSetWithResponse(ctx context.Context, id string, body ReplacechangeaspecificCFDestinationSetJSONRequestBody) (*ReplacechangeaspecificCFDestinationSetResponse, error)

	// GetCFMappingitems request
	GetCFMappingitemsWithResponse(ctx context.Context, params *GetCFMappingitemsParams) (*GetCFMappingitemsResponse, error)

	// GetaspecificCFMapping request
	GetaspecificCFMappingWithResponse(ctx context.Context, id string) (*GetaspecificCFMappingResponse, error)

	// ChangeaspecificCFMapping request  with any body
	ChangeaspecificCFMappingWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificCFMappingResponse, error)

	// ReplacechangeaspecificCFMapping request  with any body
	ReplacechangeaspecificCFMappingWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificCFMappingResponse, error)

	ReplacechangeaspecificCFMappingWithResponse(ctx context.Context, id string, body ReplacechangeaspecificCFMappingJSONRequestBody) (*ReplacechangeaspecificCFMappingResponse, error)

	// GetCFSourceSetitems request
	GetCFSourceSetitemsWithResponse(ctx context.Context, params *GetCFSourceSetitemsParams) (*GetCFSourceSetitemsResponse, error)

	// CreateanewCFSourceSet request  with any body
	CreateanewCFSourceSetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewCFSourceSetResponse, error)

	CreateanewCFSourceSetWithResponse(ctx context.Context, body CreateanewCFSourceSetJSONRequestBody) (*CreateanewCFSourceSetResponse, error)

	// DeleteaspecificCFSourceSet request
	DeleteaspecificCFSourceSetWithResponse(ctx context.Context, id string) (*DeleteaspecificCFSourceSetResponse, error)

	// GetaspecificCFSourceSet request
	GetaspecificCFSourceSetWithResponse(ctx context.Context, id string) (*GetaspecificCFSourceSetResponse, error)

	// ChangeaspecificCFSourceSet request  with any body
	ChangeaspecificCFSourceSetWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificCFSourceSetResponse, error)

	// ReplacechangeaspecificCFSourceSet request  with any body
	ReplacechangeaspecificCFSourceSetWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificCFSourceSetResponse, error)

	ReplacechangeaspecificCFSourceSetWithResponse(ctx context.Context, id string, body ReplacechangeaspecificCFSourceSetJSONRequestBody) (*ReplacechangeaspecificCFSourceSetResponse, error)

	// GetCFTimeSetitems request
	GetCFTimeSetitemsWithResponse(ctx context.Context, params *GetCFTimeSetitemsParams) (*GetCFTimeSetitemsResponse, error)

	// CreateanewCFTimeSet request  with any body
	CreateanewCFTimeSetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewCFTimeSetResponse, error)

	CreateanewCFTimeSetWithResponse(ctx context.Context, body CreateanewCFTimeSetJSONRequestBody) (*CreateanewCFTimeSetResponse, error)

	// DeleteaspecificCFTimeSet request
	DeleteaspecificCFTimeSetWithResponse(ctx context.Context, id string) (*DeleteaspecificCFTimeSetResponse, error)

	// GetaspecificCFTimeSet request
	GetaspecificCFTimeSetWithResponse(ctx context.Context, id string) (*GetaspecificCFTimeSetResponse, error)

	// ChangeaspecificCFTimeSet request  with any body
	ChangeaspecificCFTimeSetWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificCFTimeSetResponse, error)

	// ReplacechangeaspecificCFTimeSet request  with any body
	ReplacechangeaspecificCFTimeSetWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificCFTimeSetResponse, error)

	ReplacechangeaspecificCFTimeSetWithResponse(ctx context.Context, id string, body ReplacechangeaspecificCFTimeSetJSONRequestBody) (*ReplacechangeaspecificCFTimeSetResponse, error)

	// GetContractitems request
	GetContractitemsWithResponse(ctx context.Context, params *GetContractitemsParams) (*GetContractitemsResponse, error)

	// CreateanewContract request  with any body
	CreateanewContractWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewContractResponse, error)

	CreateanewContractWithResponse(ctx context.Context, body CreateanewContractJSONRequestBody) (*CreateanewContractResponse, error)

	// GetaspecificContract request
	GetaspecificContractWithResponse(ctx context.Context, id string) (*GetaspecificContractResponse, error)

	// ChangeaspecificContract request  with any body
	ChangeaspecificContractWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificContractResponse, error)

	// ReplacechangeaspecificContract request  with any body
	ReplacechangeaspecificContractWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificContractResponse, error)

	ReplacechangeaspecificContractWithResponse(ctx context.Context, id string, body ReplacechangeaspecificContractJSONRequestBody) (*ReplacechangeaspecificContractResponse, error)

	// GetConversationitems request
	GetConversationitemsWithResponse(ctx context.Context, params *GetConversationitemsParams) (*GetConversationitemsResponse, error)

	// GetaspecificConversation request
	GetaspecificConversationWithResponse(ctx context.Context, id string) (*GetaspecificConversationResponse, error)

	// GetCustomerBalanceitems request
	GetCustomerBalanceitemsWithResponse(ctx context.Context, params *GetCustomerBalanceitemsParams) (*GetCustomerBalanceitemsResponse, error)

	// GetaspecificCustomerBalance request
	GetaspecificCustomerBalanceWithResponse(ctx context.Context, id string) (*GetaspecificCustomerBalanceResponse, error)

	// ChangeaspecificCustomerBalance request  with any body
	ChangeaspecificCustomerBalanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificCustomerBalanceResponse, error)

	// ReplacechangeaspecificCustomerBalance request  with any body
	ReplacechangeaspecificCustomerBalanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificCustomerBalanceResponse, error)

	ReplacechangeaspecificCustomerBalanceWithResponse(ctx context.Context, id string, body ReplacechangeaspecificCustomerBalanceJSONRequestBody) (*ReplacechangeaspecificCustomerBalanceResponse, error)

	// GetCustomerContactitems request
	GetCustomerContactitemsWithResponse(ctx context.Context, params *GetCustomerContactitemsParams) (*GetCustomerContactitemsResponse, error)

	// CreateanewCustomerContact request  with any body
	CreateanewCustomerContactWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewCustomerContactResponse, error)

	CreateanewCustomerContactWithResponse(ctx context.Context, body CreateanewCustomerContactJSONRequestBody) (*CreateanewCustomerContactResponse, error)

	// DeleteaspecificCustomerContact request
	DeleteaspecificCustomerContactWithResponse(ctx context.Context, id string) (*DeleteaspecificCustomerContactResponse, error)

	// GetaspecificCustomerContact request
	GetaspecificCustomerContactWithResponse(ctx context.Context, id string) (*GetaspecificCustomerContactResponse, error)

	// ChangeaspecificCustomerContact request  with any body
	ChangeaspecificCustomerContactWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificCustomerContactResponse, error)

	// ReplacechangeaspecificCustomerContact request  with any body
	ReplacechangeaspecificCustomerContactWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificCustomerContactResponse, error)

	ReplacechangeaspecificCustomerContactWithResponse(ctx context.Context, id string, body ReplacechangeaspecificCustomerContactJSONRequestBody) (*ReplacechangeaspecificCustomerContactResponse, error)

	// GetCustomerFraudEventitems request
	GetCustomerFraudEventitemsWithResponse(ctx context.Context, params *GetCustomerFraudEventitemsParams) (*GetCustomerFraudEventitemsResponse, error)

	// GetaspecificCustomerFraudEvent request
	GetaspecificCustomerFraudEventWithResponse(ctx context.Context, id string) (*GetaspecificCustomerFraudEventResponse, error)

	// GetCustomerFraudPreferenceitems request
	GetCustomerFraudPreferenceitemsWithResponse(ctx context.Context, params *GetCustomerFraudPreferenceitemsParams) (*GetCustomerFraudPreferenceitemsResponse, error)

	// GetaspecificCustomerFraudPreference request
	GetaspecificCustomerFraudPreferenceWithResponse(ctx context.Context, id string) (*GetaspecificCustomerFraudPreferenceResponse, error)

	// ChangeaspecificCustomerFraudPreference request  with any body
	ChangeaspecificCustomerFraudPreferenceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificCustomerFraudPreferenceResponse, error)

	// ReplacechangeaspecificCustomerFraudPreference request  with any body
	ReplacechangeaspecificCustomerFraudPreferenceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificCustomerFraudPreferenceResponse, error)

	ReplacechangeaspecificCustomerFraudPreferenceWithResponse(ctx context.Context, id string, body ReplacechangeaspecificCustomerFraudPreferenceJSONRequestBody) (*ReplacechangeaspecificCustomerFraudPreferenceResponse, error)

	// GetCustomerLocationitems request
	GetCustomerLocationitemsWithResponse(ctx context.Context, params *GetCustomerLocationitemsParams) (*GetCustomerLocationitemsResponse, error)

	// CreateanewCustomerLocation request  with any body
	CreateanewCustomerLocationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewCustomerLocationResponse, error)

	CreateanewCustomerLocationWithResponse(ctx context.Context, body CreateanewCustomerLocationJSONRequestBody) (*CreateanewCustomerLocationResponse, error)

	// DeleteaspecificCustomerLocation request
	DeleteaspecificCustomerLocationWithResponse(ctx context.Context, id string) (*DeleteaspecificCustomerLocationResponse, error)

	// GetaspecificCustomerLocation request
	GetaspecificCustomerLocationWithResponse(ctx context.Context, id string) (*GetaspecificCustomerLocationResponse, error)

	// ChangeaspecificCustomerLocation request  with any body
	ChangeaspecificCustomerLocationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificCustomerLocationResponse, error)

	// ReplacechangeaspecificCustomerLocation request  with any body
	ReplacechangeaspecificCustomerLocationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificCustomerLocationResponse, error)

	ReplacechangeaspecificCustomerLocationWithResponse(ctx context.Context, id string, body ReplacechangeaspecificCustomerLocationJSONRequestBody) (*ReplacechangeaspecificCustomerLocationResponse, error)

	// GetCustomerPreferenceitems request
	GetCustomerPreferenceitemsWithResponse(ctx context.Context, params *GetCustomerPreferenceitemsParams) (*GetCustomerPreferenceitemsResponse, error)

	// GetaspecificCustomerPreference request
	GetaspecificCustomerPreferenceWithResponse(ctx context.Context, id string) (*GetaspecificCustomerPreferenceResponse, error)

	// ChangeaspecificCustomerPreference request  with any body
	ChangeaspecificCustomerPreferenceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificCustomerPreferenceResponse, error)

	// ReplacechangeaspecificCustomerPreference request  with any body
	ReplacechangeaspecificCustomerPreferenceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificCustomerPreferenceResponse, error)

	ReplacechangeaspecificCustomerPreferenceWithResponse(ctx context.Context, id string, body ReplacechangeaspecificCustomerPreferenceJSONRequestBody) (*ReplacechangeaspecificCustomerPreferenceResponse, error)

	// GetCustomeritems request
	GetCustomeritemsWithResponse(ctx context.Context, params *GetCustomeritemsParams) (*GetCustomeritemsResponse, error)

	// CreateanewCustomer request  with any body
	CreateanewCustomerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewCustomerResponse, error)

	CreateanewCustomerWithResponse(ctx context.Context, body CreateanewCustomerJSONRequestBody) (*CreateanewCustomerResponse, error)

	// GetaspecificCustomer request
	GetaspecificCustomerWithResponse(ctx context.Context, id string) (*GetaspecificCustomerResponse, error)

	// ChangeaspecificCustomer request  with any body
	ChangeaspecificCustomerWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificCustomerResponse, error)

	// ReplacechangeaspecificCustomer request  with any body
	ReplacechangeaspecificCustomerWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificCustomerResponse, error)

	ReplacechangeaspecificCustomerWithResponse(ctx context.Context, id string, body ReplacechangeaspecificCustomerJSONRequestBody) (*ReplacechangeaspecificCustomerResponse, error)

	// GetCustomerZoneCostitems request
	GetCustomerZoneCostitemsWithResponse(ctx context.Context, params *GetCustomerZoneCostitemsParams) (*GetCustomerZoneCostitemsResponse, error)

	// GetaspecificCustomerZoneCost request
	GetaspecificCustomerZoneCostWithResponse(ctx context.Context, id string) (*GetaspecificCustomerZoneCostResponse, error)

	// GetDomainPreferenceitems request
	GetDomainPreferenceitemsWithResponse(ctx context.Context, params *GetDomainPreferenceitemsParams) (*GetDomainPreferenceitemsResponse, error)

	// GetaspecificDomainPreference request
	GetaspecificDomainPreferenceWithResponse(ctx context.Context, id string) (*GetaspecificDomainPreferenceResponse, error)

	// ChangeaspecificDomainPreference request  with any body
	ChangeaspecificDomainPreferenceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificDomainPreferenceResponse, error)

	// ReplacechangeaspecificDomainPreference request  with any body
	ReplacechangeaspecificDomainPreferenceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificDomainPreferenceResponse, error)

	ReplacechangeaspecificDomainPreferenceWithResponse(ctx context.Context, id string, body ReplacechangeaspecificDomainPreferenceJSONRequestBody) (*ReplacechangeaspecificDomainPreferenceResponse, error)

	// GetDomainitems request
	GetDomainitemsWithResponse(ctx context.Context, params *GetDomainitemsParams) (*GetDomainitemsResponse, error)

	// CreateanewDomain request  with any body
	CreateanewDomainWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewDomainResponse, error)

	CreateanewDomainWithResponse(ctx context.Context, body CreateanewDomainJSONRequestBody) (*CreateanewDomainResponse, error)

	// DeleteaspecificDomain request
	DeleteaspecificDomainWithResponse(ctx context.Context, id string) (*DeleteaspecificDomainResponse, error)

	// GetaspecificDomain request
	GetaspecificDomainWithResponse(ctx context.Context, id string) (*GetaspecificDomainResponse, error)

	// GetEmailTemplateitems request
	GetEmailTemplateitemsWithResponse(ctx context.Context, params *GetEmailTemplateitemsParams) (*GetEmailTemplateitemsResponse, error)

	// CreateanewEmailTemplate request  with any body
	CreateanewEmailTemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewEmailTemplateResponse, error)

	CreateanewEmailTemplateWithResponse(ctx context.Context, body CreateanewEmailTemplateJSONRequestBody) (*CreateanewEmailTemplateResponse, error)

	// DeleteaspecificEmailTemplate request
	DeleteaspecificEmailTemplateWithResponse(ctx context.Context, id string) (*DeleteaspecificEmailTemplateResponse, error)

	// GetaspecificEmailTemplate request
	GetaspecificEmailTemplateWithResponse(ctx context.Context, id string) (*GetaspecificEmailTemplateResponse, error)

	// ChangeaspecificEmailTemplate request  with any body
	ChangeaspecificEmailTemplateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificEmailTemplateResponse, error)

	// ReplacechangeaspecificEmailTemplate request  with any body
	ReplacechangeaspecificEmailTemplateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificEmailTemplateResponse, error)

	ReplacechangeaspecificEmailTemplateWithResponse(ctx context.Context, id string, body ReplacechangeaspecificEmailTemplateJSONRequestBody) (*ReplacechangeaspecificEmailTemplateResponse, error)

	// GetEmergencyMappingContaineritems request
	GetEmergencyMappingContaineritemsWithResponse(ctx context.Context, params *GetEmergencyMappingContaineritemsParams) (*GetEmergencyMappingContaineritemsResponse, error)

	// CreateanewEmergencyMappingContainer request  with any body
	CreateanewEmergencyMappingContainerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewEmergencyMappingContainerResponse, error)

	CreateanewEmergencyMappingContainerWithResponse(ctx context.Context, body CreateanewEmergencyMappingContainerJSONRequestBody) (*CreateanewEmergencyMappingContainerResponse, error)

	// DeleteaspecificEmergencyMappingContainer request
	DeleteaspecificEmergencyMappingContainerWithResponse(ctx context.Context, id string) (*DeleteaspecificEmergencyMappingContainerResponse, error)

	// GetaspecificEmergencyMappingContainer request
	GetaspecificEmergencyMappingContainerWithResponse(ctx context.Context, id string) (*GetaspecificEmergencyMappingContainerResponse, error)

	// ChangeaspecificEmergencyMappingContainer request  with any body
	ChangeaspecificEmergencyMappingContainerWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificEmergencyMappingContainerResponse, error)

	// ReplacechangeaspecificEmergencyMappingContainer request  with any body
	ReplacechangeaspecificEmergencyMappingContainerWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificEmergencyMappingContainerResponse, error)

	ReplacechangeaspecificEmergencyMappingContainerWithResponse(ctx context.Context, id string, body ReplacechangeaspecificEmergencyMappingContainerJSONRequestBody) (*ReplacechangeaspecificEmergencyMappingContainerResponse, error)

	// GetEmergencyMappingitems request
	GetEmergencyMappingitemsWithResponse(ctx context.Context, params *GetEmergencyMappingitemsParams) (*GetEmergencyMappingitemsResponse, error)

	// CreateanewEmergencyMapping request  with any body
	CreateanewEmergencyMappingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewEmergencyMappingResponse, error)

	CreateanewEmergencyMappingWithResponse(ctx context.Context, body CreateanewEmergencyMappingJSONRequestBody) (*CreateanewEmergencyMappingResponse, error)

	// DeleteaspecificEmergencyMapping request
	DeleteaspecificEmergencyMappingWithResponse(ctx context.Context, id string) (*DeleteaspecificEmergencyMappingResponse, error)

	// GetaspecificEmergencyMapping request
	GetaspecificEmergencyMappingWithResponse(ctx context.Context, id string) (*GetaspecificEmergencyMappingResponse, error)

	// ChangeaspecificEmergencyMapping request  with any body
	ChangeaspecificEmergencyMappingWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificEmergencyMappingResponse, error)

	// ReplacechangeaspecificEmergencyMapping request  with any body
	ReplacechangeaspecificEmergencyMappingWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificEmergencyMappingResponse, error)

	ReplacechangeaspecificEmergencyMappingWithResponse(ctx context.Context, id string, body ReplacechangeaspecificEmergencyMappingJSONRequestBody) (*ReplacechangeaspecificEmergencyMappingResponse, error)

	// GetEventitems request
	GetEventitemsWithResponse(ctx context.Context, params *GetEventitemsParams) (*GetEventitemsResponse, error)

	// GetaspecificEvent request
	GetaspecificEventWithResponse(ctx context.Context, id string) (*GetaspecificEventResponse, error)

	// GetFaxitems request
	GetFaxitemsWithResponse(ctx context.Context, params *GetFaxitemsParams) (*GetFaxitemsResponse, error)

	// CreateanewFax request  with any body
	CreateanewFaxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewFaxResponse, error)

	CreateanewFaxWithResponse(ctx context.Context, body CreateanewFaxJSONRequestBody) (*CreateanewFaxResponse, error)

	// GetaspecificFax request
	GetaspecificFaxWithResponse(ctx context.Context, id string) (*GetaspecificFaxResponse, error)

	// GetaspecificFaxRecording request
	GetaspecificFaxRecordingWithResponse(ctx context.Context, id string) (*GetaspecificFaxRecordingResponse, error)

	// GetFaxserverSettingitems request
	GetFaxserverSettingitemsWithResponse(ctx context.Context, params *GetFaxserverSettingitemsParams) (*GetFaxserverSettingitemsResponse, error)

	// GetaspecificFaxserverSetting request
	GetaspecificFaxserverSettingWithResponse(ctx context.Context, id string) (*GetaspecificFaxserverSettingResponse, error)

	// ChangeaspecificFaxserverSetting request  with any body
	ChangeaspecificFaxserverSettingWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificFaxserverSettingResponse, error)

	// ReplacechangeaspecificFaxserverSetting request  with any body
	ReplacechangeaspecificFaxserverSettingWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificFaxserverSettingResponse, error)

	ReplacechangeaspecificFaxserverSettingWithResponse(ctx context.Context, id string, body ReplacechangeaspecificFaxserverSettingJSONRequestBody) (*ReplacechangeaspecificFaxserverSettingResponse, error)

	// GetInterceptionitems request
	GetInterceptionitemsWithResponse(ctx context.Context, params *GetInterceptionitemsParams) (*GetInterceptionitemsResponse, error)

	// CreateanewInterception request  with any body
	CreateanewInterceptionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewInterceptionResponse, error)

	CreateanewInterceptionWithResponse(ctx context.Context, body CreateanewInterceptionJSONRequestBody) (*CreateanewInterceptionResponse, error)

	// DeleteaspecificInterception request
	DeleteaspecificInterceptionWithResponse(ctx context.Context, id string) (*DeleteaspecificInterceptionResponse, error)

	// GetaspecificInterception request
	GetaspecificInterceptionWithResponse(ctx context.Context, id string) (*GetaspecificInterceptionResponse, error)

	// ChangeaspecificInterception request  with any body
	ChangeaspecificInterceptionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificInterceptionResponse, error)

	// ReplacechangeaspecificInterception request  with any body
	ReplacechangeaspecificInterceptionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificInterceptionResponse, error)

	ReplacechangeaspecificInterceptionWithResponse(ctx context.Context, id string, body ReplacechangeaspecificInterceptionJSONRequestBody) (*ReplacechangeaspecificInterceptionResponse, error)

	// GetInvoiceitems request
	GetInvoiceitemsWithResponse(ctx context.Context, params *GetInvoiceitemsParams) (*GetInvoiceitemsResponse, error)

	// CreateanewInvoice request  with any body
	CreateanewInvoiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewInvoiceResponse, error)

	CreateanewInvoiceWithResponse(ctx context.Context, body CreateanewInvoiceJSONRequestBody) (*CreateanewInvoiceResponse, error)

	// DeleteaspecificInvoice request
	DeleteaspecificInvoiceWithResponse(ctx context.Context, id string) (*DeleteaspecificInvoiceResponse, error)

	// GetaspecificInvoice request
	GetaspecificInvoiceWithResponse(ctx context.Context, id string) (*GetaspecificInvoiceResponse, error)

	// GetInvoiceTemplateitems request
	GetInvoiceTemplateitemsWithResponse(ctx context.Context, params *GetInvoiceTemplateitemsParams) (*GetInvoiceTemplateitemsResponse, error)

	// GetaspecificInvoiceTemplate request
	GetaspecificInvoiceTemplateWithResponse(ctx context.Context, id string) (*GetaspecificInvoiceTemplateResponse, error)

	// GetLnpCarrieritems request
	GetLnpCarrieritemsWithResponse(ctx context.Context, params *GetLnpCarrieritemsParams) (*GetLnpCarrieritemsResponse, error)

	// CreateanewLnpCarrier request  with any body
	CreateanewLnpCarrierWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewLnpCarrierResponse, error)

	CreateanewLnpCarrierWithResponse(ctx context.Context, body CreateanewLnpCarrierJSONRequestBody) (*CreateanewLnpCarrierResponse, error)

	// DeleteaspecificLnpCarrier request
	DeleteaspecificLnpCarrierWithResponse(ctx context.Context, id string) (*DeleteaspecificLnpCarrierResponse, error)

	// GetaspecificLnpCarrier request
	GetaspecificLnpCarrierWithResponse(ctx context.Context, id string) (*GetaspecificLnpCarrierResponse, error)

	// ChangeaspecificLnpCarrier request  with any body
	ChangeaspecificLnpCarrierWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificLnpCarrierResponse, error)

	// ReplacechangeaspecificLnpCarrier request  with any body
	ReplacechangeaspecificLnpCarrierWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificLnpCarrierResponse, error)

	ReplacechangeaspecificLnpCarrierWithResponse(ctx context.Context, id string, body ReplacechangeaspecificLnpCarrierJSONRequestBody) (*ReplacechangeaspecificLnpCarrierResponse, error)

	// GetLnpNumberitems request
	GetLnpNumberitemsWithResponse(ctx context.Context, params *GetLnpNumberitemsParams) (*GetLnpNumberitemsResponse, error)

	// CreateanewLnpNumber request  with any body
	CreateanewLnpNumberWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewLnpNumberResponse, error)

	CreateanewLnpNumberWithResponse(ctx context.Context, body CreateanewLnpNumberJSONRequestBody) (*CreateanewLnpNumberResponse, error)

	// DeleteaspecificLnpNumber request
	DeleteaspecificLnpNumberWithResponse(ctx context.Context, id string) (*DeleteaspecificLnpNumberResponse, error)

	// GetaspecificLnpNumber request
	GetaspecificLnpNumberWithResponse(ctx context.Context, id string) (*GetaspecificLnpNumberResponse, error)

	// ChangeaspecificLnpNumber request  with any body
	ChangeaspecificLnpNumberWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificLnpNumberResponse, error)

	// ReplacechangeaspecificLnpNumber request  with any body
	ReplacechangeaspecificLnpNumberWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificLnpNumberResponse, error)

	ReplacechangeaspecificLnpNumberWithResponse(ctx context.Context, id string, body ReplacechangeaspecificLnpNumberJSONRequestBody) (*ReplacechangeaspecificLnpNumberResponse, error)

	// GetMailToFaxSettingitems request
	GetMailToFaxSettingitemsWithResponse(ctx context.Context, params *GetMailToFaxSettingitemsParams) (*GetMailToFaxSettingitemsResponse, error)

	// GetaspecificMailToFaxSetting request
	GetaspecificMailToFaxSettingWithResponse(ctx context.Context, id string) (*GetaspecificMailToFaxSettingResponse, error)

	// ChangeaspecificMailToFaxSetting request  with any body
	ChangeaspecificMailToFaxSettingWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificMailToFaxSettingResponse, error)

	// ReplacechangeaspecificMailToFaxSetting request  with any body
	ReplacechangeaspecificMailToFaxSettingWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificMailToFaxSettingResponse, error)

	ReplacechangeaspecificMailToFaxSettingWithResponse(ctx context.Context, id string, body ReplacechangeaspecificMailToFaxSettingJSONRequestBody) (*ReplacechangeaspecificMailToFaxSettingResponse, error)

	// GetMaliciousCallitems request
	GetMaliciousCallitemsWithResponse(ctx context.Context, params *GetMaliciousCallitemsParams) (*GetMaliciousCallitemsResponse, error)

	// DeleteaspecificMaliciousCall request
	DeleteaspecificMaliciousCallWithResponse(ctx context.Context, id string) (*DeleteaspecificMaliciousCallResponse, error)

	// GetaspecificMaliciousCall request
	GetaspecificMaliciousCallWithResponse(ctx context.Context, id string) (*GetaspecificMaliciousCallResponse, error)

	// GetManagerSecretaryitems request
	GetManagerSecretaryitemsWithResponse(ctx context.Context, params *GetManagerSecretaryitemsParams) (*GetManagerSecretaryitemsResponse, error)

	// DeleteaspecificManagerSecretary request
	DeleteaspecificManagerSecretaryWithResponse(ctx context.Context, id string) (*DeleteaspecificManagerSecretaryResponse, error)

	// GetaspecificManagerSecretary request
	GetaspecificManagerSecretaryWithResponse(ctx context.Context, id string) (*GetaspecificManagerSecretaryResponse, error)

	// ReplacechangeaspecificManagerSecretary request  with any body
	ReplacechangeaspecificManagerSecretaryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificManagerSecretaryResponse, error)

	ReplacechangeaspecificManagerSecretaryWithResponse(ctx context.Context, id string, body ReplacechangeaspecificManagerSecretaryJSONRequestBody) (*ReplacechangeaspecificManagerSecretaryResponse, error)

	// GetNcosLevelitems request
	GetNcosLevelitemsWithResponse(ctx context.Context, params *GetNcosLevelitemsParams) (*GetNcosLevelitemsResponse, error)

	// CreateanewNcosLevel request  with any body
	CreateanewNcosLevelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewNcosLevelResponse, error)

	CreateanewNcosLevelWithResponse(ctx context.Context, body CreateanewNcosLevelJSONRequestBody) (*CreateanewNcosLevelResponse, error)

	// DeleteaspecificNcosLevel request
	DeleteaspecificNcosLevelWithResponse(ctx context.Context, id string) (*DeleteaspecificNcosLevelResponse, error)

	// GetaspecificNcosLevel request
	GetaspecificNcosLevelWithResponse(ctx context.Context, id string) (*GetaspecificNcosLevelResponse, error)

	// ChangeaspecificNcosLevel request  with any body
	ChangeaspecificNcosLevelWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificNcosLevelResponse, error)

	// ReplacechangeaspecificNcosLevel request  with any body
	ReplacechangeaspecificNcosLevelWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificNcosLevelResponse, error)

	ReplacechangeaspecificNcosLevelWithResponse(ctx context.Context, id string, body ReplacechangeaspecificNcosLevelJSONRequestBody) (*ReplacechangeaspecificNcosLevelResponse, error)

	// GetNcosLnpCarrieritems request
	GetNcosLnpCarrieritemsWithResponse(ctx context.Context, params *GetNcosLnpCarrieritemsParams) (*GetNcosLnpCarrieritemsResponse, error)

	// CreateanewNcosLnpCarrier request  with any body
	CreateanewNcosLnpCarrierWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewNcosLnpCarrierResponse, error)

	CreateanewNcosLnpCarrierWithResponse(ctx context.Context, body CreateanewNcosLnpCarrierJSONRequestBody) (*CreateanewNcosLnpCarrierResponse, error)

	// DeleteaspecificNcosLnpCarrier request
	DeleteaspecificNcosLnpCarrierWithResponse(ctx context.Context, id string) (*DeleteaspecificNcosLnpCarrierResponse, error)

	// GetaspecificNcosLnpCarrier request
	GetaspecificNcosLnpCarrierWithResponse(ctx context.Context, id string) (*GetaspecificNcosLnpCarrierResponse, error)

	// ChangeaspecificNcosLnpCarrier request  with any body
	ChangeaspecificNcosLnpCarrierWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificNcosLnpCarrierResponse, error)

	// ReplacechangeaspecificNcosLnpCarrier request  with any body
	ReplacechangeaspecificNcosLnpCarrierWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificNcosLnpCarrierResponse, error)

	ReplacechangeaspecificNcosLnpCarrierWithResponse(ctx context.Context, id string, body ReplacechangeaspecificNcosLnpCarrierJSONRequestBody) (*ReplacechangeaspecificNcosLnpCarrierResponse, error)

	// GetNcosPatternitems request
	GetNcosPatternitemsWithResponse(ctx context.Context, params *GetNcosPatternitemsParams) (*GetNcosPatternitemsResponse, error)

	// CreateanewNcosPattern request  with any body
	CreateanewNcosPatternWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewNcosPatternResponse, error)

	CreateanewNcosPatternWithResponse(ctx context.Context, body CreateanewNcosPatternJSONRequestBody) (*CreateanewNcosPatternResponse, error)

	// DeleteaspecificNcosPattern request
	DeleteaspecificNcosPatternWithResponse(ctx context.Context, id string) (*DeleteaspecificNcosPatternResponse, error)

	// GetaspecificNcosPattern request
	GetaspecificNcosPatternWithResponse(ctx context.Context, id string) (*GetaspecificNcosPatternResponse, error)

	// ChangeaspecificNcosPattern request  with any body
	ChangeaspecificNcosPatternWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificNcosPatternResponse, error)

	// ReplacechangeaspecificNcosPattern request  with any body
	ReplacechangeaspecificNcosPatternWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificNcosPatternResponse, error)

	ReplacechangeaspecificNcosPatternWithResponse(ctx context.Context, id string, body ReplacechangeaspecificNcosPatternJSONRequestBody) (*ReplacechangeaspecificNcosPatternResponse, error)

	// GetNumberitems request
	GetNumberitemsWithResponse(ctx context.Context, params *GetNumberitemsParams) (*GetNumberitemsResponse, error)

	// GetaspecificNumber request
	GetaspecificNumberWithResponse(ctx context.Context, id string) (*GetaspecificNumberResponse, error)

	// ChangeaspecificNumber request  with any body
	ChangeaspecificNumberWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificNumberResponse, error)

	// ReplacechangeaspecificNumber request  with any body
	ReplacechangeaspecificNumberWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificNumberResponse, error)

	ReplacechangeaspecificNumberWithResponse(ctx context.Context, id string, body ReplacechangeaspecificNumberJSONRequestBody) (*ReplacechangeaspecificNumberResponse, error)

	// CreateanewPartyCallControl request  with any body
	CreateanewPartyCallControlWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewPartyCallControlResponse, error)

	CreateanewPartyCallControlWithResponse(ctx context.Context, body CreateanewPartyCallControlJSONRequestBody) (*CreateanewPartyCallControlResponse, error)

	// GetaspecificPbxDeviceConfigFile request
	GetaspecificPbxDeviceConfigFileWithResponse(ctx context.Context, id string) (*GetaspecificPbxDeviceConfigFileResponse, error)

	// GetPbxDeviceConfigitems request
	GetPbxDeviceConfigitemsWithResponse(ctx context.Context, params *GetPbxDeviceConfigitemsParams) (*GetPbxDeviceConfigitemsResponse, error)

	// CreateanewPbxDeviceConfig request  with any body
	CreateanewPbxDeviceConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewPbxDeviceConfigResponse, error)

	CreateanewPbxDeviceConfigWithResponse(ctx context.Context, body CreateanewPbxDeviceConfigJSONRequestBody) (*CreateanewPbxDeviceConfigResponse, error)

	// GetaspecificPbxDeviceConfig request
	GetaspecificPbxDeviceConfigWithResponse(ctx context.Context, id string) (*GetaspecificPbxDeviceConfigResponse, error)

	// ReplacechangeaspecificPbxDeviceConfig request  with any body
	ReplacechangeaspecificPbxDeviceConfigWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificPbxDeviceConfigResponse, error)

	ReplacechangeaspecificPbxDeviceConfigWithResponse(ctx context.Context, id string, body ReplacechangeaspecificPbxDeviceConfigJSONRequestBody) (*ReplacechangeaspecificPbxDeviceConfigResponse, error)

	// GetaspecificPbxDeviceFirmwareBinary request
	GetaspecificPbxDeviceFirmwareBinaryWithResponse(ctx context.Context, id string) (*GetaspecificPbxDeviceFirmwareBinaryResponse, error)

	// GetPbxDeviceFirmwareitems request
	GetPbxDeviceFirmwareitemsWithResponse(ctx context.Context, params *GetPbxDeviceFirmwareitemsParams) (*GetPbxDeviceFirmwareitemsResponse, error)

	// CreateanewPbxDeviceFirmware request  with any body
	CreateanewPbxDeviceFirmwareWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewPbxDeviceFirmwareResponse, error)

	CreateanewPbxDeviceFirmwareWithResponse(ctx context.Context, body CreateanewPbxDeviceFirmwareJSONRequestBody) (*CreateanewPbxDeviceFirmwareResponse, error)

	// GetaspecificPbxDeviceFirmware request
	GetaspecificPbxDeviceFirmwareWithResponse(ctx context.Context, id string) (*GetaspecificPbxDeviceFirmwareResponse, error)

	// ReplacechangeaspecificPbxDeviceFirmware request  with any body
	ReplacechangeaspecificPbxDeviceFirmwareWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificPbxDeviceFirmwareResponse, error)

	ReplacechangeaspecificPbxDeviceFirmwareWithResponse(ctx context.Context, id string, body ReplacechangeaspecificPbxDeviceFirmwareJSONRequestBody) (*ReplacechangeaspecificPbxDeviceFirmwareResponse, error)

	// GetaspecificPbxDeviceModelImage request
	GetaspecificPbxDeviceModelImageWithResponse(ctx context.Context, id string) (*GetaspecificPbxDeviceModelImageResponse, error)

	// GetPbxDeviceModelitems request
	GetPbxDeviceModelitemsWithResponse(ctx context.Context, params *GetPbxDeviceModelitemsParams) (*GetPbxDeviceModelitemsResponse, error)

	// CreateanewPbxDeviceModel request  with any body
	CreateanewPbxDeviceModelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewPbxDeviceModelResponse, error)

	CreateanewPbxDeviceModelWithResponse(ctx context.Context, body CreateanewPbxDeviceModelJSONRequestBody) (*CreateanewPbxDeviceModelResponse, error)

	// GetaspecificPbxDeviceModel request
	GetaspecificPbxDeviceModelWithResponse(ctx context.Context, id string) (*GetaspecificPbxDeviceModelResponse, error)

	// ChangeaspecificPbxDeviceModel request  with any body
	ChangeaspecificPbxDeviceModelWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificPbxDeviceModelResponse, error)

	// ReplacechangeaspecificPbxDeviceModel request  with any body
	ReplacechangeaspecificPbxDeviceModelWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificPbxDeviceModelResponse, error)

	ReplacechangeaspecificPbxDeviceModelWithResponse(ctx context.Context, id string, body ReplacechangeaspecificPbxDeviceModelJSONRequestBody) (*ReplacechangeaspecificPbxDeviceModelResponse, error)

	// GetPbxDevicePreferenceitems request
	GetPbxDevicePreferenceitemsWithResponse(ctx context.Context, params *GetPbxDevicePreferenceitemsParams) (*GetPbxDevicePreferenceitemsResponse, error)

	// GetaspecificPbxDevicePreference request
	GetaspecificPbxDevicePreferenceWithResponse(ctx context.Context, id string) (*GetaspecificPbxDevicePreferenceResponse, error)

	// ChangeaspecificPbxDevicePreference request  with any body
	ChangeaspecificPbxDevicePreferenceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificPbxDevicePreferenceResponse, error)

	// ReplacechangeaspecificPbxDevicePreference request  with any body
	ReplacechangeaspecificPbxDevicePreferenceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificPbxDevicePreferenceResponse, error)

	ReplacechangeaspecificPbxDevicePreferenceWithResponse(ctx context.Context, id string, body ReplacechangeaspecificPbxDevicePreferenceJSONRequestBody) (*ReplacechangeaspecificPbxDevicePreferenceResponse, error)

	// GetPbxDeviceProfilePreferenceitems request
	GetPbxDeviceProfilePreferenceitemsWithResponse(ctx context.Context, params *GetPbxDeviceProfilePreferenceitemsParams) (*GetPbxDeviceProfilePreferenceitemsResponse, error)

	// GetaspecificPbxDeviceProfilePreference request
	GetaspecificPbxDeviceProfilePreferenceWithResponse(ctx context.Context, id string) (*GetaspecificPbxDeviceProfilePreferenceResponse, error)

	// ChangeaspecificPbxDeviceProfilePreference request  with any body
	ChangeaspecificPbxDeviceProfilePreferenceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificPbxDeviceProfilePreferenceResponse, error)

	// ReplacechangeaspecificPbxDeviceProfilePreference request  with any body
	ReplacechangeaspecificPbxDeviceProfilePreferenceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificPbxDeviceProfilePreferenceResponse, error)

	ReplacechangeaspecificPbxDeviceProfilePreferenceWithResponse(ctx context.Context, id string, body ReplacechangeaspecificPbxDeviceProfilePreferenceJSONRequestBody) (*ReplacechangeaspecificPbxDeviceProfilePreferenceResponse, error)

	// GetPbxDeviceProfileitems request
	GetPbxDeviceProfileitemsWithResponse(ctx context.Context, params *GetPbxDeviceProfileitemsParams) (*GetPbxDeviceProfileitemsResponse, error)

	// CreateanewPbxDeviceProfile request  with any body
	CreateanewPbxDeviceProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewPbxDeviceProfileResponse, error)

	CreateanewPbxDeviceProfileWithResponse(ctx context.Context, body CreateanewPbxDeviceProfileJSONRequestBody) (*CreateanewPbxDeviceProfileResponse, error)

	// GetaspecificPbxDeviceProfile request
	GetaspecificPbxDeviceProfileWithResponse(ctx context.Context, id string) (*GetaspecificPbxDeviceProfileResponse, error)

	// ChangeaspecificPbxDeviceProfile request  with any body
	ChangeaspecificPbxDeviceProfileWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificPbxDeviceProfileResponse, error)

	// ReplacechangeaspecificPbxDeviceProfile request  with any body
	ReplacechangeaspecificPbxDeviceProfileWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificPbxDeviceProfileResponse, error)

	ReplacechangeaspecificPbxDeviceProfileWithResponse(ctx context.Context, id string, body ReplacechangeaspecificPbxDeviceProfileJSONRequestBody) (*ReplacechangeaspecificPbxDeviceProfileResponse, error)

	// GetPbxDeviceitems request
	GetPbxDeviceitemsWithResponse(ctx context.Context, params *GetPbxDeviceitemsParams) (*GetPbxDeviceitemsResponse, error)

	// CreateanewPbxDevice request  with any body
	CreateanewPbxDeviceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewPbxDeviceResponse, error)

	CreateanewPbxDeviceWithResponse(ctx context.Context, body CreateanewPbxDeviceJSONRequestBody) (*CreateanewPbxDeviceResponse, error)

	// DeleteaspecificPbxDevice request
	DeleteaspecificPbxDeviceWithResponse(ctx context.Context, id string) (*DeleteaspecificPbxDeviceResponse, error)

	// GetaspecificPbxDevice request
	GetaspecificPbxDeviceWithResponse(ctx context.Context, id string) (*GetaspecificPbxDeviceResponse, error)

	// ChangeaspecificPbxDevice request  with any body
	ChangeaspecificPbxDeviceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificPbxDeviceResponse, error)

	// ReplacechangeaspecificPbxDevice request  with any body
	ReplacechangeaspecificPbxDeviceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificPbxDeviceResponse, error)

	ReplacechangeaspecificPbxDeviceWithResponse(ctx context.Context, id string, body ReplacechangeaspecificPbxDeviceJSONRequestBody) (*ReplacechangeaspecificPbxDeviceResponse, error)

	// GetPbxFieldDevicePreferenceitems request
	GetPbxFieldDevicePreferenceitemsWithResponse(ctx context.Context, params *GetPbxFieldDevicePreferenceitemsParams) (*GetPbxFieldDevicePreferenceitemsResponse, error)

	// GetaspecificPbxFieldDevicePreference request
	GetaspecificPbxFieldDevicePreferenceWithResponse(ctx context.Context, id string) (*GetaspecificPbxFieldDevicePreferenceResponse, error)

	// ChangeaspecificPbxFieldDevicePreference request  with any body
	ChangeaspecificPbxFieldDevicePreferenceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificPbxFieldDevicePreferenceResponse, error)

	// ReplacechangeaspecificPbxFieldDevicePreference request  with any body
	ReplacechangeaspecificPbxFieldDevicePreferenceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificPbxFieldDevicePreferenceResponse, error)

	ReplacechangeaspecificPbxFieldDevicePreferenceWithResponse(ctx context.Context, id string, body ReplacechangeaspecificPbxFieldDevicePreferenceJSONRequestBody) (*ReplacechangeaspecificPbxFieldDevicePreferenceResponse, error)

	// GetPeeringGroupitems request
	GetPeeringGroupitemsWithResponse(ctx context.Context, params *GetPeeringGroupitemsParams) (*GetPeeringGroupitemsResponse, error)

	// CreateanewPeeringGroup request  with any body
	CreateanewPeeringGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewPeeringGroupResponse, error)

	CreateanewPeeringGroupWithResponse(ctx context.Context, body CreateanewPeeringGroupJSONRequestBody) (*CreateanewPeeringGroupResponse, error)

	// DeleteaspecificPeeringGroup request
	DeleteaspecificPeeringGroupWithResponse(ctx context.Context, id string) (*DeleteaspecificPeeringGroupResponse, error)

	// GetaspecificPeeringGroup request
	GetaspecificPeeringGroupWithResponse(ctx context.Context, id string) (*GetaspecificPeeringGroupResponse, error)

	// ChangeaspecificPeeringGroup request  with any body
	ChangeaspecificPeeringGroupWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificPeeringGroupResponse, error)

	// ReplacechangeaspecificPeeringGroup request  with any body
	ReplacechangeaspecificPeeringGroupWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificPeeringGroupResponse, error)

	ReplacechangeaspecificPeeringGroupWithResponse(ctx context.Context, id string, body ReplacechangeaspecificPeeringGroupJSONRequestBody) (*ReplacechangeaspecificPeeringGroupResponse, error)

	// GetPeeringInboundRuleitems request
	GetPeeringInboundRuleitemsWithResponse(ctx context.Context, params *GetPeeringInboundRuleitemsParams) (*GetPeeringInboundRuleitemsResponse, error)

	// CreateanewPeeringInboundRule request  with any body
	CreateanewPeeringInboundRuleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewPeeringInboundRuleResponse, error)

	CreateanewPeeringInboundRuleWithResponse(ctx context.Context, body CreateanewPeeringInboundRuleJSONRequestBody) (*CreateanewPeeringInboundRuleResponse, error)

	// DeleteaspecificPeeringInboundRule request
	DeleteaspecificPeeringInboundRuleWithResponse(ctx context.Context, id string) (*DeleteaspecificPeeringInboundRuleResponse, error)

	// GetaspecificPeeringInboundRule request
	GetaspecificPeeringInboundRuleWithResponse(ctx context.Context, id string) (*GetaspecificPeeringInboundRuleResponse, error)

	// ChangeaspecificPeeringInboundRule request  with any body
	ChangeaspecificPeeringInboundRuleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificPeeringInboundRuleResponse, error)

	// ReplacechangeaspecificPeeringInboundRule request  with any body
	ReplacechangeaspecificPeeringInboundRuleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificPeeringInboundRuleResponse, error)

	ReplacechangeaspecificPeeringInboundRuleWithResponse(ctx context.Context, id string, body ReplacechangeaspecificPeeringInboundRuleJSONRequestBody) (*ReplacechangeaspecificPeeringInboundRuleResponse, error)

	// GetPeeringRuleitems request
	GetPeeringRuleitemsWithResponse(ctx context.Context, params *GetPeeringRuleitemsParams) (*GetPeeringRuleitemsResponse, error)

	// CreateanewPeeringRule request  with any body
	CreateanewPeeringRuleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewPeeringRuleResponse, error)

	CreateanewPeeringRuleWithResponse(ctx context.Context, body CreateanewPeeringRuleJSONRequestBody) (*CreateanewPeeringRuleResponse, error)

	// DeleteaspecificPeeringRule request
	DeleteaspecificPeeringRuleWithResponse(ctx context.Context, id string) (*DeleteaspecificPeeringRuleResponse, error)

	// GetaspecificPeeringRule request
	GetaspecificPeeringRuleWithResponse(ctx context.Context, id string) (*GetaspecificPeeringRuleResponse, error)

	// ChangeaspecificPeeringRule request  with any body
	ChangeaspecificPeeringRuleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificPeeringRuleResponse, error)

	// ReplacechangeaspecificPeeringRule request  with any body
	ReplacechangeaspecificPeeringRuleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificPeeringRuleResponse, error)

	ReplacechangeaspecificPeeringRuleWithResponse(ctx context.Context, id string, body ReplacechangeaspecificPeeringRuleJSONRequestBody) (*ReplacechangeaspecificPeeringRuleResponse, error)

	// GetPeeringServerPreferenceitems request
	GetPeeringServerPreferenceitemsWithResponse(ctx context.Context, params *GetPeeringServerPreferenceitemsParams) (*GetPeeringServerPreferenceitemsResponse, error)

	// GetaspecificPeeringServerPreference request
	GetaspecificPeeringServerPreferenceWithResponse(ctx context.Context, id string) (*GetaspecificPeeringServerPreferenceResponse, error)

	// ChangeaspecificPeeringServerPreference request  with any body
	ChangeaspecificPeeringServerPreferenceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificPeeringServerPreferenceResponse, error)

	// ReplacechangeaspecificPeeringServerPreference request  with any body
	ReplacechangeaspecificPeeringServerPreferenceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificPeeringServerPreferenceResponse, error)

	ReplacechangeaspecificPeeringServerPreferenceWithResponse(ctx context.Context, id string, body ReplacechangeaspecificPeeringServerPreferenceJSONRequestBody) (*ReplacechangeaspecificPeeringServerPreferenceResponse, error)

	// GetPeeringServeritems request
	GetPeeringServeritemsWithResponse(ctx context.Context, params *GetPeeringServeritemsParams) (*GetPeeringServeritemsResponse, error)

	// CreateanewPeeringServer request  with any body
	CreateanewPeeringServerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewPeeringServerResponse, error)

	CreateanewPeeringServerWithResponse(ctx context.Context, body CreateanewPeeringServerJSONRequestBody) (*CreateanewPeeringServerResponse, error)

	// DeleteaspecificPeeringServer request
	DeleteaspecificPeeringServerWithResponse(ctx context.Context, id string) (*DeleteaspecificPeeringServerResponse, error)

	// GetaspecificPeeringServer request
	GetaspecificPeeringServerWithResponse(ctx context.Context, id string) (*GetaspecificPeeringServerResponse, error)

	// ChangeaspecificPeeringServer request  with any body
	ChangeaspecificPeeringServerWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificPeeringServerResponse, error)

	// ReplacechangeaspecificPeeringServer request  with any body
	ReplacechangeaspecificPeeringServerWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificPeeringServerResponse, error)

	ReplacechangeaspecificPeeringServerWithResponse(ctx context.Context, id string, body ReplacechangeaspecificPeeringServerJSONRequestBody) (*ReplacechangeaspecificPeeringServerResponse, error)

	// GetPhonebookEntryitems request
	GetPhonebookEntryitemsWithResponse(ctx context.Context, params *GetPhonebookEntryitemsParams) (*GetPhonebookEntryitemsResponse, error)

	// CreateanewPhonebookEntry request  with any body
	CreateanewPhonebookEntryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewPhonebookEntryResponse, error)

	CreateanewPhonebookEntryWithResponse(ctx context.Context, body CreateanewPhonebookEntryJSONRequestBody) (*CreateanewPhonebookEntryResponse, error)

	// DeleteaspecificPhonebookEntry request
	DeleteaspecificPhonebookEntryWithResponse(ctx context.Context, id string) (*DeleteaspecificPhonebookEntryResponse, error)

	// GetaspecificPhonebookEntry request
	GetaspecificPhonebookEntryWithResponse(ctx context.Context, id string) (*GetaspecificPhonebookEntryResponse, error)

	// ChangeaspecificPhonebookEntry request  with any body
	ChangeaspecificPhonebookEntryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificPhonebookEntryResponse, error)

	// ReplacechangeaspecificPhonebookEntry request  with any body
	ReplacechangeaspecificPhonebookEntryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificPhonebookEntryResponse, error)

	ReplacechangeaspecificPhonebookEntryWithResponse(ctx context.Context, id string, body ReplacechangeaspecificPhonebookEntryJSONRequestBody) (*ReplacechangeaspecificPhonebookEntryResponse, error)

	// GetPreferencesMetaEntryitems request
	GetPreferencesMetaEntryitemsWithResponse(ctx context.Context, params *GetPreferencesMetaEntryitemsParams) (*GetPreferencesMetaEntryitemsResponse, error)

	// CreateanewPreferencesMetaEntry request  with any body
	CreateanewPreferencesMetaEntryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewPreferencesMetaEntryResponse, error)

	CreateanewPreferencesMetaEntryWithResponse(ctx context.Context, body CreateanewPreferencesMetaEntryJSONRequestBody) (*CreateanewPreferencesMetaEntryResponse, error)

	// DeleteaspecificPreferencesMetaEntry request
	DeleteaspecificPreferencesMetaEntryWithResponse(ctx context.Context, id string) (*DeleteaspecificPreferencesMetaEntryResponse, error)

	// GetaspecificPreferencesMetaEntry request
	GetaspecificPreferencesMetaEntryWithResponse(ctx context.Context, id string) (*GetaspecificPreferencesMetaEntryResponse, error)

	// ChangeaspecificPreferencesMetaEntry request  with any body
	ChangeaspecificPreferencesMetaEntryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificPreferencesMetaEntryResponse, error)

	// ReplacechangeaspecificPreferencesMetaEntry request  with any body
	ReplacechangeaspecificPreferencesMetaEntryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificPreferencesMetaEntryResponse, error)

	ReplacechangeaspecificPreferencesMetaEntryWithResponse(ctx context.Context, id string, body ReplacechangeaspecificPreferencesMetaEntryJSONRequestBody) (*ReplacechangeaspecificPreferencesMetaEntryResponse, error)

	// GetProfilePackageitems request
	GetProfilePackageitemsWithResponse(ctx context.Context, params *GetProfilePackageitemsParams) (*GetProfilePackageitemsResponse, error)

	// CreateanewProfilePackage request  with any body
	CreateanewProfilePackageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewProfilePackageResponse, error)

	CreateanewProfilePackageWithResponse(ctx context.Context, body CreateanewProfilePackageJSONRequestBody) (*CreateanewProfilePackageResponse, error)

	// DeleteaspecificProfilePackage request
	DeleteaspecificProfilePackageWithResponse(ctx context.Context, id string) (*DeleteaspecificProfilePackageResponse, error)

	// GetaspecificProfilePackage request
	GetaspecificProfilePackageWithResponse(ctx context.Context, id string) (*GetaspecificProfilePackageResponse, error)

	// ChangeaspecificProfilePackage request  with any body
	ChangeaspecificProfilePackageWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificProfilePackageResponse, error)

	// ReplacechangeaspecificProfilePackage request  with any body
	ReplacechangeaspecificProfilePackageWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificProfilePackageResponse, error)

	ReplacechangeaspecificProfilePackageWithResponse(ctx context.Context, id string, body ReplacechangeaspecificProfilePackageJSONRequestBody) (*ReplacechangeaspecificProfilePackageResponse, error)

	// GetProfilePreferenceitems request
	GetProfilePreferenceitemsWithResponse(ctx context.Context, params *GetProfilePreferenceitemsParams) (*GetProfilePreferenceitemsResponse, error)

	// GetaspecificProfilePreference request
	GetaspecificProfilePreferenceWithResponse(ctx context.Context, id string) (*GetaspecificProfilePreferenceResponse, error)

	// ChangeaspecificProfilePreference request  with any body
	ChangeaspecificProfilePreferenceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificProfilePreferenceResponse, error)

	// ReplacechangeaspecificProfilePreference request  with any body
	ReplacechangeaspecificProfilePreferenceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificProfilePreferenceResponse, error)

	ReplacechangeaspecificProfilePreferenceWithResponse(ctx context.Context, id string, body ReplacechangeaspecificProfilePreferenceJSONRequestBody) (*ReplacechangeaspecificProfilePreferenceResponse, error)

	// GetReminderitems request
	GetReminderitemsWithResponse(ctx context.Context, params *GetReminderitemsParams) (*GetReminderitemsResponse, error)

	// CreateanewReminder request  with any body
	CreateanewReminderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewReminderResponse, error)

	CreateanewReminderWithResponse(ctx context.Context, body CreateanewReminderJSONRequestBody) (*CreateanewReminderResponse, error)

	// DeleteaspecificReminder request
	DeleteaspecificReminderWithResponse(ctx context.Context, id string) (*DeleteaspecificReminderResponse, error)

	// GetaspecificReminder request
	GetaspecificReminderWithResponse(ctx context.Context, id string) (*GetaspecificReminderResponse, error)

	// ChangeaspecificReminder request  with any body
	ChangeaspecificReminderWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificReminderResponse, error)

	// ReplacechangeaspecificReminder request  with any body
	ReplacechangeaspecificReminderWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificReminderResponse, error)

	ReplacechangeaspecificReminderWithResponse(ctx context.Context, id string, body ReplacechangeaspecificReminderJSONRequestBody) (*ReplacechangeaspecificReminderResponse, error)

	// GetReselleritems request
	GetReselleritemsWithResponse(ctx context.Context, params *GetReselleritemsParams) (*GetReselleritemsResponse, error)

	// CreateanewReseller request  with any body
	CreateanewResellerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewResellerResponse, error)

	CreateanewResellerWithResponse(ctx context.Context, body CreateanewResellerJSONRequestBody) (*CreateanewResellerResponse, error)

	// GetaspecificReseller request
	GetaspecificResellerWithResponse(ctx context.Context, id string) (*GetaspecificResellerResponse, error)

	// ChangeaspecificReseller request  with any body
	ChangeaspecificResellerWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificResellerResponse, error)

	// ReplacechangeaspecificReseller request  with any body
	ReplacechangeaspecificResellerWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificResellerResponse, error)

	ReplacechangeaspecificResellerWithResponse(ctx context.Context, id string, body ReplacechangeaspecificResellerJSONRequestBody) (*ReplacechangeaspecificResellerResponse, error)

	// GetRewriteRuleitems request
	GetRewriteRuleitemsWithResponse(ctx context.Context, params *GetRewriteRuleitemsParams) (*GetRewriteRuleitemsResponse, error)

	// CreateanewRewriteRule request  with any body
	CreateanewRewriteRuleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewRewriteRuleResponse, error)

	CreateanewRewriteRuleWithResponse(ctx context.Context, body CreateanewRewriteRuleJSONRequestBody) (*CreateanewRewriteRuleResponse, error)

	// DeleteaspecificRewriteRule request
	DeleteaspecificRewriteRuleWithResponse(ctx context.Context, id string) (*DeleteaspecificRewriteRuleResponse, error)

	// GetaspecificRewriteRule request
	GetaspecificRewriteRuleWithResponse(ctx context.Context, id string) (*GetaspecificRewriteRuleResponse, error)

	// ChangeaspecificRewriteRule request  with any body
	ChangeaspecificRewriteRuleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificRewriteRuleResponse, error)

	// ReplacechangeaspecificRewriteRule request  with any body
	ReplacechangeaspecificRewriteRuleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificRewriteRuleResponse, error)

	ReplacechangeaspecificRewriteRuleWithResponse(ctx context.Context, id string, body ReplacechangeaspecificRewriteRuleJSONRequestBody) (*ReplacechangeaspecificRewriteRuleResponse, error)

	// GetRewriteRuleSetitems request
	GetRewriteRuleSetitemsWithResponse(ctx context.Context, params *GetRewriteRuleSetitemsParams) (*GetRewriteRuleSetitemsResponse, error)

	// CreateanewRewriteRuleSet request  with any body
	CreateanewRewriteRuleSetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewRewriteRuleSetResponse, error)

	CreateanewRewriteRuleSetWithResponse(ctx context.Context, body CreateanewRewriteRuleSetJSONRequestBody) (*CreateanewRewriteRuleSetResponse, error)

	// DeleteaspecificRewriteRuleSet request
	DeleteaspecificRewriteRuleSetWithResponse(ctx context.Context, id string) (*DeleteaspecificRewriteRuleSetResponse, error)

	// GetaspecificRewriteRuleSet request
	GetaspecificRewriteRuleSetWithResponse(ctx context.Context, id string) (*GetaspecificRewriteRuleSetResponse, error)

	// ChangeaspecificRewriteRuleSet request  with any body
	ChangeaspecificRewriteRuleSetWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificRewriteRuleSetResponse, error)

	// ReplacechangeaspecificRewriteRuleSet request  with any body
	ReplacechangeaspecificRewriteRuleSetWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificRewriteRuleSetResponse, error)

	ReplacechangeaspecificRewriteRuleSetWithResponse(ctx context.Context, id string, body ReplacechangeaspecificRewriteRuleSetJSONRequestBody) (*ReplacechangeaspecificRewriteRuleSetResponse, error)

	// GetRtcAppitems request
	GetRtcAppitemsWithResponse(ctx context.Context, params *GetRtcAppitemsParams) (*GetRtcAppitemsResponse, error)

	// GetaspecificRtcApp request
	GetaspecificRtcAppWithResponse(ctx context.Context, id string) (*GetaspecificRtcAppResponse, error)

	// ChangeaspecificRtcApp request  with any body
	ChangeaspecificRtcAppWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificRtcAppResponse, error)

	// ReplacechangeaspecificRtcApp request  with any body
	ReplacechangeaspecificRtcAppWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificRtcAppResponse, error)

	ReplacechangeaspecificRtcAppWithResponse(ctx context.Context, id string, body ReplacechangeaspecificRtcAppJSONRequestBody) (*ReplacechangeaspecificRtcAppResponse, error)

	// GetRtcNetworkitems request
	GetRtcNetworkitemsWithResponse(ctx context.Context, params *GetRtcNetworkitemsParams) (*GetRtcNetworkitemsResponse, error)

	// GetaspecificRtcNetwork request
	GetaspecificRtcNetworkWithResponse(ctx context.Context, id string) (*GetaspecificRtcNetworkResponse, error)

	// ChangeaspecificRtcNetwork request  with any body
	ChangeaspecificRtcNetworkWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificRtcNetworkResponse, error)

	// ReplacechangeaspecificRtcNetwork request  with any body
	ReplacechangeaspecificRtcNetworkWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificRtcNetworkResponse, error)

	ReplacechangeaspecificRtcNetworkWithResponse(ctx context.Context, id string, body ReplacechangeaspecificRtcNetworkJSONRequestBody) (*ReplacechangeaspecificRtcNetworkResponse, error)

	// GetRtcSessionitems request
	GetRtcSessionitemsWithResponse(ctx context.Context, params *GetRtcSessionitemsParams) (*GetRtcSessionitemsResponse, error)

	// CreateanewRtcSession request  with any body
	CreateanewRtcSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewRtcSessionResponse, error)

	CreateanewRtcSessionWithResponse(ctx context.Context, body CreateanewRtcSessionJSONRequestBody) (*CreateanewRtcSessionResponse, error)

	// GetaspecificRtcSession request
	GetaspecificRtcSessionWithResponse(ctx context.Context, id string) (*GetaspecificRtcSessionResponse, error)

	// GetSIPCaptureitems request
	GetSIPCaptureitemsWithResponse(ctx context.Context, params *GetSIPCaptureitemsParams) (*GetSIPCaptureitemsResponse, error)

	// GetaspecificSIPCapture request
	GetaspecificSIPCaptureWithResponse(ctx context.Context, id string) (*GetaspecificSIPCaptureResponse, error)

	// GetSMSitems request
	GetSMSitemsWithResponse(ctx context.Context, params *GetSMSitemsParams) (*GetSMSitemsResponse, error)

	// CreateanewSMS request  with any body
	CreateanewSMSWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewSMSResponse, error)

	CreateanewSMSWithResponse(ctx context.Context, body CreateanewSMSJSONRequestBody) (*CreateanewSMSResponse, error)

	// GetaspecificSMS request
	GetaspecificSMSWithResponse(ctx context.Context, id string) (*GetaspecificSMSResponse, error)

	// GetaspecificSoundFileRecording request
	GetaspecificSoundFileRecordingWithResponse(ctx context.Context, id string) (*GetaspecificSoundFileRecordingResponse, error)

	// GetSoundFileitems request
	GetSoundFileitemsWithResponse(ctx context.Context, params *GetSoundFileitemsParams) (*GetSoundFileitemsResponse, error)

	// CreateanewSoundFile request  with any body
	CreateanewSoundFileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewSoundFileResponse, error)

	CreateanewSoundFileWithResponse(ctx context.Context, body CreateanewSoundFileJSONRequestBody) (*CreateanewSoundFileResponse, error)

	// DeleteaspecificSoundFile request
	DeleteaspecificSoundFileWithResponse(ctx context.Context, id string) (*DeleteaspecificSoundFileResponse, error)

	// GetaspecificSoundFile request
	GetaspecificSoundFileWithResponse(ctx context.Context, id string) (*GetaspecificSoundFileResponse, error)

	// ReplacechangeaspecificSoundFile request  with any body
	ReplacechangeaspecificSoundFileWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificSoundFileResponse, error)

	ReplacechangeaspecificSoundFileWithResponse(ctx context.Context, id string, body ReplacechangeaspecificSoundFileJSONRequestBody) (*ReplacechangeaspecificSoundFileResponse, error)

	// GetSoundGroupitems request
	GetSoundGroupitemsWithResponse(ctx context.Context, params *GetSoundGroupitemsParams) (*GetSoundGroupitemsResponse, error)

	// GetaspecificSoundGroup request
	GetaspecificSoundGroupWithResponse(ctx context.Context, id string) (*GetaspecificSoundGroupResponse, error)

	// GetSoundHandleitems request
	GetSoundHandleitemsWithResponse(ctx context.Context, params *GetSoundHandleitemsParams) (*GetSoundHandleitemsResponse, error)

	// GetaspecificSoundHandle request
	GetaspecificSoundHandleWithResponse(ctx context.Context, id string) (*GetaspecificSoundHandleResponse, error)

	// GetSoundSetitems request
	GetSoundSetitemsWithResponse(ctx context.Context, params *GetSoundSetitemsParams) (*GetSoundSetitemsResponse, error)

	// CreateanewSoundSet request  with any body
	CreateanewSoundSetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewSoundSetResponse, error)

	CreateanewSoundSetWithResponse(ctx context.Context, body CreateanewSoundSetJSONRequestBody) (*CreateanewSoundSetResponse, error)

	// DeleteaspecificSoundSet request
	DeleteaspecificSoundSetWithResponse(ctx context.Context, id string) (*DeleteaspecificSoundSetResponse, error)

	// GetaspecificSoundSet request
	GetaspecificSoundSetWithResponse(ctx context.Context, id string) (*GetaspecificSoundSetResponse, error)

	// ChangeaspecificSoundSet request  with any body
	ChangeaspecificSoundSetWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificSoundSetResponse, error)

	// ReplacechangeaspecificSoundSet request  with any body
	ReplacechangeaspecificSoundSetWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificSoundSetResponse, error)

	ReplacechangeaspecificSoundSetWithResponse(ctx context.Context, id string, body ReplacechangeaspecificSoundSetJSONRequestBody) (*ReplacechangeaspecificSoundSetResponse, error)

	// GetSpeedDialitems request
	GetSpeedDialitemsWithResponse(ctx context.Context, params *GetSpeedDialitemsParams) (*GetSpeedDialitemsResponse, error)

	// GetaspecificSpeedDial request
	GetaspecificSpeedDialWithResponse(ctx context.Context, id string) (*GetaspecificSpeedDialResponse, error)

	// ChangeaspecificSpeedDial request  with any body
	ChangeaspecificSpeedDialWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificSpeedDialResponse, error)

	// ReplacechangeaspecificSpeedDial request  with any body
	ReplacechangeaspecificSpeedDialWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificSpeedDialResponse, error)

	ReplacechangeaspecificSpeedDialWithResponse(ctx context.Context, id string, body ReplacechangeaspecificSpeedDialJSONRequestBody) (*ReplacechangeaspecificSpeedDialResponse, error)

	// GetSubscriberPreferenceitems request
	GetSubscriberPreferenceitemsWithResponse(ctx context.Context, params *GetSubscriberPreferenceitemsParams) (*GetSubscriberPreferenceitemsResponse, error)

	// GetaspecificSubscriberPreference request
	GetaspecificSubscriberPreferenceWithResponse(ctx context.Context, id string) (*GetaspecificSubscriberPreferenceResponse, error)

	// ChangeaspecificSubscriberPreference request  with any body
	ChangeaspecificSubscriberPreferenceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificSubscriberPreferenceResponse, error)

	// ReplacechangeaspecificSubscriberPreference request  with any body
	ReplacechangeaspecificSubscriberPreferenceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificSubscriberPreferenceResponse, error)

	ReplacechangeaspecificSubscriberPreferenceWithResponse(ctx context.Context, id string, body ReplacechangeaspecificSubscriberPreferenceJSONRequestBody) (*ReplacechangeaspecificSubscriberPreferenceResponse, error)

	// GetSubscriberProfileitems request
	GetSubscriberProfileitemsWithResponse(ctx context.Context, params *GetSubscriberProfileitemsParams) (*GetSubscriberProfileitemsResponse, error)

	// CreateanewSubscriberProfile request  with any body
	CreateanewSubscriberProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewSubscriberProfileResponse, error)

	CreateanewSubscriberProfileWithResponse(ctx context.Context, body CreateanewSubscriberProfileJSONRequestBody) (*CreateanewSubscriberProfileResponse, error)

	// DeleteaspecificSubscriberProfile request
	DeleteaspecificSubscriberProfileWithResponse(ctx context.Context, id string) (*DeleteaspecificSubscriberProfileResponse, error)

	// GetaspecificSubscriberProfile request
	GetaspecificSubscriberProfileWithResponse(ctx context.Context, id string) (*GetaspecificSubscriberProfileResponse, error)

	// ChangeaspecificSubscriberProfile request  with any body
	ChangeaspecificSubscriberProfileWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificSubscriberProfileResponse, error)

	// ReplacechangeaspecificSubscriberProfile request  with any body
	ReplacechangeaspecificSubscriberProfileWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificSubscriberProfileResponse, error)

	ReplacechangeaspecificSubscriberProfileWithResponse(ctx context.Context, id string, body ReplacechangeaspecificSubscriberProfileJSONRequestBody) (*ReplacechangeaspecificSubscriberProfileResponse, error)

	// GetSubscriberProfileSetitems request
	GetSubscriberProfileSetitemsWithResponse(ctx context.Context, params *GetSubscriberProfileSetitemsParams) (*GetSubscriberProfileSetitemsResponse, error)

	// CreateanewSubscriberProfileSet request  with any body
	CreateanewSubscriberProfileSetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewSubscriberProfileSetResponse, error)

	CreateanewSubscriberProfileSetWithResponse(ctx context.Context, body CreateanewSubscriberProfileSetJSONRequestBody) (*CreateanewSubscriberProfileSetResponse, error)

	// DeleteaspecificSubscriberProfileSet request
	DeleteaspecificSubscriberProfileSetWithResponse(ctx context.Context, id string) (*DeleteaspecificSubscriberProfileSetResponse, error)

	// GetaspecificSubscriberProfileSet request
	GetaspecificSubscriberProfileSetWithResponse(ctx context.Context, id string) (*GetaspecificSubscriberProfileSetResponse, error)

	// ChangeaspecificSubscriberProfileSet request  with any body
	ChangeaspecificSubscriberProfileSetWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificSubscriberProfileSetResponse, error)

	// ReplacechangeaspecificSubscriberProfileSet request  with any body
	ReplacechangeaspecificSubscriberProfileSetWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificSubscriberProfileSetResponse, error)

	ReplacechangeaspecificSubscriberProfileSetWithResponse(ctx context.Context, id string, body ReplacechangeaspecificSubscriberProfileSetJSONRequestBody) (*ReplacechangeaspecificSubscriberProfileSetResponse, error)

	// GetSubscriberRegistrationitems request
	GetSubscriberRegistrationitemsWithResponse(ctx context.Context, params *GetSubscriberRegistrationitemsParams) (*GetSubscriberRegistrationitemsResponse, error)

	// CreateanewSubscriberRegistration request  with any body
	CreateanewSubscriberRegistrationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewSubscriberRegistrationResponse, error)

	CreateanewSubscriberRegistrationWithResponse(ctx context.Context, body CreateanewSubscriberRegistrationJSONRequestBody) (*CreateanewSubscriberRegistrationResponse, error)

	// DeleteaspecificSubscriberRegistration request
	DeleteaspecificSubscriberRegistrationWithResponse(ctx context.Context, id string) (*DeleteaspecificSubscriberRegistrationResponse, error)

	// GetaspecificSubscriberRegistration request
	GetaspecificSubscriberRegistrationWithResponse(ctx context.Context, id string) (*GetaspecificSubscriberRegistrationResponse, error)

	// ChangeaspecificSubscriberRegistration request  with any body
	ChangeaspecificSubscriberRegistrationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificSubscriberRegistrationResponse, error)

	// ReplacechangeaspecificSubscriberRegistration request  with any body
	ReplacechangeaspecificSubscriberRegistrationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificSubscriberRegistrationResponse, error)

	ReplacechangeaspecificSubscriberRegistrationWithResponse(ctx context.Context, id string, body ReplacechangeaspecificSubscriberRegistrationJSONRequestBody) (*ReplacechangeaspecificSubscriberRegistrationResponse, error)

	// GetSubscriberitems request
	GetSubscriberitemsWithResponse(ctx context.Context, params *GetSubscriberitemsParams) (*GetSubscriberitemsResponse, error)

	// CreateanewSubscriber request  with any body
	CreateanewSubscriberWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewSubscriberResponse, error)

	CreateanewSubscriberWithResponse(ctx context.Context, body CreateanewSubscriberJSONRequestBody) (*CreateanewSubscriberResponse, error)

	// DeleteaspecificSubscriber request
	DeleteaspecificSubscriberWithResponse(ctx context.Context, id string) (*DeleteaspecificSubscriberResponse, error)

	// GetaspecificSubscriber request
	GetaspecificSubscriberWithResponse(ctx context.Context, id string) (*GetaspecificSubscriberResponse, error)

	// ChangeaspecificSubscriber request  with any body
	ChangeaspecificSubscriberWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificSubscriberResponse, error)

	// ReplacechangeaspecificSubscriber request  with any body
	ReplacechangeaspecificSubscriberWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificSubscriberResponse, error)

	ReplacechangeaspecificSubscriberWithResponse(ctx context.Context, id string, body ReplacechangeaspecificSubscriberJSONRequestBody) (*ReplacechangeaspecificSubscriberResponse, error)

	// GetSystemContactitems request
	GetSystemContactitemsWithResponse(ctx context.Context, params *GetSystemContactitemsParams) (*GetSystemContactitemsResponse, error)

	// CreateanewSystemContact request  with any body
	CreateanewSystemContactWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewSystemContactResponse, error)

	CreateanewSystemContactWithResponse(ctx context.Context, body CreateanewSystemContactJSONRequestBody) (*CreateanewSystemContactResponse, error)

	// DeleteaspecificSystemContact request
	DeleteaspecificSystemContactWithResponse(ctx context.Context, id string) (*DeleteaspecificSystemContactResponse, error)

	// GetaspecificSystemContact request
	GetaspecificSystemContactWithResponse(ctx context.Context, id string) (*GetaspecificSystemContactResponse, error)

	// ChangeaspecificSystemContact request  with any body
	ChangeaspecificSystemContactWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificSystemContactResponse, error)

	// ReplacechangeaspecificSystemContact request  with any body
	ReplacechangeaspecificSystemContactWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificSystemContactResponse, error)

	ReplacechangeaspecificSystemContactWithResponse(ctx context.Context, id string, body ReplacechangeaspecificSystemContactJSONRequestBody) (*ReplacechangeaspecificSystemContactResponse, error)

	// CreateanewTopupCash request  with any body
	CreateanewTopupCashWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewTopupCashResponse, error)

	CreateanewTopupCashWithResponse(ctx context.Context, body CreateanewTopupCashJSONRequestBody) (*CreateanewTopupCashResponse, error)

	// GetTopupLogitems request
	GetTopupLogitemsWithResponse(ctx context.Context, params *GetTopupLogitemsParams) (*GetTopupLogitemsResponse, error)

	// GetaspecificTopupLog request
	GetaspecificTopupLogWithResponse(ctx context.Context, id string) (*GetaspecificTopupLogResponse, error)

	// CreateanewTopupVoucher request  with any body
	CreateanewTopupVoucherWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewTopupVoucherResponse, error)

	CreateanewTopupVoucherWithResponse(ctx context.Context, body CreateanewTopupVoucherJSONRequestBody) (*CreateanewTopupVoucherResponse, error)

	// GetTrustedSourceitems request
	GetTrustedSourceitemsWithResponse(ctx context.Context, params *GetTrustedSourceitemsParams) (*GetTrustedSourceitemsResponse, error)

	// CreateanewTrustedSource request  with any body
	CreateanewTrustedSourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewTrustedSourceResponse, error)

	CreateanewTrustedSourceWithResponse(ctx context.Context, body CreateanewTrustedSourceJSONRequestBody) (*CreateanewTrustedSourceResponse, error)

	// DeleteaspecificTrustedSource request
	DeleteaspecificTrustedSourceWithResponse(ctx context.Context, id string) (*DeleteaspecificTrustedSourceResponse, error)

	// GetaspecificTrustedSource request
	GetaspecificTrustedSourceWithResponse(ctx context.Context, id string) (*GetaspecificTrustedSourceResponse, error)

	// ChangeaspecificTrustedSource request  with any body
	ChangeaspecificTrustedSourceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificTrustedSourceResponse, error)

	// ReplacechangeaspecificTrustedSource request  with any body
	ReplacechangeaspecificTrustedSourceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificTrustedSourceResponse, error)

	ReplacechangeaspecificTrustedSourceWithResponse(ctx context.Context, id string, body ReplacechangeaspecificTrustedSourceJSONRequestBody) (*ReplacechangeaspecificTrustedSourceResponse, error)

	// GetUpnRewriteSetitems request
	GetUpnRewriteSetitemsWithResponse(ctx context.Context, params *GetUpnRewriteSetitemsParams) (*GetUpnRewriteSetitemsResponse, error)

	// CreateanewUpnRewriteSet request  with any body
	CreateanewUpnRewriteSetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewUpnRewriteSetResponse, error)

	CreateanewUpnRewriteSetWithResponse(ctx context.Context, body CreateanewUpnRewriteSetJSONRequestBody) (*CreateanewUpnRewriteSetResponse, error)

	// DeleteaspecificUpnRewriteSet request
	DeleteaspecificUpnRewriteSetWithResponse(ctx context.Context, id string) (*DeleteaspecificUpnRewriteSetResponse, error)

	// GetaspecificUpnRewriteSet request
	GetaspecificUpnRewriteSetWithResponse(ctx context.Context, id string) (*GetaspecificUpnRewriteSetResponse, error)

	// ChangeaspecificUpnRewriteSet request  with any body
	ChangeaspecificUpnRewriteSetWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificUpnRewriteSetResponse, error)

	// ReplacechangeaspecificUpnRewriteSet request  with any body
	ReplacechangeaspecificUpnRewriteSetWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificUpnRewriteSetResponse, error)

	ReplacechangeaspecificUpnRewriteSetWithResponse(ctx context.Context, id string, body ReplacechangeaspecificUpnRewriteSetJSONRequestBody) (*ReplacechangeaspecificUpnRewriteSetResponse, error)

	// GetVoicemailGreetingitems request
	GetVoicemailGreetingitemsWithResponse(ctx context.Context, params *GetVoicemailGreetingitemsParams) (*GetVoicemailGreetingitemsResponse, error)

	// CreateanewVoicemailGreeting request  with any body
	CreateanewVoicemailGreetingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewVoicemailGreetingResponse, error)

	CreateanewVoicemailGreetingWithResponse(ctx context.Context, body CreateanewVoicemailGreetingJSONRequestBody) (*CreateanewVoicemailGreetingResponse, error)

	// DeleteaspecificVoicemailGreeting request
	DeleteaspecificVoicemailGreetingWithResponse(ctx context.Context, id string) (*DeleteaspecificVoicemailGreetingResponse, error)

	// GetaspecificVoicemailGreeting request
	GetaspecificVoicemailGreetingWithResponse(ctx context.Context, id string) (*GetaspecificVoicemailGreetingResponse, error)

	// ReplacechangeaspecificVoicemailGreeting request  with any body
	ReplacechangeaspecificVoicemailGreetingWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificVoicemailGreetingResponse, error)

	ReplacechangeaspecificVoicemailGreetingWithResponse(ctx context.Context, id string, body ReplacechangeaspecificVoicemailGreetingJSONRequestBody) (*ReplacechangeaspecificVoicemailGreetingResponse, error)

	// GetaspecificVoicemailRecording request
	GetaspecificVoicemailRecordingWithResponse(ctx context.Context, id string) (*GetaspecificVoicemailRecordingResponse, error)

	// GetVoicemailitems request
	GetVoicemailitemsWithResponse(ctx context.Context, params *GetVoicemailitemsParams) (*GetVoicemailitemsResponse, error)

	// DeleteaspecificVoicemail request
	DeleteaspecificVoicemailWithResponse(ctx context.Context, id string) (*DeleteaspecificVoicemailResponse, error)

	// GetaspecificVoicemail request
	GetaspecificVoicemailWithResponse(ctx context.Context, id string) (*GetaspecificVoicemailResponse, error)

	// ChangeaspecificVoicemail request  with any body
	ChangeaspecificVoicemailWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificVoicemailResponse, error)

	// ReplacechangeaspecificVoicemail request  with any body
	ReplacechangeaspecificVoicemailWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificVoicemailResponse, error)

	ReplacechangeaspecificVoicemailWithResponse(ctx context.Context, id string, body ReplacechangeaspecificVoicemailJSONRequestBody) (*ReplacechangeaspecificVoicemailResponse, error)

	// GetVoicemailSettingitems request
	GetVoicemailSettingitemsWithResponse(ctx context.Context, params *GetVoicemailSettingitemsParams) (*GetVoicemailSettingitemsResponse, error)

	// GetaspecificVoicemailSetting request
	GetaspecificVoicemailSettingWithResponse(ctx context.Context, id string) (*GetaspecificVoicemailSettingResponse, error)

	// ChangeaspecificVoicemailSetting request  with any body
	ChangeaspecificVoicemailSettingWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificVoicemailSettingResponse, error)

	// ReplacechangeaspecificVoicemailSetting request  with any body
	ReplacechangeaspecificVoicemailSettingWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificVoicemailSettingResponse, error)

	ReplacechangeaspecificVoicemailSettingWithResponse(ctx context.Context, id string, body ReplacechangeaspecificVoicemailSettingJSONRequestBody) (*ReplacechangeaspecificVoicemailSettingResponse, error)

	// GetVoucheritems request
	GetVoucheritemsWithResponse(ctx context.Context, params *GetVoucheritemsParams) (*GetVoucheritemsResponse, error)

	// CreateanewVoucher request  with any body
	CreateanewVoucherWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewVoucherResponse, error)

	CreateanewVoucherWithResponse(ctx context.Context, body CreateanewVoucherJSONRequestBody) (*CreateanewVoucherResponse, error)

	// DeleteaspecificVoucher request
	DeleteaspecificVoucherWithResponse(ctx context.Context, id string) (*DeleteaspecificVoucherResponse, error)

	// GetaspecificVoucher request
	GetaspecificVoucherWithResponse(ctx context.Context, id string) (*GetaspecificVoucherResponse, error)

	// ChangeaspecificVoucher request  with any body
	ChangeaspecificVoucherWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificVoucherResponse, error)

	// ReplacechangeaspecificVoucher request  with any body
	ReplacechangeaspecificVoucherWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificVoucherResponse, error)

	ReplacechangeaspecificVoucherWithResponse(ctx context.Context, id string, body ReplacechangeaspecificVoucherJSONRequestBody) (*ReplacechangeaspecificVoucherResponse, error)
}

type CreateanewAdminCertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty54
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewAdminCertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewAdminCertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Admins
}

// Status returns HTTPResponse.Status
func (r GetAdminitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty9
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Admins
}

// Status returns HTTPResponse.Status
func (r GetaspecificAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewApplyRewriteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty52
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewApplyRewriteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewApplyRewriteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAutoAttendantitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AutoAttendants
}

// Status returns HTTPResponse.Status
func (r GetAutoAttendantitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAutoAttendantitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificAutoAttendantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AutoAttendants
}

// Status returns HTTPResponse.Status
func (r GetaspecificAutoAttendantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificAutoAttendantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificAutoAttendantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificAutoAttendantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificAutoAttendantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificAutoAttendantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AutoAttendants
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificAutoAttendantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificAutoAttendantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBalanceIntervalitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BalanceInterval
}

// Status returns HTTPResponse.Status
func (r GetBalanceIntervalitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBalanceIntervalitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificBalanceIntervalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BalanceIntervals
}

// Status returns HTTPResponse.Status
func (r GetaspecificBalanceIntervalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificBalanceIntervalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBannedIpitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetBannedIpitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBannedIpitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificBannedIpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificBannedIpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificBannedIpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificBannedIpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetaspecificBannedIpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificBannedIpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBannedUseritemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetBannedUseritemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBannedUseritemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificBannedUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificBannedUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificBannedUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificBannedUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetaspecificBannedUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificBannedUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBillingFeeitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BillingFees
}

// Status returns HTTPResponse.Status
func (r GetBillingFeeitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBillingFeeitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewBillingFeeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty43
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewBillingFeeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewBillingFeeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificBillingFeeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificBillingFeeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificBillingFeeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificBillingFeeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillingFees
}

// Status returns HTTPResponse.Status
func (r GetaspecificBillingFeeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificBillingFeeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificBillingFeeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillingFees
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificBillingFeeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificBillingFeeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificBillingFeeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificBillingFeeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificBillingFeeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBillingNetworkitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BillingNetworks2
}

// Status returns HTTPResponse.Status
func (r GetBillingNetworkitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBillingNetworkitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewBillingNetworkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty41
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewBillingNetworkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewBillingNetworkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificBillingNetworkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillingNetworks
}

// Status returns HTTPResponse.Status
func (r GetaspecificBillingNetworkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificBillingNetworkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificBillingNetworkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificBillingNetworkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificBillingNetworkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificBillingNetworkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillingNetworks
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificBillingNetworkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificBillingNetworkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBillingProfileitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BillingProfiles2
}

// Status returns HTTPResponse.Status
func (r GetBillingProfileitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBillingProfileitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewBillingProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty1
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewBillingProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewBillingProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificBillingProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillingProfiles
}

// Status returns HTTPResponse.Status
func (r GetaspecificBillingProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificBillingProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificBillingProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificBillingProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificBillingProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificBillingProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillingProfiles
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificBillingProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificBillingProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBillingZoneitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BillingZones
}

// Status returns HTTPResponse.Status
func (r GetBillingZoneitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBillingZoneitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewBillingZoneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty33
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewBillingZoneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewBillingZoneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificBillingZoneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificBillingZoneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificBillingZoneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificBillingZoneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillingZones
}

// Status returns HTTPResponse.Status
func (r GetaspecificBillingZoneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificBillingZoneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificBillingZoneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificBillingZoneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificBillingZoneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificBillingZoneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificBillingZoneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificBillingZoneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewCallControlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty53
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewCallControlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewCallControlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCallForwarditemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CallForwards3
}

// Status returns HTTPResponse.Status
func (r GetCallForwarditemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCallForwarditemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificCallForwardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificCallForwardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificCallForwardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificCallForwardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CallForwards
}

// Status returns HTTPResponse.Status
func (r GetaspecificCallForwardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificCallForwardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificCallForwardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CallForwards
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificCallForwardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificCallForwardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificCallForwardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CallForwards
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificCallForwardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificCallForwardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCallListitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CallList
}

// Status returns HTTPResponse.Status
func (r GetCallListitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCallListitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificCallListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CallLists
}

// Status returns HTTPResponse.Status
func (r GetaspecificCallListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificCallListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCallQueueitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CallQueue
}

// Status returns HTTPResponse.Status
func (r GetCallQueueitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCallQueueitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificCallQueueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CallQueues
}

// Status returns HTTPResponse.Status
func (r GetaspecificCallQueueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificCallQueueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificCallRecordingFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CallRecordingFiles
}

// Status returns HTTPResponse.Status
func (r GetaspecificCallRecordingFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificCallRecordingFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCallRecordingitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CallRecordings
}

// Status returns HTTPResponse.Status
func (r GetCallRecordingitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCallRecordingitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificCallRecordingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificCallRecordingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificCallRecordingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificCallRecordingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CallRecordings
}

// Status returns HTTPResponse.Status
func (r GetaspecificCallRecordingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificCallRecordingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCallRecordingStreamitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CallRecordingStreams
}

// Status returns HTTPResponse.Status
func (r GetCallRecordingStreamitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCallRecordingStreamitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificCallRecordingStreamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificCallRecordingStreamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificCallRecordingStreamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificCallRecordingStreamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CallRecordingStreams
}

// Status returns HTTPResponse.Status
func (r GetaspecificCallRecordingStreamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificCallRecordingStreamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCallitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Call
}

// Status returns HTTPResponse.Status
func (r GetCallitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCallitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificCallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Calls
}

// Status returns HTTPResponse.Status
func (r GetaspecificCallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificCallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCapabilityitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Capability
}

// Status returns HTTPResponse.Status
func (r GetCapabilityitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCapabilityitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificCapabilityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Capabilities
}

// Status returns HTTPResponse.Status
func (r GetaspecificCapabilityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificCapabilityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCCMapEntryitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CCMapEntries
}

// Status returns HTTPResponse.Status
func (r GetCCMapEntryitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCCMapEntryitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificCCMapEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificCCMapEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificCCMapEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificCCMapEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CCMapEntries
}

// Status returns HTTPResponse.Status
func (r GetaspecificCCMapEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificCCMapEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificCCMapEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CCMapEntries
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificCCMapEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificCCMapEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificCCMapEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificCCMapEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificCCMapEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCFBNumberSetitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CFBNumberSets1
}

// Status returns HTTPResponse.Status
func (r GetCFBNumberSetitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCFBNumberSetitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewCFBNumberSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty34
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewCFBNumberSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewCFBNumberSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificCFBNumberSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificCFBNumberSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificCFBNumberSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificCFBNumberSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CFBNumberSets
}

// Status returns HTTPResponse.Status
func (r GetaspecificCFBNumberSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificCFBNumberSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificCFBNumberSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificCFBNumberSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificCFBNumberSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificCFBNumberSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificCFBNumberSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificCFBNumberSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCFDestinationSetitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CFDestinationSets2
}

// Status returns HTTPResponse.Status
func (r GetCFDestinationSetitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCFDestinationSetitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewCFDestinationSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty28
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewCFDestinationSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewCFDestinationSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificCFDestinationSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificCFDestinationSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificCFDestinationSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificCFDestinationSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CFDestinationSets
}

// Status returns HTTPResponse.Status
func (r GetaspecificCFDestinationSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificCFDestinationSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificCFDestinationSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CFDestinationSets
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificCFDestinationSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificCFDestinationSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificCFDestinationSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificCFDestinationSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificCFDestinationSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCFMappingitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CFMappings
}

// Status returns HTTPResponse.Status
func (r GetCFMappingitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCFMappingitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificCFMappingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CFMappings
}

// Status returns HTTPResponse.Status
func (r GetaspecificCFMappingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificCFMappingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificCFMappingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificCFMappingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificCFMappingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificCFMappingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificCFMappingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificCFMappingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCFSourceSetitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CFSourceSets
}

// Status returns HTTPResponse.Status
func (r GetCFSourceSetitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCFSourceSetitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewCFSourceSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty13
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewCFSourceSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewCFSourceSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificCFSourceSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificCFSourceSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificCFSourceSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificCFSourceSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CFSourceSets
}

// Status returns HTTPResponse.Status
func (r GetaspecificCFSourceSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificCFSourceSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificCFSourceSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CFSourceSets
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificCFSourceSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificCFSourceSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificCFSourceSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificCFSourceSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificCFSourceSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCFTimeSetitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CFTimeSets
}

// Status returns HTTPResponse.Status
func (r GetCFTimeSetitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCFTimeSetitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewCFTimeSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty39
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewCFTimeSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewCFTimeSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificCFTimeSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificCFTimeSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificCFTimeSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificCFTimeSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CFTimeSets
}

// Status returns HTTPResponse.Status
func (r GetaspecificCFTimeSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificCFTimeSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificCFTimeSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CFTimeSets
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificCFTimeSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificCFTimeSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificCFTimeSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CFTimeSets
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificCFTimeSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificCFTimeSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContractitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Contracts
}

// Status returns HTTPResponse.Status
func (r GetContractitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContractitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewContractResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty12
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewContractResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewContractResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificContractResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Contracts
}

// Status returns HTTPResponse.Status
func (r GetaspecificContractResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificContractResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificContractResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificContractResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificContractResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificContractResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificContractResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificContractResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConversationitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Conversation
}

// Status returns HTTPResponse.Status
func (r GetConversationitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConversationitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificConversationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Conversations
}

// Status returns HTTPResponse.Status
func (r GetaspecificConversationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificConversationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomerBalanceitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CustomerBalances
}

// Status returns HTTPResponse.Status
func (r GetCustomerBalanceitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomerBalanceitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificCustomerBalanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomerBalances
}

// Status returns HTTPResponse.Status
func (r GetaspecificCustomerBalanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificCustomerBalanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificCustomerBalanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomerBalances
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificCustomerBalanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificCustomerBalanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificCustomerBalanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificCustomerBalanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificCustomerBalanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomerContactitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CustomerContacts
}

// Status returns HTTPResponse.Status
func (r GetCustomerContactitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomerContactitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewCustomerContactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty4
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewCustomerContactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewCustomerContactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificCustomerContactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificCustomerContactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificCustomerContactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificCustomerContactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomerContacts
}

// Status returns HTTPResponse.Status
func (r GetaspecificCustomerContactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificCustomerContactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificCustomerContactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomerContacts
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificCustomerContactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificCustomerContactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificCustomerContactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificCustomerContactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificCustomerContactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomerFraudEventitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CustomerFraudEvent
}

// Status returns HTTPResponse.Status
func (r GetCustomerFraudEventitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomerFraudEventitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificCustomerFraudEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomerFraudEvents
}

// Status returns HTTPResponse.Status
func (r GetaspecificCustomerFraudEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificCustomerFraudEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomerFraudPreferenceitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CustomerFraudPreferences
}

// Status returns HTTPResponse.Status
func (r GetCustomerFraudPreferenceitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomerFraudPreferenceitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificCustomerFraudPreferenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomerFraudPreferences
}

// Status returns HTTPResponse.Status
func (r GetaspecificCustomerFraudPreferenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificCustomerFraudPreferenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificCustomerFraudPreferenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificCustomerFraudPreferenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificCustomerFraudPreferenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificCustomerFraudPreferenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomerFraudPreferences1
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificCustomerFraudPreferenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificCustomerFraudPreferenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomerLocationitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CustomerLocations
}

// Status returns HTTPResponse.Status
func (r GetCustomerLocationitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomerLocationitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewCustomerLocationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty27
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewCustomerLocationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewCustomerLocationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificCustomerLocationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificCustomerLocationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificCustomerLocationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificCustomerLocationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomerLocations
}

// Status returns HTTPResponse.Status
func (r GetaspecificCustomerLocationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificCustomerLocationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificCustomerLocationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificCustomerLocationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificCustomerLocationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificCustomerLocationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificCustomerLocationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificCustomerLocationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomerPreferenceitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetCustomerPreferenceitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomerPreferenceitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificCustomerPreferenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetaspecificCustomerPreferenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificCustomerPreferenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificCustomerPreferenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificCustomerPreferenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificCustomerPreferenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificCustomerPreferenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificCustomerPreferenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificCustomerPreferenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomeritemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Customers
}

// Status returns HTTPResponse.Status
func (r GetCustomeritemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomeritemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewCustomerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty30
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewCustomerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewCustomerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificCustomerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Customers
}

// Status returns HTTPResponse.Status
func (r GetaspecificCustomerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificCustomerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificCustomerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificCustomerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificCustomerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificCustomerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Customers
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificCustomerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificCustomerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomerZoneCostitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetCustomerZoneCostitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomerZoneCostitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificCustomerZoneCostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetaspecificCustomerZoneCostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificCustomerZoneCostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDomainPreferenceitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetDomainPreferenceitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDomainPreferenceitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificDomainPreferenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetaspecificDomainPreferenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificDomainPreferenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificDomainPreferenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificDomainPreferenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificDomainPreferenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificDomainPreferenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificDomainPreferenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificDomainPreferenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDomainitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Domains
}

// Status returns HTTPResponse.Status
func (r GetDomainitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDomainitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty36
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Domains
}

// Status returns HTTPResponse.Status
func (r GetaspecificDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmailTemplateitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EmailTemplates
}

// Status returns HTTPResponse.Status
func (r GetEmailTemplateitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmailTemplateitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewEmailTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty21
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewEmailTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewEmailTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificEmailTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificEmailTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificEmailTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificEmailTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmailTemplates
}

// Status returns HTTPResponse.Status
func (r GetaspecificEmailTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificEmailTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificEmailTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmailTemplates
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificEmailTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificEmailTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificEmailTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificEmailTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificEmailTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmergencyMappingContaineritemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EmergencyMappingContainers
}

// Status returns HTTPResponse.Status
func (r GetEmergencyMappingContaineritemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmergencyMappingContaineritemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewEmergencyMappingContainerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty29
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewEmergencyMappingContainerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewEmergencyMappingContainerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificEmergencyMappingContainerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificEmergencyMappingContainerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificEmergencyMappingContainerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificEmergencyMappingContainerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmergencyMappingContainers
}

// Status returns HTTPResponse.Status
func (r GetaspecificEmergencyMappingContainerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificEmergencyMappingContainerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificEmergencyMappingContainerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificEmergencyMappingContainerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificEmergencyMappingContainerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificEmergencyMappingContainerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificEmergencyMappingContainerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificEmergencyMappingContainerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmergencyMappingitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EmergencyMappings
}

// Status returns HTTPResponse.Status
func (r GetEmergencyMappingitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmergencyMappingitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewEmergencyMappingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty31
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewEmergencyMappingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewEmergencyMappingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificEmergencyMappingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificEmergencyMappingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificEmergencyMappingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificEmergencyMappingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmergencyMappings
}

// Status returns HTTPResponse.Status
func (r GetaspecificEmergencyMappingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificEmergencyMappingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificEmergencyMappingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificEmergencyMappingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificEmergencyMappingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificEmergencyMappingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmergencyMappings
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificEmergencyMappingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificEmergencyMappingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEventitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Event
}

// Status returns HTTPResponse.Status
func (r GetEventitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEventitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Events
}

// Status returns HTTPResponse.Status
func (r GetaspecificEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFaxitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Faxis
}

// Status returns HTTPResponse.Status
func (r GetFaxitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFaxitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewFaxResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty6
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewFaxResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewFaxResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificFaxResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Faxes
}

// Status returns HTTPResponse.Status
func (r GetaspecificFaxResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificFaxResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificFaxRecordingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetaspecificFaxRecordingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificFaxRecordingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFaxserverSettingitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FaxserverSettings1
}

// Status returns HTTPResponse.Status
func (r GetFaxserverSettingitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFaxserverSettingitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificFaxserverSettingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FaxserverSettings
}

// Status returns HTTPResponse.Status
func (r GetaspecificFaxserverSettingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificFaxserverSettingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificFaxserverSettingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificFaxserverSettingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificFaxserverSettingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificFaxserverSettingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificFaxserverSettingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificFaxserverSettingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInterceptionitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Interceptions
}

// Status returns HTTPResponse.Status
func (r GetInterceptionitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInterceptionitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewInterceptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty48
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewInterceptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewInterceptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificInterceptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificInterceptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificInterceptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificInterceptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Interceptions
}

// Status returns HTTPResponse.Status
func (r GetaspecificInterceptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificInterceptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificInterceptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificInterceptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificInterceptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificInterceptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Interceptions
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificInterceptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificInterceptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInvoiceitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Invoices
}

// Status returns HTTPResponse.Status
func (r GetInvoiceitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInvoiceitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewInvoiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty45
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewInvoiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewInvoiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificInvoiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificInvoiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificInvoiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificInvoiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Invoices
}

// Status returns HTTPResponse.Status
func (r GetaspecificInvoiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificInvoiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInvoiceTemplateitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]InvoiceTemplate
}

// Status returns HTTPResponse.Status
func (r GetInvoiceTemplateitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInvoiceTemplateitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificInvoiceTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InvoiceTemplates
}

// Status returns HTTPResponse.Status
func (r GetaspecificInvoiceTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificInvoiceTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLnpCarrieritemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]LnpCarriers
}

// Status returns HTTPResponse.Status
func (r GetLnpCarrieritemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLnpCarrieritemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewLnpCarrierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty3
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewLnpCarrierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewLnpCarrierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificLnpCarrierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificLnpCarrierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificLnpCarrierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificLnpCarrierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LnpCarriers
}

// Status returns HTTPResponse.Status
func (r GetaspecificLnpCarrierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificLnpCarrierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificLnpCarrierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LnpCarriers
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificLnpCarrierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificLnpCarrierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificLnpCarrierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LnpCarriers
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificLnpCarrierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificLnpCarrierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLnpNumberitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]LnpNumbers
}

// Status returns HTTPResponse.Status
func (r GetLnpNumberitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLnpNumberitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewLnpNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty8
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewLnpNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewLnpNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificLnpNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificLnpNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificLnpNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificLnpNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LnpNumbers
}

// Status returns HTTPResponse.Status
func (r GetaspecificLnpNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificLnpNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificLnpNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LnpNumbers
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificLnpNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificLnpNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificLnpNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificLnpNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificLnpNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMailToFaxSettingitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]MailToFaxSettings
}

// Status returns HTTPResponse.Status
func (r GetMailToFaxSettingitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMailToFaxSettingitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificMailToFaxSettingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MailToFaxSettings
}

// Status returns HTTPResponse.Status
func (r GetaspecificMailToFaxSettingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificMailToFaxSettingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificMailToFaxSettingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MailToFaxSettings
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificMailToFaxSettingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificMailToFaxSettingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificMailToFaxSettingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MailToFaxSettings2
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificMailToFaxSettingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificMailToFaxSettingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMaliciousCallitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]MaliciousCalls
}

// Status returns HTTPResponse.Status
func (r GetMaliciousCallitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMaliciousCallitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificMaliciousCallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificMaliciousCallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificMaliciousCallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificMaliciousCallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MaliciousCalls
}

// Status returns HTTPResponse.Status
func (r GetaspecificMaliciousCallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificMaliciousCallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetManagerSecretaryitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ManagerSecretary
}

// Status returns HTTPResponse.Status
func (r GetManagerSecretaryitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetManagerSecretaryitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificManagerSecretaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificManagerSecretaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificManagerSecretaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificManagerSecretaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ManagerSecretary
}

// Status returns HTTPResponse.Status
func (r GetaspecificManagerSecretaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificManagerSecretaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificManagerSecretaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificManagerSecretaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificManagerSecretaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNcosLevelitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]NcosLevels3
}

// Status returns HTTPResponse.Status
func (r GetNcosLevelitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNcosLevelitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewNcosLevelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty32
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewNcosLevelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewNcosLevelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificNcosLevelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificNcosLevelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificNcosLevelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificNcosLevelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NcosLevels
}

// Status returns HTTPResponse.Status
func (r GetaspecificNcosLevelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificNcosLevelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificNcosLevelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NcosLevels
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificNcosLevelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificNcosLevelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificNcosLevelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NcosLevels
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificNcosLevelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificNcosLevelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNcosLnpCarrieritemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]NcosLnpCarriers2
}

// Status returns HTTPResponse.Status
func (r GetNcosLnpCarrieritemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNcosLnpCarrieritemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewNcosLnpCarrierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty47
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewNcosLnpCarrierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewNcosLnpCarrierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificNcosLnpCarrierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificNcosLnpCarrierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificNcosLnpCarrierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificNcosLnpCarrierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NcosLnpCarriers
}

// Status returns HTTPResponse.Status
func (r GetaspecificNcosLnpCarrierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificNcosLnpCarrierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificNcosLnpCarrierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NcosLnpCarriers
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificNcosLnpCarrierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificNcosLnpCarrierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificNcosLnpCarrierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificNcosLnpCarrierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificNcosLnpCarrierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNcosPatternitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetNcosPatternitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNcosPatternitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewNcosPatternResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *string
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewNcosPatternResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewNcosPatternResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificNcosPatternResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificNcosPatternResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificNcosPatternResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificNcosPatternResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetaspecificNcosPatternResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificNcosPatternResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificNcosPatternResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificNcosPatternResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificNcosPatternResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificNcosPatternResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificNcosPatternResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificNcosPatternResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNumberitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Numbers3
}

// Status returns HTTPResponse.Status
func (r GetNumberitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNumberitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Numbers
}

// Status returns HTTPResponse.Status
func (r GetaspecificNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Numbers
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Numbers
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewPartyCallControlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty55
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewPartyCallControlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewPartyCallControlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificPbxDeviceConfigFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PbxDeviceConfigFiles
}

// Status returns HTTPResponse.Status
func (r GetaspecificPbxDeviceConfigFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificPbxDeviceConfigFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPbxDeviceConfigitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PbxDeviceConfigs
}

// Status returns HTTPResponse.Status
func (r GetPbxDeviceConfigitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPbxDeviceConfigitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewPbxDeviceConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty24
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewPbxDeviceConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewPbxDeviceConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificPbxDeviceConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PbxDeviceConfigs
}

// Status returns HTTPResponse.Status
func (r GetaspecificPbxDeviceConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificPbxDeviceConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificPbxDeviceConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificPbxDeviceConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificPbxDeviceConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificPbxDeviceFirmwareBinaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PbxDeviceFirmwareBinaries
}

// Status returns HTTPResponse.Status
func (r GetaspecificPbxDeviceFirmwareBinaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificPbxDeviceFirmwareBinaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPbxDeviceFirmwareitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PbxDeviceFirmwares2
}

// Status returns HTTPResponse.Status
func (r GetPbxDeviceFirmwareitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPbxDeviceFirmwareitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewPbxDeviceFirmwareResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty15
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewPbxDeviceFirmwareResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewPbxDeviceFirmwareResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificPbxDeviceFirmwareResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PbxDeviceFirmwares
}

// Status returns HTTPResponse.Status
func (r GetaspecificPbxDeviceFirmwareResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificPbxDeviceFirmwareResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificPbxDeviceFirmwareResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PbxDeviceFirmwares
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificPbxDeviceFirmwareResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificPbxDeviceFirmwareResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificPbxDeviceModelImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetaspecificPbxDeviceModelImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificPbxDeviceModelImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPbxDeviceModelitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PbxDeviceModels1
}

// Status returns HTTPResponse.Status
func (r GetPbxDeviceModelitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPbxDeviceModelitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewPbxDeviceModelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty17
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewPbxDeviceModelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewPbxDeviceModelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificPbxDeviceModelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PbxDeviceModels
}

// Status returns HTTPResponse.Status
func (r GetaspecificPbxDeviceModelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificPbxDeviceModelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificPbxDeviceModelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificPbxDeviceModelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificPbxDeviceModelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificPbxDeviceModelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificPbxDeviceModelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificPbxDeviceModelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPbxDevicePreferenceitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetPbxDevicePreferenceitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPbxDevicePreferenceitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificPbxDevicePreferenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetaspecificPbxDevicePreferenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificPbxDevicePreferenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificPbxDevicePreferenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificPbxDevicePreferenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificPbxDevicePreferenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificPbxDevicePreferenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificPbxDevicePreferenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificPbxDevicePreferenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPbxDeviceProfilePreferenceitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetPbxDeviceProfilePreferenceitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPbxDeviceProfilePreferenceitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificPbxDeviceProfilePreferenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetaspecificPbxDeviceProfilePreferenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificPbxDeviceProfilePreferenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificPbxDeviceProfilePreferenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificPbxDeviceProfilePreferenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificPbxDeviceProfilePreferenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificPbxDeviceProfilePreferenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificPbxDeviceProfilePreferenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificPbxDeviceProfilePreferenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPbxDeviceProfileitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PbxDeviceProfiles3
}

// Status returns HTTPResponse.Status
func (r GetPbxDeviceProfileitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPbxDeviceProfileitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewPbxDeviceProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty20
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewPbxDeviceProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewPbxDeviceProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificPbxDeviceProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PbxDeviceProfiles
}

// Status returns HTTPResponse.Status
func (r GetaspecificPbxDeviceProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificPbxDeviceProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificPbxDeviceProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PbxDeviceProfiles
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificPbxDeviceProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificPbxDeviceProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificPbxDeviceProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PbxDeviceProfiles
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificPbxDeviceProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificPbxDeviceProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPbxDeviceitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PbxDevices
}

// Status returns HTTPResponse.Status
func (r GetPbxDeviceitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPbxDeviceitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewPbxDeviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty23
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewPbxDeviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewPbxDeviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificPbxDeviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificPbxDeviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificPbxDeviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificPbxDeviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PbxDevices
}

// Status returns HTTPResponse.Status
func (r GetaspecificPbxDeviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificPbxDeviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificPbxDeviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificPbxDeviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificPbxDeviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificPbxDeviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PbxDevices
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificPbxDeviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificPbxDeviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPbxFieldDevicePreferenceitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetPbxFieldDevicePreferenceitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPbxFieldDevicePreferenceitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificPbxFieldDevicePreferenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetaspecificPbxFieldDevicePreferenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificPbxFieldDevicePreferenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificPbxFieldDevicePreferenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificPbxFieldDevicePreferenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificPbxFieldDevicePreferenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificPbxFieldDevicePreferenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificPbxFieldDevicePreferenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificPbxFieldDevicePreferenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPeeringGroupitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PeeringGroups3
}

// Status returns HTTPResponse.Status
func (r GetPeeringGroupitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPeeringGroupitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewPeeringGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty10
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewPeeringGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewPeeringGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificPeeringGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificPeeringGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificPeeringGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificPeeringGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PeeringGroups
}

// Status returns HTTPResponse.Status
func (r GetaspecificPeeringGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificPeeringGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificPeeringGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PeeringGroups
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificPeeringGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificPeeringGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificPeeringGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PeeringGroups
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificPeeringGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificPeeringGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPeeringInboundRuleitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetPeeringInboundRuleitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPeeringInboundRuleitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewPeeringInboundRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *string
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewPeeringInboundRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewPeeringInboundRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificPeeringInboundRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificPeeringInboundRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificPeeringInboundRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificPeeringInboundRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetaspecificPeeringInboundRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificPeeringInboundRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificPeeringInboundRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificPeeringInboundRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificPeeringInboundRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificPeeringInboundRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificPeeringInboundRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificPeeringInboundRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPeeringRuleitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PeeringRules2
}

// Status returns HTTPResponse.Status
func (r GetPeeringRuleitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPeeringRuleitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewPeeringRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty35
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewPeeringRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewPeeringRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificPeeringRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificPeeringRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificPeeringRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificPeeringRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PeeringRules
}

// Status returns HTTPResponse.Status
func (r GetaspecificPeeringRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificPeeringRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificPeeringRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificPeeringRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificPeeringRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificPeeringRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PeeringRules
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificPeeringRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificPeeringRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPeeringServerPreferenceitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetPeeringServerPreferenceitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPeeringServerPreferenceitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificPeeringServerPreferenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetaspecificPeeringServerPreferenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificPeeringServerPreferenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificPeeringServerPreferenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificPeeringServerPreferenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificPeeringServerPreferenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificPeeringServerPreferenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificPeeringServerPreferenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificPeeringServerPreferenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPeeringServeritemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PeeringServers3
}

// Status returns HTTPResponse.Status
func (r GetPeeringServeritemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPeeringServeritemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewPeeringServerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty19
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewPeeringServerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewPeeringServerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificPeeringServerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificPeeringServerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificPeeringServerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificPeeringServerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PeeringServers
}

// Status returns HTTPResponse.Status
func (r GetaspecificPeeringServerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificPeeringServerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificPeeringServerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PeeringServers
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificPeeringServerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificPeeringServerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificPeeringServerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PeeringServers
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificPeeringServerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificPeeringServerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPhonebookEntryitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PhonebookEntries
}

// Status returns HTTPResponse.Status
func (r GetPhonebookEntryitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPhonebookEntryitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewPhonebookEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty14
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewPhonebookEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewPhonebookEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificPhonebookEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificPhonebookEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificPhonebookEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificPhonebookEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PhonebookEntries
}

// Status returns HTTPResponse.Status
func (r GetaspecificPhonebookEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificPhonebookEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificPhonebookEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificPhonebookEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificPhonebookEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificPhonebookEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificPhonebookEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificPhonebookEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPreferencesMetaEntryitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PreferencesMetaEntries2
}

// Status returns HTTPResponse.Status
func (r GetPreferencesMetaEntryitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPreferencesMetaEntryitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewPreferencesMetaEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty18
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewPreferencesMetaEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewPreferencesMetaEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificPreferencesMetaEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificPreferencesMetaEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificPreferencesMetaEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificPreferencesMetaEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PreferencesMetaEntries
}

// Status returns HTTPResponse.Status
func (r GetaspecificPreferencesMetaEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificPreferencesMetaEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificPreferencesMetaEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificPreferencesMetaEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificPreferencesMetaEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificPreferencesMetaEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PreferencesMetaEntries
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificPreferencesMetaEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificPreferencesMetaEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProfilePackageitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ProfilePackages
}

// Status returns HTTPResponse.Status
func (r GetProfilePackageitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProfilePackageitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewProfilePackageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty40
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewProfilePackageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewProfilePackageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificProfilePackageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificProfilePackageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificProfilePackageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificProfilePackageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProfilePackages
}

// Status returns HTTPResponse.Status
func (r GetaspecificProfilePackageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificProfilePackageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificProfilePackageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificProfilePackageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificProfilePackageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificProfilePackageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProfilePackages
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificProfilePackageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificProfilePackageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProfilePreferenceitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetProfilePreferenceitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProfilePreferenceitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificProfilePreferenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetaspecificProfilePreferenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificProfilePreferenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificProfilePreferenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificProfilePreferenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificProfilePreferenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificProfilePreferenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificProfilePreferenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificProfilePreferenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReminderitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Reminders1
}

// Status returns HTTPResponse.Status
func (r GetReminderitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReminderitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewReminderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty2
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewReminderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewReminderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificReminderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificReminderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificReminderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificReminderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Reminders
}

// Status returns HTTPResponse.Status
func (r GetaspecificReminderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificReminderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificReminderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificReminderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificReminderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificReminderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificReminderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificReminderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReselleritemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Resellers3
}

// Status returns HTTPResponse.Status
func (r GetReselleritemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReselleritemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewResellerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty25
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewResellerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewResellerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificResellerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Resellers
}

// Status returns HTTPResponse.Status
func (r GetaspecificResellerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificResellerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificResellerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Resellers
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificResellerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificResellerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificResellerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Resellers
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificResellerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificResellerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRewriteRuleitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RewriteRules
}

// Status returns HTTPResponse.Status
func (r GetRewriteRuleitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRewriteRuleitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewRewriteRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty38
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewRewriteRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewRewriteRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificRewriteRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificRewriteRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificRewriteRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificRewriteRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RewriteRules
}

// Status returns HTTPResponse.Status
func (r GetaspecificRewriteRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificRewriteRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificRewriteRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RewriteRules
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificRewriteRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificRewriteRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificRewriteRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificRewriteRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificRewriteRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRewriteRuleSetitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RewriteRuleSets
}

// Status returns HTTPResponse.Status
func (r GetRewriteRuleSetitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRewriteRuleSetitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewRewriteRuleSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty42
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewRewriteRuleSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewRewriteRuleSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificRewriteRuleSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificRewriteRuleSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificRewriteRuleSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificRewriteRuleSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RewriteRuleSets
}

// Status returns HTTPResponse.Status
func (r GetaspecificRewriteRuleSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificRewriteRuleSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificRewriteRuleSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificRewriteRuleSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificRewriteRuleSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificRewriteRuleSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificRewriteRuleSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificRewriteRuleSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRtcAppitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RtcApps
}

// Status returns HTTPResponse.Status
func (r GetRtcAppitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRtcAppitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificRtcAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RtcApps
}

// Status returns HTTPResponse.Status
func (r GetaspecificRtcAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificRtcAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificRtcAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificRtcAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificRtcAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificRtcAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RtcApps1
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificRtcAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificRtcAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRtcNetworkitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RtcNetworks
}

// Status returns HTTPResponse.Status
func (r GetRtcNetworkitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRtcNetworkitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificRtcNetworkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RtcNetworks
}

// Status returns HTTPResponse.Status
func (r GetaspecificRtcNetworkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificRtcNetworkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificRtcNetworkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RtcNetworks
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificRtcNetworkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificRtcNetworkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificRtcNetworkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RtcNetworks2
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificRtcNetworkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificRtcNetworkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRtcSessionitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetRtcSessionitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRtcSessionitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewRtcSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]string
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewRtcSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewRtcSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificRtcSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetaspecificRtcSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificRtcSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSIPCaptureitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SIPCapture
}

// Status returns HTTPResponse.Status
func (r GetSIPCaptureitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSIPCaptureitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificSIPCaptureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SIPCaptures
}

// Status returns HTTPResponse.Status
func (r GetaspecificSIPCaptureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificSIPCaptureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSMSitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SM
}

// Status returns HTTPResponse.Status
func (r GetSMSitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSMSitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewSMSResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty37
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewSMSResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewSMSResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificSMSResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SMS
}

// Status returns HTTPResponse.Status
func (r GetaspecificSMSResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificSMSResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificSoundFileRecordingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SoundFileRecordings
}

// Status returns HTTPResponse.Status
func (r GetaspecificSoundFileRecordingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificSoundFileRecordingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSoundFileitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SoundFiles2
}

// Status returns HTTPResponse.Status
func (r GetSoundFileitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSoundFileitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewSoundFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty22
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewSoundFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewSoundFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificSoundFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificSoundFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificSoundFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificSoundFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SoundFiles
}

// Status returns HTTPResponse.Status
func (r GetaspecificSoundFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificSoundFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificSoundFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SoundFiles
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificSoundFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificSoundFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSoundGroupitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetSoundGroupitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSoundGroupitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificSoundGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetaspecificSoundGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificSoundGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSoundHandleitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SoundHandle
}

// Status returns HTTPResponse.Status
func (r GetSoundHandleitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSoundHandleitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificSoundHandleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SoundHandles
}

// Status returns HTTPResponse.Status
func (r GetaspecificSoundHandleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificSoundHandleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSoundSetitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SoundSets
}

// Status returns HTTPResponse.Status
func (r GetSoundSetitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSoundSetitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewSoundSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty49
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewSoundSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewSoundSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificSoundSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificSoundSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificSoundSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificSoundSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SoundSets
}

// Status returns HTTPResponse.Status
func (r GetaspecificSoundSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificSoundSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificSoundSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SoundSets
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificSoundSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificSoundSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificSoundSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SoundSets
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificSoundSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificSoundSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSpeedDialitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SpeedDials
}

// Status returns HTTPResponse.Status
func (r GetSpeedDialitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSpeedDialitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificSpeedDialResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SpeedDials
}

// Status returns HTTPResponse.Status
func (r GetaspecificSpeedDialResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificSpeedDialResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificSpeedDialResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificSpeedDialResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificSpeedDialResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificSpeedDialResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SpeedDials
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificSpeedDialResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificSpeedDialResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSubscriberPreferenceitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetSubscriberPreferenceitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSubscriberPreferenceitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificSubscriberPreferenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetaspecificSubscriberPreferenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificSubscriberPreferenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificSubscriberPreferenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificSubscriberPreferenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificSubscriberPreferenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificSubscriberPreferenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificSubscriberPreferenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificSubscriberPreferenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSubscriberProfileitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SubscriberProfiles
}

// Status returns HTTPResponse.Status
func (r GetSubscriberProfileitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSubscriberProfileitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewSubscriberProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty26
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewSubscriberProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewSubscriberProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificSubscriberProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificSubscriberProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificSubscriberProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificSubscriberProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubscriberProfiles
}

// Status returns HTTPResponse.Status
func (r GetaspecificSubscriberProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificSubscriberProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificSubscriberProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificSubscriberProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificSubscriberProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificSubscriberProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubscriberProfiles
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificSubscriberProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificSubscriberProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSubscriberProfileSetitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SubscriberProfileSets
}

// Status returns HTTPResponse.Status
func (r GetSubscriberProfileSetitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSubscriberProfileSetitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewSubscriberProfileSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty11
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewSubscriberProfileSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewSubscriberProfileSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificSubscriberProfileSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificSubscriberProfileSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificSubscriberProfileSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificSubscriberProfileSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubscriberProfileSets
}

// Status returns HTTPResponse.Status
func (r GetaspecificSubscriberProfileSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificSubscriberProfileSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificSubscriberProfileSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificSubscriberProfileSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificSubscriberProfileSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificSubscriberProfileSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubscriberProfileSets
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificSubscriberProfileSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificSubscriberProfileSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSubscriberRegistrationitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SubscriberRegistrations3
}

// Status returns HTTPResponse.Status
func (r GetSubscriberRegistrationitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSubscriberRegistrationitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewSubscriberRegistrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty46
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewSubscriberRegistrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewSubscriberRegistrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificSubscriberRegistrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificSubscriberRegistrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificSubscriberRegistrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificSubscriberRegistrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubscriberRegistrations
}

// Status returns HTTPResponse.Status
func (r GetaspecificSubscriberRegistrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificSubscriberRegistrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificSubscriberRegistrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubscriberRegistrations
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificSubscriberRegistrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificSubscriberRegistrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificSubscriberRegistrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubscriberRegistrations
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificSubscriberRegistrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificSubscriberRegistrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSubscriberitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Subscribers3
}

// Status returns HTTPResponse.Status
func (r GetSubscriberitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSubscriberitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewSubscriberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty5
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewSubscriberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewSubscriberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificSubscriberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificSubscriberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificSubscriberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificSubscriberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Subscribers
}

// Status returns HTTPResponse.Status
func (r GetaspecificSubscriberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificSubscriberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificSubscriberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Subscribers
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificSubscriberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificSubscriberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificSubscriberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Subscribers
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificSubscriberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificSubscriberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemContactitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SystemContacts2
}

// Status returns HTTPResponse.Status
func (r GetSystemContactitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemContactitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewSystemContactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewSystemContactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewSystemContactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificSystemContactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificSystemContactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificSystemContactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificSystemContactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SystemContacts
}

// Status returns HTTPResponse.Status
func (r GetaspecificSystemContactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificSystemContactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificSystemContactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SystemContacts
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificSystemContactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificSystemContactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificSystemContactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificSystemContactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificSystemContactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewTopupCashResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty51
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewTopupCashResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewTopupCashResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTopupLogitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TopupLog
}

// Status returns HTTPResponse.Status
func (r GetTopupLogitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTopupLogitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificTopupLogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TopupLogs
}

// Status returns HTTPResponse.Status
func (r GetaspecificTopupLogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificTopupLogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewTopupVoucherResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty50
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewTopupVoucherResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewTopupVoucherResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTrustedSourceitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TrustedSources2
}

// Status returns HTTPResponse.Status
func (r GetTrustedSourceitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTrustedSourceitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewTrustedSourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty16
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewTrustedSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewTrustedSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificTrustedSourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificTrustedSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificTrustedSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificTrustedSourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TrustedSources
}

// Status returns HTTPResponse.Status
func (r GetaspecificTrustedSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificTrustedSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificTrustedSourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TrustedSources
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificTrustedSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificTrustedSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificTrustedSourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificTrustedSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificTrustedSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUpnRewriteSetitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetUpnRewriteSetitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUpnRewriteSetitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewUpnRewriteSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *string
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewUpnRewriteSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewUpnRewriteSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificUpnRewriteSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificUpnRewriteSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificUpnRewriteSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificUpnRewriteSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetaspecificUpnRewriteSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificUpnRewriteSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificUpnRewriteSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificUpnRewriteSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificUpnRewriteSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificUpnRewriteSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificUpnRewriteSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificUpnRewriteSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVoicemailGreetingitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]VoicemailGreetings1
}

// Status returns HTTPResponse.Status
func (r GetVoicemailGreetingitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVoicemailGreetingitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewVoicemailGreetingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty7
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewVoicemailGreetingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewVoicemailGreetingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificVoicemailGreetingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificVoicemailGreetingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificVoicemailGreetingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificVoicemailGreetingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VoicemailGreetings
}

// Status returns HTTPResponse.Status
func (r GetaspecificVoicemailGreetingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificVoicemailGreetingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificVoicemailGreetingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificVoicemailGreetingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificVoicemailGreetingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificVoicemailRecordingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetaspecificVoicemailRecordingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificVoicemailRecordingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVoicemailitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Voicemails
}

// Status returns HTTPResponse.Status
func (r GetVoicemailitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVoicemailitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificVoicemailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificVoicemailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificVoicemailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificVoicemailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Voicemails
}

// Status returns HTTPResponse.Status
func (r GetaspecificVoicemailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificVoicemailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificVoicemailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Voicemails
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificVoicemailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificVoicemailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificVoicemailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificVoicemailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificVoicemailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVoicemailSettingitemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]VoicemailSettings2
}

// Status returns HTTPResponse.Status
func (r GetVoicemailSettingitemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVoicemailSettingitemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificVoicemailSettingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VoicemailSettings
}

// Status returns HTTPResponse.Status
func (r GetaspecificVoicemailSettingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificVoicemailSettingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificVoicemailSettingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VoicemailSettings
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificVoicemailSettingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificVoicemailSettingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificVoicemailSettingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificVoicemailSettingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificVoicemailSettingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVoucheritemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Vouchers
}

// Status returns HTTPResponse.Status
func (r GetVoucheritemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVoucheritemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateanewVoucherResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *[]Thenewlycreateditemorempty44
	JSON422      *Anerror
}

// Status returns HTTPResponse.Status
func (r CreateanewVoucherResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateanewVoucherResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteaspecificVoucherResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteaspecificVoucherResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteaspecificVoucherResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetaspecificVoucherResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Vouchers
}

// Status returns HTTPResponse.Status
func (r GetaspecificVoucherResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetaspecificVoucherResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeaspecificVoucherResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Vouchers
}

// Status returns HTTPResponse.Status
func (r ChangeaspecificVoucherResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeaspecificVoucherResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplacechangeaspecificVoucherResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Vouchers
}

// Status returns HTTPResponse.Status
func (r ReplacechangeaspecificVoucherResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplacechangeaspecificVoucherResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateanewAdminCertWithBodyWithResponse request with arbitrary body returning *CreateanewAdminCertResponse
func (c *ClientWithResponses) CreateanewAdminCertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewAdminCertResponse, error) {
	rsp, err := c.CreateanewAdminCertWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewAdminCertResponse(rsp)
}

func (c *ClientWithResponses) CreateanewAdminCertWithResponse(ctx context.Context, body CreateanewAdminCertJSONRequestBody) (*CreateanewAdminCertResponse, error) {
	rsp, err := c.CreateanewAdminCert(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewAdminCertResponse(rsp)
}

// GetAdminitemsWithResponse request returning *GetAdminitemsResponse
func (c *ClientWithResponses) GetAdminitemsWithResponse(ctx context.Context, params *GetAdminitemsParams) (*GetAdminitemsResponse, error) {
	rsp, err := c.GetAdminitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminitemsResponse(rsp)
}

// CreateanewAdminWithBodyWithResponse request with arbitrary body returning *CreateanewAdminResponse
func (c *ClientWithResponses) CreateanewAdminWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewAdminResponse, error) {
	rsp, err := c.CreateanewAdminWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewAdminResponse(rsp)
}

func (c *ClientWithResponses) CreateanewAdminWithResponse(ctx context.Context, body CreateanewAdminJSONRequestBody) (*CreateanewAdminResponse, error) {
	rsp, err := c.CreateanewAdmin(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewAdminResponse(rsp)
}

// DeleteaspecificAdminWithResponse request returning *DeleteaspecificAdminResponse
func (c *ClientWithResponses) DeleteaspecificAdminWithResponse(ctx context.Context, id string) (*DeleteaspecificAdminResponse, error) {
	rsp, err := c.DeleteaspecificAdmin(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificAdminResponse(rsp)
}

// GetaspecificAdminWithResponse request returning *GetaspecificAdminResponse
func (c *ClientWithResponses) GetaspecificAdminWithResponse(ctx context.Context, id string) (*GetaspecificAdminResponse, error) {
	rsp, err := c.GetaspecificAdmin(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificAdminResponse(rsp)
}

// CreateanewApplyRewriteWithBodyWithResponse request with arbitrary body returning *CreateanewApplyRewriteResponse
func (c *ClientWithResponses) CreateanewApplyRewriteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewApplyRewriteResponse, error) {
	rsp, err := c.CreateanewApplyRewriteWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewApplyRewriteResponse(rsp)
}

func (c *ClientWithResponses) CreateanewApplyRewriteWithResponse(ctx context.Context, body CreateanewApplyRewriteJSONRequestBody) (*CreateanewApplyRewriteResponse, error) {
	rsp, err := c.CreateanewApplyRewrite(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewApplyRewriteResponse(rsp)
}

// GetAutoAttendantitemsWithResponse request returning *GetAutoAttendantitemsResponse
func (c *ClientWithResponses) GetAutoAttendantitemsWithResponse(ctx context.Context, params *GetAutoAttendantitemsParams) (*GetAutoAttendantitemsResponse, error) {
	rsp, err := c.GetAutoAttendantitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetAutoAttendantitemsResponse(rsp)
}

// GetaspecificAutoAttendantWithResponse request returning *GetaspecificAutoAttendantResponse
func (c *ClientWithResponses) GetaspecificAutoAttendantWithResponse(ctx context.Context, id string) (*GetaspecificAutoAttendantResponse, error) {
	rsp, err := c.GetaspecificAutoAttendant(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificAutoAttendantResponse(rsp)
}

// ChangeaspecificAutoAttendantWithBodyWithResponse request with arbitrary body returning *ChangeaspecificAutoAttendantResponse
func (c *ClientWithResponses) ChangeaspecificAutoAttendantWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificAutoAttendantResponse, error) {
	rsp, err := c.ChangeaspecificAutoAttendantWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificAutoAttendantResponse(rsp)
}

// ReplacechangeaspecificAutoAttendantWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificAutoAttendantResponse
func (c *ClientWithResponses) ReplacechangeaspecificAutoAttendantWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificAutoAttendantResponse, error) {
	rsp, err := c.ReplacechangeaspecificAutoAttendantWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificAutoAttendantResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificAutoAttendantWithResponse(ctx context.Context, id string, body ReplacechangeaspecificAutoAttendantJSONRequestBody) (*ReplacechangeaspecificAutoAttendantResponse, error) {
	rsp, err := c.ReplacechangeaspecificAutoAttendant(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificAutoAttendantResponse(rsp)
}

// GetBalanceIntervalitemsWithResponse request returning *GetBalanceIntervalitemsResponse
func (c *ClientWithResponses) GetBalanceIntervalitemsWithResponse(ctx context.Context, params *GetBalanceIntervalitemsParams) (*GetBalanceIntervalitemsResponse, error) {
	rsp, err := c.GetBalanceIntervalitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetBalanceIntervalitemsResponse(rsp)
}

// GetaspecificBalanceIntervalWithResponse request returning *GetaspecificBalanceIntervalResponse
func (c *ClientWithResponses) GetaspecificBalanceIntervalWithResponse(ctx context.Context, id string) (*GetaspecificBalanceIntervalResponse, error) {
	rsp, err := c.GetaspecificBalanceInterval(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificBalanceIntervalResponse(rsp)
}

// GetBannedIpitemsWithResponse request returning *GetBannedIpitemsResponse
func (c *ClientWithResponses) GetBannedIpitemsWithResponse(ctx context.Context, params *GetBannedIpitemsParams) (*GetBannedIpitemsResponse, error) {
	rsp, err := c.GetBannedIpitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetBannedIpitemsResponse(rsp)
}

// DeleteaspecificBannedIpWithResponse request returning *DeleteaspecificBannedIpResponse
func (c *ClientWithResponses) DeleteaspecificBannedIpWithResponse(ctx context.Context, id string) (*DeleteaspecificBannedIpResponse, error) {
	rsp, err := c.DeleteaspecificBannedIp(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificBannedIpResponse(rsp)
}

// GetaspecificBannedIpWithResponse request returning *GetaspecificBannedIpResponse
func (c *ClientWithResponses) GetaspecificBannedIpWithResponse(ctx context.Context, id string) (*GetaspecificBannedIpResponse, error) {
	rsp, err := c.GetaspecificBannedIp(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificBannedIpResponse(rsp)
}

// GetBannedUseritemsWithResponse request returning *GetBannedUseritemsResponse
func (c *ClientWithResponses) GetBannedUseritemsWithResponse(ctx context.Context, params *GetBannedUseritemsParams) (*GetBannedUseritemsResponse, error) {
	rsp, err := c.GetBannedUseritems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetBannedUseritemsResponse(rsp)
}

// DeleteaspecificBannedUserWithResponse request returning *DeleteaspecificBannedUserResponse
func (c *ClientWithResponses) DeleteaspecificBannedUserWithResponse(ctx context.Context, id string) (*DeleteaspecificBannedUserResponse, error) {
	rsp, err := c.DeleteaspecificBannedUser(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificBannedUserResponse(rsp)
}

// GetaspecificBannedUserWithResponse request returning *GetaspecificBannedUserResponse
func (c *ClientWithResponses) GetaspecificBannedUserWithResponse(ctx context.Context, id string) (*GetaspecificBannedUserResponse, error) {
	rsp, err := c.GetaspecificBannedUser(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificBannedUserResponse(rsp)
}

// GetBillingFeeitemsWithResponse request returning *GetBillingFeeitemsResponse
func (c *ClientWithResponses) GetBillingFeeitemsWithResponse(ctx context.Context, params *GetBillingFeeitemsParams) (*GetBillingFeeitemsResponse, error) {
	rsp, err := c.GetBillingFeeitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetBillingFeeitemsResponse(rsp)
}

// CreateanewBillingFeeWithBodyWithResponse request with arbitrary body returning *CreateanewBillingFeeResponse
func (c *ClientWithResponses) CreateanewBillingFeeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewBillingFeeResponse, error) {
	rsp, err := c.CreateanewBillingFeeWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewBillingFeeResponse(rsp)
}

func (c *ClientWithResponses) CreateanewBillingFeeWithResponse(ctx context.Context, body CreateanewBillingFeeJSONRequestBody) (*CreateanewBillingFeeResponse, error) {
	rsp, err := c.CreateanewBillingFee(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewBillingFeeResponse(rsp)
}

// DeleteaspecificBillingFeeWithResponse request returning *DeleteaspecificBillingFeeResponse
func (c *ClientWithResponses) DeleteaspecificBillingFeeWithResponse(ctx context.Context, id string) (*DeleteaspecificBillingFeeResponse, error) {
	rsp, err := c.DeleteaspecificBillingFee(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificBillingFeeResponse(rsp)
}

// GetaspecificBillingFeeWithResponse request returning *GetaspecificBillingFeeResponse
func (c *ClientWithResponses) GetaspecificBillingFeeWithResponse(ctx context.Context, id string) (*GetaspecificBillingFeeResponse, error) {
	rsp, err := c.GetaspecificBillingFee(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificBillingFeeResponse(rsp)
}

// ChangeaspecificBillingFeeWithBodyWithResponse request with arbitrary body returning *ChangeaspecificBillingFeeResponse
func (c *ClientWithResponses) ChangeaspecificBillingFeeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificBillingFeeResponse, error) {
	rsp, err := c.ChangeaspecificBillingFeeWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificBillingFeeResponse(rsp)
}

// ReplacechangeaspecificBillingFeeWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificBillingFeeResponse
func (c *ClientWithResponses) ReplacechangeaspecificBillingFeeWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificBillingFeeResponse, error) {
	rsp, err := c.ReplacechangeaspecificBillingFeeWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificBillingFeeResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificBillingFeeWithResponse(ctx context.Context, id string, body ReplacechangeaspecificBillingFeeJSONRequestBody) (*ReplacechangeaspecificBillingFeeResponse, error) {
	rsp, err := c.ReplacechangeaspecificBillingFee(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificBillingFeeResponse(rsp)
}

// GetBillingNetworkitemsWithResponse request returning *GetBillingNetworkitemsResponse
func (c *ClientWithResponses) GetBillingNetworkitemsWithResponse(ctx context.Context, params *GetBillingNetworkitemsParams) (*GetBillingNetworkitemsResponse, error) {
	rsp, err := c.GetBillingNetworkitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetBillingNetworkitemsResponse(rsp)
}

// CreateanewBillingNetworkWithBodyWithResponse request with arbitrary body returning *CreateanewBillingNetworkResponse
func (c *ClientWithResponses) CreateanewBillingNetworkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewBillingNetworkResponse, error) {
	rsp, err := c.CreateanewBillingNetworkWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewBillingNetworkResponse(rsp)
}

func (c *ClientWithResponses) CreateanewBillingNetworkWithResponse(ctx context.Context, body CreateanewBillingNetworkJSONRequestBody) (*CreateanewBillingNetworkResponse, error) {
	rsp, err := c.CreateanewBillingNetwork(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewBillingNetworkResponse(rsp)
}

// GetaspecificBillingNetworkWithResponse request returning *GetaspecificBillingNetworkResponse
func (c *ClientWithResponses) GetaspecificBillingNetworkWithResponse(ctx context.Context, id string) (*GetaspecificBillingNetworkResponse, error) {
	rsp, err := c.GetaspecificBillingNetwork(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificBillingNetworkResponse(rsp)
}

// ChangeaspecificBillingNetworkWithBodyWithResponse request with arbitrary body returning *ChangeaspecificBillingNetworkResponse
func (c *ClientWithResponses) ChangeaspecificBillingNetworkWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificBillingNetworkResponse, error) {
	rsp, err := c.ChangeaspecificBillingNetworkWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificBillingNetworkResponse(rsp)
}

// ReplacechangeaspecificBillingNetworkWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificBillingNetworkResponse
func (c *ClientWithResponses) ReplacechangeaspecificBillingNetworkWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificBillingNetworkResponse, error) {
	rsp, err := c.ReplacechangeaspecificBillingNetworkWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificBillingNetworkResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificBillingNetworkWithResponse(ctx context.Context, id string, body ReplacechangeaspecificBillingNetworkJSONRequestBody) (*ReplacechangeaspecificBillingNetworkResponse, error) {
	rsp, err := c.ReplacechangeaspecificBillingNetwork(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificBillingNetworkResponse(rsp)
}

// GetBillingProfileitemsWithResponse request returning *GetBillingProfileitemsResponse
func (c *ClientWithResponses) GetBillingProfileitemsWithResponse(ctx context.Context, params *GetBillingProfileitemsParams) (*GetBillingProfileitemsResponse, error) {
	rsp, err := c.GetBillingProfileitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetBillingProfileitemsResponse(rsp)
}

// CreateanewBillingProfileWithBodyWithResponse request with arbitrary body returning *CreateanewBillingProfileResponse
func (c *ClientWithResponses) CreateanewBillingProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewBillingProfileResponse, error) {
	rsp, err := c.CreateanewBillingProfileWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewBillingProfileResponse(rsp)
}

func (c *ClientWithResponses) CreateanewBillingProfileWithResponse(ctx context.Context, body CreateanewBillingProfileJSONRequestBody) (*CreateanewBillingProfileResponse, error) {
	rsp, err := c.CreateanewBillingProfile(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewBillingProfileResponse(rsp)
}

// GetaspecificBillingProfileWithResponse request returning *GetaspecificBillingProfileResponse
func (c *ClientWithResponses) GetaspecificBillingProfileWithResponse(ctx context.Context, id string) (*GetaspecificBillingProfileResponse, error) {
	rsp, err := c.GetaspecificBillingProfile(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificBillingProfileResponse(rsp)
}

// ChangeaspecificBillingProfileWithBodyWithResponse request with arbitrary body returning *ChangeaspecificBillingProfileResponse
func (c *ClientWithResponses) ChangeaspecificBillingProfileWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificBillingProfileResponse, error) {
	rsp, err := c.ChangeaspecificBillingProfileWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificBillingProfileResponse(rsp)
}

// ReplacechangeaspecificBillingProfileWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificBillingProfileResponse
func (c *ClientWithResponses) ReplacechangeaspecificBillingProfileWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificBillingProfileResponse, error) {
	rsp, err := c.ReplacechangeaspecificBillingProfileWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificBillingProfileResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificBillingProfileWithResponse(ctx context.Context, id string, body ReplacechangeaspecificBillingProfileJSONRequestBody) (*ReplacechangeaspecificBillingProfileResponse, error) {
	rsp, err := c.ReplacechangeaspecificBillingProfile(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificBillingProfileResponse(rsp)
}

// GetBillingZoneitemsWithResponse request returning *GetBillingZoneitemsResponse
func (c *ClientWithResponses) GetBillingZoneitemsWithResponse(ctx context.Context, params *GetBillingZoneitemsParams) (*GetBillingZoneitemsResponse, error) {
	rsp, err := c.GetBillingZoneitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetBillingZoneitemsResponse(rsp)
}

// CreateanewBillingZoneWithBodyWithResponse request with arbitrary body returning *CreateanewBillingZoneResponse
func (c *ClientWithResponses) CreateanewBillingZoneWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewBillingZoneResponse, error) {
	rsp, err := c.CreateanewBillingZoneWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewBillingZoneResponse(rsp)
}

func (c *ClientWithResponses) CreateanewBillingZoneWithResponse(ctx context.Context, body CreateanewBillingZoneJSONRequestBody) (*CreateanewBillingZoneResponse, error) {
	rsp, err := c.CreateanewBillingZone(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewBillingZoneResponse(rsp)
}

// DeleteaspecificBillingZoneWithResponse request returning *DeleteaspecificBillingZoneResponse
func (c *ClientWithResponses) DeleteaspecificBillingZoneWithResponse(ctx context.Context, id string) (*DeleteaspecificBillingZoneResponse, error) {
	rsp, err := c.DeleteaspecificBillingZone(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificBillingZoneResponse(rsp)
}

// GetaspecificBillingZoneWithResponse request returning *GetaspecificBillingZoneResponse
func (c *ClientWithResponses) GetaspecificBillingZoneWithResponse(ctx context.Context, id string) (*GetaspecificBillingZoneResponse, error) {
	rsp, err := c.GetaspecificBillingZone(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificBillingZoneResponse(rsp)
}

// ChangeaspecificBillingZoneWithBodyWithResponse request with arbitrary body returning *ChangeaspecificBillingZoneResponse
func (c *ClientWithResponses) ChangeaspecificBillingZoneWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificBillingZoneResponse, error) {
	rsp, err := c.ChangeaspecificBillingZoneWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificBillingZoneResponse(rsp)
}

// ReplacechangeaspecificBillingZoneWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificBillingZoneResponse
func (c *ClientWithResponses) ReplacechangeaspecificBillingZoneWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificBillingZoneResponse, error) {
	rsp, err := c.ReplacechangeaspecificBillingZoneWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificBillingZoneResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificBillingZoneWithResponse(ctx context.Context, id string, body ReplacechangeaspecificBillingZoneJSONRequestBody) (*ReplacechangeaspecificBillingZoneResponse, error) {
	rsp, err := c.ReplacechangeaspecificBillingZone(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificBillingZoneResponse(rsp)
}

// CreateanewCallControlWithBodyWithResponse request with arbitrary body returning *CreateanewCallControlResponse
func (c *ClientWithResponses) CreateanewCallControlWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewCallControlResponse, error) {
	rsp, err := c.CreateanewCallControlWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewCallControlResponse(rsp)
}

func (c *ClientWithResponses) CreateanewCallControlWithResponse(ctx context.Context, body CreateanewCallControlJSONRequestBody) (*CreateanewCallControlResponse, error) {
	rsp, err := c.CreateanewCallControl(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewCallControlResponse(rsp)
}

// GetCallForwarditemsWithResponse request returning *GetCallForwarditemsResponse
func (c *ClientWithResponses) GetCallForwarditemsWithResponse(ctx context.Context, params *GetCallForwarditemsParams) (*GetCallForwarditemsResponse, error) {
	rsp, err := c.GetCallForwarditems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCallForwarditemsResponse(rsp)
}

// DeleteaspecificCallForwardWithResponse request returning *DeleteaspecificCallForwardResponse
func (c *ClientWithResponses) DeleteaspecificCallForwardWithResponse(ctx context.Context, id string) (*DeleteaspecificCallForwardResponse, error) {
	rsp, err := c.DeleteaspecificCallForward(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificCallForwardResponse(rsp)
}

// GetaspecificCallForwardWithResponse request returning *GetaspecificCallForwardResponse
func (c *ClientWithResponses) GetaspecificCallForwardWithResponse(ctx context.Context, id string) (*GetaspecificCallForwardResponse, error) {
	rsp, err := c.GetaspecificCallForward(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificCallForwardResponse(rsp)
}

// ChangeaspecificCallForwardWithBodyWithResponse request with arbitrary body returning *ChangeaspecificCallForwardResponse
func (c *ClientWithResponses) ChangeaspecificCallForwardWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificCallForwardResponse, error) {
	rsp, err := c.ChangeaspecificCallForwardWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificCallForwardResponse(rsp)
}

// ReplacechangeaspecificCallForwardWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificCallForwardResponse
func (c *ClientWithResponses) ReplacechangeaspecificCallForwardWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificCallForwardResponse, error) {
	rsp, err := c.ReplacechangeaspecificCallForwardWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificCallForwardResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificCallForwardWithResponse(ctx context.Context, id string, body ReplacechangeaspecificCallForwardJSONRequestBody) (*ReplacechangeaspecificCallForwardResponse, error) {
	rsp, err := c.ReplacechangeaspecificCallForward(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificCallForwardResponse(rsp)
}

// GetCallListitemsWithResponse request returning *GetCallListitemsResponse
func (c *ClientWithResponses) GetCallListitemsWithResponse(ctx context.Context, params *GetCallListitemsParams) (*GetCallListitemsResponse, error) {
	rsp, err := c.GetCallListitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCallListitemsResponse(rsp)
}

// GetaspecificCallListWithResponse request returning *GetaspecificCallListResponse
func (c *ClientWithResponses) GetaspecificCallListWithResponse(ctx context.Context, id string) (*GetaspecificCallListResponse, error) {
	rsp, err := c.GetaspecificCallList(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificCallListResponse(rsp)
}

// GetCallQueueitemsWithResponse request returning *GetCallQueueitemsResponse
func (c *ClientWithResponses) GetCallQueueitemsWithResponse(ctx context.Context, params *GetCallQueueitemsParams) (*GetCallQueueitemsResponse, error) {
	rsp, err := c.GetCallQueueitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCallQueueitemsResponse(rsp)
}

// GetaspecificCallQueueWithResponse request returning *GetaspecificCallQueueResponse
func (c *ClientWithResponses) GetaspecificCallQueueWithResponse(ctx context.Context, id string) (*GetaspecificCallQueueResponse, error) {
	rsp, err := c.GetaspecificCallQueue(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificCallQueueResponse(rsp)
}

// GetaspecificCallRecordingFileWithResponse request returning *GetaspecificCallRecordingFileResponse
func (c *ClientWithResponses) GetaspecificCallRecordingFileWithResponse(ctx context.Context, id string) (*GetaspecificCallRecordingFileResponse, error) {
	rsp, err := c.GetaspecificCallRecordingFile(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificCallRecordingFileResponse(rsp)
}

// GetCallRecordingitemsWithResponse request returning *GetCallRecordingitemsResponse
func (c *ClientWithResponses) GetCallRecordingitemsWithResponse(ctx context.Context, params *GetCallRecordingitemsParams) (*GetCallRecordingitemsResponse, error) {
	rsp, err := c.GetCallRecordingitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCallRecordingitemsResponse(rsp)
}

// DeleteaspecificCallRecordingWithResponse request returning *DeleteaspecificCallRecordingResponse
func (c *ClientWithResponses) DeleteaspecificCallRecordingWithResponse(ctx context.Context, id string) (*DeleteaspecificCallRecordingResponse, error) {
	rsp, err := c.DeleteaspecificCallRecording(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificCallRecordingResponse(rsp)
}

// GetaspecificCallRecordingWithResponse request returning *GetaspecificCallRecordingResponse
func (c *ClientWithResponses) GetaspecificCallRecordingWithResponse(ctx context.Context, id string) (*GetaspecificCallRecordingResponse, error) {
	rsp, err := c.GetaspecificCallRecording(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificCallRecordingResponse(rsp)
}

// GetCallRecordingStreamitemsWithResponse request returning *GetCallRecordingStreamitemsResponse
func (c *ClientWithResponses) GetCallRecordingStreamitemsWithResponse(ctx context.Context, params *GetCallRecordingStreamitemsParams) (*GetCallRecordingStreamitemsResponse, error) {
	rsp, err := c.GetCallRecordingStreamitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCallRecordingStreamitemsResponse(rsp)
}

// DeleteaspecificCallRecordingStreamWithResponse request returning *DeleteaspecificCallRecordingStreamResponse
func (c *ClientWithResponses) DeleteaspecificCallRecordingStreamWithResponse(ctx context.Context, id string) (*DeleteaspecificCallRecordingStreamResponse, error) {
	rsp, err := c.DeleteaspecificCallRecordingStream(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificCallRecordingStreamResponse(rsp)
}

// GetaspecificCallRecordingStreamWithResponse request returning *GetaspecificCallRecordingStreamResponse
func (c *ClientWithResponses) GetaspecificCallRecordingStreamWithResponse(ctx context.Context, id string) (*GetaspecificCallRecordingStreamResponse, error) {
	rsp, err := c.GetaspecificCallRecordingStream(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificCallRecordingStreamResponse(rsp)
}

// GetCallitemsWithResponse request returning *GetCallitemsResponse
func (c *ClientWithResponses) GetCallitemsWithResponse(ctx context.Context, params *GetCallitemsParams) (*GetCallitemsResponse, error) {
	rsp, err := c.GetCallitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCallitemsResponse(rsp)
}

// GetaspecificCallWithResponse request returning *GetaspecificCallResponse
func (c *ClientWithResponses) GetaspecificCallWithResponse(ctx context.Context, id string) (*GetaspecificCallResponse, error) {
	rsp, err := c.GetaspecificCall(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificCallResponse(rsp)
}

// GetCapabilityitemsWithResponse request returning *GetCapabilityitemsResponse
func (c *ClientWithResponses) GetCapabilityitemsWithResponse(ctx context.Context, params *GetCapabilityitemsParams) (*GetCapabilityitemsResponse, error) {
	rsp, err := c.GetCapabilityitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCapabilityitemsResponse(rsp)
}

// GetaspecificCapabilityWithResponse request returning *GetaspecificCapabilityResponse
func (c *ClientWithResponses) GetaspecificCapabilityWithResponse(ctx context.Context, id string) (*GetaspecificCapabilityResponse, error) {
	rsp, err := c.GetaspecificCapability(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificCapabilityResponse(rsp)
}

// GetCCMapEntryitemsWithResponse request returning *GetCCMapEntryitemsResponse
func (c *ClientWithResponses) GetCCMapEntryitemsWithResponse(ctx context.Context, params *GetCCMapEntryitemsParams) (*GetCCMapEntryitemsResponse, error) {
	rsp, err := c.GetCCMapEntryitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCCMapEntryitemsResponse(rsp)
}

// DeleteaspecificCCMapEntryWithResponse request returning *DeleteaspecificCCMapEntryResponse
func (c *ClientWithResponses) DeleteaspecificCCMapEntryWithResponse(ctx context.Context, id string) (*DeleteaspecificCCMapEntryResponse, error) {
	rsp, err := c.DeleteaspecificCCMapEntry(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificCCMapEntryResponse(rsp)
}

// GetaspecificCCMapEntryWithResponse request returning *GetaspecificCCMapEntryResponse
func (c *ClientWithResponses) GetaspecificCCMapEntryWithResponse(ctx context.Context, id string) (*GetaspecificCCMapEntryResponse, error) {
	rsp, err := c.GetaspecificCCMapEntry(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificCCMapEntryResponse(rsp)
}

// ChangeaspecificCCMapEntryWithBodyWithResponse request with arbitrary body returning *ChangeaspecificCCMapEntryResponse
func (c *ClientWithResponses) ChangeaspecificCCMapEntryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificCCMapEntryResponse, error) {
	rsp, err := c.ChangeaspecificCCMapEntryWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificCCMapEntryResponse(rsp)
}

// ReplacechangeaspecificCCMapEntryWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificCCMapEntryResponse
func (c *ClientWithResponses) ReplacechangeaspecificCCMapEntryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificCCMapEntryResponse, error) {
	rsp, err := c.ReplacechangeaspecificCCMapEntryWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificCCMapEntryResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificCCMapEntryWithResponse(ctx context.Context, id string, body ReplacechangeaspecificCCMapEntryJSONRequestBody) (*ReplacechangeaspecificCCMapEntryResponse, error) {
	rsp, err := c.ReplacechangeaspecificCCMapEntry(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificCCMapEntryResponse(rsp)
}

// GetCFBNumberSetitemsWithResponse request returning *GetCFBNumberSetitemsResponse
func (c *ClientWithResponses) GetCFBNumberSetitemsWithResponse(ctx context.Context, params *GetCFBNumberSetitemsParams) (*GetCFBNumberSetitemsResponse, error) {
	rsp, err := c.GetCFBNumberSetitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCFBNumberSetitemsResponse(rsp)
}

// CreateanewCFBNumberSetWithBodyWithResponse request with arbitrary body returning *CreateanewCFBNumberSetResponse
func (c *ClientWithResponses) CreateanewCFBNumberSetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewCFBNumberSetResponse, error) {
	rsp, err := c.CreateanewCFBNumberSetWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewCFBNumberSetResponse(rsp)
}

func (c *ClientWithResponses) CreateanewCFBNumberSetWithResponse(ctx context.Context, body CreateanewCFBNumberSetJSONRequestBody) (*CreateanewCFBNumberSetResponse, error) {
	rsp, err := c.CreateanewCFBNumberSet(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewCFBNumberSetResponse(rsp)
}

// DeleteaspecificCFBNumberSetWithResponse request returning *DeleteaspecificCFBNumberSetResponse
func (c *ClientWithResponses) DeleteaspecificCFBNumberSetWithResponse(ctx context.Context, id string) (*DeleteaspecificCFBNumberSetResponse, error) {
	rsp, err := c.DeleteaspecificCFBNumberSet(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificCFBNumberSetResponse(rsp)
}

// GetaspecificCFBNumberSetWithResponse request returning *GetaspecificCFBNumberSetResponse
func (c *ClientWithResponses) GetaspecificCFBNumberSetWithResponse(ctx context.Context, id string) (*GetaspecificCFBNumberSetResponse, error) {
	rsp, err := c.GetaspecificCFBNumberSet(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificCFBNumberSetResponse(rsp)
}

// ChangeaspecificCFBNumberSetWithBodyWithResponse request with arbitrary body returning *ChangeaspecificCFBNumberSetResponse
func (c *ClientWithResponses) ChangeaspecificCFBNumberSetWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificCFBNumberSetResponse, error) {
	rsp, err := c.ChangeaspecificCFBNumberSetWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificCFBNumberSetResponse(rsp)
}

// ReplacechangeaspecificCFBNumberSetWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificCFBNumberSetResponse
func (c *ClientWithResponses) ReplacechangeaspecificCFBNumberSetWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificCFBNumberSetResponse, error) {
	rsp, err := c.ReplacechangeaspecificCFBNumberSetWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificCFBNumberSetResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificCFBNumberSetWithResponse(ctx context.Context, id string, body ReplacechangeaspecificCFBNumberSetJSONRequestBody) (*ReplacechangeaspecificCFBNumberSetResponse, error) {
	rsp, err := c.ReplacechangeaspecificCFBNumberSet(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificCFBNumberSetResponse(rsp)
}

// GetCFDestinationSetitemsWithResponse request returning *GetCFDestinationSetitemsResponse
func (c *ClientWithResponses) GetCFDestinationSetitemsWithResponse(ctx context.Context, params *GetCFDestinationSetitemsParams) (*GetCFDestinationSetitemsResponse, error) {
	rsp, err := c.GetCFDestinationSetitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCFDestinationSetitemsResponse(rsp)
}

// CreateanewCFDestinationSetWithBodyWithResponse request with arbitrary body returning *CreateanewCFDestinationSetResponse
func (c *ClientWithResponses) CreateanewCFDestinationSetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewCFDestinationSetResponse, error) {
	rsp, err := c.CreateanewCFDestinationSetWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewCFDestinationSetResponse(rsp)
}

func (c *ClientWithResponses) CreateanewCFDestinationSetWithResponse(ctx context.Context, body CreateanewCFDestinationSetJSONRequestBody) (*CreateanewCFDestinationSetResponse, error) {
	rsp, err := c.CreateanewCFDestinationSet(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewCFDestinationSetResponse(rsp)
}

// DeleteaspecificCFDestinationSetWithResponse request returning *DeleteaspecificCFDestinationSetResponse
func (c *ClientWithResponses) DeleteaspecificCFDestinationSetWithResponse(ctx context.Context, id string) (*DeleteaspecificCFDestinationSetResponse, error) {
	rsp, err := c.DeleteaspecificCFDestinationSet(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificCFDestinationSetResponse(rsp)
}

// GetaspecificCFDestinationSetWithResponse request returning *GetaspecificCFDestinationSetResponse
func (c *ClientWithResponses) GetaspecificCFDestinationSetWithResponse(ctx context.Context, id string) (*GetaspecificCFDestinationSetResponse, error) {
	rsp, err := c.GetaspecificCFDestinationSet(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificCFDestinationSetResponse(rsp)
}

// ChangeaspecificCFDestinationSetWithBodyWithResponse request with arbitrary body returning *ChangeaspecificCFDestinationSetResponse
func (c *ClientWithResponses) ChangeaspecificCFDestinationSetWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificCFDestinationSetResponse, error) {
	rsp, err := c.ChangeaspecificCFDestinationSetWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificCFDestinationSetResponse(rsp)
}

// ReplacechangeaspecificCFDestinationSetWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificCFDestinationSetResponse
func (c *ClientWithResponses) ReplacechangeaspecificCFDestinationSetWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificCFDestinationSetResponse, error) {
	rsp, err := c.ReplacechangeaspecificCFDestinationSetWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificCFDestinationSetResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificCFDestinationSetWithResponse(ctx context.Context, id string, body ReplacechangeaspecificCFDestinationSetJSONRequestBody) (*ReplacechangeaspecificCFDestinationSetResponse, error) {
	rsp, err := c.ReplacechangeaspecificCFDestinationSet(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificCFDestinationSetResponse(rsp)
}

// GetCFMappingitemsWithResponse request returning *GetCFMappingitemsResponse
func (c *ClientWithResponses) GetCFMappingitemsWithResponse(ctx context.Context, params *GetCFMappingitemsParams) (*GetCFMappingitemsResponse, error) {
	rsp, err := c.GetCFMappingitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCFMappingitemsResponse(rsp)
}

// GetaspecificCFMappingWithResponse request returning *GetaspecificCFMappingResponse
func (c *ClientWithResponses) GetaspecificCFMappingWithResponse(ctx context.Context, id string) (*GetaspecificCFMappingResponse, error) {
	rsp, err := c.GetaspecificCFMapping(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificCFMappingResponse(rsp)
}

// ChangeaspecificCFMappingWithBodyWithResponse request with arbitrary body returning *ChangeaspecificCFMappingResponse
func (c *ClientWithResponses) ChangeaspecificCFMappingWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificCFMappingResponse, error) {
	rsp, err := c.ChangeaspecificCFMappingWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificCFMappingResponse(rsp)
}

// ReplacechangeaspecificCFMappingWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificCFMappingResponse
func (c *ClientWithResponses) ReplacechangeaspecificCFMappingWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificCFMappingResponse, error) {
	rsp, err := c.ReplacechangeaspecificCFMappingWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificCFMappingResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificCFMappingWithResponse(ctx context.Context, id string, body ReplacechangeaspecificCFMappingJSONRequestBody) (*ReplacechangeaspecificCFMappingResponse, error) {
	rsp, err := c.ReplacechangeaspecificCFMapping(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificCFMappingResponse(rsp)
}

// GetCFSourceSetitemsWithResponse request returning *GetCFSourceSetitemsResponse
func (c *ClientWithResponses) GetCFSourceSetitemsWithResponse(ctx context.Context, params *GetCFSourceSetitemsParams) (*GetCFSourceSetitemsResponse, error) {
	rsp, err := c.GetCFSourceSetitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCFSourceSetitemsResponse(rsp)
}

// CreateanewCFSourceSetWithBodyWithResponse request with arbitrary body returning *CreateanewCFSourceSetResponse
func (c *ClientWithResponses) CreateanewCFSourceSetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewCFSourceSetResponse, error) {
	rsp, err := c.CreateanewCFSourceSetWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewCFSourceSetResponse(rsp)
}

func (c *ClientWithResponses) CreateanewCFSourceSetWithResponse(ctx context.Context, body CreateanewCFSourceSetJSONRequestBody) (*CreateanewCFSourceSetResponse, error) {
	rsp, err := c.CreateanewCFSourceSet(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewCFSourceSetResponse(rsp)
}

// DeleteaspecificCFSourceSetWithResponse request returning *DeleteaspecificCFSourceSetResponse
func (c *ClientWithResponses) DeleteaspecificCFSourceSetWithResponse(ctx context.Context, id string) (*DeleteaspecificCFSourceSetResponse, error) {
	rsp, err := c.DeleteaspecificCFSourceSet(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificCFSourceSetResponse(rsp)
}

// GetaspecificCFSourceSetWithResponse request returning *GetaspecificCFSourceSetResponse
func (c *ClientWithResponses) GetaspecificCFSourceSetWithResponse(ctx context.Context, id string) (*GetaspecificCFSourceSetResponse, error) {
	rsp, err := c.GetaspecificCFSourceSet(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificCFSourceSetResponse(rsp)
}

// ChangeaspecificCFSourceSetWithBodyWithResponse request with arbitrary body returning *ChangeaspecificCFSourceSetResponse
func (c *ClientWithResponses) ChangeaspecificCFSourceSetWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificCFSourceSetResponse, error) {
	rsp, err := c.ChangeaspecificCFSourceSetWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificCFSourceSetResponse(rsp)
}

// ReplacechangeaspecificCFSourceSetWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificCFSourceSetResponse
func (c *ClientWithResponses) ReplacechangeaspecificCFSourceSetWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificCFSourceSetResponse, error) {
	rsp, err := c.ReplacechangeaspecificCFSourceSetWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificCFSourceSetResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificCFSourceSetWithResponse(ctx context.Context, id string, body ReplacechangeaspecificCFSourceSetJSONRequestBody) (*ReplacechangeaspecificCFSourceSetResponse, error) {
	rsp, err := c.ReplacechangeaspecificCFSourceSet(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificCFSourceSetResponse(rsp)
}

// GetCFTimeSetitemsWithResponse request returning *GetCFTimeSetitemsResponse
func (c *ClientWithResponses) GetCFTimeSetitemsWithResponse(ctx context.Context, params *GetCFTimeSetitemsParams) (*GetCFTimeSetitemsResponse, error) {
	rsp, err := c.GetCFTimeSetitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCFTimeSetitemsResponse(rsp)
}

// CreateanewCFTimeSetWithBodyWithResponse request with arbitrary body returning *CreateanewCFTimeSetResponse
func (c *ClientWithResponses) CreateanewCFTimeSetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewCFTimeSetResponse, error) {
	rsp, err := c.CreateanewCFTimeSetWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewCFTimeSetResponse(rsp)
}

func (c *ClientWithResponses) CreateanewCFTimeSetWithResponse(ctx context.Context, body CreateanewCFTimeSetJSONRequestBody) (*CreateanewCFTimeSetResponse, error) {
	rsp, err := c.CreateanewCFTimeSet(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewCFTimeSetResponse(rsp)
}

// DeleteaspecificCFTimeSetWithResponse request returning *DeleteaspecificCFTimeSetResponse
func (c *ClientWithResponses) DeleteaspecificCFTimeSetWithResponse(ctx context.Context, id string) (*DeleteaspecificCFTimeSetResponse, error) {
	rsp, err := c.DeleteaspecificCFTimeSet(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificCFTimeSetResponse(rsp)
}

// GetaspecificCFTimeSetWithResponse request returning *GetaspecificCFTimeSetResponse
func (c *ClientWithResponses) GetaspecificCFTimeSetWithResponse(ctx context.Context, id string) (*GetaspecificCFTimeSetResponse, error) {
	rsp, err := c.GetaspecificCFTimeSet(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificCFTimeSetResponse(rsp)
}

// ChangeaspecificCFTimeSetWithBodyWithResponse request with arbitrary body returning *ChangeaspecificCFTimeSetResponse
func (c *ClientWithResponses) ChangeaspecificCFTimeSetWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificCFTimeSetResponse, error) {
	rsp, err := c.ChangeaspecificCFTimeSetWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificCFTimeSetResponse(rsp)
}

// ReplacechangeaspecificCFTimeSetWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificCFTimeSetResponse
func (c *ClientWithResponses) ReplacechangeaspecificCFTimeSetWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificCFTimeSetResponse, error) {
	rsp, err := c.ReplacechangeaspecificCFTimeSetWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificCFTimeSetResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificCFTimeSetWithResponse(ctx context.Context, id string, body ReplacechangeaspecificCFTimeSetJSONRequestBody) (*ReplacechangeaspecificCFTimeSetResponse, error) {
	rsp, err := c.ReplacechangeaspecificCFTimeSet(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificCFTimeSetResponse(rsp)
}

// GetContractitemsWithResponse request returning *GetContractitemsResponse
func (c *ClientWithResponses) GetContractitemsWithResponse(ctx context.Context, params *GetContractitemsParams) (*GetContractitemsResponse, error) {
	rsp, err := c.GetContractitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetContractitemsResponse(rsp)
}

// CreateanewContractWithBodyWithResponse request with arbitrary body returning *CreateanewContractResponse
func (c *ClientWithResponses) CreateanewContractWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewContractResponse, error) {
	rsp, err := c.CreateanewContractWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewContractResponse(rsp)
}

func (c *ClientWithResponses) CreateanewContractWithResponse(ctx context.Context, body CreateanewContractJSONRequestBody) (*CreateanewContractResponse, error) {
	rsp, err := c.CreateanewContract(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewContractResponse(rsp)
}

// GetaspecificContractWithResponse request returning *GetaspecificContractResponse
func (c *ClientWithResponses) GetaspecificContractWithResponse(ctx context.Context, id string) (*GetaspecificContractResponse, error) {
	rsp, err := c.GetaspecificContract(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificContractResponse(rsp)
}

// ChangeaspecificContractWithBodyWithResponse request with arbitrary body returning *ChangeaspecificContractResponse
func (c *ClientWithResponses) ChangeaspecificContractWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificContractResponse, error) {
	rsp, err := c.ChangeaspecificContractWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificContractResponse(rsp)
}

// ReplacechangeaspecificContractWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificContractResponse
func (c *ClientWithResponses) ReplacechangeaspecificContractWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificContractResponse, error) {
	rsp, err := c.ReplacechangeaspecificContractWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificContractResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificContractWithResponse(ctx context.Context, id string, body ReplacechangeaspecificContractJSONRequestBody) (*ReplacechangeaspecificContractResponse, error) {
	rsp, err := c.ReplacechangeaspecificContract(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificContractResponse(rsp)
}

// GetConversationitemsWithResponse request returning *GetConversationitemsResponse
func (c *ClientWithResponses) GetConversationitemsWithResponse(ctx context.Context, params *GetConversationitemsParams) (*GetConversationitemsResponse, error) {
	rsp, err := c.GetConversationitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetConversationitemsResponse(rsp)
}

// GetaspecificConversationWithResponse request returning *GetaspecificConversationResponse
func (c *ClientWithResponses) GetaspecificConversationWithResponse(ctx context.Context, id string) (*GetaspecificConversationResponse, error) {
	rsp, err := c.GetaspecificConversation(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificConversationResponse(rsp)
}

// GetCustomerBalanceitemsWithResponse request returning *GetCustomerBalanceitemsResponse
func (c *ClientWithResponses) GetCustomerBalanceitemsWithResponse(ctx context.Context, params *GetCustomerBalanceitemsParams) (*GetCustomerBalanceitemsResponse, error) {
	rsp, err := c.GetCustomerBalanceitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomerBalanceitemsResponse(rsp)
}

// GetaspecificCustomerBalanceWithResponse request returning *GetaspecificCustomerBalanceResponse
func (c *ClientWithResponses) GetaspecificCustomerBalanceWithResponse(ctx context.Context, id string) (*GetaspecificCustomerBalanceResponse, error) {
	rsp, err := c.GetaspecificCustomerBalance(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificCustomerBalanceResponse(rsp)
}

// ChangeaspecificCustomerBalanceWithBodyWithResponse request with arbitrary body returning *ChangeaspecificCustomerBalanceResponse
func (c *ClientWithResponses) ChangeaspecificCustomerBalanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificCustomerBalanceResponse, error) {
	rsp, err := c.ChangeaspecificCustomerBalanceWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificCustomerBalanceResponse(rsp)
}

// ReplacechangeaspecificCustomerBalanceWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificCustomerBalanceResponse
func (c *ClientWithResponses) ReplacechangeaspecificCustomerBalanceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificCustomerBalanceResponse, error) {
	rsp, err := c.ReplacechangeaspecificCustomerBalanceWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificCustomerBalanceResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificCustomerBalanceWithResponse(ctx context.Context, id string, body ReplacechangeaspecificCustomerBalanceJSONRequestBody) (*ReplacechangeaspecificCustomerBalanceResponse, error) {
	rsp, err := c.ReplacechangeaspecificCustomerBalance(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificCustomerBalanceResponse(rsp)
}

// GetCustomerContactitemsWithResponse request returning *GetCustomerContactitemsResponse
func (c *ClientWithResponses) GetCustomerContactitemsWithResponse(ctx context.Context, params *GetCustomerContactitemsParams) (*GetCustomerContactitemsResponse, error) {
	rsp, err := c.GetCustomerContactitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomerContactitemsResponse(rsp)
}

// CreateanewCustomerContactWithBodyWithResponse request with arbitrary body returning *CreateanewCustomerContactResponse
func (c *ClientWithResponses) CreateanewCustomerContactWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewCustomerContactResponse, error) {
	rsp, err := c.CreateanewCustomerContactWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewCustomerContactResponse(rsp)
}

func (c *ClientWithResponses) CreateanewCustomerContactWithResponse(ctx context.Context, body CreateanewCustomerContactJSONRequestBody) (*CreateanewCustomerContactResponse, error) {
	rsp, err := c.CreateanewCustomerContact(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewCustomerContactResponse(rsp)
}

// DeleteaspecificCustomerContactWithResponse request returning *DeleteaspecificCustomerContactResponse
func (c *ClientWithResponses) DeleteaspecificCustomerContactWithResponse(ctx context.Context, id string) (*DeleteaspecificCustomerContactResponse, error) {
	rsp, err := c.DeleteaspecificCustomerContact(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificCustomerContactResponse(rsp)
}

// GetaspecificCustomerContactWithResponse request returning *GetaspecificCustomerContactResponse
func (c *ClientWithResponses) GetaspecificCustomerContactWithResponse(ctx context.Context, id string) (*GetaspecificCustomerContactResponse, error) {
	rsp, err := c.GetaspecificCustomerContact(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificCustomerContactResponse(rsp)
}

// ChangeaspecificCustomerContactWithBodyWithResponse request with arbitrary body returning *ChangeaspecificCustomerContactResponse
func (c *ClientWithResponses) ChangeaspecificCustomerContactWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificCustomerContactResponse, error) {
	rsp, err := c.ChangeaspecificCustomerContactWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificCustomerContactResponse(rsp)
}

// ReplacechangeaspecificCustomerContactWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificCustomerContactResponse
func (c *ClientWithResponses) ReplacechangeaspecificCustomerContactWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificCustomerContactResponse, error) {
	rsp, err := c.ReplacechangeaspecificCustomerContactWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificCustomerContactResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificCustomerContactWithResponse(ctx context.Context, id string, body ReplacechangeaspecificCustomerContactJSONRequestBody) (*ReplacechangeaspecificCustomerContactResponse, error) {
	rsp, err := c.ReplacechangeaspecificCustomerContact(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificCustomerContactResponse(rsp)
}

// GetCustomerFraudEventitemsWithResponse request returning *GetCustomerFraudEventitemsResponse
func (c *ClientWithResponses) GetCustomerFraudEventitemsWithResponse(ctx context.Context, params *GetCustomerFraudEventitemsParams) (*GetCustomerFraudEventitemsResponse, error) {
	rsp, err := c.GetCustomerFraudEventitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomerFraudEventitemsResponse(rsp)
}

// GetaspecificCustomerFraudEventWithResponse request returning *GetaspecificCustomerFraudEventResponse
func (c *ClientWithResponses) GetaspecificCustomerFraudEventWithResponse(ctx context.Context, id string) (*GetaspecificCustomerFraudEventResponse, error) {
	rsp, err := c.GetaspecificCustomerFraudEvent(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificCustomerFraudEventResponse(rsp)
}

// GetCustomerFraudPreferenceitemsWithResponse request returning *GetCustomerFraudPreferenceitemsResponse
func (c *ClientWithResponses) GetCustomerFraudPreferenceitemsWithResponse(ctx context.Context, params *GetCustomerFraudPreferenceitemsParams) (*GetCustomerFraudPreferenceitemsResponse, error) {
	rsp, err := c.GetCustomerFraudPreferenceitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomerFraudPreferenceitemsResponse(rsp)
}

// GetaspecificCustomerFraudPreferenceWithResponse request returning *GetaspecificCustomerFraudPreferenceResponse
func (c *ClientWithResponses) GetaspecificCustomerFraudPreferenceWithResponse(ctx context.Context, id string) (*GetaspecificCustomerFraudPreferenceResponse, error) {
	rsp, err := c.GetaspecificCustomerFraudPreference(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificCustomerFraudPreferenceResponse(rsp)
}

// ChangeaspecificCustomerFraudPreferenceWithBodyWithResponse request with arbitrary body returning *ChangeaspecificCustomerFraudPreferenceResponse
func (c *ClientWithResponses) ChangeaspecificCustomerFraudPreferenceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificCustomerFraudPreferenceResponse, error) {
	rsp, err := c.ChangeaspecificCustomerFraudPreferenceWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificCustomerFraudPreferenceResponse(rsp)
}

// ReplacechangeaspecificCustomerFraudPreferenceWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificCustomerFraudPreferenceResponse
func (c *ClientWithResponses) ReplacechangeaspecificCustomerFraudPreferenceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificCustomerFraudPreferenceResponse, error) {
	rsp, err := c.ReplacechangeaspecificCustomerFraudPreferenceWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificCustomerFraudPreferenceResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificCustomerFraudPreferenceWithResponse(ctx context.Context, id string, body ReplacechangeaspecificCustomerFraudPreferenceJSONRequestBody) (*ReplacechangeaspecificCustomerFraudPreferenceResponse, error) {
	rsp, err := c.ReplacechangeaspecificCustomerFraudPreference(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificCustomerFraudPreferenceResponse(rsp)
}

// GetCustomerLocationitemsWithResponse request returning *GetCustomerLocationitemsResponse
func (c *ClientWithResponses) GetCustomerLocationitemsWithResponse(ctx context.Context, params *GetCustomerLocationitemsParams) (*GetCustomerLocationitemsResponse, error) {
	rsp, err := c.GetCustomerLocationitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomerLocationitemsResponse(rsp)
}

// CreateanewCustomerLocationWithBodyWithResponse request with arbitrary body returning *CreateanewCustomerLocationResponse
func (c *ClientWithResponses) CreateanewCustomerLocationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewCustomerLocationResponse, error) {
	rsp, err := c.CreateanewCustomerLocationWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewCustomerLocationResponse(rsp)
}

func (c *ClientWithResponses) CreateanewCustomerLocationWithResponse(ctx context.Context, body CreateanewCustomerLocationJSONRequestBody) (*CreateanewCustomerLocationResponse, error) {
	rsp, err := c.CreateanewCustomerLocation(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewCustomerLocationResponse(rsp)
}

// DeleteaspecificCustomerLocationWithResponse request returning *DeleteaspecificCustomerLocationResponse
func (c *ClientWithResponses) DeleteaspecificCustomerLocationWithResponse(ctx context.Context, id string) (*DeleteaspecificCustomerLocationResponse, error) {
	rsp, err := c.DeleteaspecificCustomerLocation(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificCustomerLocationResponse(rsp)
}

// GetaspecificCustomerLocationWithResponse request returning *GetaspecificCustomerLocationResponse
func (c *ClientWithResponses) GetaspecificCustomerLocationWithResponse(ctx context.Context, id string) (*GetaspecificCustomerLocationResponse, error) {
	rsp, err := c.GetaspecificCustomerLocation(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificCustomerLocationResponse(rsp)
}

// ChangeaspecificCustomerLocationWithBodyWithResponse request with arbitrary body returning *ChangeaspecificCustomerLocationResponse
func (c *ClientWithResponses) ChangeaspecificCustomerLocationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificCustomerLocationResponse, error) {
	rsp, err := c.ChangeaspecificCustomerLocationWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificCustomerLocationResponse(rsp)
}

// ReplacechangeaspecificCustomerLocationWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificCustomerLocationResponse
func (c *ClientWithResponses) ReplacechangeaspecificCustomerLocationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificCustomerLocationResponse, error) {
	rsp, err := c.ReplacechangeaspecificCustomerLocationWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificCustomerLocationResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificCustomerLocationWithResponse(ctx context.Context, id string, body ReplacechangeaspecificCustomerLocationJSONRequestBody) (*ReplacechangeaspecificCustomerLocationResponse, error) {
	rsp, err := c.ReplacechangeaspecificCustomerLocation(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificCustomerLocationResponse(rsp)
}

// GetCustomerPreferenceitemsWithResponse request returning *GetCustomerPreferenceitemsResponse
func (c *ClientWithResponses) GetCustomerPreferenceitemsWithResponse(ctx context.Context, params *GetCustomerPreferenceitemsParams) (*GetCustomerPreferenceitemsResponse, error) {
	rsp, err := c.GetCustomerPreferenceitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomerPreferenceitemsResponse(rsp)
}

// GetaspecificCustomerPreferenceWithResponse request returning *GetaspecificCustomerPreferenceResponse
func (c *ClientWithResponses) GetaspecificCustomerPreferenceWithResponse(ctx context.Context, id string) (*GetaspecificCustomerPreferenceResponse, error) {
	rsp, err := c.GetaspecificCustomerPreference(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificCustomerPreferenceResponse(rsp)
}

// ChangeaspecificCustomerPreferenceWithBodyWithResponse request with arbitrary body returning *ChangeaspecificCustomerPreferenceResponse
func (c *ClientWithResponses) ChangeaspecificCustomerPreferenceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificCustomerPreferenceResponse, error) {
	rsp, err := c.ChangeaspecificCustomerPreferenceWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificCustomerPreferenceResponse(rsp)
}

// ReplacechangeaspecificCustomerPreferenceWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificCustomerPreferenceResponse
func (c *ClientWithResponses) ReplacechangeaspecificCustomerPreferenceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificCustomerPreferenceResponse, error) {
	rsp, err := c.ReplacechangeaspecificCustomerPreferenceWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificCustomerPreferenceResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificCustomerPreferenceWithResponse(ctx context.Context, id string, body ReplacechangeaspecificCustomerPreferenceJSONRequestBody) (*ReplacechangeaspecificCustomerPreferenceResponse, error) {
	rsp, err := c.ReplacechangeaspecificCustomerPreference(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificCustomerPreferenceResponse(rsp)
}

// GetCustomeritemsWithResponse request returning *GetCustomeritemsResponse
func (c *ClientWithResponses) GetCustomeritemsWithResponse(ctx context.Context, params *GetCustomeritemsParams) (*GetCustomeritemsResponse, error) {
	rsp, err := c.GetCustomeritems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomeritemsResponse(rsp)
}

// CreateanewCustomerWithBodyWithResponse request with arbitrary body returning *CreateanewCustomerResponse
func (c *ClientWithResponses) CreateanewCustomerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewCustomerResponse, error) {
	rsp, err := c.CreateanewCustomerWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewCustomerResponse(rsp)
}

func (c *ClientWithResponses) CreateanewCustomerWithResponse(ctx context.Context, body CreateanewCustomerJSONRequestBody) (*CreateanewCustomerResponse, error) {
	rsp, err := c.CreateanewCustomer(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewCustomerResponse(rsp)
}

// GetaspecificCustomerWithResponse request returning *GetaspecificCustomerResponse
func (c *ClientWithResponses) GetaspecificCustomerWithResponse(ctx context.Context, id string) (*GetaspecificCustomerResponse, error) {
	rsp, err := c.GetaspecificCustomer(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificCustomerResponse(rsp)
}

// ChangeaspecificCustomerWithBodyWithResponse request with arbitrary body returning *ChangeaspecificCustomerResponse
func (c *ClientWithResponses) ChangeaspecificCustomerWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificCustomerResponse, error) {
	rsp, err := c.ChangeaspecificCustomerWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificCustomerResponse(rsp)
}

// ReplacechangeaspecificCustomerWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificCustomerResponse
func (c *ClientWithResponses) ReplacechangeaspecificCustomerWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificCustomerResponse, error) {
	rsp, err := c.ReplacechangeaspecificCustomerWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificCustomerResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificCustomerWithResponse(ctx context.Context, id string, body ReplacechangeaspecificCustomerJSONRequestBody) (*ReplacechangeaspecificCustomerResponse, error) {
	rsp, err := c.ReplacechangeaspecificCustomer(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificCustomerResponse(rsp)
}

// GetCustomerZoneCostitemsWithResponse request returning *GetCustomerZoneCostitemsResponse
func (c *ClientWithResponses) GetCustomerZoneCostitemsWithResponse(ctx context.Context, params *GetCustomerZoneCostitemsParams) (*GetCustomerZoneCostitemsResponse, error) {
	rsp, err := c.GetCustomerZoneCostitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomerZoneCostitemsResponse(rsp)
}

// GetaspecificCustomerZoneCostWithResponse request returning *GetaspecificCustomerZoneCostResponse
func (c *ClientWithResponses) GetaspecificCustomerZoneCostWithResponse(ctx context.Context, id string) (*GetaspecificCustomerZoneCostResponse, error) {
	rsp, err := c.GetaspecificCustomerZoneCost(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificCustomerZoneCostResponse(rsp)
}

// GetDomainPreferenceitemsWithResponse request returning *GetDomainPreferenceitemsResponse
func (c *ClientWithResponses) GetDomainPreferenceitemsWithResponse(ctx context.Context, params *GetDomainPreferenceitemsParams) (*GetDomainPreferenceitemsResponse, error) {
	rsp, err := c.GetDomainPreferenceitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetDomainPreferenceitemsResponse(rsp)
}

// GetaspecificDomainPreferenceWithResponse request returning *GetaspecificDomainPreferenceResponse
func (c *ClientWithResponses) GetaspecificDomainPreferenceWithResponse(ctx context.Context, id string) (*GetaspecificDomainPreferenceResponse, error) {
	rsp, err := c.GetaspecificDomainPreference(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificDomainPreferenceResponse(rsp)
}

// ChangeaspecificDomainPreferenceWithBodyWithResponse request with arbitrary body returning *ChangeaspecificDomainPreferenceResponse
func (c *ClientWithResponses) ChangeaspecificDomainPreferenceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificDomainPreferenceResponse, error) {
	rsp, err := c.ChangeaspecificDomainPreferenceWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificDomainPreferenceResponse(rsp)
}

// ReplacechangeaspecificDomainPreferenceWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificDomainPreferenceResponse
func (c *ClientWithResponses) ReplacechangeaspecificDomainPreferenceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificDomainPreferenceResponse, error) {
	rsp, err := c.ReplacechangeaspecificDomainPreferenceWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificDomainPreferenceResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificDomainPreferenceWithResponse(ctx context.Context, id string, body ReplacechangeaspecificDomainPreferenceJSONRequestBody) (*ReplacechangeaspecificDomainPreferenceResponse, error) {
	rsp, err := c.ReplacechangeaspecificDomainPreference(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificDomainPreferenceResponse(rsp)
}

// GetDomainitemsWithResponse request returning *GetDomainitemsResponse
func (c *ClientWithResponses) GetDomainitemsWithResponse(ctx context.Context, params *GetDomainitemsParams) (*GetDomainitemsResponse, error) {
	rsp, err := c.GetDomainitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetDomainitemsResponse(rsp)
}

// CreateanewDomainWithBodyWithResponse request with arbitrary body returning *CreateanewDomainResponse
func (c *ClientWithResponses) CreateanewDomainWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewDomainResponse, error) {
	rsp, err := c.CreateanewDomainWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewDomainResponse(rsp)
}

func (c *ClientWithResponses) CreateanewDomainWithResponse(ctx context.Context, body CreateanewDomainJSONRequestBody) (*CreateanewDomainResponse, error) {
	rsp, err := c.CreateanewDomain(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewDomainResponse(rsp)
}

// DeleteaspecificDomainWithResponse request returning *DeleteaspecificDomainResponse
func (c *ClientWithResponses) DeleteaspecificDomainWithResponse(ctx context.Context, id string) (*DeleteaspecificDomainResponse, error) {
	rsp, err := c.DeleteaspecificDomain(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificDomainResponse(rsp)
}

// GetaspecificDomainWithResponse request returning *GetaspecificDomainResponse
func (c *ClientWithResponses) GetaspecificDomainWithResponse(ctx context.Context, id string) (*GetaspecificDomainResponse, error) {
	rsp, err := c.GetaspecificDomain(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificDomainResponse(rsp)
}

// GetEmailTemplateitemsWithResponse request returning *GetEmailTemplateitemsResponse
func (c *ClientWithResponses) GetEmailTemplateitemsWithResponse(ctx context.Context, params *GetEmailTemplateitemsParams) (*GetEmailTemplateitemsResponse, error) {
	rsp, err := c.GetEmailTemplateitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetEmailTemplateitemsResponse(rsp)
}

// CreateanewEmailTemplateWithBodyWithResponse request with arbitrary body returning *CreateanewEmailTemplateResponse
func (c *ClientWithResponses) CreateanewEmailTemplateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewEmailTemplateResponse, error) {
	rsp, err := c.CreateanewEmailTemplateWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewEmailTemplateResponse(rsp)
}

func (c *ClientWithResponses) CreateanewEmailTemplateWithResponse(ctx context.Context, body CreateanewEmailTemplateJSONRequestBody) (*CreateanewEmailTemplateResponse, error) {
	rsp, err := c.CreateanewEmailTemplate(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewEmailTemplateResponse(rsp)
}

// DeleteaspecificEmailTemplateWithResponse request returning *DeleteaspecificEmailTemplateResponse
func (c *ClientWithResponses) DeleteaspecificEmailTemplateWithResponse(ctx context.Context, id string) (*DeleteaspecificEmailTemplateResponse, error) {
	rsp, err := c.DeleteaspecificEmailTemplate(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificEmailTemplateResponse(rsp)
}

// GetaspecificEmailTemplateWithResponse request returning *GetaspecificEmailTemplateResponse
func (c *ClientWithResponses) GetaspecificEmailTemplateWithResponse(ctx context.Context, id string) (*GetaspecificEmailTemplateResponse, error) {
	rsp, err := c.GetaspecificEmailTemplate(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificEmailTemplateResponse(rsp)
}

// ChangeaspecificEmailTemplateWithBodyWithResponse request with arbitrary body returning *ChangeaspecificEmailTemplateResponse
func (c *ClientWithResponses) ChangeaspecificEmailTemplateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificEmailTemplateResponse, error) {
	rsp, err := c.ChangeaspecificEmailTemplateWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificEmailTemplateResponse(rsp)
}

// ReplacechangeaspecificEmailTemplateWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificEmailTemplateResponse
func (c *ClientWithResponses) ReplacechangeaspecificEmailTemplateWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificEmailTemplateResponse, error) {
	rsp, err := c.ReplacechangeaspecificEmailTemplateWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificEmailTemplateResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificEmailTemplateWithResponse(ctx context.Context, id string, body ReplacechangeaspecificEmailTemplateJSONRequestBody) (*ReplacechangeaspecificEmailTemplateResponse, error) {
	rsp, err := c.ReplacechangeaspecificEmailTemplate(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificEmailTemplateResponse(rsp)
}

// GetEmergencyMappingContaineritemsWithResponse request returning *GetEmergencyMappingContaineritemsResponse
func (c *ClientWithResponses) GetEmergencyMappingContaineritemsWithResponse(ctx context.Context, params *GetEmergencyMappingContaineritemsParams) (*GetEmergencyMappingContaineritemsResponse, error) {
	rsp, err := c.GetEmergencyMappingContaineritems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetEmergencyMappingContaineritemsResponse(rsp)
}

// CreateanewEmergencyMappingContainerWithBodyWithResponse request with arbitrary body returning *CreateanewEmergencyMappingContainerResponse
func (c *ClientWithResponses) CreateanewEmergencyMappingContainerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewEmergencyMappingContainerResponse, error) {
	rsp, err := c.CreateanewEmergencyMappingContainerWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewEmergencyMappingContainerResponse(rsp)
}

func (c *ClientWithResponses) CreateanewEmergencyMappingContainerWithResponse(ctx context.Context, body CreateanewEmergencyMappingContainerJSONRequestBody) (*CreateanewEmergencyMappingContainerResponse, error) {
	rsp, err := c.CreateanewEmergencyMappingContainer(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewEmergencyMappingContainerResponse(rsp)
}

// DeleteaspecificEmergencyMappingContainerWithResponse request returning *DeleteaspecificEmergencyMappingContainerResponse
func (c *ClientWithResponses) DeleteaspecificEmergencyMappingContainerWithResponse(ctx context.Context, id string) (*DeleteaspecificEmergencyMappingContainerResponse, error) {
	rsp, err := c.DeleteaspecificEmergencyMappingContainer(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificEmergencyMappingContainerResponse(rsp)
}

// GetaspecificEmergencyMappingContainerWithResponse request returning *GetaspecificEmergencyMappingContainerResponse
func (c *ClientWithResponses) GetaspecificEmergencyMappingContainerWithResponse(ctx context.Context, id string) (*GetaspecificEmergencyMappingContainerResponse, error) {
	rsp, err := c.GetaspecificEmergencyMappingContainer(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificEmergencyMappingContainerResponse(rsp)
}

// ChangeaspecificEmergencyMappingContainerWithBodyWithResponse request with arbitrary body returning *ChangeaspecificEmergencyMappingContainerResponse
func (c *ClientWithResponses) ChangeaspecificEmergencyMappingContainerWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificEmergencyMappingContainerResponse, error) {
	rsp, err := c.ChangeaspecificEmergencyMappingContainerWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificEmergencyMappingContainerResponse(rsp)
}

// ReplacechangeaspecificEmergencyMappingContainerWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificEmergencyMappingContainerResponse
func (c *ClientWithResponses) ReplacechangeaspecificEmergencyMappingContainerWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificEmergencyMappingContainerResponse, error) {
	rsp, err := c.ReplacechangeaspecificEmergencyMappingContainerWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificEmergencyMappingContainerResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificEmergencyMappingContainerWithResponse(ctx context.Context, id string, body ReplacechangeaspecificEmergencyMappingContainerJSONRequestBody) (*ReplacechangeaspecificEmergencyMappingContainerResponse, error) {
	rsp, err := c.ReplacechangeaspecificEmergencyMappingContainer(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificEmergencyMappingContainerResponse(rsp)
}

// GetEmergencyMappingitemsWithResponse request returning *GetEmergencyMappingitemsResponse
func (c *ClientWithResponses) GetEmergencyMappingitemsWithResponse(ctx context.Context, params *GetEmergencyMappingitemsParams) (*GetEmergencyMappingitemsResponse, error) {
	rsp, err := c.GetEmergencyMappingitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetEmergencyMappingitemsResponse(rsp)
}

// CreateanewEmergencyMappingWithBodyWithResponse request with arbitrary body returning *CreateanewEmergencyMappingResponse
func (c *ClientWithResponses) CreateanewEmergencyMappingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewEmergencyMappingResponse, error) {
	rsp, err := c.CreateanewEmergencyMappingWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewEmergencyMappingResponse(rsp)
}

func (c *ClientWithResponses) CreateanewEmergencyMappingWithResponse(ctx context.Context, body CreateanewEmergencyMappingJSONRequestBody) (*CreateanewEmergencyMappingResponse, error) {
	rsp, err := c.CreateanewEmergencyMapping(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewEmergencyMappingResponse(rsp)
}

// DeleteaspecificEmergencyMappingWithResponse request returning *DeleteaspecificEmergencyMappingResponse
func (c *ClientWithResponses) DeleteaspecificEmergencyMappingWithResponse(ctx context.Context, id string) (*DeleteaspecificEmergencyMappingResponse, error) {
	rsp, err := c.DeleteaspecificEmergencyMapping(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificEmergencyMappingResponse(rsp)
}

// GetaspecificEmergencyMappingWithResponse request returning *GetaspecificEmergencyMappingResponse
func (c *ClientWithResponses) GetaspecificEmergencyMappingWithResponse(ctx context.Context, id string) (*GetaspecificEmergencyMappingResponse, error) {
	rsp, err := c.GetaspecificEmergencyMapping(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificEmergencyMappingResponse(rsp)
}

// ChangeaspecificEmergencyMappingWithBodyWithResponse request with arbitrary body returning *ChangeaspecificEmergencyMappingResponse
func (c *ClientWithResponses) ChangeaspecificEmergencyMappingWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificEmergencyMappingResponse, error) {
	rsp, err := c.ChangeaspecificEmergencyMappingWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificEmergencyMappingResponse(rsp)
}

// ReplacechangeaspecificEmergencyMappingWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificEmergencyMappingResponse
func (c *ClientWithResponses) ReplacechangeaspecificEmergencyMappingWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificEmergencyMappingResponse, error) {
	rsp, err := c.ReplacechangeaspecificEmergencyMappingWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificEmergencyMappingResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificEmergencyMappingWithResponse(ctx context.Context, id string, body ReplacechangeaspecificEmergencyMappingJSONRequestBody) (*ReplacechangeaspecificEmergencyMappingResponse, error) {
	rsp, err := c.ReplacechangeaspecificEmergencyMapping(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificEmergencyMappingResponse(rsp)
}

// GetEventitemsWithResponse request returning *GetEventitemsResponse
func (c *ClientWithResponses) GetEventitemsWithResponse(ctx context.Context, params *GetEventitemsParams) (*GetEventitemsResponse, error) {
	rsp, err := c.GetEventitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetEventitemsResponse(rsp)
}

// GetaspecificEventWithResponse request returning *GetaspecificEventResponse
func (c *ClientWithResponses) GetaspecificEventWithResponse(ctx context.Context, id string) (*GetaspecificEventResponse, error) {
	rsp, err := c.GetaspecificEvent(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificEventResponse(rsp)
}

// GetFaxitemsWithResponse request returning *GetFaxitemsResponse
func (c *ClientWithResponses) GetFaxitemsWithResponse(ctx context.Context, params *GetFaxitemsParams) (*GetFaxitemsResponse, error) {
	rsp, err := c.GetFaxitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetFaxitemsResponse(rsp)
}

// CreateanewFaxWithBodyWithResponse request with arbitrary body returning *CreateanewFaxResponse
func (c *ClientWithResponses) CreateanewFaxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewFaxResponse, error) {
	rsp, err := c.CreateanewFaxWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewFaxResponse(rsp)
}

func (c *ClientWithResponses) CreateanewFaxWithResponse(ctx context.Context, body CreateanewFaxJSONRequestBody) (*CreateanewFaxResponse, error) {
	rsp, err := c.CreateanewFax(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewFaxResponse(rsp)
}

// GetaspecificFaxWithResponse request returning *GetaspecificFaxResponse
func (c *ClientWithResponses) GetaspecificFaxWithResponse(ctx context.Context, id string) (*GetaspecificFaxResponse, error) {
	rsp, err := c.GetaspecificFax(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificFaxResponse(rsp)
}

// GetaspecificFaxRecordingWithResponse request returning *GetaspecificFaxRecordingResponse
func (c *ClientWithResponses) GetaspecificFaxRecordingWithResponse(ctx context.Context, id string) (*GetaspecificFaxRecordingResponse, error) {
	rsp, err := c.GetaspecificFaxRecording(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificFaxRecordingResponse(rsp)
}

// GetFaxserverSettingitemsWithResponse request returning *GetFaxserverSettingitemsResponse
func (c *ClientWithResponses) GetFaxserverSettingitemsWithResponse(ctx context.Context, params *GetFaxserverSettingitemsParams) (*GetFaxserverSettingitemsResponse, error) {
	rsp, err := c.GetFaxserverSettingitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetFaxserverSettingitemsResponse(rsp)
}

// GetaspecificFaxserverSettingWithResponse request returning *GetaspecificFaxserverSettingResponse
func (c *ClientWithResponses) GetaspecificFaxserverSettingWithResponse(ctx context.Context, id string) (*GetaspecificFaxserverSettingResponse, error) {
	rsp, err := c.GetaspecificFaxserverSetting(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificFaxserverSettingResponse(rsp)
}

// ChangeaspecificFaxserverSettingWithBodyWithResponse request with arbitrary body returning *ChangeaspecificFaxserverSettingResponse
func (c *ClientWithResponses) ChangeaspecificFaxserverSettingWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificFaxserverSettingResponse, error) {
	rsp, err := c.ChangeaspecificFaxserverSettingWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificFaxserverSettingResponse(rsp)
}

// ReplacechangeaspecificFaxserverSettingWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificFaxserverSettingResponse
func (c *ClientWithResponses) ReplacechangeaspecificFaxserverSettingWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificFaxserverSettingResponse, error) {
	rsp, err := c.ReplacechangeaspecificFaxserverSettingWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificFaxserverSettingResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificFaxserverSettingWithResponse(ctx context.Context, id string, body ReplacechangeaspecificFaxserverSettingJSONRequestBody) (*ReplacechangeaspecificFaxserverSettingResponse, error) {
	rsp, err := c.ReplacechangeaspecificFaxserverSetting(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificFaxserverSettingResponse(rsp)
}

// GetInterceptionitemsWithResponse request returning *GetInterceptionitemsResponse
func (c *ClientWithResponses) GetInterceptionitemsWithResponse(ctx context.Context, params *GetInterceptionitemsParams) (*GetInterceptionitemsResponse, error) {
	rsp, err := c.GetInterceptionitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetInterceptionitemsResponse(rsp)
}

// CreateanewInterceptionWithBodyWithResponse request with arbitrary body returning *CreateanewInterceptionResponse
func (c *ClientWithResponses) CreateanewInterceptionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewInterceptionResponse, error) {
	rsp, err := c.CreateanewInterceptionWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewInterceptionResponse(rsp)
}

func (c *ClientWithResponses) CreateanewInterceptionWithResponse(ctx context.Context, body CreateanewInterceptionJSONRequestBody) (*CreateanewInterceptionResponse, error) {
	rsp, err := c.CreateanewInterception(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewInterceptionResponse(rsp)
}

// DeleteaspecificInterceptionWithResponse request returning *DeleteaspecificInterceptionResponse
func (c *ClientWithResponses) DeleteaspecificInterceptionWithResponse(ctx context.Context, id string) (*DeleteaspecificInterceptionResponse, error) {
	rsp, err := c.DeleteaspecificInterception(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificInterceptionResponse(rsp)
}

// GetaspecificInterceptionWithResponse request returning *GetaspecificInterceptionResponse
func (c *ClientWithResponses) GetaspecificInterceptionWithResponse(ctx context.Context, id string) (*GetaspecificInterceptionResponse, error) {
	rsp, err := c.GetaspecificInterception(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificInterceptionResponse(rsp)
}

// ChangeaspecificInterceptionWithBodyWithResponse request with arbitrary body returning *ChangeaspecificInterceptionResponse
func (c *ClientWithResponses) ChangeaspecificInterceptionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificInterceptionResponse, error) {
	rsp, err := c.ChangeaspecificInterceptionWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificInterceptionResponse(rsp)
}

// ReplacechangeaspecificInterceptionWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificInterceptionResponse
func (c *ClientWithResponses) ReplacechangeaspecificInterceptionWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificInterceptionResponse, error) {
	rsp, err := c.ReplacechangeaspecificInterceptionWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificInterceptionResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificInterceptionWithResponse(ctx context.Context, id string, body ReplacechangeaspecificInterceptionJSONRequestBody) (*ReplacechangeaspecificInterceptionResponse, error) {
	rsp, err := c.ReplacechangeaspecificInterception(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificInterceptionResponse(rsp)
}

// GetInvoiceitemsWithResponse request returning *GetInvoiceitemsResponse
func (c *ClientWithResponses) GetInvoiceitemsWithResponse(ctx context.Context, params *GetInvoiceitemsParams) (*GetInvoiceitemsResponse, error) {
	rsp, err := c.GetInvoiceitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetInvoiceitemsResponse(rsp)
}

// CreateanewInvoiceWithBodyWithResponse request with arbitrary body returning *CreateanewInvoiceResponse
func (c *ClientWithResponses) CreateanewInvoiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewInvoiceResponse, error) {
	rsp, err := c.CreateanewInvoiceWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewInvoiceResponse(rsp)
}

func (c *ClientWithResponses) CreateanewInvoiceWithResponse(ctx context.Context, body CreateanewInvoiceJSONRequestBody) (*CreateanewInvoiceResponse, error) {
	rsp, err := c.CreateanewInvoice(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewInvoiceResponse(rsp)
}

// DeleteaspecificInvoiceWithResponse request returning *DeleteaspecificInvoiceResponse
func (c *ClientWithResponses) DeleteaspecificInvoiceWithResponse(ctx context.Context, id string) (*DeleteaspecificInvoiceResponse, error) {
	rsp, err := c.DeleteaspecificInvoice(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificInvoiceResponse(rsp)
}

// GetaspecificInvoiceWithResponse request returning *GetaspecificInvoiceResponse
func (c *ClientWithResponses) GetaspecificInvoiceWithResponse(ctx context.Context, id string) (*GetaspecificInvoiceResponse, error) {
	rsp, err := c.GetaspecificInvoice(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificInvoiceResponse(rsp)
}

// GetInvoiceTemplateitemsWithResponse request returning *GetInvoiceTemplateitemsResponse
func (c *ClientWithResponses) GetInvoiceTemplateitemsWithResponse(ctx context.Context, params *GetInvoiceTemplateitemsParams) (*GetInvoiceTemplateitemsResponse, error) {
	rsp, err := c.GetInvoiceTemplateitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetInvoiceTemplateitemsResponse(rsp)
}

// GetaspecificInvoiceTemplateWithResponse request returning *GetaspecificInvoiceTemplateResponse
func (c *ClientWithResponses) GetaspecificInvoiceTemplateWithResponse(ctx context.Context, id string) (*GetaspecificInvoiceTemplateResponse, error) {
	rsp, err := c.GetaspecificInvoiceTemplate(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificInvoiceTemplateResponse(rsp)
}

// GetLnpCarrieritemsWithResponse request returning *GetLnpCarrieritemsResponse
func (c *ClientWithResponses) GetLnpCarrieritemsWithResponse(ctx context.Context, params *GetLnpCarrieritemsParams) (*GetLnpCarrieritemsResponse, error) {
	rsp, err := c.GetLnpCarrieritems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetLnpCarrieritemsResponse(rsp)
}

// CreateanewLnpCarrierWithBodyWithResponse request with arbitrary body returning *CreateanewLnpCarrierResponse
func (c *ClientWithResponses) CreateanewLnpCarrierWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewLnpCarrierResponse, error) {
	rsp, err := c.CreateanewLnpCarrierWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewLnpCarrierResponse(rsp)
}

func (c *ClientWithResponses) CreateanewLnpCarrierWithResponse(ctx context.Context, body CreateanewLnpCarrierJSONRequestBody) (*CreateanewLnpCarrierResponse, error) {
	rsp, err := c.CreateanewLnpCarrier(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewLnpCarrierResponse(rsp)
}

// DeleteaspecificLnpCarrierWithResponse request returning *DeleteaspecificLnpCarrierResponse
func (c *ClientWithResponses) DeleteaspecificLnpCarrierWithResponse(ctx context.Context, id string) (*DeleteaspecificLnpCarrierResponse, error) {
	rsp, err := c.DeleteaspecificLnpCarrier(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificLnpCarrierResponse(rsp)
}

// GetaspecificLnpCarrierWithResponse request returning *GetaspecificLnpCarrierResponse
func (c *ClientWithResponses) GetaspecificLnpCarrierWithResponse(ctx context.Context, id string) (*GetaspecificLnpCarrierResponse, error) {
	rsp, err := c.GetaspecificLnpCarrier(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificLnpCarrierResponse(rsp)
}

// ChangeaspecificLnpCarrierWithBodyWithResponse request with arbitrary body returning *ChangeaspecificLnpCarrierResponse
func (c *ClientWithResponses) ChangeaspecificLnpCarrierWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificLnpCarrierResponse, error) {
	rsp, err := c.ChangeaspecificLnpCarrierWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificLnpCarrierResponse(rsp)
}

// ReplacechangeaspecificLnpCarrierWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificLnpCarrierResponse
func (c *ClientWithResponses) ReplacechangeaspecificLnpCarrierWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificLnpCarrierResponse, error) {
	rsp, err := c.ReplacechangeaspecificLnpCarrierWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificLnpCarrierResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificLnpCarrierWithResponse(ctx context.Context, id string, body ReplacechangeaspecificLnpCarrierJSONRequestBody) (*ReplacechangeaspecificLnpCarrierResponse, error) {
	rsp, err := c.ReplacechangeaspecificLnpCarrier(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificLnpCarrierResponse(rsp)
}

// GetLnpNumberitemsWithResponse request returning *GetLnpNumberitemsResponse
func (c *ClientWithResponses) GetLnpNumberitemsWithResponse(ctx context.Context, params *GetLnpNumberitemsParams) (*GetLnpNumberitemsResponse, error) {
	rsp, err := c.GetLnpNumberitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetLnpNumberitemsResponse(rsp)
}

// CreateanewLnpNumberWithBodyWithResponse request with arbitrary body returning *CreateanewLnpNumberResponse
func (c *ClientWithResponses) CreateanewLnpNumberWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewLnpNumberResponse, error) {
	rsp, err := c.CreateanewLnpNumberWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewLnpNumberResponse(rsp)
}

func (c *ClientWithResponses) CreateanewLnpNumberWithResponse(ctx context.Context, body CreateanewLnpNumberJSONRequestBody) (*CreateanewLnpNumberResponse, error) {
	rsp, err := c.CreateanewLnpNumber(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewLnpNumberResponse(rsp)
}

// DeleteaspecificLnpNumberWithResponse request returning *DeleteaspecificLnpNumberResponse
func (c *ClientWithResponses) DeleteaspecificLnpNumberWithResponse(ctx context.Context, id string) (*DeleteaspecificLnpNumberResponse, error) {
	rsp, err := c.DeleteaspecificLnpNumber(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificLnpNumberResponse(rsp)
}

// GetaspecificLnpNumberWithResponse request returning *GetaspecificLnpNumberResponse
func (c *ClientWithResponses) GetaspecificLnpNumberWithResponse(ctx context.Context, id string) (*GetaspecificLnpNumberResponse, error) {
	rsp, err := c.GetaspecificLnpNumber(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificLnpNumberResponse(rsp)
}

// ChangeaspecificLnpNumberWithBodyWithResponse request with arbitrary body returning *ChangeaspecificLnpNumberResponse
func (c *ClientWithResponses) ChangeaspecificLnpNumberWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificLnpNumberResponse, error) {
	rsp, err := c.ChangeaspecificLnpNumberWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificLnpNumberResponse(rsp)
}

// ReplacechangeaspecificLnpNumberWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificLnpNumberResponse
func (c *ClientWithResponses) ReplacechangeaspecificLnpNumberWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificLnpNumberResponse, error) {
	rsp, err := c.ReplacechangeaspecificLnpNumberWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificLnpNumberResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificLnpNumberWithResponse(ctx context.Context, id string, body ReplacechangeaspecificLnpNumberJSONRequestBody) (*ReplacechangeaspecificLnpNumberResponse, error) {
	rsp, err := c.ReplacechangeaspecificLnpNumber(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificLnpNumberResponse(rsp)
}

// GetMailToFaxSettingitemsWithResponse request returning *GetMailToFaxSettingitemsResponse
func (c *ClientWithResponses) GetMailToFaxSettingitemsWithResponse(ctx context.Context, params *GetMailToFaxSettingitemsParams) (*GetMailToFaxSettingitemsResponse, error) {
	rsp, err := c.GetMailToFaxSettingitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetMailToFaxSettingitemsResponse(rsp)
}

// GetaspecificMailToFaxSettingWithResponse request returning *GetaspecificMailToFaxSettingResponse
func (c *ClientWithResponses) GetaspecificMailToFaxSettingWithResponse(ctx context.Context, id string) (*GetaspecificMailToFaxSettingResponse, error) {
	rsp, err := c.GetaspecificMailToFaxSetting(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificMailToFaxSettingResponse(rsp)
}

// ChangeaspecificMailToFaxSettingWithBodyWithResponse request with arbitrary body returning *ChangeaspecificMailToFaxSettingResponse
func (c *ClientWithResponses) ChangeaspecificMailToFaxSettingWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificMailToFaxSettingResponse, error) {
	rsp, err := c.ChangeaspecificMailToFaxSettingWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificMailToFaxSettingResponse(rsp)
}

// ReplacechangeaspecificMailToFaxSettingWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificMailToFaxSettingResponse
func (c *ClientWithResponses) ReplacechangeaspecificMailToFaxSettingWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificMailToFaxSettingResponse, error) {
	rsp, err := c.ReplacechangeaspecificMailToFaxSettingWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificMailToFaxSettingResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificMailToFaxSettingWithResponse(ctx context.Context, id string, body ReplacechangeaspecificMailToFaxSettingJSONRequestBody) (*ReplacechangeaspecificMailToFaxSettingResponse, error) {
	rsp, err := c.ReplacechangeaspecificMailToFaxSetting(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificMailToFaxSettingResponse(rsp)
}

// GetMaliciousCallitemsWithResponse request returning *GetMaliciousCallitemsResponse
func (c *ClientWithResponses) GetMaliciousCallitemsWithResponse(ctx context.Context, params *GetMaliciousCallitemsParams) (*GetMaliciousCallitemsResponse, error) {
	rsp, err := c.GetMaliciousCallitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetMaliciousCallitemsResponse(rsp)
}

// DeleteaspecificMaliciousCallWithResponse request returning *DeleteaspecificMaliciousCallResponse
func (c *ClientWithResponses) DeleteaspecificMaliciousCallWithResponse(ctx context.Context, id string) (*DeleteaspecificMaliciousCallResponse, error) {
	rsp, err := c.DeleteaspecificMaliciousCall(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificMaliciousCallResponse(rsp)
}

// GetaspecificMaliciousCallWithResponse request returning *GetaspecificMaliciousCallResponse
func (c *ClientWithResponses) GetaspecificMaliciousCallWithResponse(ctx context.Context, id string) (*GetaspecificMaliciousCallResponse, error) {
	rsp, err := c.GetaspecificMaliciousCall(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificMaliciousCallResponse(rsp)
}

// GetManagerSecretaryitemsWithResponse request returning *GetManagerSecretaryitemsResponse
func (c *ClientWithResponses) GetManagerSecretaryitemsWithResponse(ctx context.Context, params *GetManagerSecretaryitemsParams) (*GetManagerSecretaryitemsResponse, error) {
	rsp, err := c.GetManagerSecretaryitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetManagerSecretaryitemsResponse(rsp)
}

// DeleteaspecificManagerSecretaryWithResponse request returning *DeleteaspecificManagerSecretaryResponse
func (c *ClientWithResponses) DeleteaspecificManagerSecretaryWithResponse(ctx context.Context, id string) (*DeleteaspecificManagerSecretaryResponse, error) {
	rsp, err := c.DeleteaspecificManagerSecretary(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificManagerSecretaryResponse(rsp)
}

// GetaspecificManagerSecretaryWithResponse request returning *GetaspecificManagerSecretaryResponse
func (c *ClientWithResponses) GetaspecificManagerSecretaryWithResponse(ctx context.Context, id string) (*GetaspecificManagerSecretaryResponse, error) {
	rsp, err := c.GetaspecificManagerSecretary(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificManagerSecretaryResponse(rsp)
}

// ReplacechangeaspecificManagerSecretaryWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificManagerSecretaryResponse
func (c *ClientWithResponses) ReplacechangeaspecificManagerSecretaryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificManagerSecretaryResponse, error) {
	rsp, err := c.ReplacechangeaspecificManagerSecretaryWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificManagerSecretaryResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificManagerSecretaryWithResponse(ctx context.Context, id string, body ReplacechangeaspecificManagerSecretaryJSONRequestBody) (*ReplacechangeaspecificManagerSecretaryResponse, error) {
	rsp, err := c.ReplacechangeaspecificManagerSecretary(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificManagerSecretaryResponse(rsp)
}

// GetNcosLevelitemsWithResponse request returning *GetNcosLevelitemsResponse
func (c *ClientWithResponses) GetNcosLevelitemsWithResponse(ctx context.Context, params *GetNcosLevelitemsParams) (*GetNcosLevelitemsResponse, error) {
	rsp, err := c.GetNcosLevelitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetNcosLevelitemsResponse(rsp)
}

// CreateanewNcosLevelWithBodyWithResponse request with arbitrary body returning *CreateanewNcosLevelResponse
func (c *ClientWithResponses) CreateanewNcosLevelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewNcosLevelResponse, error) {
	rsp, err := c.CreateanewNcosLevelWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewNcosLevelResponse(rsp)
}

func (c *ClientWithResponses) CreateanewNcosLevelWithResponse(ctx context.Context, body CreateanewNcosLevelJSONRequestBody) (*CreateanewNcosLevelResponse, error) {
	rsp, err := c.CreateanewNcosLevel(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewNcosLevelResponse(rsp)
}

// DeleteaspecificNcosLevelWithResponse request returning *DeleteaspecificNcosLevelResponse
func (c *ClientWithResponses) DeleteaspecificNcosLevelWithResponse(ctx context.Context, id string) (*DeleteaspecificNcosLevelResponse, error) {
	rsp, err := c.DeleteaspecificNcosLevel(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificNcosLevelResponse(rsp)
}

// GetaspecificNcosLevelWithResponse request returning *GetaspecificNcosLevelResponse
func (c *ClientWithResponses) GetaspecificNcosLevelWithResponse(ctx context.Context, id string) (*GetaspecificNcosLevelResponse, error) {
	rsp, err := c.GetaspecificNcosLevel(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificNcosLevelResponse(rsp)
}

// ChangeaspecificNcosLevelWithBodyWithResponse request with arbitrary body returning *ChangeaspecificNcosLevelResponse
func (c *ClientWithResponses) ChangeaspecificNcosLevelWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificNcosLevelResponse, error) {
	rsp, err := c.ChangeaspecificNcosLevelWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificNcosLevelResponse(rsp)
}

// ReplacechangeaspecificNcosLevelWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificNcosLevelResponse
func (c *ClientWithResponses) ReplacechangeaspecificNcosLevelWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificNcosLevelResponse, error) {
	rsp, err := c.ReplacechangeaspecificNcosLevelWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificNcosLevelResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificNcosLevelWithResponse(ctx context.Context, id string, body ReplacechangeaspecificNcosLevelJSONRequestBody) (*ReplacechangeaspecificNcosLevelResponse, error) {
	rsp, err := c.ReplacechangeaspecificNcosLevel(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificNcosLevelResponse(rsp)
}

// GetNcosLnpCarrieritemsWithResponse request returning *GetNcosLnpCarrieritemsResponse
func (c *ClientWithResponses) GetNcosLnpCarrieritemsWithResponse(ctx context.Context, params *GetNcosLnpCarrieritemsParams) (*GetNcosLnpCarrieritemsResponse, error) {
	rsp, err := c.GetNcosLnpCarrieritems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetNcosLnpCarrieritemsResponse(rsp)
}

// CreateanewNcosLnpCarrierWithBodyWithResponse request with arbitrary body returning *CreateanewNcosLnpCarrierResponse
func (c *ClientWithResponses) CreateanewNcosLnpCarrierWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewNcosLnpCarrierResponse, error) {
	rsp, err := c.CreateanewNcosLnpCarrierWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewNcosLnpCarrierResponse(rsp)
}

func (c *ClientWithResponses) CreateanewNcosLnpCarrierWithResponse(ctx context.Context, body CreateanewNcosLnpCarrierJSONRequestBody) (*CreateanewNcosLnpCarrierResponse, error) {
	rsp, err := c.CreateanewNcosLnpCarrier(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewNcosLnpCarrierResponse(rsp)
}

// DeleteaspecificNcosLnpCarrierWithResponse request returning *DeleteaspecificNcosLnpCarrierResponse
func (c *ClientWithResponses) DeleteaspecificNcosLnpCarrierWithResponse(ctx context.Context, id string) (*DeleteaspecificNcosLnpCarrierResponse, error) {
	rsp, err := c.DeleteaspecificNcosLnpCarrier(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificNcosLnpCarrierResponse(rsp)
}

// GetaspecificNcosLnpCarrierWithResponse request returning *GetaspecificNcosLnpCarrierResponse
func (c *ClientWithResponses) GetaspecificNcosLnpCarrierWithResponse(ctx context.Context, id string) (*GetaspecificNcosLnpCarrierResponse, error) {
	rsp, err := c.GetaspecificNcosLnpCarrier(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificNcosLnpCarrierResponse(rsp)
}

// ChangeaspecificNcosLnpCarrierWithBodyWithResponse request with arbitrary body returning *ChangeaspecificNcosLnpCarrierResponse
func (c *ClientWithResponses) ChangeaspecificNcosLnpCarrierWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificNcosLnpCarrierResponse, error) {
	rsp, err := c.ChangeaspecificNcosLnpCarrierWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificNcosLnpCarrierResponse(rsp)
}

// ReplacechangeaspecificNcosLnpCarrierWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificNcosLnpCarrierResponse
func (c *ClientWithResponses) ReplacechangeaspecificNcosLnpCarrierWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificNcosLnpCarrierResponse, error) {
	rsp, err := c.ReplacechangeaspecificNcosLnpCarrierWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificNcosLnpCarrierResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificNcosLnpCarrierWithResponse(ctx context.Context, id string, body ReplacechangeaspecificNcosLnpCarrierJSONRequestBody) (*ReplacechangeaspecificNcosLnpCarrierResponse, error) {
	rsp, err := c.ReplacechangeaspecificNcosLnpCarrier(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificNcosLnpCarrierResponse(rsp)
}

// GetNcosPatternitemsWithResponse request returning *GetNcosPatternitemsResponse
func (c *ClientWithResponses) GetNcosPatternitemsWithResponse(ctx context.Context, params *GetNcosPatternitemsParams) (*GetNcosPatternitemsResponse, error) {
	rsp, err := c.GetNcosPatternitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetNcosPatternitemsResponse(rsp)
}

// CreateanewNcosPatternWithBodyWithResponse request with arbitrary body returning *CreateanewNcosPatternResponse
func (c *ClientWithResponses) CreateanewNcosPatternWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewNcosPatternResponse, error) {
	rsp, err := c.CreateanewNcosPatternWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewNcosPatternResponse(rsp)
}

func (c *ClientWithResponses) CreateanewNcosPatternWithResponse(ctx context.Context, body CreateanewNcosPatternJSONRequestBody) (*CreateanewNcosPatternResponse, error) {
	rsp, err := c.CreateanewNcosPattern(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewNcosPatternResponse(rsp)
}

// DeleteaspecificNcosPatternWithResponse request returning *DeleteaspecificNcosPatternResponse
func (c *ClientWithResponses) DeleteaspecificNcosPatternWithResponse(ctx context.Context, id string) (*DeleteaspecificNcosPatternResponse, error) {
	rsp, err := c.DeleteaspecificNcosPattern(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificNcosPatternResponse(rsp)
}

// GetaspecificNcosPatternWithResponse request returning *GetaspecificNcosPatternResponse
func (c *ClientWithResponses) GetaspecificNcosPatternWithResponse(ctx context.Context, id string) (*GetaspecificNcosPatternResponse, error) {
	rsp, err := c.GetaspecificNcosPattern(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificNcosPatternResponse(rsp)
}

// ChangeaspecificNcosPatternWithBodyWithResponse request with arbitrary body returning *ChangeaspecificNcosPatternResponse
func (c *ClientWithResponses) ChangeaspecificNcosPatternWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificNcosPatternResponse, error) {
	rsp, err := c.ChangeaspecificNcosPatternWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificNcosPatternResponse(rsp)
}

// ReplacechangeaspecificNcosPatternWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificNcosPatternResponse
func (c *ClientWithResponses) ReplacechangeaspecificNcosPatternWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificNcosPatternResponse, error) {
	rsp, err := c.ReplacechangeaspecificNcosPatternWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificNcosPatternResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificNcosPatternWithResponse(ctx context.Context, id string, body ReplacechangeaspecificNcosPatternJSONRequestBody) (*ReplacechangeaspecificNcosPatternResponse, error) {
	rsp, err := c.ReplacechangeaspecificNcosPattern(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificNcosPatternResponse(rsp)
}

// GetNumberitemsWithResponse request returning *GetNumberitemsResponse
func (c *ClientWithResponses) GetNumberitemsWithResponse(ctx context.Context, params *GetNumberitemsParams) (*GetNumberitemsResponse, error) {
	rsp, err := c.GetNumberitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetNumberitemsResponse(rsp)
}

// GetaspecificNumberWithResponse request returning *GetaspecificNumberResponse
func (c *ClientWithResponses) GetaspecificNumberWithResponse(ctx context.Context, id string) (*GetaspecificNumberResponse, error) {
	rsp, err := c.GetaspecificNumber(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificNumberResponse(rsp)
}

// ChangeaspecificNumberWithBodyWithResponse request with arbitrary body returning *ChangeaspecificNumberResponse
func (c *ClientWithResponses) ChangeaspecificNumberWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificNumberResponse, error) {
	rsp, err := c.ChangeaspecificNumberWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificNumberResponse(rsp)
}

// ReplacechangeaspecificNumberWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificNumberResponse
func (c *ClientWithResponses) ReplacechangeaspecificNumberWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificNumberResponse, error) {
	rsp, err := c.ReplacechangeaspecificNumberWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificNumberResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificNumberWithResponse(ctx context.Context, id string, body ReplacechangeaspecificNumberJSONRequestBody) (*ReplacechangeaspecificNumberResponse, error) {
	rsp, err := c.ReplacechangeaspecificNumber(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificNumberResponse(rsp)
}

// CreateanewPartyCallControlWithBodyWithResponse request with arbitrary body returning *CreateanewPartyCallControlResponse
func (c *ClientWithResponses) CreateanewPartyCallControlWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewPartyCallControlResponse, error) {
	rsp, err := c.CreateanewPartyCallControlWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewPartyCallControlResponse(rsp)
}

func (c *ClientWithResponses) CreateanewPartyCallControlWithResponse(ctx context.Context, body CreateanewPartyCallControlJSONRequestBody) (*CreateanewPartyCallControlResponse, error) {
	rsp, err := c.CreateanewPartyCallControl(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewPartyCallControlResponse(rsp)
}

// GetaspecificPbxDeviceConfigFileWithResponse request returning *GetaspecificPbxDeviceConfigFileResponse
func (c *ClientWithResponses) GetaspecificPbxDeviceConfigFileWithResponse(ctx context.Context, id string) (*GetaspecificPbxDeviceConfigFileResponse, error) {
	rsp, err := c.GetaspecificPbxDeviceConfigFile(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificPbxDeviceConfigFileResponse(rsp)
}

// GetPbxDeviceConfigitemsWithResponse request returning *GetPbxDeviceConfigitemsResponse
func (c *ClientWithResponses) GetPbxDeviceConfigitemsWithResponse(ctx context.Context, params *GetPbxDeviceConfigitemsParams) (*GetPbxDeviceConfigitemsResponse, error) {
	rsp, err := c.GetPbxDeviceConfigitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetPbxDeviceConfigitemsResponse(rsp)
}

// CreateanewPbxDeviceConfigWithBodyWithResponse request with arbitrary body returning *CreateanewPbxDeviceConfigResponse
func (c *ClientWithResponses) CreateanewPbxDeviceConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewPbxDeviceConfigResponse, error) {
	rsp, err := c.CreateanewPbxDeviceConfigWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewPbxDeviceConfigResponse(rsp)
}

func (c *ClientWithResponses) CreateanewPbxDeviceConfigWithResponse(ctx context.Context, body CreateanewPbxDeviceConfigJSONRequestBody) (*CreateanewPbxDeviceConfigResponse, error) {
	rsp, err := c.CreateanewPbxDeviceConfig(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewPbxDeviceConfigResponse(rsp)
}

// GetaspecificPbxDeviceConfigWithResponse request returning *GetaspecificPbxDeviceConfigResponse
func (c *ClientWithResponses) GetaspecificPbxDeviceConfigWithResponse(ctx context.Context, id string) (*GetaspecificPbxDeviceConfigResponse, error) {
	rsp, err := c.GetaspecificPbxDeviceConfig(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificPbxDeviceConfigResponse(rsp)
}

// ReplacechangeaspecificPbxDeviceConfigWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificPbxDeviceConfigResponse
func (c *ClientWithResponses) ReplacechangeaspecificPbxDeviceConfigWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificPbxDeviceConfigResponse, error) {
	rsp, err := c.ReplacechangeaspecificPbxDeviceConfigWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificPbxDeviceConfigResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificPbxDeviceConfigWithResponse(ctx context.Context, id string, body ReplacechangeaspecificPbxDeviceConfigJSONRequestBody) (*ReplacechangeaspecificPbxDeviceConfigResponse, error) {
	rsp, err := c.ReplacechangeaspecificPbxDeviceConfig(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificPbxDeviceConfigResponse(rsp)
}

// GetaspecificPbxDeviceFirmwareBinaryWithResponse request returning *GetaspecificPbxDeviceFirmwareBinaryResponse
func (c *ClientWithResponses) GetaspecificPbxDeviceFirmwareBinaryWithResponse(ctx context.Context, id string) (*GetaspecificPbxDeviceFirmwareBinaryResponse, error) {
	rsp, err := c.GetaspecificPbxDeviceFirmwareBinary(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificPbxDeviceFirmwareBinaryResponse(rsp)
}

// GetPbxDeviceFirmwareitemsWithResponse request returning *GetPbxDeviceFirmwareitemsResponse
func (c *ClientWithResponses) GetPbxDeviceFirmwareitemsWithResponse(ctx context.Context, params *GetPbxDeviceFirmwareitemsParams) (*GetPbxDeviceFirmwareitemsResponse, error) {
	rsp, err := c.GetPbxDeviceFirmwareitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetPbxDeviceFirmwareitemsResponse(rsp)
}

// CreateanewPbxDeviceFirmwareWithBodyWithResponse request with arbitrary body returning *CreateanewPbxDeviceFirmwareResponse
func (c *ClientWithResponses) CreateanewPbxDeviceFirmwareWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewPbxDeviceFirmwareResponse, error) {
	rsp, err := c.CreateanewPbxDeviceFirmwareWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewPbxDeviceFirmwareResponse(rsp)
}

func (c *ClientWithResponses) CreateanewPbxDeviceFirmwareWithResponse(ctx context.Context, body CreateanewPbxDeviceFirmwareJSONRequestBody) (*CreateanewPbxDeviceFirmwareResponse, error) {
	rsp, err := c.CreateanewPbxDeviceFirmware(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewPbxDeviceFirmwareResponse(rsp)
}

// GetaspecificPbxDeviceFirmwareWithResponse request returning *GetaspecificPbxDeviceFirmwareResponse
func (c *ClientWithResponses) GetaspecificPbxDeviceFirmwareWithResponse(ctx context.Context, id string) (*GetaspecificPbxDeviceFirmwareResponse, error) {
	rsp, err := c.GetaspecificPbxDeviceFirmware(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificPbxDeviceFirmwareResponse(rsp)
}

// ReplacechangeaspecificPbxDeviceFirmwareWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificPbxDeviceFirmwareResponse
func (c *ClientWithResponses) ReplacechangeaspecificPbxDeviceFirmwareWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificPbxDeviceFirmwareResponse, error) {
	rsp, err := c.ReplacechangeaspecificPbxDeviceFirmwareWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificPbxDeviceFirmwareResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificPbxDeviceFirmwareWithResponse(ctx context.Context, id string, body ReplacechangeaspecificPbxDeviceFirmwareJSONRequestBody) (*ReplacechangeaspecificPbxDeviceFirmwareResponse, error) {
	rsp, err := c.ReplacechangeaspecificPbxDeviceFirmware(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificPbxDeviceFirmwareResponse(rsp)
}

// GetaspecificPbxDeviceModelImageWithResponse request returning *GetaspecificPbxDeviceModelImageResponse
func (c *ClientWithResponses) GetaspecificPbxDeviceModelImageWithResponse(ctx context.Context, id string) (*GetaspecificPbxDeviceModelImageResponse, error) {
	rsp, err := c.GetaspecificPbxDeviceModelImage(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificPbxDeviceModelImageResponse(rsp)
}

// GetPbxDeviceModelitemsWithResponse request returning *GetPbxDeviceModelitemsResponse
func (c *ClientWithResponses) GetPbxDeviceModelitemsWithResponse(ctx context.Context, params *GetPbxDeviceModelitemsParams) (*GetPbxDeviceModelitemsResponse, error) {
	rsp, err := c.GetPbxDeviceModelitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetPbxDeviceModelitemsResponse(rsp)
}

// CreateanewPbxDeviceModelWithBodyWithResponse request with arbitrary body returning *CreateanewPbxDeviceModelResponse
func (c *ClientWithResponses) CreateanewPbxDeviceModelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewPbxDeviceModelResponse, error) {
	rsp, err := c.CreateanewPbxDeviceModelWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewPbxDeviceModelResponse(rsp)
}

func (c *ClientWithResponses) CreateanewPbxDeviceModelWithResponse(ctx context.Context, body CreateanewPbxDeviceModelJSONRequestBody) (*CreateanewPbxDeviceModelResponse, error) {
	rsp, err := c.CreateanewPbxDeviceModel(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewPbxDeviceModelResponse(rsp)
}

// GetaspecificPbxDeviceModelWithResponse request returning *GetaspecificPbxDeviceModelResponse
func (c *ClientWithResponses) GetaspecificPbxDeviceModelWithResponse(ctx context.Context, id string) (*GetaspecificPbxDeviceModelResponse, error) {
	rsp, err := c.GetaspecificPbxDeviceModel(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificPbxDeviceModelResponse(rsp)
}

// ChangeaspecificPbxDeviceModelWithBodyWithResponse request with arbitrary body returning *ChangeaspecificPbxDeviceModelResponse
func (c *ClientWithResponses) ChangeaspecificPbxDeviceModelWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificPbxDeviceModelResponse, error) {
	rsp, err := c.ChangeaspecificPbxDeviceModelWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificPbxDeviceModelResponse(rsp)
}

// ReplacechangeaspecificPbxDeviceModelWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificPbxDeviceModelResponse
func (c *ClientWithResponses) ReplacechangeaspecificPbxDeviceModelWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificPbxDeviceModelResponse, error) {
	rsp, err := c.ReplacechangeaspecificPbxDeviceModelWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificPbxDeviceModelResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificPbxDeviceModelWithResponse(ctx context.Context, id string, body ReplacechangeaspecificPbxDeviceModelJSONRequestBody) (*ReplacechangeaspecificPbxDeviceModelResponse, error) {
	rsp, err := c.ReplacechangeaspecificPbxDeviceModel(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificPbxDeviceModelResponse(rsp)
}

// GetPbxDevicePreferenceitemsWithResponse request returning *GetPbxDevicePreferenceitemsResponse
func (c *ClientWithResponses) GetPbxDevicePreferenceitemsWithResponse(ctx context.Context, params *GetPbxDevicePreferenceitemsParams) (*GetPbxDevicePreferenceitemsResponse, error) {
	rsp, err := c.GetPbxDevicePreferenceitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetPbxDevicePreferenceitemsResponse(rsp)
}

// GetaspecificPbxDevicePreferenceWithResponse request returning *GetaspecificPbxDevicePreferenceResponse
func (c *ClientWithResponses) GetaspecificPbxDevicePreferenceWithResponse(ctx context.Context, id string) (*GetaspecificPbxDevicePreferenceResponse, error) {
	rsp, err := c.GetaspecificPbxDevicePreference(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificPbxDevicePreferenceResponse(rsp)
}

// ChangeaspecificPbxDevicePreferenceWithBodyWithResponse request with arbitrary body returning *ChangeaspecificPbxDevicePreferenceResponse
func (c *ClientWithResponses) ChangeaspecificPbxDevicePreferenceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificPbxDevicePreferenceResponse, error) {
	rsp, err := c.ChangeaspecificPbxDevicePreferenceWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificPbxDevicePreferenceResponse(rsp)
}

// ReplacechangeaspecificPbxDevicePreferenceWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificPbxDevicePreferenceResponse
func (c *ClientWithResponses) ReplacechangeaspecificPbxDevicePreferenceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificPbxDevicePreferenceResponse, error) {
	rsp, err := c.ReplacechangeaspecificPbxDevicePreferenceWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificPbxDevicePreferenceResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificPbxDevicePreferenceWithResponse(ctx context.Context, id string, body ReplacechangeaspecificPbxDevicePreferenceJSONRequestBody) (*ReplacechangeaspecificPbxDevicePreferenceResponse, error) {
	rsp, err := c.ReplacechangeaspecificPbxDevicePreference(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificPbxDevicePreferenceResponse(rsp)
}

// GetPbxDeviceProfilePreferenceitemsWithResponse request returning *GetPbxDeviceProfilePreferenceitemsResponse
func (c *ClientWithResponses) GetPbxDeviceProfilePreferenceitemsWithResponse(ctx context.Context, params *GetPbxDeviceProfilePreferenceitemsParams) (*GetPbxDeviceProfilePreferenceitemsResponse, error) {
	rsp, err := c.GetPbxDeviceProfilePreferenceitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetPbxDeviceProfilePreferenceitemsResponse(rsp)
}

// GetaspecificPbxDeviceProfilePreferenceWithResponse request returning *GetaspecificPbxDeviceProfilePreferenceResponse
func (c *ClientWithResponses) GetaspecificPbxDeviceProfilePreferenceWithResponse(ctx context.Context, id string) (*GetaspecificPbxDeviceProfilePreferenceResponse, error) {
	rsp, err := c.GetaspecificPbxDeviceProfilePreference(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificPbxDeviceProfilePreferenceResponse(rsp)
}

// ChangeaspecificPbxDeviceProfilePreferenceWithBodyWithResponse request with arbitrary body returning *ChangeaspecificPbxDeviceProfilePreferenceResponse
func (c *ClientWithResponses) ChangeaspecificPbxDeviceProfilePreferenceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificPbxDeviceProfilePreferenceResponse, error) {
	rsp, err := c.ChangeaspecificPbxDeviceProfilePreferenceWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificPbxDeviceProfilePreferenceResponse(rsp)
}

// ReplacechangeaspecificPbxDeviceProfilePreferenceWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificPbxDeviceProfilePreferenceResponse
func (c *ClientWithResponses) ReplacechangeaspecificPbxDeviceProfilePreferenceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificPbxDeviceProfilePreferenceResponse, error) {
	rsp, err := c.ReplacechangeaspecificPbxDeviceProfilePreferenceWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificPbxDeviceProfilePreferenceResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificPbxDeviceProfilePreferenceWithResponse(ctx context.Context, id string, body ReplacechangeaspecificPbxDeviceProfilePreferenceJSONRequestBody) (*ReplacechangeaspecificPbxDeviceProfilePreferenceResponse, error) {
	rsp, err := c.ReplacechangeaspecificPbxDeviceProfilePreference(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificPbxDeviceProfilePreferenceResponse(rsp)
}

// GetPbxDeviceProfileitemsWithResponse request returning *GetPbxDeviceProfileitemsResponse
func (c *ClientWithResponses) GetPbxDeviceProfileitemsWithResponse(ctx context.Context, params *GetPbxDeviceProfileitemsParams) (*GetPbxDeviceProfileitemsResponse, error) {
	rsp, err := c.GetPbxDeviceProfileitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetPbxDeviceProfileitemsResponse(rsp)
}

// CreateanewPbxDeviceProfileWithBodyWithResponse request with arbitrary body returning *CreateanewPbxDeviceProfileResponse
func (c *ClientWithResponses) CreateanewPbxDeviceProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewPbxDeviceProfileResponse, error) {
	rsp, err := c.CreateanewPbxDeviceProfileWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewPbxDeviceProfileResponse(rsp)
}

func (c *ClientWithResponses) CreateanewPbxDeviceProfileWithResponse(ctx context.Context, body CreateanewPbxDeviceProfileJSONRequestBody) (*CreateanewPbxDeviceProfileResponse, error) {
	rsp, err := c.CreateanewPbxDeviceProfile(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewPbxDeviceProfileResponse(rsp)
}

// GetaspecificPbxDeviceProfileWithResponse request returning *GetaspecificPbxDeviceProfileResponse
func (c *ClientWithResponses) GetaspecificPbxDeviceProfileWithResponse(ctx context.Context, id string) (*GetaspecificPbxDeviceProfileResponse, error) {
	rsp, err := c.GetaspecificPbxDeviceProfile(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificPbxDeviceProfileResponse(rsp)
}

// ChangeaspecificPbxDeviceProfileWithBodyWithResponse request with arbitrary body returning *ChangeaspecificPbxDeviceProfileResponse
func (c *ClientWithResponses) ChangeaspecificPbxDeviceProfileWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificPbxDeviceProfileResponse, error) {
	rsp, err := c.ChangeaspecificPbxDeviceProfileWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificPbxDeviceProfileResponse(rsp)
}

// ReplacechangeaspecificPbxDeviceProfileWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificPbxDeviceProfileResponse
func (c *ClientWithResponses) ReplacechangeaspecificPbxDeviceProfileWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificPbxDeviceProfileResponse, error) {
	rsp, err := c.ReplacechangeaspecificPbxDeviceProfileWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificPbxDeviceProfileResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificPbxDeviceProfileWithResponse(ctx context.Context, id string, body ReplacechangeaspecificPbxDeviceProfileJSONRequestBody) (*ReplacechangeaspecificPbxDeviceProfileResponse, error) {
	rsp, err := c.ReplacechangeaspecificPbxDeviceProfile(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificPbxDeviceProfileResponse(rsp)
}

// GetPbxDeviceitemsWithResponse request returning *GetPbxDeviceitemsResponse
func (c *ClientWithResponses) GetPbxDeviceitemsWithResponse(ctx context.Context, params *GetPbxDeviceitemsParams) (*GetPbxDeviceitemsResponse, error) {
	rsp, err := c.GetPbxDeviceitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetPbxDeviceitemsResponse(rsp)
}

// CreateanewPbxDeviceWithBodyWithResponse request with arbitrary body returning *CreateanewPbxDeviceResponse
func (c *ClientWithResponses) CreateanewPbxDeviceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewPbxDeviceResponse, error) {
	rsp, err := c.CreateanewPbxDeviceWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewPbxDeviceResponse(rsp)
}

func (c *ClientWithResponses) CreateanewPbxDeviceWithResponse(ctx context.Context, body CreateanewPbxDeviceJSONRequestBody) (*CreateanewPbxDeviceResponse, error) {
	rsp, err := c.CreateanewPbxDevice(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewPbxDeviceResponse(rsp)
}

// DeleteaspecificPbxDeviceWithResponse request returning *DeleteaspecificPbxDeviceResponse
func (c *ClientWithResponses) DeleteaspecificPbxDeviceWithResponse(ctx context.Context, id string) (*DeleteaspecificPbxDeviceResponse, error) {
	rsp, err := c.DeleteaspecificPbxDevice(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificPbxDeviceResponse(rsp)
}

// GetaspecificPbxDeviceWithResponse request returning *GetaspecificPbxDeviceResponse
func (c *ClientWithResponses) GetaspecificPbxDeviceWithResponse(ctx context.Context, id string) (*GetaspecificPbxDeviceResponse, error) {
	rsp, err := c.GetaspecificPbxDevice(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificPbxDeviceResponse(rsp)
}

// ChangeaspecificPbxDeviceWithBodyWithResponse request with arbitrary body returning *ChangeaspecificPbxDeviceResponse
func (c *ClientWithResponses) ChangeaspecificPbxDeviceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificPbxDeviceResponse, error) {
	rsp, err := c.ChangeaspecificPbxDeviceWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificPbxDeviceResponse(rsp)
}

// ReplacechangeaspecificPbxDeviceWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificPbxDeviceResponse
func (c *ClientWithResponses) ReplacechangeaspecificPbxDeviceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificPbxDeviceResponse, error) {
	rsp, err := c.ReplacechangeaspecificPbxDeviceWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificPbxDeviceResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificPbxDeviceWithResponse(ctx context.Context, id string, body ReplacechangeaspecificPbxDeviceJSONRequestBody) (*ReplacechangeaspecificPbxDeviceResponse, error) {
	rsp, err := c.ReplacechangeaspecificPbxDevice(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificPbxDeviceResponse(rsp)
}

// GetPbxFieldDevicePreferenceitemsWithResponse request returning *GetPbxFieldDevicePreferenceitemsResponse
func (c *ClientWithResponses) GetPbxFieldDevicePreferenceitemsWithResponse(ctx context.Context, params *GetPbxFieldDevicePreferenceitemsParams) (*GetPbxFieldDevicePreferenceitemsResponse, error) {
	rsp, err := c.GetPbxFieldDevicePreferenceitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetPbxFieldDevicePreferenceitemsResponse(rsp)
}

// GetaspecificPbxFieldDevicePreferenceWithResponse request returning *GetaspecificPbxFieldDevicePreferenceResponse
func (c *ClientWithResponses) GetaspecificPbxFieldDevicePreferenceWithResponse(ctx context.Context, id string) (*GetaspecificPbxFieldDevicePreferenceResponse, error) {
	rsp, err := c.GetaspecificPbxFieldDevicePreference(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificPbxFieldDevicePreferenceResponse(rsp)
}

// ChangeaspecificPbxFieldDevicePreferenceWithBodyWithResponse request with arbitrary body returning *ChangeaspecificPbxFieldDevicePreferenceResponse
func (c *ClientWithResponses) ChangeaspecificPbxFieldDevicePreferenceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificPbxFieldDevicePreferenceResponse, error) {
	rsp, err := c.ChangeaspecificPbxFieldDevicePreferenceWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificPbxFieldDevicePreferenceResponse(rsp)
}

// ReplacechangeaspecificPbxFieldDevicePreferenceWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificPbxFieldDevicePreferenceResponse
func (c *ClientWithResponses) ReplacechangeaspecificPbxFieldDevicePreferenceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificPbxFieldDevicePreferenceResponse, error) {
	rsp, err := c.ReplacechangeaspecificPbxFieldDevicePreferenceWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificPbxFieldDevicePreferenceResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificPbxFieldDevicePreferenceWithResponse(ctx context.Context, id string, body ReplacechangeaspecificPbxFieldDevicePreferenceJSONRequestBody) (*ReplacechangeaspecificPbxFieldDevicePreferenceResponse, error) {
	rsp, err := c.ReplacechangeaspecificPbxFieldDevicePreference(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificPbxFieldDevicePreferenceResponse(rsp)
}

// GetPeeringGroupitemsWithResponse request returning *GetPeeringGroupitemsResponse
func (c *ClientWithResponses) GetPeeringGroupitemsWithResponse(ctx context.Context, params *GetPeeringGroupitemsParams) (*GetPeeringGroupitemsResponse, error) {
	rsp, err := c.GetPeeringGroupitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetPeeringGroupitemsResponse(rsp)
}

// CreateanewPeeringGroupWithBodyWithResponse request with arbitrary body returning *CreateanewPeeringGroupResponse
func (c *ClientWithResponses) CreateanewPeeringGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewPeeringGroupResponse, error) {
	rsp, err := c.CreateanewPeeringGroupWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewPeeringGroupResponse(rsp)
}

func (c *ClientWithResponses) CreateanewPeeringGroupWithResponse(ctx context.Context, body CreateanewPeeringGroupJSONRequestBody) (*CreateanewPeeringGroupResponse, error) {
	rsp, err := c.CreateanewPeeringGroup(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewPeeringGroupResponse(rsp)
}

// DeleteaspecificPeeringGroupWithResponse request returning *DeleteaspecificPeeringGroupResponse
func (c *ClientWithResponses) DeleteaspecificPeeringGroupWithResponse(ctx context.Context, id string) (*DeleteaspecificPeeringGroupResponse, error) {
	rsp, err := c.DeleteaspecificPeeringGroup(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificPeeringGroupResponse(rsp)
}

// GetaspecificPeeringGroupWithResponse request returning *GetaspecificPeeringGroupResponse
func (c *ClientWithResponses) GetaspecificPeeringGroupWithResponse(ctx context.Context, id string) (*GetaspecificPeeringGroupResponse, error) {
	rsp, err := c.GetaspecificPeeringGroup(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificPeeringGroupResponse(rsp)
}

// ChangeaspecificPeeringGroupWithBodyWithResponse request with arbitrary body returning *ChangeaspecificPeeringGroupResponse
func (c *ClientWithResponses) ChangeaspecificPeeringGroupWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificPeeringGroupResponse, error) {
	rsp, err := c.ChangeaspecificPeeringGroupWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificPeeringGroupResponse(rsp)
}

// ReplacechangeaspecificPeeringGroupWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificPeeringGroupResponse
func (c *ClientWithResponses) ReplacechangeaspecificPeeringGroupWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificPeeringGroupResponse, error) {
	rsp, err := c.ReplacechangeaspecificPeeringGroupWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificPeeringGroupResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificPeeringGroupWithResponse(ctx context.Context, id string, body ReplacechangeaspecificPeeringGroupJSONRequestBody) (*ReplacechangeaspecificPeeringGroupResponse, error) {
	rsp, err := c.ReplacechangeaspecificPeeringGroup(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificPeeringGroupResponse(rsp)
}

// GetPeeringInboundRuleitemsWithResponse request returning *GetPeeringInboundRuleitemsResponse
func (c *ClientWithResponses) GetPeeringInboundRuleitemsWithResponse(ctx context.Context, params *GetPeeringInboundRuleitemsParams) (*GetPeeringInboundRuleitemsResponse, error) {
	rsp, err := c.GetPeeringInboundRuleitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetPeeringInboundRuleitemsResponse(rsp)
}

// CreateanewPeeringInboundRuleWithBodyWithResponse request with arbitrary body returning *CreateanewPeeringInboundRuleResponse
func (c *ClientWithResponses) CreateanewPeeringInboundRuleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewPeeringInboundRuleResponse, error) {
	rsp, err := c.CreateanewPeeringInboundRuleWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewPeeringInboundRuleResponse(rsp)
}

func (c *ClientWithResponses) CreateanewPeeringInboundRuleWithResponse(ctx context.Context, body CreateanewPeeringInboundRuleJSONRequestBody) (*CreateanewPeeringInboundRuleResponse, error) {
	rsp, err := c.CreateanewPeeringInboundRule(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewPeeringInboundRuleResponse(rsp)
}

// DeleteaspecificPeeringInboundRuleWithResponse request returning *DeleteaspecificPeeringInboundRuleResponse
func (c *ClientWithResponses) DeleteaspecificPeeringInboundRuleWithResponse(ctx context.Context, id string) (*DeleteaspecificPeeringInboundRuleResponse, error) {
	rsp, err := c.DeleteaspecificPeeringInboundRule(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificPeeringInboundRuleResponse(rsp)
}

// GetaspecificPeeringInboundRuleWithResponse request returning *GetaspecificPeeringInboundRuleResponse
func (c *ClientWithResponses) GetaspecificPeeringInboundRuleWithResponse(ctx context.Context, id string) (*GetaspecificPeeringInboundRuleResponse, error) {
	rsp, err := c.GetaspecificPeeringInboundRule(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificPeeringInboundRuleResponse(rsp)
}

// ChangeaspecificPeeringInboundRuleWithBodyWithResponse request with arbitrary body returning *ChangeaspecificPeeringInboundRuleResponse
func (c *ClientWithResponses) ChangeaspecificPeeringInboundRuleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificPeeringInboundRuleResponse, error) {
	rsp, err := c.ChangeaspecificPeeringInboundRuleWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificPeeringInboundRuleResponse(rsp)
}

// ReplacechangeaspecificPeeringInboundRuleWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificPeeringInboundRuleResponse
func (c *ClientWithResponses) ReplacechangeaspecificPeeringInboundRuleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificPeeringInboundRuleResponse, error) {
	rsp, err := c.ReplacechangeaspecificPeeringInboundRuleWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificPeeringInboundRuleResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificPeeringInboundRuleWithResponse(ctx context.Context, id string, body ReplacechangeaspecificPeeringInboundRuleJSONRequestBody) (*ReplacechangeaspecificPeeringInboundRuleResponse, error) {
	rsp, err := c.ReplacechangeaspecificPeeringInboundRule(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificPeeringInboundRuleResponse(rsp)
}

// GetPeeringRuleitemsWithResponse request returning *GetPeeringRuleitemsResponse
func (c *ClientWithResponses) GetPeeringRuleitemsWithResponse(ctx context.Context, params *GetPeeringRuleitemsParams) (*GetPeeringRuleitemsResponse, error) {
	rsp, err := c.GetPeeringRuleitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetPeeringRuleitemsResponse(rsp)
}

// CreateanewPeeringRuleWithBodyWithResponse request with arbitrary body returning *CreateanewPeeringRuleResponse
func (c *ClientWithResponses) CreateanewPeeringRuleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewPeeringRuleResponse, error) {
	rsp, err := c.CreateanewPeeringRuleWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewPeeringRuleResponse(rsp)
}

func (c *ClientWithResponses) CreateanewPeeringRuleWithResponse(ctx context.Context, body CreateanewPeeringRuleJSONRequestBody) (*CreateanewPeeringRuleResponse, error) {
	rsp, err := c.CreateanewPeeringRule(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewPeeringRuleResponse(rsp)
}

// DeleteaspecificPeeringRuleWithResponse request returning *DeleteaspecificPeeringRuleResponse
func (c *ClientWithResponses) DeleteaspecificPeeringRuleWithResponse(ctx context.Context, id string) (*DeleteaspecificPeeringRuleResponse, error) {
	rsp, err := c.DeleteaspecificPeeringRule(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificPeeringRuleResponse(rsp)
}

// GetaspecificPeeringRuleWithResponse request returning *GetaspecificPeeringRuleResponse
func (c *ClientWithResponses) GetaspecificPeeringRuleWithResponse(ctx context.Context, id string) (*GetaspecificPeeringRuleResponse, error) {
	rsp, err := c.GetaspecificPeeringRule(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificPeeringRuleResponse(rsp)
}

// ChangeaspecificPeeringRuleWithBodyWithResponse request with arbitrary body returning *ChangeaspecificPeeringRuleResponse
func (c *ClientWithResponses) ChangeaspecificPeeringRuleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificPeeringRuleResponse, error) {
	rsp, err := c.ChangeaspecificPeeringRuleWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificPeeringRuleResponse(rsp)
}

// ReplacechangeaspecificPeeringRuleWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificPeeringRuleResponse
func (c *ClientWithResponses) ReplacechangeaspecificPeeringRuleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificPeeringRuleResponse, error) {
	rsp, err := c.ReplacechangeaspecificPeeringRuleWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificPeeringRuleResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificPeeringRuleWithResponse(ctx context.Context, id string, body ReplacechangeaspecificPeeringRuleJSONRequestBody) (*ReplacechangeaspecificPeeringRuleResponse, error) {
	rsp, err := c.ReplacechangeaspecificPeeringRule(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificPeeringRuleResponse(rsp)
}

// GetPeeringServerPreferenceitemsWithResponse request returning *GetPeeringServerPreferenceitemsResponse
func (c *ClientWithResponses) GetPeeringServerPreferenceitemsWithResponse(ctx context.Context, params *GetPeeringServerPreferenceitemsParams) (*GetPeeringServerPreferenceitemsResponse, error) {
	rsp, err := c.GetPeeringServerPreferenceitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetPeeringServerPreferenceitemsResponse(rsp)
}

// GetaspecificPeeringServerPreferenceWithResponse request returning *GetaspecificPeeringServerPreferenceResponse
func (c *ClientWithResponses) GetaspecificPeeringServerPreferenceWithResponse(ctx context.Context, id string) (*GetaspecificPeeringServerPreferenceResponse, error) {
	rsp, err := c.GetaspecificPeeringServerPreference(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificPeeringServerPreferenceResponse(rsp)
}

// ChangeaspecificPeeringServerPreferenceWithBodyWithResponse request with arbitrary body returning *ChangeaspecificPeeringServerPreferenceResponse
func (c *ClientWithResponses) ChangeaspecificPeeringServerPreferenceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificPeeringServerPreferenceResponse, error) {
	rsp, err := c.ChangeaspecificPeeringServerPreferenceWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificPeeringServerPreferenceResponse(rsp)
}

// ReplacechangeaspecificPeeringServerPreferenceWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificPeeringServerPreferenceResponse
func (c *ClientWithResponses) ReplacechangeaspecificPeeringServerPreferenceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificPeeringServerPreferenceResponse, error) {
	rsp, err := c.ReplacechangeaspecificPeeringServerPreferenceWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificPeeringServerPreferenceResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificPeeringServerPreferenceWithResponse(ctx context.Context, id string, body ReplacechangeaspecificPeeringServerPreferenceJSONRequestBody) (*ReplacechangeaspecificPeeringServerPreferenceResponse, error) {
	rsp, err := c.ReplacechangeaspecificPeeringServerPreference(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificPeeringServerPreferenceResponse(rsp)
}

// GetPeeringServeritemsWithResponse request returning *GetPeeringServeritemsResponse
func (c *ClientWithResponses) GetPeeringServeritemsWithResponse(ctx context.Context, params *GetPeeringServeritemsParams) (*GetPeeringServeritemsResponse, error) {
	rsp, err := c.GetPeeringServeritems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetPeeringServeritemsResponse(rsp)
}

// CreateanewPeeringServerWithBodyWithResponse request with arbitrary body returning *CreateanewPeeringServerResponse
func (c *ClientWithResponses) CreateanewPeeringServerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewPeeringServerResponse, error) {
	rsp, err := c.CreateanewPeeringServerWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewPeeringServerResponse(rsp)
}

func (c *ClientWithResponses) CreateanewPeeringServerWithResponse(ctx context.Context, body CreateanewPeeringServerJSONRequestBody) (*CreateanewPeeringServerResponse, error) {
	rsp, err := c.CreateanewPeeringServer(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewPeeringServerResponse(rsp)
}

// DeleteaspecificPeeringServerWithResponse request returning *DeleteaspecificPeeringServerResponse
func (c *ClientWithResponses) DeleteaspecificPeeringServerWithResponse(ctx context.Context, id string) (*DeleteaspecificPeeringServerResponse, error) {
	rsp, err := c.DeleteaspecificPeeringServer(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificPeeringServerResponse(rsp)
}

// GetaspecificPeeringServerWithResponse request returning *GetaspecificPeeringServerResponse
func (c *ClientWithResponses) GetaspecificPeeringServerWithResponse(ctx context.Context, id string) (*GetaspecificPeeringServerResponse, error) {
	rsp, err := c.GetaspecificPeeringServer(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificPeeringServerResponse(rsp)
}

// ChangeaspecificPeeringServerWithBodyWithResponse request with arbitrary body returning *ChangeaspecificPeeringServerResponse
func (c *ClientWithResponses) ChangeaspecificPeeringServerWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificPeeringServerResponse, error) {
	rsp, err := c.ChangeaspecificPeeringServerWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificPeeringServerResponse(rsp)
}

// ReplacechangeaspecificPeeringServerWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificPeeringServerResponse
func (c *ClientWithResponses) ReplacechangeaspecificPeeringServerWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificPeeringServerResponse, error) {
	rsp, err := c.ReplacechangeaspecificPeeringServerWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificPeeringServerResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificPeeringServerWithResponse(ctx context.Context, id string, body ReplacechangeaspecificPeeringServerJSONRequestBody) (*ReplacechangeaspecificPeeringServerResponse, error) {
	rsp, err := c.ReplacechangeaspecificPeeringServer(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificPeeringServerResponse(rsp)
}

// GetPhonebookEntryitemsWithResponse request returning *GetPhonebookEntryitemsResponse
func (c *ClientWithResponses) GetPhonebookEntryitemsWithResponse(ctx context.Context, params *GetPhonebookEntryitemsParams) (*GetPhonebookEntryitemsResponse, error) {
	rsp, err := c.GetPhonebookEntryitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetPhonebookEntryitemsResponse(rsp)
}

// CreateanewPhonebookEntryWithBodyWithResponse request with arbitrary body returning *CreateanewPhonebookEntryResponse
func (c *ClientWithResponses) CreateanewPhonebookEntryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewPhonebookEntryResponse, error) {
	rsp, err := c.CreateanewPhonebookEntryWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewPhonebookEntryResponse(rsp)
}

func (c *ClientWithResponses) CreateanewPhonebookEntryWithResponse(ctx context.Context, body CreateanewPhonebookEntryJSONRequestBody) (*CreateanewPhonebookEntryResponse, error) {
	rsp, err := c.CreateanewPhonebookEntry(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewPhonebookEntryResponse(rsp)
}

// DeleteaspecificPhonebookEntryWithResponse request returning *DeleteaspecificPhonebookEntryResponse
func (c *ClientWithResponses) DeleteaspecificPhonebookEntryWithResponse(ctx context.Context, id string) (*DeleteaspecificPhonebookEntryResponse, error) {
	rsp, err := c.DeleteaspecificPhonebookEntry(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificPhonebookEntryResponse(rsp)
}

// GetaspecificPhonebookEntryWithResponse request returning *GetaspecificPhonebookEntryResponse
func (c *ClientWithResponses) GetaspecificPhonebookEntryWithResponse(ctx context.Context, id string) (*GetaspecificPhonebookEntryResponse, error) {
	rsp, err := c.GetaspecificPhonebookEntry(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificPhonebookEntryResponse(rsp)
}

// ChangeaspecificPhonebookEntryWithBodyWithResponse request with arbitrary body returning *ChangeaspecificPhonebookEntryResponse
func (c *ClientWithResponses) ChangeaspecificPhonebookEntryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificPhonebookEntryResponse, error) {
	rsp, err := c.ChangeaspecificPhonebookEntryWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificPhonebookEntryResponse(rsp)
}

// ReplacechangeaspecificPhonebookEntryWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificPhonebookEntryResponse
func (c *ClientWithResponses) ReplacechangeaspecificPhonebookEntryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificPhonebookEntryResponse, error) {
	rsp, err := c.ReplacechangeaspecificPhonebookEntryWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificPhonebookEntryResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificPhonebookEntryWithResponse(ctx context.Context, id string, body ReplacechangeaspecificPhonebookEntryJSONRequestBody) (*ReplacechangeaspecificPhonebookEntryResponse, error) {
	rsp, err := c.ReplacechangeaspecificPhonebookEntry(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificPhonebookEntryResponse(rsp)
}

// GetPreferencesMetaEntryitemsWithResponse request returning *GetPreferencesMetaEntryitemsResponse
func (c *ClientWithResponses) GetPreferencesMetaEntryitemsWithResponse(ctx context.Context, params *GetPreferencesMetaEntryitemsParams) (*GetPreferencesMetaEntryitemsResponse, error) {
	rsp, err := c.GetPreferencesMetaEntryitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetPreferencesMetaEntryitemsResponse(rsp)
}

// CreateanewPreferencesMetaEntryWithBodyWithResponse request with arbitrary body returning *CreateanewPreferencesMetaEntryResponse
func (c *ClientWithResponses) CreateanewPreferencesMetaEntryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewPreferencesMetaEntryResponse, error) {
	rsp, err := c.CreateanewPreferencesMetaEntryWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewPreferencesMetaEntryResponse(rsp)
}

func (c *ClientWithResponses) CreateanewPreferencesMetaEntryWithResponse(ctx context.Context, body CreateanewPreferencesMetaEntryJSONRequestBody) (*CreateanewPreferencesMetaEntryResponse, error) {
	rsp, err := c.CreateanewPreferencesMetaEntry(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewPreferencesMetaEntryResponse(rsp)
}

// DeleteaspecificPreferencesMetaEntryWithResponse request returning *DeleteaspecificPreferencesMetaEntryResponse
func (c *ClientWithResponses) DeleteaspecificPreferencesMetaEntryWithResponse(ctx context.Context, id string) (*DeleteaspecificPreferencesMetaEntryResponse, error) {
	rsp, err := c.DeleteaspecificPreferencesMetaEntry(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificPreferencesMetaEntryResponse(rsp)
}

// GetaspecificPreferencesMetaEntryWithResponse request returning *GetaspecificPreferencesMetaEntryResponse
func (c *ClientWithResponses) GetaspecificPreferencesMetaEntryWithResponse(ctx context.Context, id string) (*GetaspecificPreferencesMetaEntryResponse, error) {
	rsp, err := c.GetaspecificPreferencesMetaEntry(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificPreferencesMetaEntryResponse(rsp)
}

// ChangeaspecificPreferencesMetaEntryWithBodyWithResponse request with arbitrary body returning *ChangeaspecificPreferencesMetaEntryResponse
func (c *ClientWithResponses) ChangeaspecificPreferencesMetaEntryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificPreferencesMetaEntryResponse, error) {
	rsp, err := c.ChangeaspecificPreferencesMetaEntryWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificPreferencesMetaEntryResponse(rsp)
}

// ReplacechangeaspecificPreferencesMetaEntryWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificPreferencesMetaEntryResponse
func (c *ClientWithResponses) ReplacechangeaspecificPreferencesMetaEntryWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificPreferencesMetaEntryResponse, error) {
	rsp, err := c.ReplacechangeaspecificPreferencesMetaEntryWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificPreferencesMetaEntryResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificPreferencesMetaEntryWithResponse(ctx context.Context, id string, body ReplacechangeaspecificPreferencesMetaEntryJSONRequestBody) (*ReplacechangeaspecificPreferencesMetaEntryResponse, error) {
	rsp, err := c.ReplacechangeaspecificPreferencesMetaEntry(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificPreferencesMetaEntryResponse(rsp)
}

// GetProfilePackageitemsWithResponse request returning *GetProfilePackageitemsResponse
func (c *ClientWithResponses) GetProfilePackageitemsWithResponse(ctx context.Context, params *GetProfilePackageitemsParams) (*GetProfilePackageitemsResponse, error) {
	rsp, err := c.GetProfilePackageitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetProfilePackageitemsResponse(rsp)
}

// CreateanewProfilePackageWithBodyWithResponse request with arbitrary body returning *CreateanewProfilePackageResponse
func (c *ClientWithResponses) CreateanewProfilePackageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewProfilePackageResponse, error) {
	rsp, err := c.CreateanewProfilePackageWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewProfilePackageResponse(rsp)
}

func (c *ClientWithResponses) CreateanewProfilePackageWithResponse(ctx context.Context, body CreateanewProfilePackageJSONRequestBody) (*CreateanewProfilePackageResponse, error) {
	rsp, err := c.CreateanewProfilePackage(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewProfilePackageResponse(rsp)
}

// DeleteaspecificProfilePackageWithResponse request returning *DeleteaspecificProfilePackageResponse
func (c *ClientWithResponses) DeleteaspecificProfilePackageWithResponse(ctx context.Context, id string) (*DeleteaspecificProfilePackageResponse, error) {
	rsp, err := c.DeleteaspecificProfilePackage(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificProfilePackageResponse(rsp)
}

// GetaspecificProfilePackageWithResponse request returning *GetaspecificProfilePackageResponse
func (c *ClientWithResponses) GetaspecificProfilePackageWithResponse(ctx context.Context, id string) (*GetaspecificProfilePackageResponse, error) {
	rsp, err := c.GetaspecificProfilePackage(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificProfilePackageResponse(rsp)
}

// ChangeaspecificProfilePackageWithBodyWithResponse request with arbitrary body returning *ChangeaspecificProfilePackageResponse
func (c *ClientWithResponses) ChangeaspecificProfilePackageWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificProfilePackageResponse, error) {
	rsp, err := c.ChangeaspecificProfilePackageWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificProfilePackageResponse(rsp)
}

// ReplacechangeaspecificProfilePackageWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificProfilePackageResponse
func (c *ClientWithResponses) ReplacechangeaspecificProfilePackageWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificProfilePackageResponse, error) {
	rsp, err := c.ReplacechangeaspecificProfilePackageWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificProfilePackageResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificProfilePackageWithResponse(ctx context.Context, id string, body ReplacechangeaspecificProfilePackageJSONRequestBody) (*ReplacechangeaspecificProfilePackageResponse, error) {
	rsp, err := c.ReplacechangeaspecificProfilePackage(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificProfilePackageResponse(rsp)
}

// GetProfilePreferenceitemsWithResponse request returning *GetProfilePreferenceitemsResponse
func (c *ClientWithResponses) GetProfilePreferenceitemsWithResponse(ctx context.Context, params *GetProfilePreferenceitemsParams) (*GetProfilePreferenceitemsResponse, error) {
	rsp, err := c.GetProfilePreferenceitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetProfilePreferenceitemsResponse(rsp)
}

// GetaspecificProfilePreferenceWithResponse request returning *GetaspecificProfilePreferenceResponse
func (c *ClientWithResponses) GetaspecificProfilePreferenceWithResponse(ctx context.Context, id string) (*GetaspecificProfilePreferenceResponse, error) {
	rsp, err := c.GetaspecificProfilePreference(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificProfilePreferenceResponse(rsp)
}

// ChangeaspecificProfilePreferenceWithBodyWithResponse request with arbitrary body returning *ChangeaspecificProfilePreferenceResponse
func (c *ClientWithResponses) ChangeaspecificProfilePreferenceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificProfilePreferenceResponse, error) {
	rsp, err := c.ChangeaspecificProfilePreferenceWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificProfilePreferenceResponse(rsp)
}

// ReplacechangeaspecificProfilePreferenceWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificProfilePreferenceResponse
func (c *ClientWithResponses) ReplacechangeaspecificProfilePreferenceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificProfilePreferenceResponse, error) {
	rsp, err := c.ReplacechangeaspecificProfilePreferenceWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificProfilePreferenceResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificProfilePreferenceWithResponse(ctx context.Context, id string, body ReplacechangeaspecificProfilePreferenceJSONRequestBody) (*ReplacechangeaspecificProfilePreferenceResponse, error) {
	rsp, err := c.ReplacechangeaspecificProfilePreference(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificProfilePreferenceResponse(rsp)
}

// GetReminderitemsWithResponse request returning *GetReminderitemsResponse
func (c *ClientWithResponses) GetReminderitemsWithResponse(ctx context.Context, params *GetReminderitemsParams) (*GetReminderitemsResponse, error) {
	rsp, err := c.GetReminderitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetReminderitemsResponse(rsp)
}

// CreateanewReminderWithBodyWithResponse request with arbitrary body returning *CreateanewReminderResponse
func (c *ClientWithResponses) CreateanewReminderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewReminderResponse, error) {
	rsp, err := c.CreateanewReminderWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewReminderResponse(rsp)
}

func (c *ClientWithResponses) CreateanewReminderWithResponse(ctx context.Context, body CreateanewReminderJSONRequestBody) (*CreateanewReminderResponse, error) {
	rsp, err := c.CreateanewReminder(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewReminderResponse(rsp)
}

// DeleteaspecificReminderWithResponse request returning *DeleteaspecificReminderResponse
func (c *ClientWithResponses) DeleteaspecificReminderWithResponse(ctx context.Context, id string) (*DeleteaspecificReminderResponse, error) {
	rsp, err := c.DeleteaspecificReminder(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificReminderResponse(rsp)
}

// GetaspecificReminderWithResponse request returning *GetaspecificReminderResponse
func (c *ClientWithResponses) GetaspecificReminderWithResponse(ctx context.Context, id string) (*GetaspecificReminderResponse, error) {
	rsp, err := c.GetaspecificReminder(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificReminderResponse(rsp)
}

// ChangeaspecificReminderWithBodyWithResponse request with arbitrary body returning *ChangeaspecificReminderResponse
func (c *ClientWithResponses) ChangeaspecificReminderWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificReminderResponse, error) {
	rsp, err := c.ChangeaspecificReminderWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificReminderResponse(rsp)
}

// ReplacechangeaspecificReminderWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificReminderResponse
func (c *ClientWithResponses) ReplacechangeaspecificReminderWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificReminderResponse, error) {
	rsp, err := c.ReplacechangeaspecificReminderWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificReminderResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificReminderWithResponse(ctx context.Context, id string, body ReplacechangeaspecificReminderJSONRequestBody) (*ReplacechangeaspecificReminderResponse, error) {
	rsp, err := c.ReplacechangeaspecificReminder(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificReminderResponse(rsp)
}

// GetReselleritemsWithResponse request returning *GetReselleritemsResponse
func (c *ClientWithResponses) GetReselleritemsWithResponse(ctx context.Context, params *GetReselleritemsParams) (*GetReselleritemsResponse, error) {
	rsp, err := c.GetReselleritems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetReselleritemsResponse(rsp)
}

// CreateanewResellerWithBodyWithResponse request with arbitrary body returning *CreateanewResellerResponse
func (c *ClientWithResponses) CreateanewResellerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewResellerResponse, error) {
	rsp, err := c.CreateanewResellerWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewResellerResponse(rsp)
}

func (c *ClientWithResponses) CreateanewResellerWithResponse(ctx context.Context, body CreateanewResellerJSONRequestBody) (*CreateanewResellerResponse, error) {
	rsp, err := c.CreateanewReseller(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewResellerResponse(rsp)
}

// GetaspecificResellerWithResponse request returning *GetaspecificResellerResponse
func (c *ClientWithResponses) GetaspecificResellerWithResponse(ctx context.Context, id string) (*GetaspecificResellerResponse, error) {
	rsp, err := c.GetaspecificReseller(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificResellerResponse(rsp)
}

// ChangeaspecificResellerWithBodyWithResponse request with arbitrary body returning *ChangeaspecificResellerResponse
func (c *ClientWithResponses) ChangeaspecificResellerWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificResellerResponse, error) {
	rsp, err := c.ChangeaspecificResellerWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificResellerResponse(rsp)
}

// ReplacechangeaspecificResellerWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificResellerResponse
func (c *ClientWithResponses) ReplacechangeaspecificResellerWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificResellerResponse, error) {
	rsp, err := c.ReplacechangeaspecificResellerWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificResellerResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificResellerWithResponse(ctx context.Context, id string, body ReplacechangeaspecificResellerJSONRequestBody) (*ReplacechangeaspecificResellerResponse, error) {
	rsp, err := c.ReplacechangeaspecificReseller(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificResellerResponse(rsp)
}

// GetRewriteRuleitemsWithResponse request returning *GetRewriteRuleitemsResponse
func (c *ClientWithResponses) GetRewriteRuleitemsWithResponse(ctx context.Context, params *GetRewriteRuleitemsParams) (*GetRewriteRuleitemsResponse, error) {
	rsp, err := c.GetRewriteRuleitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetRewriteRuleitemsResponse(rsp)
}

// CreateanewRewriteRuleWithBodyWithResponse request with arbitrary body returning *CreateanewRewriteRuleResponse
func (c *ClientWithResponses) CreateanewRewriteRuleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewRewriteRuleResponse, error) {
	rsp, err := c.CreateanewRewriteRuleWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewRewriteRuleResponse(rsp)
}

func (c *ClientWithResponses) CreateanewRewriteRuleWithResponse(ctx context.Context, body CreateanewRewriteRuleJSONRequestBody) (*CreateanewRewriteRuleResponse, error) {
	rsp, err := c.CreateanewRewriteRule(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewRewriteRuleResponse(rsp)
}

// DeleteaspecificRewriteRuleWithResponse request returning *DeleteaspecificRewriteRuleResponse
func (c *ClientWithResponses) DeleteaspecificRewriteRuleWithResponse(ctx context.Context, id string) (*DeleteaspecificRewriteRuleResponse, error) {
	rsp, err := c.DeleteaspecificRewriteRule(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificRewriteRuleResponse(rsp)
}

// GetaspecificRewriteRuleWithResponse request returning *GetaspecificRewriteRuleResponse
func (c *ClientWithResponses) GetaspecificRewriteRuleWithResponse(ctx context.Context, id string) (*GetaspecificRewriteRuleResponse, error) {
	rsp, err := c.GetaspecificRewriteRule(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificRewriteRuleResponse(rsp)
}

// ChangeaspecificRewriteRuleWithBodyWithResponse request with arbitrary body returning *ChangeaspecificRewriteRuleResponse
func (c *ClientWithResponses) ChangeaspecificRewriteRuleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificRewriteRuleResponse, error) {
	rsp, err := c.ChangeaspecificRewriteRuleWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificRewriteRuleResponse(rsp)
}

// ReplacechangeaspecificRewriteRuleWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificRewriteRuleResponse
func (c *ClientWithResponses) ReplacechangeaspecificRewriteRuleWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificRewriteRuleResponse, error) {
	rsp, err := c.ReplacechangeaspecificRewriteRuleWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificRewriteRuleResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificRewriteRuleWithResponse(ctx context.Context, id string, body ReplacechangeaspecificRewriteRuleJSONRequestBody) (*ReplacechangeaspecificRewriteRuleResponse, error) {
	rsp, err := c.ReplacechangeaspecificRewriteRule(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificRewriteRuleResponse(rsp)
}

// GetRewriteRuleSetitemsWithResponse request returning *GetRewriteRuleSetitemsResponse
func (c *ClientWithResponses) GetRewriteRuleSetitemsWithResponse(ctx context.Context, params *GetRewriteRuleSetitemsParams) (*GetRewriteRuleSetitemsResponse, error) {
	rsp, err := c.GetRewriteRuleSetitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetRewriteRuleSetitemsResponse(rsp)
}

// CreateanewRewriteRuleSetWithBodyWithResponse request with arbitrary body returning *CreateanewRewriteRuleSetResponse
func (c *ClientWithResponses) CreateanewRewriteRuleSetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewRewriteRuleSetResponse, error) {
	rsp, err := c.CreateanewRewriteRuleSetWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewRewriteRuleSetResponse(rsp)
}

func (c *ClientWithResponses) CreateanewRewriteRuleSetWithResponse(ctx context.Context, body CreateanewRewriteRuleSetJSONRequestBody) (*CreateanewRewriteRuleSetResponse, error) {
	rsp, err := c.CreateanewRewriteRuleSet(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewRewriteRuleSetResponse(rsp)
}

// DeleteaspecificRewriteRuleSetWithResponse request returning *DeleteaspecificRewriteRuleSetResponse
func (c *ClientWithResponses) DeleteaspecificRewriteRuleSetWithResponse(ctx context.Context, id string) (*DeleteaspecificRewriteRuleSetResponse, error) {
	rsp, err := c.DeleteaspecificRewriteRuleSet(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificRewriteRuleSetResponse(rsp)
}

// GetaspecificRewriteRuleSetWithResponse request returning *GetaspecificRewriteRuleSetResponse
func (c *ClientWithResponses) GetaspecificRewriteRuleSetWithResponse(ctx context.Context, id string) (*GetaspecificRewriteRuleSetResponse, error) {
	rsp, err := c.GetaspecificRewriteRuleSet(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificRewriteRuleSetResponse(rsp)
}

// ChangeaspecificRewriteRuleSetWithBodyWithResponse request with arbitrary body returning *ChangeaspecificRewriteRuleSetResponse
func (c *ClientWithResponses) ChangeaspecificRewriteRuleSetWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificRewriteRuleSetResponse, error) {
	rsp, err := c.ChangeaspecificRewriteRuleSetWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificRewriteRuleSetResponse(rsp)
}

// ReplacechangeaspecificRewriteRuleSetWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificRewriteRuleSetResponse
func (c *ClientWithResponses) ReplacechangeaspecificRewriteRuleSetWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificRewriteRuleSetResponse, error) {
	rsp, err := c.ReplacechangeaspecificRewriteRuleSetWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificRewriteRuleSetResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificRewriteRuleSetWithResponse(ctx context.Context, id string, body ReplacechangeaspecificRewriteRuleSetJSONRequestBody) (*ReplacechangeaspecificRewriteRuleSetResponse, error) {
	rsp, err := c.ReplacechangeaspecificRewriteRuleSet(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificRewriteRuleSetResponse(rsp)
}

// GetRtcAppitemsWithResponse request returning *GetRtcAppitemsResponse
func (c *ClientWithResponses) GetRtcAppitemsWithResponse(ctx context.Context, params *GetRtcAppitemsParams) (*GetRtcAppitemsResponse, error) {
	rsp, err := c.GetRtcAppitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetRtcAppitemsResponse(rsp)
}

// GetaspecificRtcAppWithResponse request returning *GetaspecificRtcAppResponse
func (c *ClientWithResponses) GetaspecificRtcAppWithResponse(ctx context.Context, id string) (*GetaspecificRtcAppResponse, error) {
	rsp, err := c.GetaspecificRtcApp(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificRtcAppResponse(rsp)
}

// ChangeaspecificRtcAppWithBodyWithResponse request with arbitrary body returning *ChangeaspecificRtcAppResponse
func (c *ClientWithResponses) ChangeaspecificRtcAppWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificRtcAppResponse, error) {
	rsp, err := c.ChangeaspecificRtcAppWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificRtcAppResponse(rsp)
}

// ReplacechangeaspecificRtcAppWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificRtcAppResponse
func (c *ClientWithResponses) ReplacechangeaspecificRtcAppWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificRtcAppResponse, error) {
	rsp, err := c.ReplacechangeaspecificRtcAppWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificRtcAppResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificRtcAppWithResponse(ctx context.Context, id string, body ReplacechangeaspecificRtcAppJSONRequestBody) (*ReplacechangeaspecificRtcAppResponse, error) {
	rsp, err := c.ReplacechangeaspecificRtcApp(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificRtcAppResponse(rsp)
}

// GetRtcNetworkitemsWithResponse request returning *GetRtcNetworkitemsResponse
func (c *ClientWithResponses) GetRtcNetworkitemsWithResponse(ctx context.Context, params *GetRtcNetworkitemsParams) (*GetRtcNetworkitemsResponse, error) {
	rsp, err := c.GetRtcNetworkitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetRtcNetworkitemsResponse(rsp)
}

// GetaspecificRtcNetworkWithResponse request returning *GetaspecificRtcNetworkResponse
func (c *ClientWithResponses) GetaspecificRtcNetworkWithResponse(ctx context.Context, id string) (*GetaspecificRtcNetworkResponse, error) {
	rsp, err := c.GetaspecificRtcNetwork(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificRtcNetworkResponse(rsp)
}

// ChangeaspecificRtcNetworkWithBodyWithResponse request with arbitrary body returning *ChangeaspecificRtcNetworkResponse
func (c *ClientWithResponses) ChangeaspecificRtcNetworkWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificRtcNetworkResponse, error) {
	rsp, err := c.ChangeaspecificRtcNetworkWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificRtcNetworkResponse(rsp)
}

// ReplacechangeaspecificRtcNetworkWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificRtcNetworkResponse
func (c *ClientWithResponses) ReplacechangeaspecificRtcNetworkWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificRtcNetworkResponse, error) {
	rsp, err := c.ReplacechangeaspecificRtcNetworkWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificRtcNetworkResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificRtcNetworkWithResponse(ctx context.Context, id string, body ReplacechangeaspecificRtcNetworkJSONRequestBody) (*ReplacechangeaspecificRtcNetworkResponse, error) {
	rsp, err := c.ReplacechangeaspecificRtcNetwork(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificRtcNetworkResponse(rsp)
}

// GetRtcSessionitemsWithResponse request returning *GetRtcSessionitemsResponse
func (c *ClientWithResponses) GetRtcSessionitemsWithResponse(ctx context.Context, params *GetRtcSessionitemsParams) (*GetRtcSessionitemsResponse, error) {
	rsp, err := c.GetRtcSessionitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetRtcSessionitemsResponse(rsp)
}

// CreateanewRtcSessionWithBodyWithResponse request with arbitrary body returning *CreateanewRtcSessionResponse
func (c *ClientWithResponses) CreateanewRtcSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewRtcSessionResponse, error) {
	rsp, err := c.CreateanewRtcSessionWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewRtcSessionResponse(rsp)
}

func (c *ClientWithResponses) CreateanewRtcSessionWithResponse(ctx context.Context, body CreateanewRtcSessionJSONRequestBody) (*CreateanewRtcSessionResponse, error) {
	rsp, err := c.CreateanewRtcSession(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewRtcSessionResponse(rsp)
}

// GetaspecificRtcSessionWithResponse request returning *GetaspecificRtcSessionResponse
func (c *ClientWithResponses) GetaspecificRtcSessionWithResponse(ctx context.Context, id string) (*GetaspecificRtcSessionResponse, error) {
	rsp, err := c.GetaspecificRtcSession(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificRtcSessionResponse(rsp)
}

// GetSIPCaptureitemsWithResponse request returning *GetSIPCaptureitemsResponse
func (c *ClientWithResponses) GetSIPCaptureitemsWithResponse(ctx context.Context, params *GetSIPCaptureitemsParams) (*GetSIPCaptureitemsResponse, error) {
	rsp, err := c.GetSIPCaptureitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSIPCaptureitemsResponse(rsp)
}

// GetaspecificSIPCaptureWithResponse request returning *GetaspecificSIPCaptureResponse
func (c *ClientWithResponses) GetaspecificSIPCaptureWithResponse(ctx context.Context, id string) (*GetaspecificSIPCaptureResponse, error) {
	rsp, err := c.GetaspecificSIPCapture(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificSIPCaptureResponse(rsp)
}

// GetSMSitemsWithResponse request returning *GetSMSitemsResponse
func (c *ClientWithResponses) GetSMSitemsWithResponse(ctx context.Context, params *GetSMSitemsParams) (*GetSMSitemsResponse, error) {
	rsp, err := c.GetSMSitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSMSitemsResponse(rsp)
}

// CreateanewSMSWithBodyWithResponse request with arbitrary body returning *CreateanewSMSResponse
func (c *ClientWithResponses) CreateanewSMSWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewSMSResponse, error) {
	rsp, err := c.CreateanewSMSWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewSMSResponse(rsp)
}

func (c *ClientWithResponses) CreateanewSMSWithResponse(ctx context.Context, body CreateanewSMSJSONRequestBody) (*CreateanewSMSResponse, error) {
	rsp, err := c.CreateanewSMS(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewSMSResponse(rsp)
}

// GetaspecificSMSWithResponse request returning *GetaspecificSMSResponse
func (c *ClientWithResponses) GetaspecificSMSWithResponse(ctx context.Context, id string) (*GetaspecificSMSResponse, error) {
	rsp, err := c.GetaspecificSMS(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificSMSResponse(rsp)
}

// GetaspecificSoundFileRecordingWithResponse request returning *GetaspecificSoundFileRecordingResponse
func (c *ClientWithResponses) GetaspecificSoundFileRecordingWithResponse(ctx context.Context, id string) (*GetaspecificSoundFileRecordingResponse, error) {
	rsp, err := c.GetaspecificSoundFileRecording(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificSoundFileRecordingResponse(rsp)
}

// GetSoundFileitemsWithResponse request returning *GetSoundFileitemsResponse
func (c *ClientWithResponses) GetSoundFileitemsWithResponse(ctx context.Context, params *GetSoundFileitemsParams) (*GetSoundFileitemsResponse, error) {
	rsp, err := c.GetSoundFileitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSoundFileitemsResponse(rsp)
}

// CreateanewSoundFileWithBodyWithResponse request with arbitrary body returning *CreateanewSoundFileResponse
func (c *ClientWithResponses) CreateanewSoundFileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewSoundFileResponse, error) {
	rsp, err := c.CreateanewSoundFileWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewSoundFileResponse(rsp)
}

func (c *ClientWithResponses) CreateanewSoundFileWithResponse(ctx context.Context, body CreateanewSoundFileJSONRequestBody) (*CreateanewSoundFileResponse, error) {
	rsp, err := c.CreateanewSoundFile(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewSoundFileResponse(rsp)
}

// DeleteaspecificSoundFileWithResponse request returning *DeleteaspecificSoundFileResponse
func (c *ClientWithResponses) DeleteaspecificSoundFileWithResponse(ctx context.Context, id string) (*DeleteaspecificSoundFileResponse, error) {
	rsp, err := c.DeleteaspecificSoundFile(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificSoundFileResponse(rsp)
}

// GetaspecificSoundFileWithResponse request returning *GetaspecificSoundFileResponse
func (c *ClientWithResponses) GetaspecificSoundFileWithResponse(ctx context.Context, id string) (*GetaspecificSoundFileResponse, error) {
	rsp, err := c.GetaspecificSoundFile(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificSoundFileResponse(rsp)
}

// ReplacechangeaspecificSoundFileWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificSoundFileResponse
func (c *ClientWithResponses) ReplacechangeaspecificSoundFileWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificSoundFileResponse, error) {
	rsp, err := c.ReplacechangeaspecificSoundFileWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificSoundFileResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificSoundFileWithResponse(ctx context.Context, id string, body ReplacechangeaspecificSoundFileJSONRequestBody) (*ReplacechangeaspecificSoundFileResponse, error) {
	rsp, err := c.ReplacechangeaspecificSoundFile(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificSoundFileResponse(rsp)
}

// GetSoundGroupitemsWithResponse request returning *GetSoundGroupitemsResponse
func (c *ClientWithResponses) GetSoundGroupitemsWithResponse(ctx context.Context, params *GetSoundGroupitemsParams) (*GetSoundGroupitemsResponse, error) {
	rsp, err := c.GetSoundGroupitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSoundGroupitemsResponse(rsp)
}

// GetaspecificSoundGroupWithResponse request returning *GetaspecificSoundGroupResponse
func (c *ClientWithResponses) GetaspecificSoundGroupWithResponse(ctx context.Context, id string) (*GetaspecificSoundGroupResponse, error) {
	rsp, err := c.GetaspecificSoundGroup(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificSoundGroupResponse(rsp)
}

// GetSoundHandleitemsWithResponse request returning *GetSoundHandleitemsResponse
func (c *ClientWithResponses) GetSoundHandleitemsWithResponse(ctx context.Context, params *GetSoundHandleitemsParams) (*GetSoundHandleitemsResponse, error) {
	rsp, err := c.GetSoundHandleitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSoundHandleitemsResponse(rsp)
}

// GetaspecificSoundHandleWithResponse request returning *GetaspecificSoundHandleResponse
func (c *ClientWithResponses) GetaspecificSoundHandleWithResponse(ctx context.Context, id string) (*GetaspecificSoundHandleResponse, error) {
	rsp, err := c.GetaspecificSoundHandle(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificSoundHandleResponse(rsp)
}

// GetSoundSetitemsWithResponse request returning *GetSoundSetitemsResponse
func (c *ClientWithResponses) GetSoundSetitemsWithResponse(ctx context.Context, params *GetSoundSetitemsParams) (*GetSoundSetitemsResponse, error) {
	rsp, err := c.GetSoundSetitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSoundSetitemsResponse(rsp)
}

// CreateanewSoundSetWithBodyWithResponse request with arbitrary body returning *CreateanewSoundSetResponse
func (c *ClientWithResponses) CreateanewSoundSetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewSoundSetResponse, error) {
	rsp, err := c.CreateanewSoundSetWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewSoundSetResponse(rsp)
}

func (c *ClientWithResponses) CreateanewSoundSetWithResponse(ctx context.Context, body CreateanewSoundSetJSONRequestBody) (*CreateanewSoundSetResponse, error) {
	rsp, err := c.CreateanewSoundSet(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewSoundSetResponse(rsp)
}

// DeleteaspecificSoundSetWithResponse request returning *DeleteaspecificSoundSetResponse
func (c *ClientWithResponses) DeleteaspecificSoundSetWithResponse(ctx context.Context, id string) (*DeleteaspecificSoundSetResponse, error) {
	rsp, err := c.DeleteaspecificSoundSet(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificSoundSetResponse(rsp)
}

// GetaspecificSoundSetWithResponse request returning *GetaspecificSoundSetResponse
func (c *ClientWithResponses) GetaspecificSoundSetWithResponse(ctx context.Context, id string) (*GetaspecificSoundSetResponse, error) {
	rsp, err := c.GetaspecificSoundSet(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificSoundSetResponse(rsp)
}

// ChangeaspecificSoundSetWithBodyWithResponse request with arbitrary body returning *ChangeaspecificSoundSetResponse
func (c *ClientWithResponses) ChangeaspecificSoundSetWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificSoundSetResponse, error) {
	rsp, err := c.ChangeaspecificSoundSetWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificSoundSetResponse(rsp)
}

// ReplacechangeaspecificSoundSetWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificSoundSetResponse
func (c *ClientWithResponses) ReplacechangeaspecificSoundSetWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificSoundSetResponse, error) {
	rsp, err := c.ReplacechangeaspecificSoundSetWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificSoundSetResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificSoundSetWithResponse(ctx context.Context, id string, body ReplacechangeaspecificSoundSetJSONRequestBody) (*ReplacechangeaspecificSoundSetResponse, error) {
	rsp, err := c.ReplacechangeaspecificSoundSet(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificSoundSetResponse(rsp)
}

// GetSpeedDialitemsWithResponse request returning *GetSpeedDialitemsResponse
func (c *ClientWithResponses) GetSpeedDialitemsWithResponse(ctx context.Context, params *GetSpeedDialitemsParams) (*GetSpeedDialitemsResponse, error) {
	rsp, err := c.GetSpeedDialitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSpeedDialitemsResponse(rsp)
}

// GetaspecificSpeedDialWithResponse request returning *GetaspecificSpeedDialResponse
func (c *ClientWithResponses) GetaspecificSpeedDialWithResponse(ctx context.Context, id string) (*GetaspecificSpeedDialResponse, error) {
	rsp, err := c.GetaspecificSpeedDial(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificSpeedDialResponse(rsp)
}

// ChangeaspecificSpeedDialWithBodyWithResponse request with arbitrary body returning *ChangeaspecificSpeedDialResponse
func (c *ClientWithResponses) ChangeaspecificSpeedDialWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificSpeedDialResponse, error) {
	rsp, err := c.ChangeaspecificSpeedDialWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificSpeedDialResponse(rsp)
}

// ReplacechangeaspecificSpeedDialWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificSpeedDialResponse
func (c *ClientWithResponses) ReplacechangeaspecificSpeedDialWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificSpeedDialResponse, error) {
	rsp, err := c.ReplacechangeaspecificSpeedDialWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificSpeedDialResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificSpeedDialWithResponse(ctx context.Context, id string, body ReplacechangeaspecificSpeedDialJSONRequestBody) (*ReplacechangeaspecificSpeedDialResponse, error) {
	rsp, err := c.ReplacechangeaspecificSpeedDial(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificSpeedDialResponse(rsp)
}

// GetSubscriberPreferenceitemsWithResponse request returning *GetSubscriberPreferenceitemsResponse
func (c *ClientWithResponses) GetSubscriberPreferenceitemsWithResponse(ctx context.Context, params *GetSubscriberPreferenceitemsParams) (*GetSubscriberPreferenceitemsResponse, error) {
	rsp, err := c.GetSubscriberPreferenceitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSubscriberPreferenceitemsResponse(rsp)
}

// GetaspecificSubscriberPreferenceWithResponse request returning *GetaspecificSubscriberPreferenceResponse
func (c *ClientWithResponses) GetaspecificSubscriberPreferenceWithResponse(ctx context.Context, id string) (*GetaspecificSubscriberPreferenceResponse, error) {
	rsp, err := c.GetaspecificSubscriberPreference(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificSubscriberPreferenceResponse(rsp)
}

// ChangeaspecificSubscriberPreferenceWithBodyWithResponse request with arbitrary body returning *ChangeaspecificSubscriberPreferenceResponse
func (c *ClientWithResponses) ChangeaspecificSubscriberPreferenceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificSubscriberPreferenceResponse, error) {
	rsp, err := c.ChangeaspecificSubscriberPreferenceWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificSubscriberPreferenceResponse(rsp)
}

// ReplacechangeaspecificSubscriberPreferenceWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificSubscriberPreferenceResponse
func (c *ClientWithResponses) ReplacechangeaspecificSubscriberPreferenceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificSubscriberPreferenceResponse, error) {
	rsp, err := c.ReplacechangeaspecificSubscriberPreferenceWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificSubscriberPreferenceResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificSubscriberPreferenceWithResponse(ctx context.Context, id string, body ReplacechangeaspecificSubscriberPreferenceJSONRequestBody) (*ReplacechangeaspecificSubscriberPreferenceResponse, error) {
	rsp, err := c.ReplacechangeaspecificSubscriberPreference(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificSubscriberPreferenceResponse(rsp)
}

// GetSubscriberProfileitemsWithResponse request returning *GetSubscriberProfileitemsResponse
func (c *ClientWithResponses) GetSubscriberProfileitemsWithResponse(ctx context.Context, params *GetSubscriberProfileitemsParams) (*GetSubscriberProfileitemsResponse, error) {
	rsp, err := c.GetSubscriberProfileitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSubscriberProfileitemsResponse(rsp)
}

// CreateanewSubscriberProfileWithBodyWithResponse request with arbitrary body returning *CreateanewSubscriberProfileResponse
func (c *ClientWithResponses) CreateanewSubscriberProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewSubscriberProfileResponse, error) {
	rsp, err := c.CreateanewSubscriberProfileWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewSubscriberProfileResponse(rsp)
}

func (c *ClientWithResponses) CreateanewSubscriberProfileWithResponse(ctx context.Context, body CreateanewSubscriberProfileJSONRequestBody) (*CreateanewSubscriberProfileResponse, error) {
	rsp, err := c.CreateanewSubscriberProfile(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewSubscriberProfileResponse(rsp)
}

// DeleteaspecificSubscriberProfileWithResponse request returning *DeleteaspecificSubscriberProfileResponse
func (c *ClientWithResponses) DeleteaspecificSubscriberProfileWithResponse(ctx context.Context, id string) (*DeleteaspecificSubscriberProfileResponse, error) {
	rsp, err := c.DeleteaspecificSubscriberProfile(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificSubscriberProfileResponse(rsp)
}

// GetaspecificSubscriberProfileWithResponse request returning *GetaspecificSubscriberProfileResponse
func (c *ClientWithResponses) GetaspecificSubscriberProfileWithResponse(ctx context.Context, id string) (*GetaspecificSubscriberProfileResponse, error) {
	rsp, err := c.GetaspecificSubscriberProfile(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificSubscriberProfileResponse(rsp)
}

// ChangeaspecificSubscriberProfileWithBodyWithResponse request with arbitrary body returning *ChangeaspecificSubscriberProfileResponse
func (c *ClientWithResponses) ChangeaspecificSubscriberProfileWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificSubscriberProfileResponse, error) {
	rsp, err := c.ChangeaspecificSubscriberProfileWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificSubscriberProfileResponse(rsp)
}

// ReplacechangeaspecificSubscriberProfileWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificSubscriberProfileResponse
func (c *ClientWithResponses) ReplacechangeaspecificSubscriberProfileWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificSubscriberProfileResponse, error) {
	rsp, err := c.ReplacechangeaspecificSubscriberProfileWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificSubscriberProfileResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificSubscriberProfileWithResponse(ctx context.Context, id string, body ReplacechangeaspecificSubscriberProfileJSONRequestBody) (*ReplacechangeaspecificSubscriberProfileResponse, error) {
	rsp, err := c.ReplacechangeaspecificSubscriberProfile(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificSubscriberProfileResponse(rsp)
}

// GetSubscriberProfileSetitemsWithResponse request returning *GetSubscriberProfileSetitemsResponse
func (c *ClientWithResponses) GetSubscriberProfileSetitemsWithResponse(ctx context.Context, params *GetSubscriberProfileSetitemsParams) (*GetSubscriberProfileSetitemsResponse, error) {
	rsp, err := c.GetSubscriberProfileSetitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSubscriberProfileSetitemsResponse(rsp)
}

// CreateanewSubscriberProfileSetWithBodyWithResponse request with arbitrary body returning *CreateanewSubscriberProfileSetResponse
func (c *ClientWithResponses) CreateanewSubscriberProfileSetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewSubscriberProfileSetResponse, error) {
	rsp, err := c.CreateanewSubscriberProfileSetWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewSubscriberProfileSetResponse(rsp)
}

func (c *ClientWithResponses) CreateanewSubscriberProfileSetWithResponse(ctx context.Context, body CreateanewSubscriberProfileSetJSONRequestBody) (*CreateanewSubscriberProfileSetResponse, error) {
	rsp, err := c.CreateanewSubscriberProfileSet(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewSubscriberProfileSetResponse(rsp)
}

// DeleteaspecificSubscriberProfileSetWithResponse request returning *DeleteaspecificSubscriberProfileSetResponse
func (c *ClientWithResponses) DeleteaspecificSubscriberProfileSetWithResponse(ctx context.Context, id string) (*DeleteaspecificSubscriberProfileSetResponse, error) {
	rsp, err := c.DeleteaspecificSubscriberProfileSet(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificSubscriberProfileSetResponse(rsp)
}

// GetaspecificSubscriberProfileSetWithResponse request returning *GetaspecificSubscriberProfileSetResponse
func (c *ClientWithResponses) GetaspecificSubscriberProfileSetWithResponse(ctx context.Context, id string) (*GetaspecificSubscriberProfileSetResponse, error) {
	rsp, err := c.GetaspecificSubscriberProfileSet(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificSubscriberProfileSetResponse(rsp)
}

// ChangeaspecificSubscriberProfileSetWithBodyWithResponse request with arbitrary body returning *ChangeaspecificSubscriberProfileSetResponse
func (c *ClientWithResponses) ChangeaspecificSubscriberProfileSetWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificSubscriberProfileSetResponse, error) {
	rsp, err := c.ChangeaspecificSubscriberProfileSetWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificSubscriberProfileSetResponse(rsp)
}

// ReplacechangeaspecificSubscriberProfileSetWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificSubscriberProfileSetResponse
func (c *ClientWithResponses) ReplacechangeaspecificSubscriberProfileSetWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificSubscriberProfileSetResponse, error) {
	rsp, err := c.ReplacechangeaspecificSubscriberProfileSetWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificSubscriberProfileSetResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificSubscriberProfileSetWithResponse(ctx context.Context, id string, body ReplacechangeaspecificSubscriberProfileSetJSONRequestBody) (*ReplacechangeaspecificSubscriberProfileSetResponse, error) {
	rsp, err := c.ReplacechangeaspecificSubscriberProfileSet(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificSubscriberProfileSetResponse(rsp)
}

// GetSubscriberRegistrationitemsWithResponse request returning *GetSubscriberRegistrationitemsResponse
func (c *ClientWithResponses) GetSubscriberRegistrationitemsWithResponse(ctx context.Context, params *GetSubscriberRegistrationitemsParams) (*GetSubscriberRegistrationitemsResponse, error) {
	rsp, err := c.GetSubscriberRegistrationitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSubscriberRegistrationitemsResponse(rsp)
}

// CreateanewSubscriberRegistrationWithBodyWithResponse request with arbitrary body returning *CreateanewSubscriberRegistrationResponse
func (c *ClientWithResponses) CreateanewSubscriberRegistrationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewSubscriberRegistrationResponse, error) {
	rsp, err := c.CreateanewSubscriberRegistrationWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewSubscriberRegistrationResponse(rsp)
}

func (c *ClientWithResponses) CreateanewSubscriberRegistrationWithResponse(ctx context.Context, body CreateanewSubscriberRegistrationJSONRequestBody) (*CreateanewSubscriberRegistrationResponse, error) {
	rsp, err := c.CreateanewSubscriberRegistration(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewSubscriberRegistrationResponse(rsp)
}

// DeleteaspecificSubscriberRegistrationWithResponse request returning *DeleteaspecificSubscriberRegistrationResponse
func (c *ClientWithResponses) DeleteaspecificSubscriberRegistrationWithResponse(ctx context.Context, id string) (*DeleteaspecificSubscriberRegistrationResponse, error) {
	rsp, err := c.DeleteaspecificSubscriberRegistration(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificSubscriberRegistrationResponse(rsp)
}

// GetaspecificSubscriberRegistrationWithResponse request returning *GetaspecificSubscriberRegistrationResponse
func (c *ClientWithResponses) GetaspecificSubscriberRegistrationWithResponse(ctx context.Context, id string) (*GetaspecificSubscriberRegistrationResponse, error) {
	rsp, err := c.GetaspecificSubscriberRegistration(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificSubscriberRegistrationResponse(rsp)
}

// ChangeaspecificSubscriberRegistrationWithBodyWithResponse request with arbitrary body returning *ChangeaspecificSubscriberRegistrationResponse
func (c *ClientWithResponses) ChangeaspecificSubscriberRegistrationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificSubscriberRegistrationResponse, error) {
	rsp, err := c.ChangeaspecificSubscriberRegistrationWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificSubscriberRegistrationResponse(rsp)
}

// ReplacechangeaspecificSubscriberRegistrationWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificSubscriberRegistrationResponse
func (c *ClientWithResponses) ReplacechangeaspecificSubscriberRegistrationWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificSubscriberRegistrationResponse, error) {
	rsp, err := c.ReplacechangeaspecificSubscriberRegistrationWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificSubscriberRegistrationResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificSubscriberRegistrationWithResponse(ctx context.Context, id string, body ReplacechangeaspecificSubscriberRegistrationJSONRequestBody) (*ReplacechangeaspecificSubscriberRegistrationResponse, error) {
	rsp, err := c.ReplacechangeaspecificSubscriberRegistration(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificSubscriberRegistrationResponse(rsp)
}

// GetSubscriberitemsWithResponse request returning *GetSubscriberitemsResponse
func (c *ClientWithResponses) GetSubscriberitemsWithResponse(ctx context.Context, params *GetSubscriberitemsParams) (*GetSubscriberitemsResponse, error) {
	rsp, err := c.GetSubscriberitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSubscriberitemsResponse(rsp)
}

// CreateanewSubscriberWithBodyWithResponse request with arbitrary body returning *CreateanewSubscriberResponse
func (c *ClientWithResponses) CreateanewSubscriberWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewSubscriberResponse, error) {
	rsp, err := c.CreateanewSubscriberWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewSubscriberResponse(rsp)
}

func (c *ClientWithResponses) CreateanewSubscriberWithResponse(ctx context.Context, body CreateanewSubscriberJSONRequestBody) (*CreateanewSubscriberResponse, error) {
	rsp, err := c.CreateanewSubscriber(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewSubscriberResponse(rsp)
}

// DeleteaspecificSubscriberWithResponse request returning *DeleteaspecificSubscriberResponse
func (c *ClientWithResponses) DeleteaspecificSubscriberWithResponse(ctx context.Context, id string) (*DeleteaspecificSubscriberResponse, error) {
	rsp, err := c.DeleteaspecificSubscriber(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificSubscriberResponse(rsp)
}

// GetaspecificSubscriberWithResponse request returning *GetaspecificSubscriberResponse
func (c *ClientWithResponses) GetaspecificSubscriberWithResponse(ctx context.Context, id string) (*GetaspecificSubscriberResponse, error) {
	rsp, err := c.GetaspecificSubscriber(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificSubscriberResponse(rsp)
}

// ChangeaspecificSubscriberWithBodyWithResponse request with arbitrary body returning *ChangeaspecificSubscriberResponse
func (c *ClientWithResponses) ChangeaspecificSubscriberWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificSubscriberResponse, error) {
	rsp, err := c.ChangeaspecificSubscriberWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificSubscriberResponse(rsp)
}

// ReplacechangeaspecificSubscriberWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificSubscriberResponse
func (c *ClientWithResponses) ReplacechangeaspecificSubscriberWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificSubscriberResponse, error) {
	rsp, err := c.ReplacechangeaspecificSubscriberWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificSubscriberResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificSubscriberWithResponse(ctx context.Context, id string, body ReplacechangeaspecificSubscriberJSONRequestBody) (*ReplacechangeaspecificSubscriberResponse, error) {
	rsp, err := c.ReplacechangeaspecificSubscriber(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificSubscriberResponse(rsp)
}

// GetSystemContactitemsWithResponse request returning *GetSystemContactitemsResponse
func (c *ClientWithResponses) GetSystemContactitemsWithResponse(ctx context.Context, params *GetSystemContactitemsParams) (*GetSystemContactitemsResponse, error) {
	rsp, err := c.GetSystemContactitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemContactitemsResponse(rsp)
}

// CreateanewSystemContactWithBodyWithResponse request with arbitrary body returning *CreateanewSystemContactResponse
func (c *ClientWithResponses) CreateanewSystemContactWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewSystemContactResponse, error) {
	rsp, err := c.CreateanewSystemContactWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewSystemContactResponse(rsp)
}

func (c *ClientWithResponses) CreateanewSystemContactWithResponse(ctx context.Context, body CreateanewSystemContactJSONRequestBody) (*CreateanewSystemContactResponse, error) {
	rsp, err := c.CreateanewSystemContact(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewSystemContactResponse(rsp)
}

// DeleteaspecificSystemContactWithResponse request returning *DeleteaspecificSystemContactResponse
func (c *ClientWithResponses) DeleteaspecificSystemContactWithResponse(ctx context.Context, id string) (*DeleteaspecificSystemContactResponse, error) {
	rsp, err := c.DeleteaspecificSystemContact(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificSystemContactResponse(rsp)
}

// GetaspecificSystemContactWithResponse request returning *GetaspecificSystemContactResponse
func (c *ClientWithResponses) GetaspecificSystemContactWithResponse(ctx context.Context, id string) (*GetaspecificSystemContactResponse, error) {
	rsp, err := c.GetaspecificSystemContact(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificSystemContactResponse(rsp)
}

// ChangeaspecificSystemContactWithBodyWithResponse request with arbitrary body returning *ChangeaspecificSystemContactResponse
func (c *ClientWithResponses) ChangeaspecificSystemContactWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificSystemContactResponse, error) {
	rsp, err := c.ChangeaspecificSystemContactWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificSystemContactResponse(rsp)
}

// ReplacechangeaspecificSystemContactWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificSystemContactResponse
func (c *ClientWithResponses) ReplacechangeaspecificSystemContactWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificSystemContactResponse, error) {
	rsp, err := c.ReplacechangeaspecificSystemContactWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificSystemContactResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificSystemContactWithResponse(ctx context.Context, id string, body ReplacechangeaspecificSystemContactJSONRequestBody) (*ReplacechangeaspecificSystemContactResponse, error) {
	rsp, err := c.ReplacechangeaspecificSystemContact(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificSystemContactResponse(rsp)
}

// CreateanewTopupCashWithBodyWithResponse request with arbitrary body returning *CreateanewTopupCashResponse
func (c *ClientWithResponses) CreateanewTopupCashWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewTopupCashResponse, error) {
	rsp, err := c.CreateanewTopupCashWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewTopupCashResponse(rsp)
}

func (c *ClientWithResponses) CreateanewTopupCashWithResponse(ctx context.Context, body CreateanewTopupCashJSONRequestBody) (*CreateanewTopupCashResponse, error) {
	rsp, err := c.CreateanewTopupCash(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewTopupCashResponse(rsp)
}

// GetTopupLogitemsWithResponse request returning *GetTopupLogitemsResponse
func (c *ClientWithResponses) GetTopupLogitemsWithResponse(ctx context.Context, params *GetTopupLogitemsParams) (*GetTopupLogitemsResponse, error) {
	rsp, err := c.GetTopupLogitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetTopupLogitemsResponse(rsp)
}

// GetaspecificTopupLogWithResponse request returning *GetaspecificTopupLogResponse
func (c *ClientWithResponses) GetaspecificTopupLogWithResponse(ctx context.Context, id string) (*GetaspecificTopupLogResponse, error) {
	rsp, err := c.GetaspecificTopupLog(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificTopupLogResponse(rsp)
}

// CreateanewTopupVoucherWithBodyWithResponse request with arbitrary body returning *CreateanewTopupVoucherResponse
func (c *ClientWithResponses) CreateanewTopupVoucherWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewTopupVoucherResponse, error) {
	rsp, err := c.CreateanewTopupVoucherWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewTopupVoucherResponse(rsp)
}

func (c *ClientWithResponses) CreateanewTopupVoucherWithResponse(ctx context.Context, body CreateanewTopupVoucherJSONRequestBody) (*CreateanewTopupVoucherResponse, error) {
	rsp, err := c.CreateanewTopupVoucher(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewTopupVoucherResponse(rsp)
}

// GetTrustedSourceitemsWithResponse request returning *GetTrustedSourceitemsResponse
func (c *ClientWithResponses) GetTrustedSourceitemsWithResponse(ctx context.Context, params *GetTrustedSourceitemsParams) (*GetTrustedSourceitemsResponse, error) {
	rsp, err := c.GetTrustedSourceitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetTrustedSourceitemsResponse(rsp)
}

// CreateanewTrustedSourceWithBodyWithResponse request with arbitrary body returning *CreateanewTrustedSourceResponse
func (c *ClientWithResponses) CreateanewTrustedSourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewTrustedSourceResponse, error) {
	rsp, err := c.CreateanewTrustedSourceWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewTrustedSourceResponse(rsp)
}

func (c *ClientWithResponses) CreateanewTrustedSourceWithResponse(ctx context.Context, body CreateanewTrustedSourceJSONRequestBody) (*CreateanewTrustedSourceResponse, error) {
	rsp, err := c.CreateanewTrustedSource(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewTrustedSourceResponse(rsp)
}

// DeleteaspecificTrustedSourceWithResponse request returning *DeleteaspecificTrustedSourceResponse
func (c *ClientWithResponses) DeleteaspecificTrustedSourceWithResponse(ctx context.Context, id string) (*DeleteaspecificTrustedSourceResponse, error) {
	rsp, err := c.DeleteaspecificTrustedSource(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificTrustedSourceResponse(rsp)
}

// GetaspecificTrustedSourceWithResponse request returning *GetaspecificTrustedSourceResponse
func (c *ClientWithResponses) GetaspecificTrustedSourceWithResponse(ctx context.Context, id string) (*GetaspecificTrustedSourceResponse, error) {
	rsp, err := c.GetaspecificTrustedSource(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificTrustedSourceResponse(rsp)
}

// ChangeaspecificTrustedSourceWithBodyWithResponse request with arbitrary body returning *ChangeaspecificTrustedSourceResponse
func (c *ClientWithResponses) ChangeaspecificTrustedSourceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificTrustedSourceResponse, error) {
	rsp, err := c.ChangeaspecificTrustedSourceWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificTrustedSourceResponse(rsp)
}

// ReplacechangeaspecificTrustedSourceWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificTrustedSourceResponse
func (c *ClientWithResponses) ReplacechangeaspecificTrustedSourceWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificTrustedSourceResponse, error) {
	rsp, err := c.ReplacechangeaspecificTrustedSourceWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificTrustedSourceResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificTrustedSourceWithResponse(ctx context.Context, id string, body ReplacechangeaspecificTrustedSourceJSONRequestBody) (*ReplacechangeaspecificTrustedSourceResponse, error) {
	rsp, err := c.ReplacechangeaspecificTrustedSource(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificTrustedSourceResponse(rsp)
}

// GetUpnRewriteSetitemsWithResponse request returning *GetUpnRewriteSetitemsResponse
func (c *ClientWithResponses) GetUpnRewriteSetitemsWithResponse(ctx context.Context, params *GetUpnRewriteSetitemsParams) (*GetUpnRewriteSetitemsResponse, error) {
	rsp, err := c.GetUpnRewriteSetitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetUpnRewriteSetitemsResponse(rsp)
}

// CreateanewUpnRewriteSetWithBodyWithResponse request with arbitrary body returning *CreateanewUpnRewriteSetResponse
func (c *ClientWithResponses) CreateanewUpnRewriteSetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewUpnRewriteSetResponse, error) {
	rsp, err := c.CreateanewUpnRewriteSetWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewUpnRewriteSetResponse(rsp)
}

func (c *ClientWithResponses) CreateanewUpnRewriteSetWithResponse(ctx context.Context, body CreateanewUpnRewriteSetJSONRequestBody) (*CreateanewUpnRewriteSetResponse, error) {
	rsp, err := c.CreateanewUpnRewriteSet(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewUpnRewriteSetResponse(rsp)
}

// DeleteaspecificUpnRewriteSetWithResponse request returning *DeleteaspecificUpnRewriteSetResponse
func (c *ClientWithResponses) DeleteaspecificUpnRewriteSetWithResponse(ctx context.Context, id string) (*DeleteaspecificUpnRewriteSetResponse, error) {
	rsp, err := c.DeleteaspecificUpnRewriteSet(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificUpnRewriteSetResponse(rsp)
}

// GetaspecificUpnRewriteSetWithResponse request returning *GetaspecificUpnRewriteSetResponse
func (c *ClientWithResponses) GetaspecificUpnRewriteSetWithResponse(ctx context.Context, id string) (*GetaspecificUpnRewriteSetResponse, error) {
	rsp, err := c.GetaspecificUpnRewriteSet(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificUpnRewriteSetResponse(rsp)
}

// ChangeaspecificUpnRewriteSetWithBodyWithResponse request with arbitrary body returning *ChangeaspecificUpnRewriteSetResponse
func (c *ClientWithResponses) ChangeaspecificUpnRewriteSetWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificUpnRewriteSetResponse, error) {
	rsp, err := c.ChangeaspecificUpnRewriteSetWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificUpnRewriteSetResponse(rsp)
}

// ReplacechangeaspecificUpnRewriteSetWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificUpnRewriteSetResponse
func (c *ClientWithResponses) ReplacechangeaspecificUpnRewriteSetWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificUpnRewriteSetResponse, error) {
	rsp, err := c.ReplacechangeaspecificUpnRewriteSetWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificUpnRewriteSetResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificUpnRewriteSetWithResponse(ctx context.Context, id string, body ReplacechangeaspecificUpnRewriteSetJSONRequestBody) (*ReplacechangeaspecificUpnRewriteSetResponse, error) {
	rsp, err := c.ReplacechangeaspecificUpnRewriteSet(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificUpnRewriteSetResponse(rsp)
}

// GetVoicemailGreetingitemsWithResponse request returning *GetVoicemailGreetingitemsResponse
func (c *ClientWithResponses) GetVoicemailGreetingitemsWithResponse(ctx context.Context, params *GetVoicemailGreetingitemsParams) (*GetVoicemailGreetingitemsResponse, error) {
	rsp, err := c.GetVoicemailGreetingitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetVoicemailGreetingitemsResponse(rsp)
}

// CreateanewVoicemailGreetingWithBodyWithResponse request with arbitrary body returning *CreateanewVoicemailGreetingResponse
func (c *ClientWithResponses) CreateanewVoicemailGreetingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewVoicemailGreetingResponse, error) {
	rsp, err := c.CreateanewVoicemailGreetingWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewVoicemailGreetingResponse(rsp)
}

func (c *ClientWithResponses) CreateanewVoicemailGreetingWithResponse(ctx context.Context, body CreateanewVoicemailGreetingJSONRequestBody) (*CreateanewVoicemailGreetingResponse, error) {
	rsp, err := c.CreateanewVoicemailGreeting(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewVoicemailGreetingResponse(rsp)
}

// DeleteaspecificVoicemailGreetingWithResponse request returning *DeleteaspecificVoicemailGreetingResponse
func (c *ClientWithResponses) DeleteaspecificVoicemailGreetingWithResponse(ctx context.Context, id string) (*DeleteaspecificVoicemailGreetingResponse, error) {
	rsp, err := c.DeleteaspecificVoicemailGreeting(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificVoicemailGreetingResponse(rsp)
}

// GetaspecificVoicemailGreetingWithResponse request returning *GetaspecificVoicemailGreetingResponse
func (c *ClientWithResponses) GetaspecificVoicemailGreetingWithResponse(ctx context.Context, id string) (*GetaspecificVoicemailGreetingResponse, error) {
	rsp, err := c.GetaspecificVoicemailGreeting(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificVoicemailGreetingResponse(rsp)
}

// ReplacechangeaspecificVoicemailGreetingWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificVoicemailGreetingResponse
func (c *ClientWithResponses) ReplacechangeaspecificVoicemailGreetingWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificVoicemailGreetingResponse, error) {
	rsp, err := c.ReplacechangeaspecificVoicemailGreetingWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificVoicemailGreetingResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificVoicemailGreetingWithResponse(ctx context.Context, id string, body ReplacechangeaspecificVoicemailGreetingJSONRequestBody) (*ReplacechangeaspecificVoicemailGreetingResponse, error) {
	rsp, err := c.ReplacechangeaspecificVoicemailGreeting(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificVoicemailGreetingResponse(rsp)
}

// GetaspecificVoicemailRecordingWithResponse request returning *GetaspecificVoicemailRecordingResponse
func (c *ClientWithResponses) GetaspecificVoicemailRecordingWithResponse(ctx context.Context, id string) (*GetaspecificVoicemailRecordingResponse, error) {
	rsp, err := c.GetaspecificVoicemailRecording(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificVoicemailRecordingResponse(rsp)
}

// GetVoicemailitemsWithResponse request returning *GetVoicemailitemsResponse
func (c *ClientWithResponses) GetVoicemailitemsWithResponse(ctx context.Context, params *GetVoicemailitemsParams) (*GetVoicemailitemsResponse, error) {
	rsp, err := c.GetVoicemailitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetVoicemailitemsResponse(rsp)
}

// DeleteaspecificVoicemailWithResponse request returning *DeleteaspecificVoicemailResponse
func (c *ClientWithResponses) DeleteaspecificVoicemailWithResponse(ctx context.Context, id string) (*DeleteaspecificVoicemailResponse, error) {
	rsp, err := c.DeleteaspecificVoicemail(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificVoicemailResponse(rsp)
}

// GetaspecificVoicemailWithResponse request returning *GetaspecificVoicemailResponse
func (c *ClientWithResponses) GetaspecificVoicemailWithResponse(ctx context.Context, id string) (*GetaspecificVoicemailResponse, error) {
	rsp, err := c.GetaspecificVoicemail(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificVoicemailResponse(rsp)
}

// ChangeaspecificVoicemailWithBodyWithResponse request with arbitrary body returning *ChangeaspecificVoicemailResponse
func (c *ClientWithResponses) ChangeaspecificVoicemailWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificVoicemailResponse, error) {
	rsp, err := c.ChangeaspecificVoicemailWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificVoicemailResponse(rsp)
}

// ReplacechangeaspecificVoicemailWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificVoicemailResponse
func (c *ClientWithResponses) ReplacechangeaspecificVoicemailWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificVoicemailResponse, error) {
	rsp, err := c.ReplacechangeaspecificVoicemailWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificVoicemailResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificVoicemailWithResponse(ctx context.Context, id string, body ReplacechangeaspecificVoicemailJSONRequestBody) (*ReplacechangeaspecificVoicemailResponse, error) {
	rsp, err := c.ReplacechangeaspecificVoicemail(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificVoicemailResponse(rsp)
}

// GetVoicemailSettingitemsWithResponse request returning *GetVoicemailSettingitemsResponse
func (c *ClientWithResponses) GetVoicemailSettingitemsWithResponse(ctx context.Context, params *GetVoicemailSettingitemsParams) (*GetVoicemailSettingitemsResponse, error) {
	rsp, err := c.GetVoicemailSettingitems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetVoicemailSettingitemsResponse(rsp)
}

// GetaspecificVoicemailSettingWithResponse request returning *GetaspecificVoicemailSettingResponse
func (c *ClientWithResponses) GetaspecificVoicemailSettingWithResponse(ctx context.Context, id string) (*GetaspecificVoicemailSettingResponse, error) {
	rsp, err := c.GetaspecificVoicemailSetting(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificVoicemailSettingResponse(rsp)
}

// ChangeaspecificVoicemailSettingWithBodyWithResponse request with arbitrary body returning *ChangeaspecificVoicemailSettingResponse
func (c *ClientWithResponses) ChangeaspecificVoicemailSettingWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificVoicemailSettingResponse, error) {
	rsp, err := c.ChangeaspecificVoicemailSettingWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificVoicemailSettingResponse(rsp)
}

// ReplacechangeaspecificVoicemailSettingWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificVoicemailSettingResponse
func (c *ClientWithResponses) ReplacechangeaspecificVoicemailSettingWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificVoicemailSettingResponse, error) {
	rsp, err := c.ReplacechangeaspecificVoicemailSettingWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificVoicemailSettingResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificVoicemailSettingWithResponse(ctx context.Context, id string, body ReplacechangeaspecificVoicemailSettingJSONRequestBody) (*ReplacechangeaspecificVoicemailSettingResponse, error) {
	rsp, err := c.ReplacechangeaspecificVoicemailSetting(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificVoicemailSettingResponse(rsp)
}

// GetVoucheritemsWithResponse request returning *GetVoucheritemsResponse
func (c *ClientWithResponses) GetVoucheritemsWithResponse(ctx context.Context, params *GetVoucheritemsParams) (*GetVoucheritemsResponse, error) {
	rsp, err := c.GetVoucheritems(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetVoucheritemsResponse(rsp)
}

// CreateanewVoucherWithBodyWithResponse request with arbitrary body returning *CreateanewVoucherResponse
func (c *ClientWithResponses) CreateanewVoucherWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateanewVoucherResponse, error) {
	rsp, err := c.CreateanewVoucherWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewVoucherResponse(rsp)
}

func (c *ClientWithResponses) CreateanewVoucherWithResponse(ctx context.Context, body CreateanewVoucherJSONRequestBody) (*CreateanewVoucherResponse, error) {
	rsp, err := c.CreateanewVoucher(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateanewVoucherResponse(rsp)
}

// DeleteaspecificVoucherWithResponse request returning *DeleteaspecificVoucherResponse
func (c *ClientWithResponses) DeleteaspecificVoucherWithResponse(ctx context.Context, id string) (*DeleteaspecificVoucherResponse, error) {
	rsp, err := c.DeleteaspecificVoucher(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseDeleteaspecificVoucherResponse(rsp)
}

// GetaspecificVoucherWithResponse request returning *GetaspecificVoucherResponse
func (c *ClientWithResponses) GetaspecificVoucherWithResponse(ctx context.Context, id string) (*GetaspecificVoucherResponse, error) {
	rsp, err := c.GetaspecificVoucher(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetaspecificVoucherResponse(rsp)
}

// ChangeaspecificVoucherWithBodyWithResponse request with arbitrary body returning *ChangeaspecificVoucherResponse
func (c *ClientWithResponses) ChangeaspecificVoucherWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ChangeaspecificVoucherResponse, error) {
	rsp, err := c.ChangeaspecificVoucherWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeaspecificVoucherResponse(rsp)
}

// ReplacechangeaspecificVoucherWithBodyWithResponse request with arbitrary body returning *ReplacechangeaspecificVoucherResponse
func (c *ClientWithResponses) ReplacechangeaspecificVoucherWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*ReplacechangeaspecificVoucherResponse, error) {
	rsp, err := c.ReplacechangeaspecificVoucherWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificVoucherResponse(rsp)
}

func (c *ClientWithResponses) ReplacechangeaspecificVoucherWithResponse(ctx context.Context, id string, body ReplacechangeaspecificVoucherJSONRequestBody) (*ReplacechangeaspecificVoucherResponse, error) {
	rsp, err := c.ReplacechangeaspecificVoucher(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseReplacechangeaspecificVoucherResponse(rsp)
}

// ParseCreateanewAdminCertResponse parses an HTTP response from a CreateanewAdminCertWithResponse call
func ParseCreateanewAdminCertResponse(rsp *http.Response) (*CreateanewAdminCertResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewAdminCertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty54
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetAdminitemsResponse parses an HTTP response from a GetAdminitemsWithResponse call
func ParseGetAdminitemsResponse(rsp *http.Response) (*GetAdminitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAdminitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Admins
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewAdminResponse parses an HTTP response from a CreateanewAdminWithResponse call
func ParseCreateanewAdminResponse(rsp *http.Response) (*CreateanewAdminResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty9
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificAdminResponse parses an HTTP response from a DeleteaspecificAdminWithResponse call
func ParseDeleteaspecificAdminResponse(rsp *http.Response) (*DeleteaspecificAdminResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificAdminResponse parses an HTTP response from a GetaspecificAdminWithResponse call
func ParseGetaspecificAdminResponse(rsp *http.Response) (*GetaspecificAdminResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Admins
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewApplyRewriteResponse parses an HTTP response from a CreateanewApplyRewriteWithResponse call
func ParseCreateanewApplyRewriteResponse(rsp *http.Response) (*CreateanewApplyRewriteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewApplyRewriteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty52
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetAutoAttendantitemsResponse parses an HTTP response from a GetAutoAttendantitemsWithResponse call
func ParseGetAutoAttendantitemsResponse(rsp *http.Response) (*GetAutoAttendantitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetAutoAttendantitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AutoAttendants
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetaspecificAutoAttendantResponse parses an HTTP response from a GetaspecificAutoAttendantWithResponse call
func ParseGetaspecificAutoAttendantResponse(rsp *http.Response) (*GetaspecificAutoAttendantResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificAutoAttendantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AutoAttendants
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificAutoAttendantResponse parses an HTTP response from a ChangeaspecificAutoAttendantWithResponse call
func ParseChangeaspecificAutoAttendantResponse(rsp *http.Response) (*ChangeaspecificAutoAttendantResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificAutoAttendantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseReplacechangeaspecificAutoAttendantResponse parses an HTTP response from a ReplacechangeaspecificAutoAttendantWithResponse call
func ParseReplacechangeaspecificAutoAttendantResponse(rsp *http.Response) (*ReplacechangeaspecificAutoAttendantResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificAutoAttendantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AutoAttendants
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetBalanceIntervalitemsResponse parses an HTTP response from a GetBalanceIntervalitemsWithResponse call
func ParseGetBalanceIntervalitemsResponse(rsp *http.Response) (*GetBalanceIntervalitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetBalanceIntervalitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BalanceInterval
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetaspecificBalanceIntervalResponse parses an HTTP response from a GetaspecificBalanceIntervalWithResponse call
func ParseGetaspecificBalanceIntervalResponse(rsp *http.Response) (*GetaspecificBalanceIntervalResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificBalanceIntervalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BalanceIntervals
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetBannedIpitemsResponse parses an HTTP response from a GetBannedIpitemsWithResponse call
func ParseGetBannedIpitemsResponse(rsp *http.Response) (*GetBannedIpitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetBannedIpitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificBannedIpResponse parses an HTTP response from a DeleteaspecificBannedIpWithResponse call
func ParseDeleteaspecificBannedIpResponse(rsp *http.Response) (*DeleteaspecificBannedIpResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificBannedIpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificBannedIpResponse parses an HTTP response from a GetaspecificBannedIpWithResponse call
func ParseGetaspecificBannedIpResponse(rsp *http.Response) (*GetaspecificBannedIpResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificBannedIpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetBannedUseritemsResponse parses an HTTP response from a GetBannedUseritemsWithResponse call
func ParseGetBannedUseritemsResponse(rsp *http.Response) (*GetBannedUseritemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetBannedUseritemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificBannedUserResponse parses an HTTP response from a DeleteaspecificBannedUserWithResponse call
func ParseDeleteaspecificBannedUserResponse(rsp *http.Response) (*DeleteaspecificBannedUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificBannedUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificBannedUserResponse parses an HTTP response from a GetaspecificBannedUserWithResponse call
func ParseGetaspecificBannedUserResponse(rsp *http.Response) (*GetaspecificBannedUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificBannedUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetBillingFeeitemsResponse parses an HTTP response from a GetBillingFeeitemsWithResponse call
func ParseGetBillingFeeitemsResponse(rsp *http.Response) (*GetBillingFeeitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetBillingFeeitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BillingFees
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewBillingFeeResponse parses an HTTP response from a CreateanewBillingFeeWithResponse call
func ParseCreateanewBillingFeeResponse(rsp *http.Response) (*CreateanewBillingFeeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewBillingFeeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty43
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificBillingFeeResponse parses an HTTP response from a DeleteaspecificBillingFeeWithResponse call
func ParseDeleteaspecificBillingFeeResponse(rsp *http.Response) (*DeleteaspecificBillingFeeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificBillingFeeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificBillingFeeResponse parses an HTTP response from a GetaspecificBillingFeeWithResponse call
func ParseGetaspecificBillingFeeResponse(rsp *http.Response) (*GetaspecificBillingFeeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificBillingFeeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingFees
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificBillingFeeResponse parses an HTTP response from a ChangeaspecificBillingFeeWithResponse call
func ParseChangeaspecificBillingFeeResponse(rsp *http.Response) (*ChangeaspecificBillingFeeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificBillingFeeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingFees
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacechangeaspecificBillingFeeResponse parses an HTTP response from a ReplacechangeaspecificBillingFeeWithResponse call
func ParseReplacechangeaspecificBillingFeeResponse(rsp *http.Response) (*ReplacechangeaspecificBillingFeeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificBillingFeeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetBillingNetworkitemsResponse parses an HTTP response from a GetBillingNetworkitemsWithResponse call
func ParseGetBillingNetworkitemsResponse(rsp *http.Response) (*GetBillingNetworkitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetBillingNetworkitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BillingNetworks2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewBillingNetworkResponse parses an HTTP response from a CreateanewBillingNetworkWithResponse call
func ParseCreateanewBillingNetworkResponse(rsp *http.Response) (*CreateanewBillingNetworkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewBillingNetworkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty41
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetaspecificBillingNetworkResponse parses an HTTP response from a GetaspecificBillingNetworkWithResponse call
func ParseGetaspecificBillingNetworkResponse(rsp *http.Response) (*GetaspecificBillingNetworkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificBillingNetworkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingNetworks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificBillingNetworkResponse parses an HTTP response from a ChangeaspecificBillingNetworkWithResponse call
func ParseChangeaspecificBillingNetworkResponse(rsp *http.Response) (*ChangeaspecificBillingNetworkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificBillingNetworkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseReplacechangeaspecificBillingNetworkResponse parses an HTTP response from a ReplacechangeaspecificBillingNetworkWithResponse call
func ParseReplacechangeaspecificBillingNetworkResponse(rsp *http.Response) (*ReplacechangeaspecificBillingNetworkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificBillingNetworkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingNetworks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetBillingProfileitemsResponse parses an HTTP response from a GetBillingProfileitemsWithResponse call
func ParseGetBillingProfileitemsResponse(rsp *http.Response) (*GetBillingProfileitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetBillingProfileitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BillingProfiles2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewBillingProfileResponse parses an HTTP response from a CreateanewBillingProfileWithResponse call
func ParseCreateanewBillingProfileResponse(rsp *http.Response) (*CreateanewBillingProfileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewBillingProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetaspecificBillingProfileResponse parses an HTTP response from a GetaspecificBillingProfileWithResponse call
func ParseGetaspecificBillingProfileResponse(rsp *http.Response) (*GetaspecificBillingProfileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificBillingProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingProfiles
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificBillingProfileResponse parses an HTTP response from a ChangeaspecificBillingProfileWithResponse call
func ParseChangeaspecificBillingProfileResponse(rsp *http.Response) (*ChangeaspecificBillingProfileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificBillingProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseReplacechangeaspecificBillingProfileResponse parses an HTTP response from a ReplacechangeaspecificBillingProfileWithResponse call
func ParseReplacechangeaspecificBillingProfileResponse(rsp *http.Response) (*ReplacechangeaspecificBillingProfileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificBillingProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingProfiles
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetBillingZoneitemsResponse parses an HTTP response from a GetBillingZoneitemsWithResponse call
func ParseGetBillingZoneitemsResponse(rsp *http.Response) (*GetBillingZoneitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetBillingZoneitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BillingZones
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewBillingZoneResponse parses an HTTP response from a CreateanewBillingZoneWithResponse call
func ParseCreateanewBillingZoneResponse(rsp *http.Response) (*CreateanewBillingZoneResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewBillingZoneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty33
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificBillingZoneResponse parses an HTTP response from a DeleteaspecificBillingZoneWithResponse call
func ParseDeleteaspecificBillingZoneResponse(rsp *http.Response) (*DeleteaspecificBillingZoneResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificBillingZoneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificBillingZoneResponse parses an HTTP response from a GetaspecificBillingZoneWithResponse call
func ParseGetaspecificBillingZoneResponse(rsp *http.Response) (*GetaspecificBillingZoneResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificBillingZoneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingZones
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificBillingZoneResponse parses an HTTP response from a ChangeaspecificBillingZoneWithResponse call
func ParseChangeaspecificBillingZoneResponse(rsp *http.Response) (*ChangeaspecificBillingZoneResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificBillingZoneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseReplacechangeaspecificBillingZoneResponse parses an HTTP response from a ReplacechangeaspecificBillingZoneWithResponse call
func ParseReplacechangeaspecificBillingZoneResponse(rsp *http.Response) (*ReplacechangeaspecificBillingZoneResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificBillingZoneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateanewCallControlResponse parses an HTTP response from a CreateanewCallControlWithResponse call
func ParseCreateanewCallControlResponse(rsp *http.Response) (*CreateanewCallControlResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewCallControlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty53
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetCallForwarditemsResponse parses an HTTP response from a GetCallForwarditemsWithResponse call
func ParseGetCallForwarditemsResponse(rsp *http.Response) (*GetCallForwarditemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCallForwarditemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CallForwards3
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificCallForwardResponse parses an HTTP response from a DeleteaspecificCallForwardWithResponse call
func ParseDeleteaspecificCallForwardResponse(rsp *http.Response) (*DeleteaspecificCallForwardResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificCallForwardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificCallForwardResponse parses an HTTP response from a GetaspecificCallForwardWithResponse call
func ParseGetaspecificCallForwardResponse(rsp *http.Response) (*GetaspecificCallForwardResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificCallForwardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CallForwards
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificCallForwardResponse parses an HTTP response from a ChangeaspecificCallForwardWithResponse call
func ParseChangeaspecificCallForwardResponse(rsp *http.Response) (*ChangeaspecificCallForwardResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificCallForwardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CallForwards
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacechangeaspecificCallForwardResponse parses an HTTP response from a ReplacechangeaspecificCallForwardWithResponse call
func ParseReplacechangeaspecificCallForwardResponse(rsp *http.Response) (*ReplacechangeaspecificCallForwardResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificCallForwardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CallForwards
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCallListitemsResponse parses an HTTP response from a GetCallListitemsWithResponse call
func ParseGetCallListitemsResponse(rsp *http.Response) (*GetCallListitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCallListitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CallList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetaspecificCallListResponse parses an HTTP response from a GetaspecificCallListWithResponse call
func ParseGetaspecificCallListResponse(rsp *http.Response) (*GetaspecificCallListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificCallListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CallLists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCallQueueitemsResponse parses an HTTP response from a GetCallQueueitemsWithResponse call
func ParseGetCallQueueitemsResponse(rsp *http.Response) (*GetCallQueueitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCallQueueitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CallQueue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetaspecificCallQueueResponse parses an HTTP response from a GetaspecificCallQueueWithResponse call
func ParseGetaspecificCallQueueResponse(rsp *http.Response) (*GetaspecificCallQueueResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificCallQueueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CallQueues
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetaspecificCallRecordingFileResponse parses an HTTP response from a GetaspecificCallRecordingFileWithResponse call
func ParseGetaspecificCallRecordingFileResponse(rsp *http.Response) (*GetaspecificCallRecordingFileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificCallRecordingFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CallRecordingFiles
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCallRecordingitemsResponse parses an HTTP response from a GetCallRecordingitemsWithResponse call
func ParseGetCallRecordingitemsResponse(rsp *http.Response) (*GetCallRecordingitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCallRecordingitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CallRecordings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificCallRecordingResponse parses an HTTP response from a DeleteaspecificCallRecordingWithResponse call
func ParseDeleteaspecificCallRecordingResponse(rsp *http.Response) (*DeleteaspecificCallRecordingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificCallRecordingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificCallRecordingResponse parses an HTTP response from a GetaspecificCallRecordingWithResponse call
func ParseGetaspecificCallRecordingResponse(rsp *http.Response) (*GetaspecificCallRecordingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificCallRecordingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CallRecordings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCallRecordingStreamitemsResponse parses an HTTP response from a GetCallRecordingStreamitemsWithResponse call
func ParseGetCallRecordingStreamitemsResponse(rsp *http.Response) (*GetCallRecordingStreamitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCallRecordingStreamitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CallRecordingStreams
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificCallRecordingStreamResponse parses an HTTP response from a DeleteaspecificCallRecordingStreamWithResponse call
func ParseDeleteaspecificCallRecordingStreamResponse(rsp *http.Response) (*DeleteaspecificCallRecordingStreamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificCallRecordingStreamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificCallRecordingStreamResponse parses an HTTP response from a GetaspecificCallRecordingStreamWithResponse call
func ParseGetaspecificCallRecordingStreamResponse(rsp *http.Response) (*GetaspecificCallRecordingStreamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificCallRecordingStreamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CallRecordingStreams
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCallitemsResponse parses an HTTP response from a GetCallitemsWithResponse call
func ParseGetCallitemsResponse(rsp *http.Response) (*GetCallitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCallitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Call
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetaspecificCallResponse parses an HTTP response from a GetaspecificCallWithResponse call
func ParseGetaspecificCallResponse(rsp *http.Response) (*GetaspecificCallResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificCallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Calls
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCapabilityitemsResponse parses an HTTP response from a GetCapabilityitemsWithResponse call
func ParseGetCapabilityitemsResponse(rsp *http.Response) (*GetCapabilityitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCapabilityitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Capability
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetaspecificCapabilityResponse parses an HTTP response from a GetaspecificCapabilityWithResponse call
func ParseGetaspecificCapabilityResponse(rsp *http.Response) (*GetaspecificCapabilityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificCapabilityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Capabilities
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCCMapEntryitemsResponse parses an HTTP response from a GetCCMapEntryitemsWithResponse call
func ParseGetCCMapEntryitemsResponse(rsp *http.Response) (*GetCCMapEntryitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCCMapEntryitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CCMapEntries
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificCCMapEntryResponse parses an HTTP response from a DeleteaspecificCCMapEntryWithResponse call
func ParseDeleteaspecificCCMapEntryResponse(rsp *http.Response) (*DeleteaspecificCCMapEntryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificCCMapEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificCCMapEntryResponse parses an HTTP response from a GetaspecificCCMapEntryWithResponse call
func ParseGetaspecificCCMapEntryResponse(rsp *http.Response) (*GetaspecificCCMapEntryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificCCMapEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CCMapEntries
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificCCMapEntryResponse parses an HTTP response from a ChangeaspecificCCMapEntryWithResponse call
func ParseChangeaspecificCCMapEntryResponse(rsp *http.Response) (*ChangeaspecificCCMapEntryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificCCMapEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CCMapEntries
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacechangeaspecificCCMapEntryResponse parses an HTTP response from a ReplacechangeaspecificCCMapEntryWithResponse call
func ParseReplacechangeaspecificCCMapEntryResponse(rsp *http.Response) (*ReplacechangeaspecificCCMapEntryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificCCMapEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCFBNumberSetitemsResponse parses an HTTP response from a GetCFBNumberSetitemsWithResponse call
func ParseGetCFBNumberSetitemsResponse(rsp *http.Response) (*GetCFBNumberSetitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCFBNumberSetitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CFBNumberSets1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewCFBNumberSetResponse parses an HTTP response from a CreateanewCFBNumberSetWithResponse call
func ParseCreateanewCFBNumberSetResponse(rsp *http.Response) (*CreateanewCFBNumberSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewCFBNumberSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty34
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificCFBNumberSetResponse parses an HTTP response from a DeleteaspecificCFBNumberSetWithResponse call
func ParseDeleteaspecificCFBNumberSetResponse(rsp *http.Response) (*DeleteaspecificCFBNumberSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificCFBNumberSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificCFBNumberSetResponse parses an HTTP response from a GetaspecificCFBNumberSetWithResponse call
func ParseGetaspecificCFBNumberSetResponse(rsp *http.Response) (*GetaspecificCFBNumberSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificCFBNumberSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CFBNumberSets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificCFBNumberSetResponse parses an HTTP response from a ChangeaspecificCFBNumberSetWithResponse call
func ParseChangeaspecificCFBNumberSetResponse(rsp *http.Response) (*ChangeaspecificCFBNumberSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificCFBNumberSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseReplacechangeaspecificCFBNumberSetResponse parses an HTTP response from a ReplacechangeaspecificCFBNumberSetWithResponse call
func ParseReplacechangeaspecificCFBNumberSetResponse(rsp *http.Response) (*ReplacechangeaspecificCFBNumberSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificCFBNumberSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCFDestinationSetitemsResponse parses an HTTP response from a GetCFDestinationSetitemsWithResponse call
func ParseGetCFDestinationSetitemsResponse(rsp *http.Response) (*GetCFDestinationSetitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCFDestinationSetitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CFDestinationSets2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewCFDestinationSetResponse parses an HTTP response from a CreateanewCFDestinationSetWithResponse call
func ParseCreateanewCFDestinationSetResponse(rsp *http.Response) (*CreateanewCFDestinationSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewCFDestinationSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty28
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificCFDestinationSetResponse parses an HTTP response from a DeleteaspecificCFDestinationSetWithResponse call
func ParseDeleteaspecificCFDestinationSetResponse(rsp *http.Response) (*DeleteaspecificCFDestinationSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificCFDestinationSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificCFDestinationSetResponse parses an HTTP response from a GetaspecificCFDestinationSetWithResponse call
func ParseGetaspecificCFDestinationSetResponse(rsp *http.Response) (*GetaspecificCFDestinationSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificCFDestinationSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CFDestinationSets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificCFDestinationSetResponse parses an HTTP response from a ChangeaspecificCFDestinationSetWithResponse call
func ParseChangeaspecificCFDestinationSetResponse(rsp *http.Response) (*ChangeaspecificCFDestinationSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificCFDestinationSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CFDestinationSets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacechangeaspecificCFDestinationSetResponse parses an HTTP response from a ReplacechangeaspecificCFDestinationSetWithResponse call
func ParseReplacechangeaspecificCFDestinationSetResponse(rsp *http.Response) (*ReplacechangeaspecificCFDestinationSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificCFDestinationSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCFMappingitemsResponse parses an HTTP response from a GetCFMappingitemsWithResponse call
func ParseGetCFMappingitemsResponse(rsp *http.Response) (*GetCFMappingitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCFMappingitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CFMappings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetaspecificCFMappingResponse parses an HTTP response from a GetaspecificCFMappingWithResponse call
func ParseGetaspecificCFMappingResponse(rsp *http.Response) (*GetaspecificCFMappingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificCFMappingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CFMappings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificCFMappingResponse parses an HTTP response from a ChangeaspecificCFMappingWithResponse call
func ParseChangeaspecificCFMappingResponse(rsp *http.Response) (*ChangeaspecificCFMappingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificCFMappingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseReplacechangeaspecificCFMappingResponse parses an HTTP response from a ReplacechangeaspecificCFMappingWithResponse call
func ParseReplacechangeaspecificCFMappingResponse(rsp *http.Response) (*ReplacechangeaspecificCFMappingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificCFMappingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCFSourceSetitemsResponse parses an HTTP response from a GetCFSourceSetitemsWithResponse call
func ParseGetCFSourceSetitemsResponse(rsp *http.Response) (*GetCFSourceSetitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCFSourceSetitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CFSourceSets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewCFSourceSetResponse parses an HTTP response from a CreateanewCFSourceSetWithResponse call
func ParseCreateanewCFSourceSetResponse(rsp *http.Response) (*CreateanewCFSourceSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewCFSourceSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty13
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificCFSourceSetResponse parses an HTTP response from a DeleteaspecificCFSourceSetWithResponse call
func ParseDeleteaspecificCFSourceSetResponse(rsp *http.Response) (*DeleteaspecificCFSourceSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificCFSourceSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificCFSourceSetResponse parses an HTTP response from a GetaspecificCFSourceSetWithResponse call
func ParseGetaspecificCFSourceSetResponse(rsp *http.Response) (*GetaspecificCFSourceSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificCFSourceSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CFSourceSets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificCFSourceSetResponse parses an HTTP response from a ChangeaspecificCFSourceSetWithResponse call
func ParseChangeaspecificCFSourceSetResponse(rsp *http.Response) (*ChangeaspecificCFSourceSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificCFSourceSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CFSourceSets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacechangeaspecificCFSourceSetResponse parses an HTTP response from a ReplacechangeaspecificCFSourceSetWithResponse call
func ParseReplacechangeaspecificCFSourceSetResponse(rsp *http.Response) (*ReplacechangeaspecificCFSourceSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificCFSourceSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCFTimeSetitemsResponse parses an HTTP response from a GetCFTimeSetitemsWithResponse call
func ParseGetCFTimeSetitemsResponse(rsp *http.Response) (*GetCFTimeSetitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCFTimeSetitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CFTimeSets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewCFTimeSetResponse parses an HTTP response from a CreateanewCFTimeSetWithResponse call
func ParseCreateanewCFTimeSetResponse(rsp *http.Response) (*CreateanewCFTimeSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewCFTimeSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty39
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificCFTimeSetResponse parses an HTTP response from a DeleteaspecificCFTimeSetWithResponse call
func ParseDeleteaspecificCFTimeSetResponse(rsp *http.Response) (*DeleteaspecificCFTimeSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificCFTimeSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificCFTimeSetResponse parses an HTTP response from a GetaspecificCFTimeSetWithResponse call
func ParseGetaspecificCFTimeSetResponse(rsp *http.Response) (*GetaspecificCFTimeSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificCFTimeSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CFTimeSets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificCFTimeSetResponse parses an HTTP response from a ChangeaspecificCFTimeSetWithResponse call
func ParseChangeaspecificCFTimeSetResponse(rsp *http.Response) (*ChangeaspecificCFTimeSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificCFTimeSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CFTimeSets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacechangeaspecificCFTimeSetResponse parses an HTTP response from a ReplacechangeaspecificCFTimeSetWithResponse call
func ParseReplacechangeaspecificCFTimeSetResponse(rsp *http.Response) (*ReplacechangeaspecificCFTimeSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificCFTimeSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CFTimeSets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetContractitemsResponse parses an HTTP response from a GetContractitemsWithResponse call
func ParseGetContractitemsResponse(rsp *http.Response) (*GetContractitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetContractitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Contracts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewContractResponse parses an HTTP response from a CreateanewContractWithResponse call
func ParseCreateanewContractResponse(rsp *http.Response) (*CreateanewContractResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewContractResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty12
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetaspecificContractResponse parses an HTTP response from a GetaspecificContractWithResponse call
func ParseGetaspecificContractResponse(rsp *http.Response) (*GetaspecificContractResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificContractResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Contracts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificContractResponse parses an HTTP response from a ChangeaspecificContractWithResponse call
func ParseChangeaspecificContractResponse(rsp *http.Response) (*ChangeaspecificContractResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificContractResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseReplacechangeaspecificContractResponse parses an HTTP response from a ReplacechangeaspecificContractWithResponse call
func ParseReplacechangeaspecificContractResponse(rsp *http.Response) (*ReplacechangeaspecificContractResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificContractResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetConversationitemsResponse parses an HTTP response from a GetConversationitemsWithResponse call
func ParseGetConversationitemsResponse(rsp *http.Response) (*GetConversationitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetConversationitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Conversation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetaspecificConversationResponse parses an HTTP response from a GetaspecificConversationWithResponse call
func ParseGetaspecificConversationResponse(rsp *http.Response) (*GetaspecificConversationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificConversationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Conversations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCustomerBalanceitemsResponse parses an HTTP response from a GetCustomerBalanceitemsWithResponse call
func ParseGetCustomerBalanceitemsResponse(rsp *http.Response) (*GetCustomerBalanceitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCustomerBalanceitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CustomerBalances
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetaspecificCustomerBalanceResponse parses an HTTP response from a GetaspecificCustomerBalanceWithResponse call
func ParseGetaspecificCustomerBalanceResponse(rsp *http.Response) (*GetaspecificCustomerBalanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificCustomerBalanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomerBalances
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificCustomerBalanceResponse parses an HTTP response from a ChangeaspecificCustomerBalanceWithResponse call
func ParseChangeaspecificCustomerBalanceResponse(rsp *http.Response) (*ChangeaspecificCustomerBalanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificCustomerBalanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomerBalances
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacechangeaspecificCustomerBalanceResponse parses an HTTP response from a ReplacechangeaspecificCustomerBalanceWithResponse call
func ParseReplacechangeaspecificCustomerBalanceResponse(rsp *http.Response) (*ReplacechangeaspecificCustomerBalanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificCustomerBalanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCustomerContactitemsResponse parses an HTTP response from a GetCustomerContactitemsWithResponse call
func ParseGetCustomerContactitemsResponse(rsp *http.Response) (*GetCustomerContactitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCustomerContactitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CustomerContacts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewCustomerContactResponse parses an HTTP response from a CreateanewCustomerContactWithResponse call
func ParseCreateanewCustomerContactResponse(rsp *http.Response) (*CreateanewCustomerContactResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewCustomerContactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty4
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificCustomerContactResponse parses an HTTP response from a DeleteaspecificCustomerContactWithResponse call
func ParseDeleteaspecificCustomerContactResponse(rsp *http.Response) (*DeleteaspecificCustomerContactResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificCustomerContactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificCustomerContactResponse parses an HTTP response from a GetaspecificCustomerContactWithResponse call
func ParseGetaspecificCustomerContactResponse(rsp *http.Response) (*GetaspecificCustomerContactResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificCustomerContactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomerContacts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificCustomerContactResponse parses an HTTP response from a ChangeaspecificCustomerContactWithResponse call
func ParseChangeaspecificCustomerContactResponse(rsp *http.Response) (*ChangeaspecificCustomerContactResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificCustomerContactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomerContacts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacechangeaspecificCustomerContactResponse parses an HTTP response from a ReplacechangeaspecificCustomerContactWithResponse call
func ParseReplacechangeaspecificCustomerContactResponse(rsp *http.Response) (*ReplacechangeaspecificCustomerContactResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificCustomerContactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCustomerFraudEventitemsResponse parses an HTTP response from a GetCustomerFraudEventitemsWithResponse call
func ParseGetCustomerFraudEventitemsResponse(rsp *http.Response) (*GetCustomerFraudEventitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCustomerFraudEventitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CustomerFraudEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetaspecificCustomerFraudEventResponse parses an HTTP response from a GetaspecificCustomerFraudEventWithResponse call
func ParseGetaspecificCustomerFraudEventResponse(rsp *http.Response) (*GetaspecificCustomerFraudEventResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificCustomerFraudEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomerFraudEvents
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCustomerFraudPreferenceitemsResponse parses an HTTP response from a GetCustomerFraudPreferenceitemsWithResponse call
func ParseGetCustomerFraudPreferenceitemsResponse(rsp *http.Response) (*GetCustomerFraudPreferenceitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCustomerFraudPreferenceitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CustomerFraudPreferences
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetaspecificCustomerFraudPreferenceResponse parses an HTTP response from a GetaspecificCustomerFraudPreferenceWithResponse call
func ParseGetaspecificCustomerFraudPreferenceResponse(rsp *http.Response) (*GetaspecificCustomerFraudPreferenceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificCustomerFraudPreferenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomerFraudPreferences
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificCustomerFraudPreferenceResponse parses an HTTP response from a ChangeaspecificCustomerFraudPreferenceWithResponse call
func ParseChangeaspecificCustomerFraudPreferenceResponse(rsp *http.Response) (*ChangeaspecificCustomerFraudPreferenceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificCustomerFraudPreferenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseReplacechangeaspecificCustomerFraudPreferenceResponse parses an HTTP response from a ReplacechangeaspecificCustomerFraudPreferenceWithResponse call
func ParseReplacechangeaspecificCustomerFraudPreferenceResponse(rsp *http.Response) (*ReplacechangeaspecificCustomerFraudPreferenceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificCustomerFraudPreferenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomerFraudPreferences1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCustomerLocationitemsResponse parses an HTTP response from a GetCustomerLocationitemsWithResponse call
func ParseGetCustomerLocationitemsResponse(rsp *http.Response) (*GetCustomerLocationitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCustomerLocationitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CustomerLocations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewCustomerLocationResponse parses an HTTP response from a CreateanewCustomerLocationWithResponse call
func ParseCreateanewCustomerLocationResponse(rsp *http.Response) (*CreateanewCustomerLocationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewCustomerLocationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty27
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificCustomerLocationResponse parses an HTTP response from a DeleteaspecificCustomerLocationWithResponse call
func ParseDeleteaspecificCustomerLocationResponse(rsp *http.Response) (*DeleteaspecificCustomerLocationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificCustomerLocationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificCustomerLocationResponse parses an HTTP response from a GetaspecificCustomerLocationWithResponse call
func ParseGetaspecificCustomerLocationResponse(rsp *http.Response) (*GetaspecificCustomerLocationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificCustomerLocationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomerLocations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificCustomerLocationResponse parses an HTTP response from a ChangeaspecificCustomerLocationWithResponse call
func ParseChangeaspecificCustomerLocationResponse(rsp *http.Response) (*ChangeaspecificCustomerLocationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificCustomerLocationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseReplacechangeaspecificCustomerLocationResponse parses an HTTP response from a ReplacechangeaspecificCustomerLocationWithResponse call
func ParseReplacechangeaspecificCustomerLocationResponse(rsp *http.Response) (*ReplacechangeaspecificCustomerLocationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificCustomerLocationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetCustomerPreferenceitemsResponse parses an HTTP response from a GetCustomerPreferenceitemsWithResponse call
func ParseGetCustomerPreferenceitemsResponse(rsp *http.Response) (*GetCustomerPreferenceitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCustomerPreferenceitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetaspecificCustomerPreferenceResponse parses an HTTP response from a GetaspecificCustomerPreferenceWithResponse call
func ParseGetaspecificCustomerPreferenceResponse(rsp *http.Response) (*GetaspecificCustomerPreferenceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificCustomerPreferenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificCustomerPreferenceResponse parses an HTTP response from a ChangeaspecificCustomerPreferenceWithResponse call
func ParseChangeaspecificCustomerPreferenceResponse(rsp *http.Response) (*ChangeaspecificCustomerPreferenceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificCustomerPreferenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacechangeaspecificCustomerPreferenceResponse parses an HTTP response from a ReplacechangeaspecificCustomerPreferenceWithResponse call
func ParseReplacechangeaspecificCustomerPreferenceResponse(rsp *http.Response) (*ReplacechangeaspecificCustomerPreferenceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificCustomerPreferenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCustomeritemsResponse parses an HTTP response from a GetCustomeritemsWithResponse call
func ParseGetCustomeritemsResponse(rsp *http.Response) (*GetCustomeritemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCustomeritemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Customers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewCustomerResponse parses an HTTP response from a CreateanewCustomerWithResponse call
func ParseCreateanewCustomerResponse(rsp *http.Response) (*CreateanewCustomerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewCustomerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty30
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetaspecificCustomerResponse parses an HTTP response from a GetaspecificCustomerWithResponse call
func ParseGetaspecificCustomerResponse(rsp *http.Response) (*GetaspecificCustomerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificCustomerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Customers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificCustomerResponse parses an HTTP response from a ChangeaspecificCustomerWithResponse call
func ParseChangeaspecificCustomerResponse(rsp *http.Response) (*ChangeaspecificCustomerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificCustomerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseReplacechangeaspecificCustomerResponse parses an HTTP response from a ReplacechangeaspecificCustomerWithResponse call
func ParseReplacechangeaspecificCustomerResponse(rsp *http.Response) (*ReplacechangeaspecificCustomerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificCustomerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Customers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCustomerZoneCostitemsResponse parses an HTTP response from a GetCustomerZoneCostitemsWithResponse call
func ParseGetCustomerZoneCostitemsResponse(rsp *http.Response) (*GetCustomerZoneCostitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetCustomerZoneCostitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetaspecificCustomerZoneCostResponse parses an HTTP response from a GetaspecificCustomerZoneCostWithResponse call
func ParseGetaspecificCustomerZoneCostResponse(rsp *http.Response) (*GetaspecificCustomerZoneCostResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificCustomerZoneCostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDomainPreferenceitemsResponse parses an HTTP response from a GetDomainPreferenceitemsWithResponse call
func ParseGetDomainPreferenceitemsResponse(rsp *http.Response) (*GetDomainPreferenceitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDomainPreferenceitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetaspecificDomainPreferenceResponse parses an HTTP response from a GetaspecificDomainPreferenceWithResponse call
func ParseGetaspecificDomainPreferenceResponse(rsp *http.Response) (*GetaspecificDomainPreferenceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificDomainPreferenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificDomainPreferenceResponse parses an HTTP response from a ChangeaspecificDomainPreferenceWithResponse call
func ParseChangeaspecificDomainPreferenceResponse(rsp *http.Response) (*ChangeaspecificDomainPreferenceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificDomainPreferenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseReplacechangeaspecificDomainPreferenceResponse parses an HTTP response from a ReplacechangeaspecificDomainPreferenceWithResponse call
func ParseReplacechangeaspecificDomainPreferenceResponse(rsp *http.Response) (*ReplacechangeaspecificDomainPreferenceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificDomainPreferenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDomainitemsResponse parses an HTTP response from a GetDomainitemsWithResponse call
func ParseGetDomainitemsResponse(rsp *http.Response) (*GetDomainitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDomainitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Domains
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewDomainResponse parses an HTTP response from a CreateanewDomainWithResponse call
func ParseCreateanewDomainResponse(rsp *http.Response) (*CreateanewDomainResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty36
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificDomainResponse parses an HTTP response from a DeleteaspecificDomainWithResponse call
func ParseDeleteaspecificDomainResponse(rsp *http.Response) (*DeleteaspecificDomainResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificDomainResponse parses an HTTP response from a GetaspecificDomainWithResponse call
func ParseGetaspecificDomainResponse(rsp *http.Response) (*GetaspecificDomainResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Domains
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEmailTemplateitemsResponse parses an HTTP response from a GetEmailTemplateitemsWithResponse call
func ParseGetEmailTemplateitemsResponse(rsp *http.Response) (*GetEmailTemplateitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetEmailTemplateitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EmailTemplates
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewEmailTemplateResponse parses an HTTP response from a CreateanewEmailTemplateWithResponse call
func ParseCreateanewEmailTemplateResponse(rsp *http.Response) (*CreateanewEmailTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewEmailTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty21
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificEmailTemplateResponse parses an HTTP response from a DeleteaspecificEmailTemplateWithResponse call
func ParseDeleteaspecificEmailTemplateResponse(rsp *http.Response) (*DeleteaspecificEmailTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificEmailTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificEmailTemplateResponse parses an HTTP response from a GetaspecificEmailTemplateWithResponse call
func ParseGetaspecificEmailTemplateResponse(rsp *http.Response) (*GetaspecificEmailTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificEmailTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmailTemplates
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificEmailTemplateResponse parses an HTTP response from a ChangeaspecificEmailTemplateWithResponse call
func ParseChangeaspecificEmailTemplateResponse(rsp *http.Response) (*ChangeaspecificEmailTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificEmailTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmailTemplates
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacechangeaspecificEmailTemplateResponse parses an HTTP response from a ReplacechangeaspecificEmailTemplateWithResponse call
func ParseReplacechangeaspecificEmailTemplateResponse(rsp *http.Response) (*ReplacechangeaspecificEmailTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificEmailTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetEmergencyMappingContaineritemsResponse parses an HTTP response from a GetEmergencyMappingContaineritemsWithResponse call
func ParseGetEmergencyMappingContaineritemsResponse(rsp *http.Response) (*GetEmergencyMappingContaineritemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetEmergencyMappingContaineritemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EmergencyMappingContainers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewEmergencyMappingContainerResponse parses an HTTP response from a CreateanewEmergencyMappingContainerWithResponse call
func ParseCreateanewEmergencyMappingContainerResponse(rsp *http.Response) (*CreateanewEmergencyMappingContainerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewEmergencyMappingContainerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty29
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificEmergencyMappingContainerResponse parses an HTTP response from a DeleteaspecificEmergencyMappingContainerWithResponse call
func ParseDeleteaspecificEmergencyMappingContainerResponse(rsp *http.Response) (*DeleteaspecificEmergencyMappingContainerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificEmergencyMappingContainerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificEmergencyMappingContainerResponse parses an HTTP response from a GetaspecificEmergencyMappingContainerWithResponse call
func ParseGetaspecificEmergencyMappingContainerResponse(rsp *http.Response) (*GetaspecificEmergencyMappingContainerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificEmergencyMappingContainerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmergencyMappingContainers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificEmergencyMappingContainerResponse parses an HTTP response from a ChangeaspecificEmergencyMappingContainerWithResponse call
func ParseChangeaspecificEmergencyMappingContainerResponse(rsp *http.Response) (*ChangeaspecificEmergencyMappingContainerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificEmergencyMappingContainerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseReplacechangeaspecificEmergencyMappingContainerResponse parses an HTTP response from a ReplacechangeaspecificEmergencyMappingContainerWithResponse call
func ParseReplacechangeaspecificEmergencyMappingContainerResponse(rsp *http.Response) (*ReplacechangeaspecificEmergencyMappingContainerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificEmergencyMappingContainerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetEmergencyMappingitemsResponse parses an HTTP response from a GetEmergencyMappingitemsWithResponse call
func ParseGetEmergencyMappingitemsResponse(rsp *http.Response) (*GetEmergencyMappingitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetEmergencyMappingitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EmergencyMappings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewEmergencyMappingResponse parses an HTTP response from a CreateanewEmergencyMappingWithResponse call
func ParseCreateanewEmergencyMappingResponse(rsp *http.Response) (*CreateanewEmergencyMappingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewEmergencyMappingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty31
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificEmergencyMappingResponse parses an HTTP response from a DeleteaspecificEmergencyMappingWithResponse call
func ParseDeleteaspecificEmergencyMappingResponse(rsp *http.Response) (*DeleteaspecificEmergencyMappingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificEmergencyMappingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificEmergencyMappingResponse parses an HTTP response from a GetaspecificEmergencyMappingWithResponse call
func ParseGetaspecificEmergencyMappingResponse(rsp *http.Response) (*GetaspecificEmergencyMappingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificEmergencyMappingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmergencyMappings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificEmergencyMappingResponse parses an HTTP response from a ChangeaspecificEmergencyMappingWithResponse call
func ParseChangeaspecificEmergencyMappingResponse(rsp *http.Response) (*ChangeaspecificEmergencyMappingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificEmergencyMappingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseReplacechangeaspecificEmergencyMappingResponse parses an HTTP response from a ReplacechangeaspecificEmergencyMappingWithResponse call
func ParseReplacechangeaspecificEmergencyMappingResponse(rsp *http.Response) (*ReplacechangeaspecificEmergencyMappingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificEmergencyMappingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmergencyMappings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEventitemsResponse parses an HTTP response from a GetEventitemsWithResponse call
func ParseGetEventitemsResponse(rsp *http.Response) (*GetEventitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetEventitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Event
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetaspecificEventResponse parses an HTTP response from a GetaspecificEventWithResponse call
func ParseGetaspecificEventResponse(rsp *http.Response) (*GetaspecificEventResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Events
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFaxitemsResponse parses an HTTP response from a GetFaxitemsWithResponse call
func ParseGetFaxitemsResponse(rsp *http.Response) (*GetFaxitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetFaxitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Faxis
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewFaxResponse parses an HTTP response from a CreateanewFaxWithResponse call
func ParseCreateanewFaxResponse(rsp *http.Response) (*CreateanewFaxResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewFaxResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty6
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetaspecificFaxResponse parses an HTTP response from a GetaspecificFaxWithResponse call
func ParseGetaspecificFaxResponse(rsp *http.Response) (*GetaspecificFaxResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificFaxResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Faxes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetaspecificFaxRecordingResponse parses an HTTP response from a GetaspecificFaxRecordingWithResponse call
func ParseGetaspecificFaxRecordingResponse(rsp *http.Response) (*GetaspecificFaxRecordingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificFaxRecordingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFaxserverSettingitemsResponse parses an HTTP response from a GetFaxserverSettingitemsWithResponse call
func ParseGetFaxserverSettingitemsResponse(rsp *http.Response) (*GetFaxserverSettingitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetFaxserverSettingitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FaxserverSettings1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetaspecificFaxserverSettingResponse parses an HTTP response from a GetaspecificFaxserverSettingWithResponse call
func ParseGetaspecificFaxserverSettingResponse(rsp *http.Response) (*GetaspecificFaxserverSettingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificFaxserverSettingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FaxserverSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificFaxserverSettingResponse parses an HTTP response from a ChangeaspecificFaxserverSettingWithResponse call
func ParseChangeaspecificFaxserverSettingResponse(rsp *http.Response) (*ChangeaspecificFaxserverSettingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificFaxserverSettingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseReplacechangeaspecificFaxserverSettingResponse parses an HTTP response from a ReplacechangeaspecificFaxserverSettingWithResponse call
func ParseReplacechangeaspecificFaxserverSettingResponse(rsp *http.Response) (*ReplacechangeaspecificFaxserverSettingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificFaxserverSettingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetInterceptionitemsResponse parses an HTTP response from a GetInterceptionitemsWithResponse call
func ParseGetInterceptionitemsResponse(rsp *http.Response) (*GetInterceptionitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetInterceptionitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Interceptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewInterceptionResponse parses an HTTP response from a CreateanewInterceptionWithResponse call
func ParseCreateanewInterceptionResponse(rsp *http.Response) (*CreateanewInterceptionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewInterceptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty48
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificInterceptionResponse parses an HTTP response from a DeleteaspecificInterceptionWithResponse call
func ParseDeleteaspecificInterceptionResponse(rsp *http.Response) (*DeleteaspecificInterceptionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificInterceptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificInterceptionResponse parses an HTTP response from a GetaspecificInterceptionWithResponse call
func ParseGetaspecificInterceptionResponse(rsp *http.Response) (*GetaspecificInterceptionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificInterceptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Interceptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificInterceptionResponse parses an HTTP response from a ChangeaspecificInterceptionWithResponse call
func ParseChangeaspecificInterceptionResponse(rsp *http.Response) (*ChangeaspecificInterceptionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificInterceptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseReplacechangeaspecificInterceptionResponse parses an HTTP response from a ReplacechangeaspecificInterceptionWithResponse call
func ParseReplacechangeaspecificInterceptionResponse(rsp *http.Response) (*ReplacechangeaspecificInterceptionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificInterceptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Interceptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetInvoiceitemsResponse parses an HTTP response from a GetInvoiceitemsWithResponse call
func ParseGetInvoiceitemsResponse(rsp *http.Response) (*GetInvoiceitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetInvoiceitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Invoices
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewInvoiceResponse parses an HTTP response from a CreateanewInvoiceWithResponse call
func ParseCreateanewInvoiceResponse(rsp *http.Response) (*CreateanewInvoiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewInvoiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty45
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificInvoiceResponse parses an HTTP response from a DeleteaspecificInvoiceWithResponse call
func ParseDeleteaspecificInvoiceResponse(rsp *http.Response) (*DeleteaspecificInvoiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificInvoiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificInvoiceResponse parses an HTTP response from a GetaspecificInvoiceWithResponse call
func ParseGetaspecificInvoiceResponse(rsp *http.Response) (*GetaspecificInvoiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificInvoiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Invoices
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetInvoiceTemplateitemsResponse parses an HTTP response from a GetInvoiceTemplateitemsWithResponse call
func ParseGetInvoiceTemplateitemsResponse(rsp *http.Response) (*GetInvoiceTemplateitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetInvoiceTemplateitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []InvoiceTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetaspecificInvoiceTemplateResponse parses an HTTP response from a GetaspecificInvoiceTemplateWithResponse call
func ParseGetaspecificInvoiceTemplateResponse(rsp *http.Response) (*GetaspecificInvoiceTemplateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificInvoiceTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InvoiceTemplates
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetLnpCarrieritemsResponse parses an HTTP response from a GetLnpCarrieritemsWithResponse call
func ParseGetLnpCarrieritemsResponse(rsp *http.Response) (*GetLnpCarrieritemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetLnpCarrieritemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []LnpCarriers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewLnpCarrierResponse parses an HTTP response from a CreateanewLnpCarrierWithResponse call
func ParseCreateanewLnpCarrierResponse(rsp *http.Response) (*CreateanewLnpCarrierResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewLnpCarrierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty3
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificLnpCarrierResponse parses an HTTP response from a DeleteaspecificLnpCarrierWithResponse call
func ParseDeleteaspecificLnpCarrierResponse(rsp *http.Response) (*DeleteaspecificLnpCarrierResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificLnpCarrierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificLnpCarrierResponse parses an HTTP response from a GetaspecificLnpCarrierWithResponse call
func ParseGetaspecificLnpCarrierResponse(rsp *http.Response) (*GetaspecificLnpCarrierResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificLnpCarrierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LnpCarriers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificLnpCarrierResponse parses an HTTP response from a ChangeaspecificLnpCarrierWithResponse call
func ParseChangeaspecificLnpCarrierResponse(rsp *http.Response) (*ChangeaspecificLnpCarrierResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificLnpCarrierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LnpCarriers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacechangeaspecificLnpCarrierResponse parses an HTTP response from a ReplacechangeaspecificLnpCarrierWithResponse call
func ParseReplacechangeaspecificLnpCarrierResponse(rsp *http.Response) (*ReplacechangeaspecificLnpCarrierResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificLnpCarrierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LnpCarriers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetLnpNumberitemsResponse parses an HTTP response from a GetLnpNumberitemsWithResponse call
func ParseGetLnpNumberitemsResponse(rsp *http.Response) (*GetLnpNumberitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetLnpNumberitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []LnpNumbers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewLnpNumberResponse parses an HTTP response from a CreateanewLnpNumberWithResponse call
func ParseCreateanewLnpNumberResponse(rsp *http.Response) (*CreateanewLnpNumberResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewLnpNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty8
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificLnpNumberResponse parses an HTTP response from a DeleteaspecificLnpNumberWithResponse call
func ParseDeleteaspecificLnpNumberResponse(rsp *http.Response) (*DeleteaspecificLnpNumberResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificLnpNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificLnpNumberResponse parses an HTTP response from a GetaspecificLnpNumberWithResponse call
func ParseGetaspecificLnpNumberResponse(rsp *http.Response) (*GetaspecificLnpNumberResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificLnpNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LnpNumbers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificLnpNumberResponse parses an HTTP response from a ChangeaspecificLnpNumberWithResponse call
func ParseChangeaspecificLnpNumberResponse(rsp *http.Response) (*ChangeaspecificLnpNumberResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificLnpNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LnpNumbers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacechangeaspecificLnpNumberResponse parses an HTTP response from a ReplacechangeaspecificLnpNumberWithResponse call
func ParseReplacechangeaspecificLnpNumberResponse(rsp *http.Response) (*ReplacechangeaspecificLnpNumberResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificLnpNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetMailToFaxSettingitemsResponse parses an HTTP response from a GetMailToFaxSettingitemsWithResponse call
func ParseGetMailToFaxSettingitemsResponse(rsp *http.Response) (*GetMailToFaxSettingitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetMailToFaxSettingitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []MailToFaxSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetaspecificMailToFaxSettingResponse parses an HTTP response from a GetaspecificMailToFaxSettingWithResponse call
func ParseGetaspecificMailToFaxSettingResponse(rsp *http.Response) (*GetaspecificMailToFaxSettingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificMailToFaxSettingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MailToFaxSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificMailToFaxSettingResponse parses an HTTP response from a ChangeaspecificMailToFaxSettingWithResponse call
func ParseChangeaspecificMailToFaxSettingResponse(rsp *http.Response) (*ChangeaspecificMailToFaxSettingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificMailToFaxSettingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MailToFaxSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacechangeaspecificMailToFaxSettingResponse parses an HTTP response from a ReplacechangeaspecificMailToFaxSettingWithResponse call
func ParseReplacechangeaspecificMailToFaxSettingResponse(rsp *http.Response) (*ReplacechangeaspecificMailToFaxSettingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificMailToFaxSettingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MailToFaxSettings2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMaliciousCallitemsResponse parses an HTTP response from a GetMaliciousCallitemsWithResponse call
func ParseGetMaliciousCallitemsResponse(rsp *http.Response) (*GetMaliciousCallitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetMaliciousCallitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []MaliciousCalls
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificMaliciousCallResponse parses an HTTP response from a DeleteaspecificMaliciousCallWithResponse call
func ParseDeleteaspecificMaliciousCallResponse(rsp *http.Response) (*DeleteaspecificMaliciousCallResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificMaliciousCallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificMaliciousCallResponse parses an HTTP response from a GetaspecificMaliciousCallWithResponse call
func ParseGetaspecificMaliciousCallResponse(rsp *http.Response) (*GetaspecificMaliciousCallResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificMaliciousCallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MaliciousCalls
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetManagerSecretaryitemsResponse parses an HTTP response from a GetManagerSecretaryitemsWithResponse call
func ParseGetManagerSecretaryitemsResponse(rsp *http.Response) (*GetManagerSecretaryitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetManagerSecretaryitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ManagerSecretary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificManagerSecretaryResponse parses an HTTP response from a DeleteaspecificManagerSecretaryWithResponse call
func ParseDeleteaspecificManagerSecretaryResponse(rsp *http.Response) (*DeleteaspecificManagerSecretaryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificManagerSecretaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificManagerSecretaryResponse parses an HTTP response from a GetaspecificManagerSecretaryWithResponse call
func ParseGetaspecificManagerSecretaryResponse(rsp *http.Response) (*GetaspecificManagerSecretaryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificManagerSecretaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ManagerSecretary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacechangeaspecificManagerSecretaryResponse parses an HTTP response from a ReplacechangeaspecificManagerSecretaryWithResponse call
func ParseReplacechangeaspecificManagerSecretaryResponse(rsp *http.Response) (*ReplacechangeaspecificManagerSecretaryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificManagerSecretaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetNcosLevelitemsResponse parses an HTTP response from a GetNcosLevelitemsWithResponse call
func ParseGetNcosLevelitemsResponse(rsp *http.Response) (*GetNcosLevelitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetNcosLevelitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []NcosLevels3
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewNcosLevelResponse parses an HTTP response from a CreateanewNcosLevelWithResponse call
func ParseCreateanewNcosLevelResponse(rsp *http.Response) (*CreateanewNcosLevelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewNcosLevelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty32
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificNcosLevelResponse parses an HTTP response from a DeleteaspecificNcosLevelWithResponse call
func ParseDeleteaspecificNcosLevelResponse(rsp *http.Response) (*DeleteaspecificNcosLevelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificNcosLevelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificNcosLevelResponse parses an HTTP response from a GetaspecificNcosLevelWithResponse call
func ParseGetaspecificNcosLevelResponse(rsp *http.Response) (*GetaspecificNcosLevelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificNcosLevelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NcosLevels
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificNcosLevelResponse parses an HTTP response from a ChangeaspecificNcosLevelWithResponse call
func ParseChangeaspecificNcosLevelResponse(rsp *http.Response) (*ChangeaspecificNcosLevelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificNcosLevelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NcosLevels
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacechangeaspecificNcosLevelResponse parses an HTTP response from a ReplacechangeaspecificNcosLevelWithResponse call
func ParseReplacechangeaspecificNcosLevelResponse(rsp *http.Response) (*ReplacechangeaspecificNcosLevelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificNcosLevelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NcosLevels
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetNcosLnpCarrieritemsResponse parses an HTTP response from a GetNcosLnpCarrieritemsWithResponse call
func ParseGetNcosLnpCarrieritemsResponse(rsp *http.Response) (*GetNcosLnpCarrieritemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetNcosLnpCarrieritemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []NcosLnpCarriers2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewNcosLnpCarrierResponse parses an HTTP response from a CreateanewNcosLnpCarrierWithResponse call
func ParseCreateanewNcosLnpCarrierResponse(rsp *http.Response) (*CreateanewNcosLnpCarrierResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewNcosLnpCarrierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty47
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificNcosLnpCarrierResponse parses an HTTP response from a DeleteaspecificNcosLnpCarrierWithResponse call
func ParseDeleteaspecificNcosLnpCarrierResponse(rsp *http.Response) (*DeleteaspecificNcosLnpCarrierResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificNcosLnpCarrierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificNcosLnpCarrierResponse parses an HTTP response from a GetaspecificNcosLnpCarrierWithResponse call
func ParseGetaspecificNcosLnpCarrierResponse(rsp *http.Response) (*GetaspecificNcosLnpCarrierResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificNcosLnpCarrierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NcosLnpCarriers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificNcosLnpCarrierResponse parses an HTTP response from a ChangeaspecificNcosLnpCarrierWithResponse call
func ParseChangeaspecificNcosLnpCarrierResponse(rsp *http.Response) (*ChangeaspecificNcosLnpCarrierResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificNcosLnpCarrierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NcosLnpCarriers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacechangeaspecificNcosLnpCarrierResponse parses an HTTP response from a ReplacechangeaspecificNcosLnpCarrierWithResponse call
func ParseReplacechangeaspecificNcosLnpCarrierResponse(rsp *http.Response) (*ReplacechangeaspecificNcosLnpCarrierResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificNcosLnpCarrierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetNcosPatternitemsResponse parses an HTTP response from a GetNcosPatternitemsWithResponse call
func ParseGetNcosPatternitemsResponse(rsp *http.Response) (*GetNcosPatternitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetNcosPatternitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewNcosPatternResponse parses an HTTP response from a CreateanewNcosPatternWithResponse call
func ParseCreateanewNcosPatternResponse(rsp *http.Response) (*CreateanewNcosPatternResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewNcosPatternResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificNcosPatternResponse parses an HTTP response from a DeleteaspecificNcosPatternWithResponse call
func ParseDeleteaspecificNcosPatternResponse(rsp *http.Response) (*DeleteaspecificNcosPatternResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificNcosPatternResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificNcosPatternResponse parses an HTTP response from a GetaspecificNcosPatternWithResponse call
func ParseGetaspecificNcosPatternResponse(rsp *http.Response) (*GetaspecificNcosPatternResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificNcosPatternResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificNcosPatternResponse parses an HTTP response from a ChangeaspecificNcosPatternWithResponse call
func ParseChangeaspecificNcosPatternResponse(rsp *http.Response) (*ChangeaspecificNcosPatternResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificNcosPatternResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacechangeaspecificNcosPatternResponse parses an HTTP response from a ReplacechangeaspecificNcosPatternWithResponse call
func ParseReplacechangeaspecificNcosPatternResponse(rsp *http.Response) (*ReplacechangeaspecificNcosPatternResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificNcosPatternResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetNumberitemsResponse parses an HTTP response from a GetNumberitemsWithResponse call
func ParseGetNumberitemsResponse(rsp *http.Response) (*GetNumberitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetNumberitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Numbers3
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetaspecificNumberResponse parses an HTTP response from a GetaspecificNumberWithResponse call
func ParseGetaspecificNumberResponse(rsp *http.Response) (*GetaspecificNumberResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Numbers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificNumberResponse parses an HTTP response from a ChangeaspecificNumberWithResponse call
func ParseChangeaspecificNumberResponse(rsp *http.Response) (*ChangeaspecificNumberResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Numbers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacechangeaspecificNumberResponse parses an HTTP response from a ReplacechangeaspecificNumberWithResponse call
func ParseReplacechangeaspecificNumberResponse(rsp *http.Response) (*ReplacechangeaspecificNumberResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Numbers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewPartyCallControlResponse parses an HTTP response from a CreateanewPartyCallControlWithResponse call
func ParseCreateanewPartyCallControlResponse(rsp *http.Response) (*CreateanewPartyCallControlResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewPartyCallControlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty55
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetaspecificPbxDeviceConfigFileResponse parses an HTTP response from a GetaspecificPbxDeviceConfigFileWithResponse call
func ParseGetaspecificPbxDeviceConfigFileResponse(rsp *http.Response) (*GetaspecificPbxDeviceConfigFileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificPbxDeviceConfigFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PbxDeviceConfigFiles
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPbxDeviceConfigitemsResponse parses an HTTP response from a GetPbxDeviceConfigitemsWithResponse call
func ParseGetPbxDeviceConfigitemsResponse(rsp *http.Response) (*GetPbxDeviceConfigitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPbxDeviceConfigitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PbxDeviceConfigs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewPbxDeviceConfigResponse parses an HTTP response from a CreateanewPbxDeviceConfigWithResponse call
func ParseCreateanewPbxDeviceConfigResponse(rsp *http.Response) (*CreateanewPbxDeviceConfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewPbxDeviceConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty24
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetaspecificPbxDeviceConfigResponse parses an HTTP response from a GetaspecificPbxDeviceConfigWithResponse call
func ParseGetaspecificPbxDeviceConfigResponse(rsp *http.Response) (*GetaspecificPbxDeviceConfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificPbxDeviceConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PbxDeviceConfigs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacechangeaspecificPbxDeviceConfigResponse parses an HTTP response from a ReplacechangeaspecificPbxDeviceConfigWithResponse call
func ParseReplacechangeaspecificPbxDeviceConfigResponse(rsp *http.Response) (*ReplacechangeaspecificPbxDeviceConfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificPbxDeviceConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificPbxDeviceFirmwareBinaryResponse parses an HTTP response from a GetaspecificPbxDeviceFirmwareBinaryWithResponse call
func ParseGetaspecificPbxDeviceFirmwareBinaryResponse(rsp *http.Response) (*GetaspecificPbxDeviceFirmwareBinaryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificPbxDeviceFirmwareBinaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PbxDeviceFirmwareBinaries
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPbxDeviceFirmwareitemsResponse parses an HTTP response from a GetPbxDeviceFirmwareitemsWithResponse call
func ParseGetPbxDeviceFirmwareitemsResponse(rsp *http.Response) (*GetPbxDeviceFirmwareitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPbxDeviceFirmwareitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PbxDeviceFirmwares2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewPbxDeviceFirmwareResponse parses an HTTP response from a CreateanewPbxDeviceFirmwareWithResponse call
func ParseCreateanewPbxDeviceFirmwareResponse(rsp *http.Response) (*CreateanewPbxDeviceFirmwareResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewPbxDeviceFirmwareResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty15
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetaspecificPbxDeviceFirmwareResponse parses an HTTP response from a GetaspecificPbxDeviceFirmwareWithResponse call
func ParseGetaspecificPbxDeviceFirmwareResponse(rsp *http.Response) (*GetaspecificPbxDeviceFirmwareResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificPbxDeviceFirmwareResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PbxDeviceFirmwares
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacechangeaspecificPbxDeviceFirmwareResponse parses an HTTP response from a ReplacechangeaspecificPbxDeviceFirmwareWithResponse call
func ParseReplacechangeaspecificPbxDeviceFirmwareResponse(rsp *http.Response) (*ReplacechangeaspecificPbxDeviceFirmwareResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificPbxDeviceFirmwareResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PbxDeviceFirmwares
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetaspecificPbxDeviceModelImageResponse parses an HTTP response from a GetaspecificPbxDeviceModelImageWithResponse call
func ParseGetaspecificPbxDeviceModelImageResponse(rsp *http.Response) (*GetaspecificPbxDeviceModelImageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificPbxDeviceModelImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPbxDeviceModelitemsResponse parses an HTTP response from a GetPbxDeviceModelitemsWithResponse call
func ParseGetPbxDeviceModelitemsResponse(rsp *http.Response) (*GetPbxDeviceModelitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPbxDeviceModelitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PbxDeviceModels1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewPbxDeviceModelResponse parses an HTTP response from a CreateanewPbxDeviceModelWithResponse call
func ParseCreateanewPbxDeviceModelResponse(rsp *http.Response) (*CreateanewPbxDeviceModelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewPbxDeviceModelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty17
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetaspecificPbxDeviceModelResponse parses an HTTP response from a GetaspecificPbxDeviceModelWithResponse call
func ParseGetaspecificPbxDeviceModelResponse(rsp *http.Response) (*GetaspecificPbxDeviceModelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificPbxDeviceModelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PbxDeviceModels
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificPbxDeviceModelResponse parses an HTTP response from a ChangeaspecificPbxDeviceModelWithResponse call
func ParseChangeaspecificPbxDeviceModelResponse(rsp *http.Response) (*ChangeaspecificPbxDeviceModelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificPbxDeviceModelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseReplacechangeaspecificPbxDeviceModelResponse parses an HTTP response from a ReplacechangeaspecificPbxDeviceModelWithResponse call
func ParseReplacechangeaspecificPbxDeviceModelResponse(rsp *http.Response) (*ReplacechangeaspecificPbxDeviceModelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificPbxDeviceModelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPbxDevicePreferenceitemsResponse parses an HTTP response from a GetPbxDevicePreferenceitemsWithResponse call
func ParseGetPbxDevicePreferenceitemsResponse(rsp *http.Response) (*GetPbxDevicePreferenceitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPbxDevicePreferenceitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetaspecificPbxDevicePreferenceResponse parses an HTTP response from a GetaspecificPbxDevicePreferenceWithResponse call
func ParseGetaspecificPbxDevicePreferenceResponse(rsp *http.Response) (*GetaspecificPbxDevicePreferenceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificPbxDevicePreferenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificPbxDevicePreferenceResponse parses an HTTP response from a ChangeaspecificPbxDevicePreferenceWithResponse call
func ParseChangeaspecificPbxDevicePreferenceResponse(rsp *http.Response) (*ChangeaspecificPbxDevicePreferenceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificPbxDevicePreferenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacechangeaspecificPbxDevicePreferenceResponse parses an HTTP response from a ReplacechangeaspecificPbxDevicePreferenceWithResponse call
func ParseReplacechangeaspecificPbxDevicePreferenceResponse(rsp *http.Response) (*ReplacechangeaspecificPbxDevicePreferenceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificPbxDevicePreferenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPbxDeviceProfilePreferenceitemsResponse parses an HTTP response from a GetPbxDeviceProfilePreferenceitemsWithResponse call
func ParseGetPbxDeviceProfilePreferenceitemsResponse(rsp *http.Response) (*GetPbxDeviceProfilePreferenceitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPbxDeviceProfilePreferenceitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetaspecificPbxDeviceProfilePreferenceResponse parses an HTTP response from a GetaspecificPbxDeviceProfilePreferenceWithResponse call
func ParseGetaspecificPbxDeviceProfilePreferenceResponse(rsp *http.Response) (*GetaspecificPbxDeviceProfilePreferenceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificPbxDeviceProfilePreferenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificPbxDeviceProfilePreferenceResponse parses an HTTP response from a ChangeaspecificPbxDeviceProfilePreferenceWithResponse call
func ParseChangeaspecificPbxDeviceProfilePreferenceResponse(rsp *http.Response) (*ChangeaspecificPbxDeviceProfilePreferenceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificPbxDeviceProfilePreferenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacechangeaspecificPbxDeviceProfilePreferenceResponse parses an HTTP response from a ReplacechangeaspecificPbxDeviceProfilePreferenceWithResponse call
func ParseReplacechangeaspecificPbxDeviceProfilePreferenceResponse(rsp *http.Response) (*ReplacechangeaspecificPbxDeviceProfilePreferenceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificPbxDeviceProfilePreferenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPbxDeviceProfileitemsResponse parses an HTTP response from a GetPbxDeviceProfileitemsWithResponse call
func ParseGetPbxDeviceProfileitemsResponse(rsp *http.Response) (*GetPbxDeviceProfileitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPbxDeviceProfileitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PbxDeviceProfiles3
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewPbxDeviceProfileResponse parses an HTTP response from a CreateanewPbxDeviceProfileWithResponse call
func ParseCreateanewPbxDeviceProfileResponse(rsp *http.Response) (*CreateanewPbxDeviceProfileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewPbxDeviceProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty20
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetaspecificPbxDeviceProfileResponse parses an HTTP response from a GetaspecificPbxDeviceProfileWithResponse call
func ParseGetaspecificPbxDeviceProfileResponse(rsp *http.Response) (*GetaspecificPbxDeviceProfileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificPbxDeviceProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PbxDeviceProfiles
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificPbxDeviceProfileResponse parses an HTTP response from a ChangeaspecificPbxDeviceProfileWithResponse call
func ParseChangeaspecificPbxDeviceProfileResponse(rsp *http.Response) (*ChangeaspecificPbxDeviceProfileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificPbxDeviceProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PbxDeviceProfiles
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacechangeaspecificPbxDeviceProfileResponse parses an HTTP response from a ReplacechangeaspecificPbxDeviceProfileWithResponse call
func ParseReplacechangeaspecificPbxDeviceProfileResponse(rsp *http.Response) (*ReplacechangeaspecificPbxDeviceProfileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificPbxDeviceProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PbxDeviceProfiles
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPbxDeviceitemsResponse parses an HTTP response from a GetPbxDeviceitemsWithResponse call
func ParseGetPbxDeviceitemsResponse(rsp *http.Response) (*GetPbxDeviceitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPbxDeviceitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PbxDevices
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewPbxDeviceResponse parses an HTTP response from a CreateanewPbxDeviceWithResponse call
func ParseCreateanewPbxDeviceResponse(rsp *http.Response) (*CreateanewPbxDeviceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewPbxDeviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty23
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificPbxDeviceResponse parses an HTTP response from a DeleteaspecificPbxDeviceWithResponse call
func ParseDeleteaspecificPbxDeviceResponse(rsp *http.Response) (*DeleteaspecificPbxDeviceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificPbxDeviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificPbxDeviceResponse parses an HTTP response from a GetaspecificPbxDeviceWithResponse call
func ParseGetaspecificPbxDeviceResponse(rsp *http.Response) (*GetaspecificPbxDeviceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificPbxDeviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PbxDevices
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificPbxDeviceResponse parses an HTTP response from a ChangeaspecificPbxDeviceWithResponse call
func ParseChangeaspecificPbxDeviceResponse(rsp *http.Response) (*ChangeaspecificPbxDeviceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificPbxDeviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseReplacechangeaspecificPbxDeviceResponse parses an HTTP response from a ReplacechangeaspecificPbxDeviceWithResponse call
func ParseReplacechangeaspecificPbxDeviceResponse(rsp *http.Response) (*ReplacechangeaspecificPbxDeviceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificPbxDeviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PbxDevices
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPbxFieldDevicePreferenceitemsResponse parses an HTTP response from a GetPbxFieldDevicePreferenceitemsWithResponse call
func ParseGetPbxFieldDevicePreferenceitemsResponse(rsp *http.Response) (*GetPbxFieldDevicePreferenceitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPbxFieldDevicePreferenceitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetaspecificPbxFieldDevicePreferenceResponse parses an HTTP response from a GetaspecificPbxFieldDevicePreferenceWithResponse call
func ParseGetaspecificPbxFieldDevicePreferenceResponse(rsp *http.Response) (*GetaspecificPbxFieldDevicePreferenceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificPbxFieldDevicePreferenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificPbxFieldDevicePreferenceResponse parses an HTTP response from a ChangeaspecificPbxFieldDevicePreferenceWithResponse call
func ParseChangeaspecificPbxFieldDevicePreferenceResponse(rsp *http.Response) (*ChangeaspecificPbxFieldDevicePreferenceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificPbxFieldDevicePreferenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseReplacechangeaspecificPbxFieldDevicePreferenceResponse parses an HTTP response from a ReplacechangeaspecificPbxFieldDevicePreferenceWithResponse call
func ParseReplacechangeaspecificPbxFieldDevicePreferenceResponse(rsp *http.Response) (*ReplacechangeaspecificPbxFieldDevicePreferenceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificPbxFieldDevicePreferenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPeeringGroupitemsResponse parses an HTTP response from a GetPeeringGroupitemsWithResponse call
func ParseGetPeeringGroupitemsResponse(rsp *http.Response) (*GetPeeringGroupitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPeeringGroupitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PeeringGroups3
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewPeeringGroupResponse parses an HTTP response from a CreateanewPeeringGroupWithResponse call
func ParseCreateanewPeeringGroupResponse(rsp *http.Response) (*CreateanewPeeringGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewPeeringGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty10
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificPeeringGroupResponse parses an HTTP response from a DeleteaspecificPeeringGroupWithResponse call
func ParseDeleteaspecificPeeringGroupResponse(rsp *http.Response) (*DeleteaspecificPeeringGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificPeeringGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificPeeringGroupResponse parses an HTTP response from a GetaspecificPeeringGroupWithResponse call
func ParseGetaspecificPeeringGroupResponse(rsp *http.Response) (*GetaspecificPeeringGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificPeeringGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PeeringGroups
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificPeeringGroupResponse parses an HTTP response from a ChangeaspecificPeeringGroupWithResponse call
func ParseChangeaspecificPeeringGroupResponse(rsp *http.Response) (*ChangeaspecificPeeringGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificPeeringGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PeeringGroups
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacechangeaspecificPeeringGroupResponse parses an HTTP response from a ReplacechangeaspecificPeeringGroupWithResponse call
func ParseReplacechangeaspecificPeeringGroupResponse(rsp *http.Response) (*ReplacechangeaspecificPeeringGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificPeeringGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PeeringGroups
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPeeringInboundRuleitemsResponse parses an HTTP response from a GetPeeringInboundRuleitemsWithResponse call
func ParseGetPeeringInboundRuleitemsResponse(rsp *http.Response) (*GetPeeringInboundRuleitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPeeringInboundRuleitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewPeeringInboundRuleResponse parses an HTTP response from a CreateanewPeeringInboundRuleWithResponse call
func ParseCreateanewPeeringInboundRuleResponse(rsp *http.Response) (*CreateanewPeeringInboundRuleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewPeeringInboundRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificPeeringInboundRuleResponse parses an HTTP response from a DeleteaspecificPeeringInboundRuleWithResponse call
func ParseDeleteaspecificPeeringInboundRuleResponse(rsp *http.Response) (*DeleteaspecificPeeringInboundRuleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificPeeringInboundRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificPeeringInboundRuleResponse parses an HTTP response from a GetaspecificPeeringInboundRuleWithResponse call
func ParseGetaspecificPeeringInboundRuleResponse(rsp *http.Response) (*GetaspecificPeeringInboundRuleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificPeeringInboundRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificPeeringInboundRuleResponse parses an HTTP response from a ChangeaspecificPeeringInboundRuleWithResponse call
func ParseChangeaspecificPeeringInboundRuleResponse(rsp *http.Response) (*ChangeaspecificPeeringInboundRuleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificPeeringInboundRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacechangeaspecificPeeringInboundRuleResponse parses an HTTP response from a ReplacechangeaspecificPeeringInboundRuleWithResponse call
func ParseReplacechangeaspecificPeeringInboundRuleResponse(rsp *http.Response) (*ReplacechangeaspecificPeeringInboundRuleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificPeeringInboundRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPeeringRuleitemsResponse parses an HTTP response from a GetPeeringRuleitemsWithResponse call
func ParseGetPeeringRuleitemsResponse(rsp *http.Response) (*GetPeeringRuleitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPeeringRuleitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PeeringRules2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewPeeringRuleResponse parses an HTTP response from a CreateanewPeeringRuleWithResponse call
func ParseCreateanewPeeringRuleResponse(rsp *http.Response) (*CreateanewPeeringRuleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewPeeringRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty35
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificPeeringRuleResponse parses an HTTP response from a DeleteaspecificPeeringRuleWithResponse call
func ParseDeleteaspecificPeeringRuleResponse(rsp *http.Response) (*DeleteaspecificPeeringRuleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificPeeringRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificPeeringRuleResponse parses an HTTP response from a GetaspecificPeeringRuleWithResponse call
func ParseGetaspecificPeeringRuleResponse(rsp *http.Response) (*GetaspecificPeeringRuleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificPeeringRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PeeringRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificPeeringRuleResponse parses an HTTP response from a ChangeaspecificPeeringRuleWithResponse call
func ParseChangeaspecificPeeringRuleResponse(rsp *http.Response) (*ChangeaspecificPeeringRuleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificPeeringRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseReplacechangeaspecificPeeringRuleResponse parses an HTTP response from a ReplacechangeaspecificPeeringRuleWithResponse call
func ParseReplacechangeaspecificPeeringRuleResponse(rsp *http.Response) (*ReplacechangeaspecificPeeringRuleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificPeeringRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PeeringRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPeeringServerPreferenceitemsResponse parses an HTTP response from a GetPeeringServerPreferenceitemsWithResponse call
func ParseGetPeeringServerPreferenceitemsResponse(rsp *http.Response) (*GetPeeringServerPreferenceitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPeeringServerPreferenceitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetaspecificPeeringServerPreferenceResponse parses an HTTP response from a GetaspecificPeeringServerPreferenceWithResponse call
func ParseGetaspecificPeeringServerPreferenceResponse(rsp *http.Response) (*GetaspecificPeeringServerPreferenceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificPeeringServerPreferenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificPeeringServerPreferenceResponse parses an HTTP response from a ChangeaspecificPeeringServerPreferenceWithResponse call
func ParseChangeaspecificPeeringServerPreferenceResponse(rsp *http.Response) (*ChangeaspecificPeeringServerPreferenceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificPeeringServerPreferenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacechangeaspecificPeeringServerPreferenceResponse parses an HTTP response from a ReplacechangeaspecificPeeringServerPreferenceWithResponse call
func ParseReplacechangeaspecificPeeringServerPreferenceResponse(rsp *http.Response) (*ReplacechangeaspecificPeeringServerPreferenceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificPeeringServerPreferenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPeeringServeritemsResponse parses an HTTP response from a GetPeeringServeritemsWithResponse call
func ParseGetPeeringServeritemsResponse(rsp *http.Response) (*GetPeeringServeritemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPeeringServeritemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PeeringServers3
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewPeeringServerResponse parses an HTTP response from a CreateanewPeeringServerWithResponse call
func ParseCreateanewPeeringServerResponse(rsp *http.Response) (*CreateanewPeeringServerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewPeeringServerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty19
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificPeeringServerResponse parses an HTTP response from a DeleteaspecificPeeringServerWithResponse call
func ParseDeleteaspecificPeeringServerResponse(rsp *http.Response) (*DeleteaspecificPeeringServerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificPeeringServerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificPeeringServerResponse parses an HTTP response from a GetaspecificPeeringServerWithResponse call
func ParseGetaspecificPeeringServerResponse(rsp *http.Response) (*GetaspecificPeeringServerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificPeeringServerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PeeringServers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificPeeringServerResponse parses an HTTP response from a ChangeaspecificPeeringServerWithResponse call
func ParseChangeaspecificPeeringServerResponse(rsp *http.Response) (*ChangeaspecificPeeringServerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificPeeringServerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PeeringServers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacechangeaspecificPeeringServerResponse parses an HTTP response from a ReplacechangeaspecificPeeringServerWithResponse call
func ParseReplacechangeaspecificPeeringServerResponse(rsp *http.Response) (*ReplacechangeaspecificPeeringServerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificPeeringServerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PeeringServers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPhonebookEntryitemsResponse parses an HTTP response from a GetPhonebookEntryitemsWithResponse call
func ParseGetPhonebookEntryitemsResponse(rsp *http.Response) (*GetPhonebookEntryitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPhonebookEntryitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PhonebookEntries
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewPhonebookEntryResponse parses an HTTP response from a CreateanewPhonebookEntryWithResponse call
func ParseCreateanewPhonebookEntryResponse(rsp *http.Response) (*CreateanewPhonebookEntryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewPhonebookEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty14
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificPhonebookEntryResponse parses an HTTP response from a DeleteaspecificPhonebookEntryWithResponse call
func ParseDeleteaspecificPhonebookEntryResponse(rsp *http.Response) (*DeleteaspecificPhonebookEntryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificPhonebookEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificPhonebookEntryResponse parses an HTTP response from a GetaspecificPhonebookEntryWithResponse call
func ParseGetaspecificPhonebookEntryResponse(rsp *http.Response) (*GetaspecificPhonebookEntryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificPhonebookEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PhonebookEntries
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificPhonebookEntryResponse parses an HTTP response from a ChangeaspecificPhonebookEntryWithResponse call
func ParseChangeaspecificPhonebookEntryResponse(rsp *http.Response) (*ChangeaspecificPhonebookEntryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificPhonebookEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseReplacechangeaspecificPhonebookEntryResponse parses an HTTP response from a ReplacechangeaspecificPhonebookEntryWithResponse call
func ParseReplacechangeaspecificPhonebookEntryResponse(rsp *http.Response) (*ReplacechangeaspecificPhonebookEntryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificPhonebookEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPreferencesMetaEntryitemsResponse parses an HTTP response from a GetPreferencesMetaEntryitemsWithResponse call
func ParseGetPreferencesMetaEntryitemsResponse(rsp *http.Response) (*GetPreferencesMetaEntryitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPreferencesMetaEntryitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PreferencesMetaEntries2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewPreferencesMetaEntryResponse parses an HTTP response from a CreateanewPreferencesMetaEntryWithResponse call
func ParseCreateanewPreferencesMetaEntryResponse(rsp *http.Response) (*CreateanewPreferencesMetaEntryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewPreferencesMetaEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty18
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificPreferencesMetaEntryResponse parses an HTTP response from a DeleteaspecificPreferencesMetaEntryWithResponse call
func ParseDeleteaspecificPreferencesMetaEntryResponse(rsp *http.Response) (*DeleteaspecificPreferencesMetaEntryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificPreferencesMetaEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificPreferencesMetaEntryResponse parses an HTTP response from a GetaspecificPreferencesMetaEntryWithResponse call
func ParseGetaspecificPreferencesMetaEntryResponse(rsp *http.Response) (*GetaspecificPreferencesMetaEntryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificPreferencesMetaEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PreferencesMetaEntries
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificPreferencesMetaEntryResponse parses an HTTP response from a ChangeaspecificPreferencesMetaEntryWithResponse call
func ParseChangeaspecificPreferencesMetaEntryResponse(rsp *http.Response) (*ChangeaspecificPreferencesMetaEntryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificPreferencesMetaEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseReplacechangeaspecificPreferencesMetaEntryResponse parses an HTTP response from a ReplacechangeaspecificPreferencesMetaEntryWithResponse call
func ParseReplacechangeaspecificPreferencesMetaEntryResponse(rsp *http.Response) (*ReplacechangeaspecificPreferencesMetaEntryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificPreferencesMetaEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PreferencesMetaEntries
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProfilePackageitemsResponse parses an HTTP response from a GetProfilePackageitemsWithResponse call
func ParseGetProfilePackageitemsResponse(rsp *http.Response) (*GetProfilePackageitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetProfilePackageitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ProfilePackages
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewProfilePackageResponse parses an HTTP response from a CreateanewProfilePackageWithResponse call
func ParseCreateanewProfilePackageResponse(rsp *http.Response) (*CreateanewProfilePackageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewProfilePackageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty40
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificProfilePackageResponse parses an HTTP response from a DeleteaspecificProfilePackageWithResponse call
func ParseDeleteaspecificProfilePackageResponse(rsp *http.Response) (*DeleteaspecificProfilePackageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificProfilePackageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificProfilePackageResponse parses an HTTP response from a GetaspecificProfilePackageWithResponse call
func ParseGetaspecificProfilePackageResponse(rsp *http.Response) (*GetaspecificProfilePackageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificProfilePackageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProfilePackages
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificProfilePackageResponse parses an HTTP response from a ChangeaspecificProfilePackageWithResponse call
func ParseChangeaspecificProfilePackageResponse(rsp *http.Response) (*ChangeaspecificProfilePackageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificProfilePackageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseReplacechangeaspecificProfilePackageResponse parses an HTTP response from a ReplacechangeaspecificProfilePackageWithResponse call
func ParseReplacechangeaspecificProfilePackageResponse(rsp *http.Response) (*ReplacechangeaspecificProfilePackageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificProfilePackageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProfilePackages
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProfilePreferenceitemsResponse parses an HTTP response from a GetProfilePreferenceitemsWithResponse call
func ParseGetProfilePreferenceitemsResponse(rsp *http.Response) (*GetProfilePreferenceitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetProfilePreferenceitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetaspecificProfilePreferenceResponse parses an HTTP response from a GetaspecificProfilePreferenceWithResponse call
func ParseGetaspecificProfilePreferenceResponse(rsp *http.Response) (*GetaspecificProfilePreferenceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificProfilePreferenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificProfilePreferenceResponse parses an HTTP response from a ChangeaspecificProfilePreferenceWithResponse call
func ParseChangeaspecificProfilePreferenceResponse(rsp *http.Response) (*ChangeaspecificProfilePreferenceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificProfilePreferenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseReplacechangeaspecificProfilePreferenceResponse parses an HTTP response from a ReplacechangeaspecificProfilePreferenceWithResponse call
func ParseReplacechangeaspecificProfilePreferenceResponse(rsp *http.Response) (*ReplacechangeaspecificProfilePreferenceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificProfilePreferenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetReminderitemsResponse parses an HTTP response from a GetReminderitemsWithResponse call
func ParseGetReminderitemsResponse(rsp *http.Response) (*GetReminderitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetReminderitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Reminders1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewReminderResponse parses an HTTP response from a CreateanewReminderWithResponse call
func ParseCreateanewReminderResponse(rsp *http.Response) (*CreateanewReminderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewReminderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificReminderResponse parses an HTTP response from a DeleteaspecificReminderWithResponse call
func ParseDeleteaspecificReminderResponse(rsp *http.Response) (*DeleteaspecificReminderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificReminderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificReminderResponse parses an HTTP response from a GetaspecificReminderWithResponse call
func ParseGetaspecificReminderResponse(rsp *http.Response) (*GetaspecificReminderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificReminderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Reminders
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificReminderResponse parses an HTTP response from a ChangeaspecificReminderWithResponse call
func ParseChangeaspecificReminderResponse(rsp *http.Response) (*ChangeaspecificReminderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificReminderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseReplacechangeaspecificReminderResponse parses an HTTP response from a ReplacechangeaspecificReminderWithResponse call
func ParseReplacechangeaspecificReminderResponse(rsp *http.Response) (*ReplacechangeaspecificReminderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificReminderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetReselleritemsResponse parses an HTTP response from a GetReselleritemsWithResponse call
func ParseGetReselleritemsResponse(rsp *http.Response) (*GetReselleritemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetReselleritemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Resellers3
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewResellerResponse parses an HTTP response from a CreateanewResellerWithResponse call
func ParseCreateanewResellerResponse(rsp *http.Response) (*CreateanewResellerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewResellerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty25
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetaspecificResellerResponse parses an HTTP response from a GetaspecificResellerWithResponse call
func ParseGetaspecificResellerResponse(rsp *http.Response) (*GetaspecificResellerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificResellerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Resellers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificResellerResponse parses an HTTP response from a ChangeaspecificResellerWithResponse call
func ParseChangeaspecificResellerResponse(rsp *http.Response) (*ChangeaspecificResellerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificResellerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Resellers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacechangeaspecificResellerResponse parses an HTTP response from a ReplacechangeaspecificResellerWithResponse call
func ParseReplacechangeaspecificResellerResponse(rsp *http.Response) (*ReplacechangeaspecificResellerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificResellerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Resellers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRewriteRuleitemsResponse parses an HTTP response from a GetRewriteRuleitemsWithResponse call
func ParseGetRewriteRuleitemsResponse(rsp *http.Response) (*GetRewriteRuleitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetRewriteRuleitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RewriteRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewRewriteRuleResponse parses an HTTP response from a CreateanewRewriteRuleWithResponse call
func ParseCreateanewRewriteRuleResponse(rsp *http.Response) (*CreateanewRewriteRuleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewRewriteRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty38
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificRewriteRuleResponse parses an HTTP response from a DeleteaspecificRewriteRuleWithResponse call
func ParseDeleteaspecificRewriteRuleResponse(rsp *http.Response) (*DeleteaspecificRewriteRuleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificRewriteRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificRewriteRuleResponse parses an HTTP response from a GetaspecificRewriteRuleWithResponse call
func ParseGetaspecificRewriteRuleResponse(rsp *http.Response) (*GetaspecificRewriteRuleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificRewriteRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RewriteRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificRewriteRuleResponse parses an HTTP response from a ChangeaspecificRewriteRuleWithResponse call
func ParseChangeaspecificRewriteRuleResponse(rsp *http.Response) (*ChangeaspecificRewriteRuleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificRewriteRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RewriteRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacechangeaspecificRewriteRuleResponse parses an HTTP response from a ReplacechangeaspecificRewriteRuleWithResponse call
func ParseReplacechangeaspecificRewriteRuleResponse(rsp *http.Response) (*ReplacechangeaspecificRewriteRuleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificRewriteRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetRewriteRuleSetitemsResponse parses an HTTP response from a GetRewriteRuleSetitemsWithResponse call
func ParseGetRewriteRuleSetitemsResponse(rsp *http.Response) (*GetRewriteRuleSetitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetRewriteRuleSetitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RewriteRuleSets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewRewriteRuleSetResponse parses an HTTP response from a CreateanewRewriteRuleSetWithResponse call
func ParseCreateanewRewriteRuleSetResponse(rsp *http.Response) (*CreateanewRewriteRuleSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewRewriteRuleSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty42
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificRewriteRuleSetResponse parses an HTTP response from a DeleteaspecificRewriteRuleSetWithResponse call
func ParseDeleteaspecificRewriteRuleSetResponse(rsp *http.Response) (*DeleteaspecificRewriteRuleSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificRewriteRuleSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificRewriteRuleSetResponse parses an HTTP response from a GetaspecificRewriteRuleSetWithResponse call
func ParseGetaspecificRewriteRuleSetResponse(rsp *http.Response) (*GetaspecificRewriteRuleSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificRewriteRuleSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RewriteRuleSets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificRewriteRuleSetResponse parses an HTTP response from a ChangeaspecificRewriteRuleSetWithResponse call
func ParseChangeaspecificRewriteRuleSetResponse(rsp *http.Response) (*ChangeaspecificRewriteRuleSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificRewriteRuleSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseReplacechangeaspecificRewriteRuleSetResponse parses an HTTP response from a ReplacechangeaspecificRewriteRuleSetWithResponse call
func ParseReplacechangeaspecificRewriteRuleSetResponse(rsp *http.Response) (*ReplacechangeaspecificRewriteRuleSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificRewriteRuleSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetRtcAppitemsResponse parses an HTTP response from a GetRtcAppitemsWithResponse call
func ParseGetRtcAppitemsResponse(rsp *http.Response) (*GetRtcAppitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetRtcAppitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RtcApps
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetaspecificRtcAppResponse parses an HTTP response from a GetaspecificRtcAppWithResponse call
func ParseGetaspecificRtcAppResponse(rsp *http.Response) (*GetaspecificRtcAppResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificRtcAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RtcApps
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificRtcAppResponse parses an HTTP response from a ChangeaspecificRtcAppWithResponse call
func ParseChangeaspecificRtcAppResponse(rsp *http.Response) (*ChangeaspecificRtcAppResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificRtcAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseReplacechangeaspecificRtcAppResponse parses an HTTP response from a ReplacechangeaspecificRtcAppWithResponse call
func ParseReplacechangeaspecificRtcAppResponse(rsp *http.Response) (*ReplacechangeaspecificRtcAppResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificRtcAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RtcApps1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRtcNetworkitemsResponse parses an HTTP response from a GetRtcNetworkitemsWithResponse call
func ParseGetRtcNetworkitemsResponse(rsp *http.Response) (*GetRtcNetworkitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetRtcNetworkitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RtcNetworks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetaspecificRtcNetworkResponse parses an HTTP response from a GetaspecificRtcNetworkWithResponse call
func ParseGetaspecificRtcNetworkResponse(rsp *http.Response) (*GetaspecificRtcNetworkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificRtcNetworkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RtcNetworks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificRtcNetworkResponse parses an HTTP response from a ChangeaspecificRtcNetworkWithResponse call
func ParseChangeaspecificRtcNetworkResponse(rsp *http.Response) (*ChangeaspecificRtcNetworkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificRtcNetworkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RtcNetworks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacechangeaspecificRtcNetworkResponse parses an HTTP response from a ReplacechangeaspecificRtcNetworkWithResponse call
func ParseReplacechangeaspecificRtcNetworkResponse(rsp *http.Response) (*ReplacechangeaspecificRtcNetworkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificRtcNetworkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RtcNetworks2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRtcSessionitemsResponse parses an HTTP response from a GetRtcSessionitemsWithResponse call
func ParseGetRtcSessionitemsResponse(rsp *http.Response) (*GetRtcSessionitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetRtcSessionitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewRtcSessionResponse parses an HTTP response from a CreateanewRtcSessionWithResponse call
func ParseCreateanewRtcSessionResponse(rsp *http.Response) (*CreateanewRtcSessionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewRtcSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetaspecificRtcSessionResponse parses an HTTP response from a GetaspecificRtcSessionWithResponse call
func ParseGetaspecificRtcSessionResponse(rsp *http.Response) (*GetaspecificRtcSessionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificRtcSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSIPCaptureitemsResponse parses an HTTP response from a GetSIPCaptureitemsWithResponse call
func ParseGetSIPCaptureitemsResponse(rsp *http.Response) (*GetSIPCaptureitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSIPCaptureitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SIPCapture
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetaspecificSIPCaptureResponse parses an HTTP response from a GetaspecificSIPCaptureWithResponse call
func ParseGetaspecificSIPCaptureResponse(rsp *http.Response) (*GetaspecificSIPCaptureResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificSIPCaptureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SIPCaptures
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSMSitemsResponse parses an HTTP response from a GetSMSitemsWithResponse call
func ParseGetSMSitemsResponse(rsp *http.Response) (*GetSMSitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSMSitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SM
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewSMSResponse parses an HTTP response from a CreateanewSMSWithResponse call
func ParseCreateanewSMSResponse(rsp *http.Response) (*CreateanewSMSResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewSMSResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty37
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetaspecificSMSResponse parses an HTTP response from a GetaspecificSMSWithResponse call
func ParseGetaspecificSMSResponse(rsp *http.Response) (*GetaspecificSMSResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificSMSResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SMS
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetaspecificSoundFileRecordingResponse parses an HTTP response from a GetaspecificSoundFileRecordingWithResponse call
func ParseGetaspecificSoundFileRecordingResponse(rsp *http.Response) (*GetaspecificSoundFileRecordingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificSoundFileRecordingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SoundFileRecordings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSoundFileitemsResponse parses an HTTP response from a GetSoundFileitemsWithResponse call
func ParseGetSoundFileitemsResponse(rsp *http.Response) (*GetSoundFileitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSoundFileitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SoundFiles2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewSoundFileResponse parses an HTTP response from a CreateanewSoundFileWithResponse call
func ParseCreateanewSoundFileResponse(rsp *http.Response) (*CreateanewSoundFileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewSoundFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty22
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificSoundFileResponse parses an HTTP response from a DeleteaspecificSoundFileWithResponse call
func ParseDeleteaspecificSoundFileResponse(rsp *http.Response) (*DeleteaspecificSoundFileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificSoundFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificSoundFileResponse parses an HTTP response from a GetaspecificSoundFileWithResponse call
func ParseGetaspecificSoundFileResponse(rsp *http.Response) (*GetaspecificSoundFileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificSoundFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SoundFiles
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacechangeaspecificSoundFileResponse parses an HTTP response from a ReplacechangeaspecificSoundFileWithResponse call
func ParseReplacechangeaspecificSoundFileResponse(rsp *http.Response) (*ReplacechangeaspecificSoundFileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificSoundFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SoundFiles
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSoundGroupitemsResponse parses an HTTP response from a GetSoundGroupitemsWithResponse call
func ParseGetSoundGroupitemsResponse(rsp *http.Response) (*GetSoundGroupitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSoundGroupitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetaspecificSoundGroupResponse parses an HTTP response from a GetaspecificSoundGroupWithResponse call
func ParseGetaspecificSoundGroupResponse(rsp *http.Response) (*GetaspecificSoundGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificSoundGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSoundHandleitemsResponse parses an HTTP response from a GetSoundHandleitemsWithResponse call
func ParseGetSoundHandleitemsResponse(rsp *http.Response) (*GetSoundHandleitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSoundHandleitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SoundHandle
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetaspecificSoundHandleResponse parses an HTTP response from a GetaspecificSoundHandleWithResponse call
func ParseGetaspecificSoundHandleResponse(rsp *http.Response) (*GetaspecificSoundHandleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificSoundHandleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SoundHandles
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSoundSetitemsResponse parses an HTTP response from a GetSoundSetitemsWithResponse call
func ParseGetSoundSetitemsResponse(rsp *http.Response) (*GetSoundSetitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSoundSetitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SoundSets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewSoundSetResponse parses an HTTP response from a CreateanewSoundSetWithResponse call
func ParseCreateanewSoundSetResponse(rsp *http.Response) (*CreateanewSoundSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewSoundSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty49
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificSoundSetResponse parses an HTTP response from a DeleteaspecificSoundSetWithResponse call
func ParseDeleteaspecificSoundSetResponse(rsp *http.Response) (*DeleteaspecificSoundSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificSoundSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificSoundSetResponse parses an HTTP response from a GetaspecificSoundSetWithResponse call
func ParseGetaspecificSoundSetResponse(rsp *http.Response) (*GetaspecificSoundSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificSoundSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SoundSets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificSoundSetResponse parses an HTTP response from a ChangeaspecificSoundSetWithResponse call
func ParseChangeaspecificSoundSetResponse(rsp *http.Response) (*ChangeaspecificSoundSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificSoundSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SoundSets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacechangeaspecificSoundSetResponse parses an HTTP response from a ReplacechangeaspecificSoundSetWithResponse call
func ParseReplacechangeaspecificSoundSetResponse(rsp *http.Response) (*ReplacechangeaspecificSoundSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificSoundSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SoundSets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSpeedDialitemsResponse parses an HTTP response from a GetSpeedDialitemsWithResponse call
func ParseGetSpeedDialitemsResponse(rsp *http.Response) (*GetSpeedDialitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSpeedDialitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SpeedDials
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetaspecificSpeedDialResponse parses an HTTP response from a GetaspecificSpeedDialWithResponse call
func ParseGetaspecificSpeedDialResponse(rsp *http.Response) (*GetaspecificSpeedDialResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificSpeedDialResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SpeedDials
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificSpeedDialResponse parses an HTTP response from a ChangeaspecificSpeedDialWithResponse call
func ParseChangeaspecificSpeedDialResponse(rsp *http.Response) (*ChangeaspecificSpeedDialResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificSpeedDialResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseReplacechangeaspecificSpeedDialResponse parses an HTTP response from a ReplacechangeaspecificSpeedDialWithResponse call
func ParseReplacechangeaspecificSpeedDialResponse(rsp *http.Response) (*ReplacechangeaspecificSpeedDialResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificSpeedDialResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SpeedDials
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSubscriberPreferenceitemsResponse parses an HTTP response from a GetSubscriberPreferenceitemsWithResponse call
func ParseGetSubscriberPreferenceitemsResponse(rsp *http.Response) (*GetSubscriberPreferenceitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSubscriberPreferenceitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetaspecificSubscriberPreferenceResponse parses an HTTP response from a GetaspecificSubscriberPreferenceWithResponse call
func ParseGetaspecificSubscriberPreferenceResponse(rsp *http.Response) (*GetaspecificSubscriberPreferenceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificSubscriberPreferenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificSubscriberPreferenceResponse parses an HTTP response from a ChangeaspecificSubscriberPreferenceWithResponse call
func ParseChangeaspecificSubscriberPreferenceResponse(rsp *http.Response) (*ChangeaspecificSubscriberPreferenceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificSubscriberPreferenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacechangeaspecificSubscriberPreferenceResponse parses an HTTP response from a ReplacechangeaspecificSubscriberPreferenceWithResponse call
func ParseReplacechangeaspecificSubscriberPreferenceResponse(rsp *http.Response) (*ReplacechangeaspecificSubscriberPreferenceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificSubscriberPreferenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetSubscriberProfileitemsResponse parses an HTTP response from a GetSubscriberProfileitemsWithResponse call
func ParseGetSubscriberProfileitemsResponse(rsp *http.Response) (*GetSubscriberProfileitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSubscriberProfileitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SubscriberProfiles
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewSubscriberProfileResponse parses an HTTP response from a CreateanewSubscriberProfileWithResponse call
func ParseCreateanewSubscriberProfileResponse(rsp *http.Response) (*CreateanewSubscriberProfileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewSubscriberProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty26
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificSubscriberProfileResponse parses an HTTP response from a DeleteaspecificSubscriberProfileWithResponse call
func ParseDeleteaspecificSubscriberProfileResponse(rsp *http.Response) (*DeleteaspecificSubscriberProfileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificSubscriberProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificSubscriberProfileResponse parses an HTTP response from a GetaspecificSubscriberProfileWithResponse call
func ParseGetaspecificSubscriberProfileResponse(rsp *http.Response) (*GetaspecificSubscriberProfileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificSubscriberProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubscriberProfiles
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificSubscriberProfileResponse parses an HTTP response from a ChangeaspecificSubscriberProfileWithResponse call
func ParseChangeaspecificSubscriberProfileResponse(rsp *http.Response) (*ChangeaspecificSubscriberProfileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificSubscriberProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseReplacechangeaspecificSubscriberProfileResponse parses an HTTP response from a ReplacechangeaspecificSubscriberProfileWithResponse call
func ParseReplacechangeaspecificSubscriberProfileResponse(rsp *http.Response) (*ReplacechangeaspecificSubscriberProfileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificSubscriberProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubscriberProfiles
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSubscriberProfileSetitemsResponse parses an HTTP response from a GetSubscriberProfileSetitemsWithResponse call
func ParseGetSubscriberProfileSetitemsResponse(rsp *http.Response) (*GetSubscriberProfileSetitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSubscriberProfileSetitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SubscriberProfileSets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewSubscriberProfileSetResponse parses an HTTP response from a CreateanewSubscriberProfileSetWithResponse call
func ParseCreateanewSubscriberProfileSetResponse(rsp *http.Response) (*CreateanewSubscriberProfileSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewSubscriberProfileSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty11
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificSubscriberProfileSetResponse parses an HTTP response from a DeleteaspecificSubscriberProfileSetWithResponse call
func ParseDeleteaspecificSubscriberProfileSetResponse(rsp *http.Response) (*DeleteaspecificSubscriberProfileSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificSubscriberProfileSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificSubscriberProfileSetResponse parses an HTTP response from a GetaspecificSubscriberProfileSetWithResponse call
func ParseGetaspecificSubscriberProfileSetResponse(rsp *http.Response) (*GetaspecificSubscriberProfileSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificSubscriberProfileSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubscriberProfileSets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificSubscriberProfileSetResponse parses an HTTP response from a ChangeaspecificSubscriberProfileSetWithResponse call
func ParseChangeaspecificSubscriberProfileSetResponse(rsp *http.Response) (*ChangeaspecificSubscriberProfileSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificSubscriberProfileSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseReplacechangeaspecificSubscriberProfileSetResponse parses an HTTP response from a ReplacechangeaspecificSubscriberProfileSetWithResponse call
func ParseReplacechangeaspecificSubscriberProfileSetResponse(rsp *http.Response) (*ReplacechangeaspecificSubscriberProfileSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificSubscriberProfileSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubscriberProfileSets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSubscriberRegistrationitemsResponse parses an HTTP response from a GetSubscriberRegistrationitemsWithResponse call
func ParseGetSubscriberRegistrationitemsResponse(rsp *http.Response) (*GetSubscriberRegistrationitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSubscriberRegistrationitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SubscriberRegistrations3
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewSubscriberRegistrationResponse parses an HTTP response from a CreateanewSubscriberRegistrationWithResponse call
func ParseCreateanewSubscriberRegistrationResponse(rsp *http.Response) (*CreateanewSubscriberRegistrationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewSubscriberRegistrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty46
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificSubscriberRegistrationResponse parses an HTTP response from a DeleteaspecificSubscriberRegistrationWithResponse call
func ParseDeleteaspecificSubscriberRegistrationResponse(rsp *http.Response) (*DeleteaspecificSubscriberRegistrationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificSubscriberRegistrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificSubscriberRegistrationResponse parses an HTTP response from a GetaspecificSubscriberRegistrationWithResponse call
func ParseGetaspecificSubscriberRegistrationResponse(rsp *http.Response) (*GetaspecificSubscriberRegistrationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificSubscriberRegistrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubscriberRegistrations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificSubscriberRegistrationResponse parses an HTTP response from a ChangeaspecificSubscriberRegistrationWithResponse call
func ParseChangeaspecificSubscriberRegistrationResponse(rsp *http.Response) (*ChangeaspecificSubscriberRegistrationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificSubscriberRegistrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubscriberRegistrations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacechangeaspecificSubscriberRegistrationResponse parses an HTTP response from a ReplacechangeaspecificSubscriberRegistrationWithResponse call
func ParseReplacechangeaspecificSubscriberRegistrationResponse(rsp *http.Response) (*ReplacechangeaspecificSubscriberRegistrationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificSubscriberRegistrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubscriberRegistrations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSubscriberitemsResponse parses an HTTP response from a GetSubscriberitemsWithResponse call
func ParseGetSubscriberitemsResponse(rsp *http.Response) (*GetSubscriberitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSubscriberitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Subscribers3
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewSubscriberResponse parses an HTTP response from a CreateanewSubscriberWithResponse call
func ParseCreateanewSubscriberResponse(rsp *http.Response) (*CreateanewSubscriberResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewSubscriberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty5
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificSubscriberResponse parses an HTTP response from a DeleteaspecificSubscriberWithResponse call
func ParseDeleteaspecificSubscriberResponse(rsp *http.Response) (*DeleteaspecificSubscriberResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificSubscriberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificSubscriberResponse parses an HTTP response from a GetaspecificSubscriberWithResponse call
func ParseGetaspecificSubscriberResponse(rsp *http.Response) (*GetaspecificSubscriberResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificSubscriberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Subscribers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificSubscriberResponse parses an HTTP response from a ChangeaspecificSubscriberWithResponse call
func ParseChangeaspecificSubscriberResponse(rsp *http.Response) (*ChangeaspecificSubscriberResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificSubscriberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Subscribers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacechangeaspecificSubscriberResponse parses an HTTP response from a ReplacechangeaspecificSubscriberWithResponse call
func ParseReplacechangeaspecificSubscriberResponse(rsp *http.Response) (*ReplacechangeaspecificSubscriberResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificSubscriberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Subscribers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSystemContactitemsResponse parses an HTTP response from a GetSystemContactitemsWithResponse call
func ParseGetSystemContactitemsResponse(rsp *http.Response) (*GetSystemContactitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSystemContactitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SystemContacts2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewSystemContactResponse parses an HTTP response from a CreateanewSystemContactWithResponse call
func ParseCreateanewSystemContactResponse(rsp *http.Response) (*CreateanewSystemContactResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewSystemContactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificSystemContactResponse parses an HTTP response from a DeleteaspecificSystemContactWithResponse call
func ParseDeleteaspecificSystemContactResponse(rsp *http.Response) (*DeleteaspecificSystemContactResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificSystemContactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificSystemContactResponse parses an HTTP response from a GetaspecificSystemContactWithResponse call
func ParseGetaspecificSystemContactResponse(rsp *http.Response) (*GetaspecificSystemContactResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificSystemContactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SystemContacts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificSystemContactResponse parses an HTTP response from a ChangeaspecificSystemContactWithResponse call
func ParseChangeaspecificSystemContactResponse(rsp *http.Response) (*ChangeaspecificSystemContactResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificSystemContactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SystemContacts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacechangeaspecificSystemContactResponse parses an HTTP response from a ReplacechangeaspecificSystemContactWithResponse call
func ParseReplacechangeaspecificSystemContactResponse(rsp *http.Response) (*ReplacechangeaspecificSystemContactResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificSystemContactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseCreateanewTopupCashResponse parses an HTTP response from a CreateanewTopupCashWithResponse call
func ParseCreateanewTopupCashResponse(rsp *http.Response) (*CreateanewTopupCashResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewTopupCashResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty51
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetTopupLogitemsResponse parses an HTTP response from a GetTopupLogitemsWithResponse call
func ParseGetTopupLogitemsResponse(rsp *http.Response) (*GetTopupLogitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTopupLogitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TopupLog
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetaspecificTopupLogResponse parses an HTTP response from a GetaspecificTopupLogWithResponse call
func ParseGetaspecificTopupLogResponse(rsp *http.Response) (*GetaspecificTopupLogResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificTopupLogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TopupLogs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewTopupVoucherResponse parses an HTTP response from a CreateanewTopupVoucherWithResponse call
func ParseCreateanewTopupVoucherResponse(rsp *http.Response) (*CreateanewTopupVoucherResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewTopupVoucherResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty50
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetTrustedSourceitemsResponse parses an HTTP response from a GetTrustedSourceitemsWithResponse call
func ParseGetTrustedSourceitemsResponse(rsp *http.Response) (*GetTrustedSourceitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTrustedSourceitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TrustedSources2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewTrustedSourceResponse parses an HTTP response from a CreateanewTrustedSourceWithResponse call
func ParseCreateanewTrustedSourceResponse(rsp *http.Response) (*CreateanewTrustedSourceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewTrustedSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty16
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificTrustedSourceResponse parses an HTTP response from a DeleteaspecificTrustedSourceWithResponse call
func ParseDeleteaspecificTrustedSourceResponse(rsp *http.Response) (*DeleteaspecificTrustedSourceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificTrustedSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificTrustedSourceResponse parses an HTTP response from a GetaspecificTrustedSourceWithResponse call
func ParseGetaspecificTrustedSourceResponse(rsp *http.Response) (*GetaspecificTrustedSourceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificTrustedSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TrustedSources
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificTrustedSourceResponse parses an HTTP response from a ChangeaspecificTrustedSourceWithResponse call
func ParseChangeaspecificTrustedSourceResponse(rsp *http.Response) (*ChangeaspecificTrustedSourceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificTrustedSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TrustedSources
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacechangeaspecificTrustedSourceResponse parses an HTTP response from a ReplacechangeaspecificTrustedSourceWithResponse call
func ParseReplacechangeaspecificTrustedSourceResponse(rsp *http.Response) (*ReplacechangeaspecificTrustedSourceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificTrustedSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetUpnRewriteSetitemsResponse parses an HTTP response from a GetUpnRewriteSetitemsWithResponse call
func ParseGetUpnRewriteSetitemsResponse(rsp *http.Response) (*GetUpnRewriteSetitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUpnRewriteSetitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewUpnRewriteSetResponse parses an HTTP response from a CreateanewUpnRewriteSetWithResponse call
func ParseCreateanewUpnRewriteSetResponse(rsp *http.Response) (*CreateanewUpnRewriteSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewUpnRewriteSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificUpnRewriteSetResponse parses an HTTP response from a DeleteaspecificUpnRewriteSetWithResponse call
func ParseDeleteaspecificUpnRewriteSetResponse(rsp *http.Response) (*DeleteaspecificUpnRewriteSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificUpnRewriteSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificUpnRewriteSetResponse parses an HTTP response from a GetaspecificUpnRewriteSetWithResponse call
func ParseGetaspecificUpnRewriteSetResponse(rsp *http.Response) (*GetaspecificUpnRewriteSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificUpnRewriteSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificUpnRewriteSetResponse parses an HTTP response from a ChangeaspecificUpnRewriteSetWithResponse call
func ParseChangeaspecificUpnRewriteSetResponse(rsp *http.Response) (*ChangeaspecificUpnRewriteSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificUpnRewriteSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacechangeaspecificUpnRewriteSetResponse parses an HTTP response from a ReplacechangeaspecificUpnRewriteSetWithResponse call
func ParseReplacechangeaspecificUpnRewriteSetResponse(rsp *http.Response) (*ReplacechangeaspecificUpnRewriteSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificUpnRewriteSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetVoicemailGreetingitemsResponse parses an HTTP response from a GetVoicemailGreetingitemsWithResponse call
func ParseGetVoicemailGreetingitemsResponse(rsp *http.Response) (*GetVoicemailGreetingitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVoicemailGreetingitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []VoicemailGreetings1
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewVoicemailGreetingResponse parses an HTTP response from a CreateanewVoicemailGreetingWithResponse call
func ParseCreateanewVoicemailGreetingResponse(rsp *http.Response) (*CreateanewVoicemailGreetingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewVoicemailGreetingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty7
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificVoicemailGreetingResponse parses an HTTP response from a DeleteaspecificVoicemailGreetingWithResponse call
func ParseDeleteaspecificVoicemailGreetingResponse(rsp *http.Response) (*DeleteaspecificVoicemailGreetingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificVoicemailGreetingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificVoicemailGreetingResponse parses an HTTP response from a GetaspecificVoicemailGreetingWithResponse call
func ParseGetaspecificVoicemailGreetingResponse(rsp *http.Response) (*GetaspecificVoicemailGreetingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificVoicemailGreetingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VoicemailGreetings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacechangeaspecificVoicemailGreetingResponse parses an HTTP response from a ReplacechangeaspecificVoicemailGreetingWithResponse call
func ParseReplacechangeaspecificVoicemailGreetingResponse(rsp *http.Response) (*ReplacechangeaspecificVoicemailGreetingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificVoicemailGreetingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificVoicemailRecordingResponse parses an HTTP response from a GetaspecificVoicemailRecordingWithResponse call
func ParseGetaspecificVoicemailRecordingResponse(rsp *http.Response) (*GetaspecificVoicemailRecordingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificVoicemailRecordingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetVoicemailitemsResponse parses an HTTP response from a GetVoicemailitemsWithResponse call
func ParseGetVoicemailitemsResponse(rsp *http.Response) (*GetVoicemailitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVoicemailitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Voicemails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificVoicemailResponse parses an HTTP response from a DeleteaspecificVoicemailWithResponse call
func ParseDeleteaspecificVoicemailResponse(rsp *http.Response) (*DeleteaspecificVoicemailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificVoicemailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificVoicemailResponse parses an HTTP response from a GetaspecificVoicemailWithResponse call
func ParseGetaspecificVoicemailResponse(rsp *http.Response) (*GetaspecificVoicemailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificVoicemailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Voicemails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificVoicemailResponse parses an HTTP response from a ChangeaspecificVoicemailWithResponse call
func ParseChangeaspecificVoicemailResponse(rsp *http.Response) (*ChangeaspecificVoicemailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificVoicemailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Voicemails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacechangeaspecificVoicemailResponse parses an HTTP response from a ReplacechangeaspecificVoicemailWithResponse call
func ParseReplacechangeaspecificVoicemailResponse(rsp *http.Response) (*ReplacechangeaspecificVoicemailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificVoicemailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetVoicemailSettingitemsResponse parses an HTTP response from a GetVoicemailSettingitemsWithResponse call
func ParseGetVoicemailSettingitemsResponse(rsp *http.Response) (*GetVoicemailSettingitemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVoicemailSettingitemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []VoicemailSettings2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetaspecificVoicemailSettingResponse parses an HTTP response from a GetaspecificVoicemailSettingWithResponse call
func ParseGetaspecificVoicemailSettingResponse(rsp *http.Response) (*GetaspecificVoicemailSettingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificVoicemailSettingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VoicemailSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificVoicemailSettingResponse parses an HTTP response from a ChangeaspecificVoicemailSettingWithResponse call
func ParseChangeaspecificVoicemailSettingResponse(rsp *http.Response) (*ChangeaspecificVoicemailSettingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificVoicemailSettingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VoicemailSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacechangeaspecificVoicemailSettingResponse parses an HTTP response from a ReplacechangeaspecificVoicemailSettingWithResponse call
func ParseReplacechangeaspecificVoicemailSettingResponse(rsp *http.Response) (*ReplacechangeaspecificVoicemailSettingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificVoicemailSettingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetVoucheritemsResponse parses an HTTP response from a GetVoucheritemsWithResponse call
func ParseGetVoucheritemsResponse(rsp *http.Response) (*GetVoucheritemsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetVoucheritemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Vouchers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateanewVoucherResponse parses an HTTP response from a CreateanewVoucherWithResponse call
func ParseCreateanewVoucherResponse(rsp *http.Response) (*CreateanewVoucherResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateanewVoucherResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest []Thenewlycreateditemorempty44
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest Anerror
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteaspecificVoucherResponse parses an HTTP response from a DeleteaspecificVoucherWithResponse call
func ParseDeleteaspecificVoucherResponse(rsp *http.Response) (*DeleteaspecificVoucherResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteaspecificVoucherResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetaspecificVoucherResponse parses an HTTP response from a GetaspecificVoucherWithResponse call
func ParseGetaspecificVoucherResponse(rsp *http.Response) (*GetaspecificVoucherResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetaspecificVoucherResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Vouchers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangeaspecificVoucherResponse parses an HTTP response from a ChangeaspecificVoucherWithResponse call
func ParseChangeaspecificVoucherResponse(rsp *http.Response) (*ChangeaspecificVoucherResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeaspecificVoucherResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Vouchers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplacechangeaspecificVoucherResponse parses an HTTP response from a ReplacechangeaspecificVoucherWithResponse call
func ParseReplacechangeaspecificVoucherResponse(rsp *http.Response) (*ReplacechangeaspecificVoucherResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReplacechangeaspecificVoucherResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Vouchers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new AdminCert
	// (POST /admincerts)
	CreateanewAdminCert(ctx echo.Context) error
	// Get Admin items
	// (GET /admins)
	GetAdminitems(ctx echo.Context, params GetAdminitemsParams) error
	// Create a new Admin
	// (POST /admins)
	CreateanewAdmin(ctx echo.Context) error
	// Delete a specific Admin
	// (DELETE /admins/{id})
	DeleteaspecificAdmin(ctx echo.Context, id string) error
	// Get a specific Admin
	// (GET /admins/{id})
	GetaspecificAdmin(ctx echo.Context, id string) error
	// Create a new ApplyRewrite
	// (POST /applyrewrites)
	CreateanewApplyRewrite(ctx echo.Context) error
	// Get AutoAttendant items
	// (GET /autoattendants)
	GetAutoAttendantitems(ctx echo.Context, params GetAutoAttendantitemsParams) error
	// Get a specific AutoAttendant
	// (GET /autoattendants/{id})
	GetaspecificAutoAttendant(ctx echo.Context, id string) error
	// Change a specific AutoAttendant
	// (PATCH /autoattendants/{id})
	ChangeaspecificAutoAttendant(ctx echo.Context, id string) error
	// Replace/change a specific AutoAttendant
	// (PUT /autoattendants/{id})
	ReplacechangeaspecificAutoAttendant(ctx echo.Context, id string) error
	// Get BalanceInterval items
	// (GET /balanceintervals)
	GetBalanceIntervalitems(ctx echo.Context, params GetBalanceIntervalitemsParams) error
	// Get a specific BalanceInterval
	// (GET /balanceintervals/{id})
	GetaspecificBalanceInterval(ctx echo.Context, id string) error
	// Get BannedIp items
	// (GET /bannedips)
	GetBannedIpitems(ctx echo.Context, params GetBannedIpitemsParams) error
	// Delete a specific BannedIp
	// (DELETE /bannedips/{id})
	DeleteaspecificBannedIp(ctx echo.Context, id string) error
	// Get a specific BannedIp
	// (GET /bannedips/{id})
	GetaspecificBannedIp(ctx echo.Context, id string) error
	// Get BannedUser items
	// (GET /bannedusers)
	GetBannedUseritems(ctx echo.Context, params GetBannedUseritemsParams) error
	// Delete a specific BannedUser
	// (DELETE /bannedusers/{id})
	DeleteaspecificBannedUser(ctx echo.Context, id string) error
	// Get a specific BannedUser
	// (GET /bannedusers/{id})
	GetaspecificBannedUser(ctx echo.Context, id string) error
	// Get BillingFee items
	// (GET /billingfees)
	GetBillingFeeitems(ctx echo.Context, params GetBillingFeeitemsParams) error
	// Create a new BillingFee
	// (POST /billingfees)
	CreateanewBillingFee(ctx echo.Context) error
	// Delete a specific BillingFee
	// (DELETE /billingfees/{id})
	DeleteaspecificBillingFee(ctx echo.Context, id string) error
	// Get a specific BillingFee
	// (GET /billingfees/{id})
	GetaspecificBillingFee(ctx echo.Context, id string) error
	// Change a specific BillingFee
	// (PATCH /billingfees/{id})
	ChangeaspecificBillingFee(ctx echo.Context, id string) error
	// Replace/change a specific BillingFee
	// (PUT /billingfees/{id})
	ReplacechangeaspecificBillingFee(ctx echo.Context, id string) error
	// Get BillingNetwork items
	// (GET /billingnetworks)
	GetBillingNetworkitems(ctx echo.Context, params GetBillingNetworkitemsParams) error
	// Create a new BillingNetwork
	// (POST /billingnetworks)
	CreateanewBillingNetwork(ctx echo.Context) error
	// Get a specific BillingNetwork
	// (GET /billingnetworks/{id})
	GetaspecificBillingNetwork(ctx echo.Context, id string) error
	// Change a specific BillingNetwork
	// (PATCH /billingnetworks/{id})
	ChangeaspecificBillingNetwork(ctx echo.Context, id string) error
	// Replace/change a specific BillingNetwork
	// (PUT /billingnetworks/{id})
	ReplacechangeaspecificBillingNetwork(ctx echo.Context, id string) error
	// Get BillingProfile items
	// (GET /billingprofiles)
	GetBillingProfileitems(ctx echo.Context, params GetBillingProfileitemsParams) error
	// Create a new BillingProfile
	// (POST /billingprofiles)
	CreateanewBillingProfile(ctx echo.Context) error
	// Get a specific BillingProfile
	// (GET /billingprofiles/{id})
	GetaspecificBillingProfile(ctx echo.Context, id string) error
	// Change a specific BillingProfile
	// (PATCH /billingprofiles/{id})
	ChangeaspecificBillingProfile(ctx echo.Context, id string) error
	// Replace/change a specific BillingProfile
	// (PUT /billingprofiles/{id})
	ReplacechangeaspecificBillingProfile(ctx echo.Context, id string) error
	// Get BillingZone items
	// (GET /billingzones)
	GetBillingZoneitems(ctx echo.Context, params GetBillingZoneitemsParams) error
	// Create a new BillingZone
	// (POST /billingzones)
	CreateanewBillingZone(ctx echo.Context) error
	// Delete a specific BillingZone
	// (DELETE /billingzones/{id})
	DeleteaspecificBillingZone(ctx echo.Context, id string) error
	// Get a specific BillingZone
	// (GET /billingzones/{id})
	GetaspecificBillingZone(ctx echo.Context, id string) error
	// Change a specific BillingZone
	// (PATCH /billingzones/{id})
	ChangeaspecificBillingZone(ctx echo.Context, id string) error
	// Replace/change a specific BillingZone
	// (PUT /billingzones/{id})
	ReplacechangeaspecificBillingZone(ctx echo.Context, id string) error
	// Create a new CallControl
	// (POST /callcontrols)
	CreateanewCallControl(ctx echo.Context) error
	// Get CallForward items
	// (GET /callforwards)
	GetCallForwarditems(ctx echo.Context, params GetCallForwarditemsParams) error
	// Delete a specific CallForward
	// (DELETE /callforwards/{id})
	DeleteaspecificCallForward(ctx echo.Context, id string) error
	// Get a specific CallForward
	// (GET /callforwards/{id})
	GetaspecificCallForward(ctx echo.Context, id string) error
	// Change a specific CallForward
	// (PATCH /callforwards/{id})
	ChangeaspecificCallForward(ctx echo.Context, id string) error
	// Replace/change a specific CallForward
	// (PUT /callforwards/{id})
	ReplacechangeaspecificCallForward(ctx echo.Context, id string) error
	// Get CallList items
	// (GET /calllists)
	GetCallListitems(ctx echo.Context, params GetCallListitemsParams) error
	// Get a specific CallList
	// (GET /calllists/{id})
	GetaspecificCallList(ctx echo.Context, id string) error
	// Get CallQueue items
	// (GET /callqueues)
	GetCallQueueitems(ctx echo.Context, params GetCallQueueitemsParams) error
	// Get a specific CallQueue
	// (GET /callqueues/{id})
	GetaspecificCallQueue(ctx echo.Context, id string) error
	// Get a specific CallRecordingFile
	// (GET /callrecordingfiles/{id})
	GetaspecificCallRecordingFile(ctx echo.Context, id string) error
	// Get CallRecording items
	// (GET /callrecordings)
	GetCallRecordingitems(ctx echo.Context, params GetCallRecordingitemsParams) error
	// Delete a specific CallRecording
	// (DELETE /callrecordings/{id})
	DeleteaspecificCallRecording(ctx echo.Context, id string) error
	// Get a specific CallRecording
	// (GET /callrecordings/{id})
	GetaspecificCallRecording(ctx echo.Context, id string) error
	// Get CallRecordingStream items
	// (GET /callrecordingstreams)
	GetCallRecordingStreamitems(ctx echo.Context, params GetCallRecordingStreamitemsParams) error
	// Delete a specific CallRecordingStream
	// (DELETE /callrecordingstreams/{id})
	DeleteaspecificCallRecordingStream(ctx echo.Context, id string) error
	// Get a specific CallRecordingStream
	// (GET /callrecordingstreams/{id})
	GetaspecificCallRecordingStream(ctx echo.Context, id string) error
	// Get Call items
	// (GET /calls)
	GetCallitems(ctx echo.Context, params GetCallitemsParams) error
	// Get a specific Call
	// (GET /calls/{id})
	GetaspecificCall(ctx echo.Context, id string) error
	// Get Capability items
	// (GET /capabilities)
	GetCapabilityitems(ctx echo.Context, params GetCapabilityitemsParams) error
	// Get a specific Capability
	// (GET /capabilities/{id})
	GetaspecificCapability(ctx echo.Context, id string) error
	// Get CCMapEntry items
	// (GET /ccmapentries)
	GetCCMapEntryitems(ctx echo.Context, params GetCCMapEntryitemsParams) error
	// Delete a specific CCMapEntry
	// (DELETE /ccmapentries/{id})
	DeleteaspecificCCMapEntry(ctx echo.Context, id string) error
	// Get a specific CCMapEntry
	// (GET /ccmapentries/{id})
	GetaspecificCCMapEntry(ctx echo.Context, id string) error
	// Change a specific CCMapEntry
	// (PATCH /ccmapentries/{id})
	ChangeaspecificCCMapEntry(ctx echo.Context, id string) error
	// Replace/change a specific CCMapEntry
	// (PUT /ccmapentries/{id})
	ReplacechangeaspecificCCMapEntry(ctx echo.Context, id string) error
	// Get CFBNumberSet items
	// (GET /cfbnumbersets)
	GetCFBNumberSetitems(ctx echo.Context, params GetCFBNumberSetitemsParams) error
	// Create a new CFBNumberSet
	// (POST /cfbnumbersets)
	CreateanewCFBNumberSet(ctx echo.Context) error
	// Delete a specific CFBNumberSet
	// (DELETE /cfbnumbersets/{id})
	DeleteaspecificCFBNumberSet(ctx echo.Context, id string) error
	// Get a specific CFBNumberSet
	// (GET /cfbnumbersets/{id})
	GetaspecificCFBNumberSet(ctx echo.Context, id string) error
	// Change a specific CFBNumberSet
	// (PATCH /cfbnumbersets/{id})
	ChangeaspecificCFBNumberSet(ctx echo.Context, id string) error
	// Replace/change a specific CFBNumberSet
	// (PUT /cfbnumbersets/{id})
	ReplacechangeaspecificCFBNumberSet(ctx echo.Context, id string) error
	// Get CFDestinationSet items
	// (GET /cfdestinationsets)
	GetCFDestinationSetitems(ctx echo.Context, params GetCFDestinationSetitemsParams) error
	// Create a new CFDestinationSet
	// (POST /cfdestinationsets)
	CreateanewCFDestinationSet(ctx echo.Context) error
	// Delete a specific CFDestinationSet
	// (DELETE /cfdestinationsets/{id})
	DeleteaspecificCFDestinationSet(ctx echo.Context, id string) error
	// Get a specific CFDestinationSet
	// (GET /cfdestinationsets/{id})
	GetaspecificCFDestinationSet(ctx echo.Context, id string) error
	// Change a specific CFDestinationSet
	// (PATCH /cfdestinationsets/{id})
	ChangeaspecificCFDestinationSet(ctx echo.Context, id string) error
	// Replace/change a specific CFDestinationSet
	// (PUT /cfdestinationsets/{id})
	ReplacechangeaspecificCFDestinationSet(ctx echo.Context, id string) error
	// Get CFMapping items
	// (GET /cfmappings)
	GetCFMappingitems(ctx echo.Context, params GetCFMappingitemsParams) error
	// Get a specific CFMapping
	// (GET /cfmappings/{id})
	GetaspecificCFMapping(ctx echo.Context, id string) error
	// Change a specific CFMapping
	// (PATCH /cfmappings/{id})
	ChangeaspecificCFMapping(ctx echo.Context, id string) error
	// Replace/change a specific CFMapping
	// (PUT /cfmappings/{id})
	ReplacechangeaspecificCFMapping(ctx echo.Context, id string) error
	// Get CFSourceSet items
	// (GET /cfsourcesets)
	GetCFSourceSetitems(ctx echo.Context, params GetCFSourceSetitemsParams) error
	// Create a new CFSourceSet
	// (POST /cfsourcesets)
	CreateanewCFSourceSet(ctx echo.Context) error
	// Delete a specific CFSourceSet
	// (DELETE /cfsourcesets/{id})
	DeleteaspecificCFSourceSet(ctx echo.Context, id string) error
	// Get a specific CFSourceSet
	// (GET /cfsourcesets/{id})
	GetaspecificCFSourceSet(ctx echo.Context, id string) error
	// Change a specific CFSourceSet
	// (PATCH /cfsourcesets/{id})
	ChangeaspecificCFSourceSet(ctx echo.Context, id string) error
	// Replace/change a specific CFSourceSet
	// (PUT /cfsourcesets/{id})
	ReplacechangeaspecificCFSourceSet(ctx echo.Context, id string) error
	// Get CFTimeSet items
	// (GET /cftimesets)
	GetCFTimeSetitems(ctx echo.Context, params GetCFTimeSetitemsParams) error
	// Create a new CFTimeSet
	// (POST /cftimesets)
	CreateanewCFTimeSet(ctx echo.Context) error
	// Delete a specific CFTimeSet
	// (DELETE /cftimesets/{id})
	DeleteaspecificCFTimeSet(ctx echo.Context, id string) error
	// Get a specific CFTimeSet
	// (GET /cftimesets/{id})
	GetaspecificCFTimeSet(ctx echo.Context, id string) error
	// Change a specific CFTimeSet
	// (PATCH /cftimesets/{id})
	ChangeaspecificCFTimeSet(ctx echo.Context, id string) error
	// Replace/change a specific CFTimeSet
	// (PUT /cftimesets/{id})
	ReplacechangeaspecificCFTimeSet(ctx echo.Context, id string) error
	// Get Contract items
	// (GET /contracts)
	GetContractitems(ctx echo.Context, params GetContractitemsParams) error
	// Create a new Contract
	// (POST /contracts)
	CreateanewContract(ctx echo.Context) error
	// Get a specific Contract
	// (GET /contracts/{id})
	GetaspecificContract(ctx echo.Context, id string) error
	// Change a specific Contract
	// (PATCH /contracts/{id})
	ChangeaspecificContract(ctx echo.Context, id string) error
	// Replace/change a specific Contract
	// (PUT /contracts/{id})
	ReplacechangeaspecificContract(ctx echo.Context, id string) error
	// Get Conversation items
	// (GET /conversations)
	GetConversationitems(ctx echo.Context, params GetConversationitemsParams) error
	// Get a specific Conversation
	// (GET /conversations/{id})
	GetaspecificConversation(ctx echo.Context, id string) error
	// Get CustomerBalance items
	// (GET /customerbalances)
	GetCustomerBalanceitems(ctx echo.Context, params GetCustomerBalanceitemsParams) error
	// Get a specific CustomerBalance
	// (GET /customerbalances/{id})
	GetaspecificCustomerBalance(ctx echo.Context, id string) error
	// Change a specific CustomerBalance
	// (PATCH /customerbalances/{id})
	ChangeaspecificCustomerBalance(ctx echo.Context, id string) error
	// Replace/change a specific CustomerBalance
	// (PUT /customerbalances/{id})
	ReplacechangeaspecificCustomerBalance(ctx echo.Context, id string) error
	// Get CustomerContact items
	// (GET /customercontacts)
	GetCustomerContactitems(ctx echo.Context, params GetCustomerContactitemsParams) error
	// Create a new CustomerContact
	// (POST /customercontacts)
	CreateanewCustomerContact(ctx echo.Context) error
	// Delete a specific CustomerContact
	// (DELETE /customercontacts/{id})
	DeleteaspecificCustomerContact(ctx echo.Context, id string) error
	// Get a specific CustomerContact
	// (GET /customercontacts/{id})
	GetaspecificCustomerContact(ctx echo.Context, id string) error
	// Change a specific CustomerContact
	// (PATCH /customercontacts/{id})
	ChangeaspecificCustomerContact(ctx echo.Context, id string) error
	// Replace/change a specific CustomerContact
	// (PUT /customercontacts/{id})
	ReplacechangeaspecificCustomerContact(ctx echo.Context, id string) error
	// Get CustomerFraudEvent items
	// (GET /customerfraudevents)
	GetCustomerFraudEventitems(ctx echo.Context, params GetCustomerFraudEventitemsParams) error
	// Get a specific CustomerFraudEvent
	// (GET /customerfraudevents/{id})
	GetaspecificCustomerFraudEvent(ctx echo.Context, id string) error
	// Get CustomerFraudPreference items
	// (GET /customerfraudpreferences)
	GetCustomerFraudPreferenceitems(ctx echo.Context, params GetCustomerFraudPreferenceitemsParams) error
	// Get a specific CustomerFraudPreference
	// (GET /customerfraudpreferences/{id})
	GetaspecificCustomerFraudPreference(ctx echo.Context, id string) error
	// Change a specific CustomerFraudPreference
	// (PATCH /customerfraudpreferences/{id})
	ChangeaspecificCustomerFraudPreference(ctx echo.Context, id string) error
	// Replace/change a specific CustomerFraudPreference
	// (PUT /customerfraudpreferences/{id})
	ReplacechangeaspecificCustomerFraudPreference(ctx echo.Context, id string) error
	// Get CustomerLocation items
	// (GET /customerlocations)
	GetCustomerLocationitems(ctx echo.Context, params GetCustomerLocationitemsParams) error
	// Create a new CustomerLocation
	// (POST /customerlocations)
	CreateanewCustomerLocation(ctx echo.Context) error
	// Delete a specific CustomerLocation
	// (DELETE /customerlocations/{id})
	DeleteaspecificCustomerLocation(ctx echo.Context, id string) error
	// Get a specific CustomerLocation
	// (GET /customerlocations/{id})
	GetaspecificCustomerLocation(ctx echo.Context, id string) error
	// Change a specific CustomerLocation
	// (PATCH /customerlocations/{id})
	ChangeaspecificCustomerLocation(ctx echo.Context, id string) error
	// Replace/change a specific CustomerLocation
	// (PUT /customerlocations/{id})
	ReplacechangeaspecificCustomerLocation(ctx echo.Context, id string) error
	// Get CustomerPreference items
	// (GET /customerpreferences)
	GetCustomerPreferenceitems(ctx echo.Context, params GetCustomerPreferenceitemsParams) error
	// Get a specific CustomerPreference
	// (GET /customerpreferences/{id})
	GetaspecificCustomerPreference(ctx echo.Context, id string) error
	// Change a specific CustomerPreference
	// (PATCH /customerpreferences/{id})
	ChangeaspecificCustomerPreference(ctx echo.Context, id string) error
	// Replace/change a specific CustomerPreference
	// (PUT /customerpreferences/{id})
	ReplacechangeaspecificCustomerPreference(ctx echo.Context, id string) error
	// Get Customer items
	// (GET /customers)
	GetCustomeritems(ctx echo.Context, params GetCustomeritemsParams) error
	// Create a new Customer
	// (POST /customers)
	CreateanewCustomer(ctx echo.Context) error
	// Get a specific Customer
	// (GET /customers/{id})
	GetaspecificCustomer(ctx echo.Context, id string) error
	// Change a specific Customer
	// (PATCH /customers/{id})
	ChangeaspecificCustomer(ctx echo.Context, id string) error
	// Replace/change a specific Customer
	// (PUT /customers/{id})
	ReplacechangeaspecificCustomer(ctx echo.Context, id string) error
	// Get CustomerZoneCost items
	// (GET /customerzonecosts)
	GetCustomerZoneCostitems(ctx echo.Context, params GetCustomerZoneCostitemsParams) error
	// Get a specific CustomerZoneCost
	// (GET /customerzonecosts/{id})
	GetaspecificCustomerZoneCost(ctx echo.Context, id string) error
	// Get DomainPreference items
	// (GET /domainpreferences)
	GetDomainPreferenceitems(ctx echo.Context, params GetDomainPreferenceitemsParams) error
	// Get a specific DomainPreference
	// (GET /domainpreferences/{id})
	GetaspecificDomainPreference(ctx echo.Context, id string) error
	// Change a specific DomainPreference
	// (PATCH /domainpreferences/{id})
	ChangeaspecificDomainPreference(ctx echo.Context, id string) error
	// Replace/change a specific DomainPreference
	// (PUT /domainpreferences/{id})
	ReplacechangeaspecificDomainPreference(ctx echo.Context, id string) error
	// Get Domain items
	// (GET /domains)
	GetDomainitems(ctx echo.Context, params GetDomainitemsParams) error
	// Create a new Domain
	// (POST /domains)
	CreateanewDomain(ctx echo.Context) error
	// Delete a specific Domain
	// (DELETE /domains/{id})
	DeleteaspecificDomain(ctx echo.Context, id string) error
	// Get a specific Domain
	// (GET /domains/{id})
	GetaspecificDomain(ctx echo.Context, id string) error
	// Get EmailTemplate items
	// (GET /emailtemplates)
	GetEmailTemplateitems(ctx echo.Context, params GetEmailTemplateitemsParams) error
	// Create a new EmailTemplate
	// (POST /emailtemplates)
	CreateanewEmailTemplate(ctx echo.Context) error
	// Delete a specific EmailTemplate
	// (DELETE /emailtemplates/{id})
	DeleteaspecificEmailTemplate(ctx echo.Context, id string) error
	// Get a specific EmailTemplate
	// (GET /emailtemplates/{id})
	GetaspecificEmailTemplate(ctx echo.Context, id string) error
	// Change a specific EmailTemplate
	// (PATCH /emailtemplates/{id})
	ChangeaspecificEmailTemplate(ctx echo.Context, id string) error
	// Replace/change a specific EmailTemplate
	// (PUT /emailtemplates/{id})
	ReplacechangeaspecificEmailTemplate(ctx echo.Context, id string) error
	// Get EmergencyMappingContainer items
	// (GET /emergencymappingcontainers)
	GetEmergencyMappingContaineritems(ctx echo.Context, params GetEmergencyMappingContaineritemsParams) error
	// Create a new EmergencyMappingContainer
	// (POST /emergencymappingcontainers)
	CreateanewEmergencyMappingContainer(ctx echo.Context) error
	// Delete a specific EmergencyMappingContainer
	// (DELETE /emergencymappingcontainers/{id})
	DeleteaspecificEmergencyMappingContainer(ctx echo.Context, id string) error
	// Get a specific EmergencyMappingContainer
	// (GET /emergencymappingcontainers/{id})
	GetaspecificEmergencyMappingContainer(ctx echo.Context, id string) error
	// Change a specific EmergencyMappingContainer
	// (PATCH /emergencymappingcontainers/{id})
	ChangeaspecificEmergencyMappingContainer(ctx echo.Context, id string) error
	// Replace/change a specific EmergencyMappingContainer
	// (PUT /emergencymappingcontainers/{id})
	ReplacechangeaspecificEmergencyMappingContainer(ctx echo.Context, id string) error
	// Get EmergencyMapping items
	// (GET /emergencymappings)
	GetEmergencyMappingitems(ctx echo.Context, params GetEmergencyMappingitemsParams) error
	// Create a new EmergencyMapping
	// (POST /emergencymappings)
	CreateanewEmergencyMapping(ctx echo.Context) error
	// Delete a specific EmergencyMapping
	// (DELETE /emergencymappings/{id})
	DeleteaspecificEmergencyMapping(ctx echo.Context, id string) error
	// Get a specific EmergencyMapping
	// (GET /emergencymappings/{id})
	GetaspecificEmergencyMapping(ctx echo.Context, id string) error
	// Change a specific EmergencyMapping
	// (PATCH /emergencymappings/{id})
	ChangeaspecificEmergencyMapping(ctx echo.Context, id string) error
	// Replace/change a specific EmergencyMapping
	// (PUT /emergencymappings/{id})
	ReplacechangeaspecificEmergencyMapping(ctx echo.Context, id string) error
	// Get Event items
	// (GET /events)
	GetEventitems(ctx echo.Context, params GetEventitemsParams) error
	// Get a specific Event
	// (GET /events/{id})
	GetaspecificEvent(ctx echo.Context, id string) error
	// Get Fax items
	// (GET /faxes)
	GetFaxitems(ctx echo.Context, params GetFaxitemsParams) error
	// Create a new Fax
	// (POST /faxes)
	CreateanewFax(ctx echo.Context) error
	// Get a specific Fax
	// (GET /faxes/{id})
	GetaspecificFax(ctx echo.Context, id string) error
	// Get a specific FaxRecording
	// (GET /faxrecordings/{id})
	GetaspecificFaxRecording(ctx echo.Context, id string) error
	// Get FaxserverSetting items
	// (GET /faxserversettings)
	GetFaxserverSettingitems(ctx echo.Context, params GetFaxserverSettingitemsParams) error
	// Get a specific FaxserverSetting
	// (GET /faxserversettings/{id})
	GetaspecificFaxserverSetting(ctx echo.Context, id string) error
	// Change a specific FaxserverSetting
	// (PATCH /faxserversettings/{id})
	ChangeaspecificFaxserverSetting(ctx echo.Context, id string) error
	// Replace/change a specific FaxserverSetting
	// (PUT /faxserversettings/{id})
	ReplacechangeaspecificFaxserverSetting(ctx echo.Context, id string) error
	// Get Interception items
	// (GET /interceptions)
	GetInterceptionitems(ctx echo.Context, params GetInterceptionitemsParams) error
	// Create a new Interception
	// (POST /interceptions)
	CreateanewInterception(ctx echo.Context) error
	// Delete a specific Interception
	// (DELETE /interceptions/{id})
	DeleteaspecificInterception(ctx echo.Context, id string) error
	// Get a specific Interception
	// (GET /interceptions/{id})
	GetaspecificInterception(ctx echo.Context, id string) error
	// Change a specific Interception
	// (PATCH /interceptions/{id})
	ChangeaspecificInterception(ctx echo.Context, id string) error
	// Replace/change a specific Interception
	// (PUT /interceptions/{id})
	ReplacechangeaspecificInterception(ctx echo.Context, id string) error
	// Get Invoice items
	// (GET /invoices)
	GetInvoiceitems(ctx echo.Context, params GetInvoiceitemsParams) error
	// Create a new Invoice
	// (POST /invoices)
	CreateanewInvoice(ctx echo.Context) error
	// Delete a specific Invoice
	// (DELETE /invoices/{id})
	DeleteaspecificInvoice(ctx echo.Context, id string) error
	// Get a specific Invoice
	// (GET /invoices/{id})
	GetaspecificInvoice(ctx echo.Context, id string) error
	// Get InvoiceTemplate items
	// (GET /invoicetemplates)
	GetInvoiceTemplateitems(ctx echo.Context, params GetInvoiceTemplateitemsParams) error
	// Get a specific InvoiceTemplate
	// (GET /invoicetemplates/{id})
	GetaspecificInvoiceTemplate(ctx echo.Context, id string) error
	// Get LnpCarrier items
	// (GET /lnpcarriers)
	GetLnpCarrieritems(ctx echo.Context, params GetLnpCarrieritemsParams) error
	// Create a new LnpCarrier
	// (POST /lnpcarriers)
	CreateanewLnpCarrier(ctx echo.Context) error
	// Delete a specific LnpCarrier
	// (DELETE /lnpcarriers/{id})
	DeleteaspecificLnpCarrier(ctx echo.Context, id string) error
	// Get a specific LnpCarrier
	// (GET /lnpcarriers/{id})
	GetaspecificLnpCarrier(ctx echo.Context, id string) error
	// Change a specific LnpCarrier
	// (PATCH /lnpcarriers/{id})
	ChangeaspecificLnpCarrier(ctx echo.Context, id string) error
	// Replace/change a specific LnpCarrier
	// (PUT /lnpcarriers/{id})
	ReplacechangeaspecificLnpCarrier(ctx echo.Context, id string) error
	// Get LnpNumber items
	// (GET /lnpnumbers)
	GetLnpNumberitems(ctx echo.Context, params GetLnpNumberitemsParams) error
	// Create a new LnpNumber
	// (POST /lnpnumbers)
	CreateanewLnpNumber(ctx echo.Context) error
	// Delete a specific LnpNumber
	// (DELETE /lnpnumbers/{id})
	DeleteaspecificLnpNumber(ctx echo.Context, id string) error
	// Get a specific LnpNumber
	// (GET /lnpnumbers/{id})
	GetaspecificLnpNumber(ctx echo.Context, id string) error
	// Change a specific LnpNumber
	// (PATCH /lnpnumbers/{id})
	ChangeaspecificLnpNumber(ctx echo.Context, id string) error
	// Replace/change a specific LnpNumber
	// (PUT /lnpnumbers/{id})
	ReplacechangeaspecificLnpNumber(ctx echo.Context, id string) error
	// Get MailToFaxSetting items
	// (GET /mailtofaxsettings)
	GetMailToFaxSettingitems(ctx echo.Context, params GetMailToFaxSettingitemsParams) error
	// Get a specific MailToFaxSetting
	// (GET /mailtofaxsettings/{id})
	GetaspecificMailToFaxSetting(ctx echo.Context, id string) error
	// Change a specific MailToFaxSetting
	// (PATCH /mailtofaxsettings/{id})
	ChangeaspecificMailToFaxSetting(ctx echo.Context, id string) error
	// Replace/change a specific MailToFaxSetting
	// (PUT /mailtofaxsettings/{id})
	ReplacechangeaspecificMailToFaxSetting(ctx echo.Context, id string) error
	// Get MaliciousCall items
	// (GET /maliciouscalls)
	GetMaliciousCallitems(ctx echo.Context, params GetMaliciousCallitemsParams) error
	// Delete a specific MaliciousCall
	// (DELETE /maliciouscalls/{id})
	DeleteaspecificMaliciousCall(ctx echo.Context, id string) error
	// Get a specific MaliciousCall
	// (GET /maliciouscalls/{id})
	GetaspecificMaliciousCall(ctx echo.Context, id string) error
	// Get ManagerSecretary items
	// (GET /managersecretary)
	GetManagerSecretaryitems(ctx echo.Context, params GetManagerSecretaryitemsParams) error
	// Delete a specific ManagerSecretary
	// (DELETE /managersecretary/{id})
	DeleteaspecificManagerSecretary(ctx echo.Context, id string) error
	// Get a specific ManagerSecretary
	// (GET /managersecretary/{id})
	GetaspecificManagerSecretary(ctx echo.Context, id string) error
	// Replace/change a specific ManagerSecretary
	// (PUT /managersecretary/{id})
	ReplacechangeaspecificManagerSecretary(ctx echo.Context, id string) error
	// Get NcosLevel items
	// (GET /ncoslevels)
	GetNcosLevelitems(ctx echo.Context, params GetNcosLevelitemsParams) error
	// Create a new NcosLevel
	// (POST /ncoslevels)
	CreateanewNcosLevel(ctx echo.Context) error
	// Delete a specific NcosLevel
	// (DELETE /ncoslevels/{id})
	DeleteaspecificNcosLevel(ctx echo.Context, id string) error
	// Get a specific NcosLevel
	// (GET /ncoslevels/{id})
	GetaspecificNcosLevel(ctx echo.Context, id string) error
	// Change a specific NcosLevel
	// (PATCH /ncoslevels/{id})
	ChangeaspecificNcosLevel(ctx echo.Context, id string) error
	// Replace/change a specific NcosLevel
	// (PUT /ncoslevels/{id})
	ReplacechangeaspecificNcosLevel(ctx echo.Context, id string) error
	// Get NcosLnpCarrier items
	// (GET /ncoslnpcarriers)
	GetNcosLnpCarrieritems(ctx echo.Context, params GetNcosLnpCarrieritemsParams) error
	// Create a new NcosLnpCarrier
	// (POST /ncoslnpcarriers)
	CreateanewNcosLnpCarrier(ctx echo.Context) error
	// Delete a specific NcosLnpCarrier
	// (DELETE /ncoslnpcarriers/{id})
	DeleteaspecificNcosLnpCarrier(ctx echo.Context, id string) error
	// Get a specific NcosLnpCarrier
	// (GET /ncoslnpcarriers/{id})
	GetaspecificNcosLnpCarrier(ctx echo.Context, id string) error
	// Change a specific NcosLnpCarrier
	// (PATCH /ncoslnpcarriers/{id})
	ChangeaspecificNcosLnpCarrier(ctx echo.Context, id string) error
	// Replace/change a specific NcosLnpCarrier
	// (PUT /ncoslnpcarriers/{id})
	ReplacechangeaspecificNcosLnpCarrier(ctx echo.Context, id string) error
	// Get NcosPattern items
	// (GET /ncospatterns)
	GetNcosPatternitems(ctx echo.Context, params GetNcosPatternitemsParams) error
	// Create a new NcosPattern
	// (POST /ncospatterns)
	CreateanewNcosPattern(ctx echo.Context) error
	// Delete a specific NcosPattern
	// (DELETE /ncospatterns/{id})
	DeleteaspecificNcosPattern(ctx echo.Context, id string) error
	// Get a specific NcosPattern
	// (GET /ncospatterns/{id})
	GetaspecificNcosPattern(ctx echo.Context, id string) error
	// Change a specific NcosPattern
	// (PATCH /ncospatterns/{id})
	ChangeaspecificNcosPattern(ctx echo.Context, id string) error
	// Replace/change a specific NcosPattern
	// (PUT /ncospatterns/{id})
	ReplacechangeaspecificNcosPattern(ctx echo.Context, id string) error
	// Get Number items
	// (GET /numbers)
	GetNumberitems(ctx echo.Context, params GetNumberitemsParams) error
	// Get a specific Number
	// (GET /numbers/{id})
	GetaspecificNumber(ctx echo.Context, id string) error
	// Change a specific Number
	// (PATCH /numbers/{id})
	ChangeaspecificNumber(ctx echo.Context, id string) error
	// Replace/change a specific Number
	// (PUT /numbers/{id})
	ReplacechangeaspecificNumber(ctx echo.Context, id string) error
	// Create a new PartyCallControl
	// (POST /partycallcontrols)
	CreateanewPartyCallControl(ctx echo.Context) error
	// Get a specific PbxDeviceConfigFile
	// (GET /pbxdeviceconfigfiles/{id})
	GetaspecificPbxDeviceConfigFile(ctx echo.Context, id string) error
	// Get PbxDeviceConfig items
	// (GET /pbxdeviceconfigs)
	GetPbxDeviceConfigitems(ctx echo.Context, params GetPbxDeviceConfigitemsParams) error
	// Create a new PbxDeviceConfig
	// (POST /pbxdeviceconfigs)
	CreateanewPbxDeviceConfig(ctx echo.Context) error
	// Get a specific PbxDeviceConfig
	// (GET /pbxdeviceconfigs/{id})
	GetaspecificPbxDeviceConfig(ctx echo.Context, id string) error
	// Replace/change a specific PbxDeviceConfig
	// (PUT /pbxdeviceconfigs/{id})
	ReplacechangeaspecificPbxDeviceConfig(ctx echo.Context, id string) error
	// Get a specific PbxDeviceFirmwareBinary
	// (GET /pbxdevicefirmwarebinaries/{id})
	GetaspecificPbxDeviceFirmwareBinary(ctx echo.Context, id string) error
	// Get PbxDeviceFirmware items
	// (GET /pbxdevicefirmwares)
	GetPbxDeviceFirmwareitems(ctx echo.Context, params GetPbxDeviceFirmwareitemsParams) error
	// Create a new PbxDeviceFirmware
	// (POST /pbxdevicefirmwares)
	CreateanewPbxDeviceFirmware(ctx echo.Context) error
	// Get a specific PbxDeviceFirmware
	// (GET /pbxdevicefirmwares/{id})
	GetaspecificPbxDeviceFirmware(ctx echo.Context, id string) error
	// Replace/change a specific PbxDeviceFirmware
	// (PUT /pbxdevicefirmwares/{id})
	ReplacechangeaspecificPbxDeviceFirmware(ctx echo.Context, id string) error
	// Get a specific PbxDeviceModelImage
	// (GET /pbxdevicemodelimages/{id})
	GetaspecificPbxDeviceModelImage(ctx echo.Context, id string) error
	// Get PbxDeviceModel items
	// (GET /pbxdevicemodels)
	GetPbxDeviceModelitems(ctx echo.Context, params GetPbxDeviceModelitemsParams) error
	// Create a new PbxDeviceModel
	// (POST /pbxdevicemodels)
	CreateanewPbxDeviceModel(ctx echo.Context) error
	// Get a specific PbxDeviceModel
	// (GET /pbxdevicemodels/{id})
	GetaspecificPbxDeviceModel(ctx echo.Context, id string) error
	// Change a specific PbxDeviceModel
	// (PATCH /pbxdevicemodels/{id})
	ChangeaspecificPbxDeviceModel(ctx echo.Context, id string) error
	// Replace/change a specific PbxDeviceModel
	// (PUT /pbxdevicemodels/{id})
	ReplacechangeaspecificPbxDeviceModel(ctx echo.Context, id string) error
	// Get PbxDevicePreference items
	// (GET /pbxdevicepreferences)
	GetPbxDevicePreferenceitems(ctx echo.Context, params GetPbxDevicePreferenceitemsParams) error
	// Get a specific PbxDevicePreference
	// (GET /pbxdevicepreferences/{id})
	GetaspecificPbxDevicePreference(ctx echo.Context, id string) error
	// Change a specific PbxDevicePreference
	// (PATCH /pbxdevicepreferences/{id})
	ChangeaspecificPbxDevicePreference(ctx echo.Context, id string) error
	// Replace/change a specific PbxDevicePreference
	// (PUT /pbxdevicepreferences/{id})
	ReplacechangeaspecificPbxDevicePreference(ctx echo.Context, id string) error
	// Get PbxDeviceProfilePreference items
	// (GET /pbxdeviceprofilepreferences)
	GetPbxDeviceProfilePreferenceitems(ctx echo.Context, params GetPbxDeviceProfilePreferenceitemsParams) error
	// Get a specific PbxDeviceProfilePreference
	// (GET /pbxdeviceprofilepreferences/{id})
	GetaspecificPbxDeviceProfilePreference(ctx echo.Context, id string) error
	// Change a specific PbxDeviceProfilePreference
	// (PATCH /pbxdeviceprofilepreferences/{id})
	ChangeaspecificPbxDeviceProfilePreference(ctx echo.Context, id string) error
	// Replace/change a specific PbxDeviceProfilePreference
	// (PUT /pbxdeviceprofilepreferences/{id})
	ReplacechangeaspecificPbxDeviceProfilePreference(ctx echo.Context, id string) error
	// Get PbxDeviceProfile items
	// (GET /pbxdeviceprofiles)
	GetPbxDeviceProfileitems(ctx echo.Context, params GetPbxDeviceProfileitemsParams) error
	// Create a new PbxDeviceProfile
	// (POST /pbxdeviceprofiles)
	CreateanewPbxDeviceProfile(ctx echo.Context) error
	// Get a specific PbxDeviceProfile
	// (GET /pbxdeviceprofiles/{id})
	GetaspecificPbxDeviceProfile(ctx echo.Context, id string) error
	// Change a specific PbxDeviceProfile
	// (PATCH /pbxdeviceprofiles/{id})
	ChangeaspecificPbxDeviceProfile(ctx echo.Context, id string) error
	// Replace/change a specific PbxDeviceProfile
	// (PUT /pbxdeviceprofiles/{id})
	ReplacechangeaspecificPbxDeviceProfile(ctx echo.Context, id string) error
	// Get PbxDevice items
	// (GET /pbxdevices)
	GetPbxDeviceitems(ctx echo.Context, params GetPbxDeviceitemsParams) error
	// Create a new PbxDevice
	// (POST /pbxdevices)
	CreateanewPbxDevice(ctx echo.Context) error
	// Delete a specific PbxDevice
	// (DELETE /pbxdevices/{id})
	DeleteaspecificPbxDevice(ctx echo.Context, id string) error
	// Get a specific PbxDevice
	// (GET /pbxdevices/{id})
	GetaspecificPbxDevice(ctx echo.Context, id string) error
	// Change a specific PbxDevice
	// (PATCH /pbxdevices/{id})
	ChangeaspecificPbxDevice(ctx echo.Context, id string) error
	// Replace/change a specific PbxDevice
	// (PUT /pbxdevices/{id})
	ReplacechangeaspecificPbxDevice(ctx echo.Context, id string) error
	// Get PbxFieldDevicePreference items
	// (GET /pbxfielddevicepreferences)
	GetPbxFieldDevicePreferenceitems(ctx echo.Context, params GetPbxFieldDevicePreferenceitemsParams) error
	// Get a specific PbxFieldDevicePreference
	// (GET /pbxfielddevicepreferences/{id})
	GetaspecificPbxFieldDevicePreference(ctx echo.Context, id string) error
	// Change a specific PbxFieldDevicePreference
	// (PATCH /pbxfielddevicepreferences/{id})
	ChangeaspecificPbxFieldDevicePreference(ctx echo.Context, id string) error
	// Replace/change a specific PbxFieldDevicePreference
	// (PUT /pbxfielddevicepreferences/{id})
	ReplacechangeaspecificPbxFieldDevicePreference(ctx echo.Context, id string) error
	// Get PeeringGroup items
	// (GET /peeringgroups)
	GetPeeringGroupitems(ctx echo.Context, params GetPeeringGroupitemsParams) error
	// Create a new PeeringGroup
	// (POST /peeringgroups)
	CreateanewPeeringGroup(ctx echo.Context) error
	// Delete a specific PeeringGroup
	// (DELETE /peeringgroups/{id})
	DeleteaspecificPeeringGroup(ctx echo.Context, id string) error
	// Get a specific PeeringGroup
	// (GET /peeringgroups/{id})
	GetaspecificPeeringGroup(ctx echo.Context, id string) error
	// Change a specific PeeringGroup
	// (PATCH /peeringgroups/{id})
	ChangeaspecificPeeringGroup(ctx echo.Context, id string) error
	// Replace/change a specific PeeringGroup
	// (PUT /peeringgroups/{id})
	ReplacechangeaspecificPeeringGroup(ctx echo.Context, id string) error
	// Get PeeringInboundRule items
	// (GET /peeringinboundrules)
	GetPeeringInboundRuleitems(ctx echo.Context, params GetPeeringInboundRuleitemsParams) error
	// Create a new PeeringInboundRule
	// (POST /peeringinboundrules)
	CreateanewPeeringInboundRule(ctx echo.Context) error
	// Delete a specific PeeringInboundRule
	// (DELETE /peeringinboundrules/{id})
	DeleteaspecificPeeringInboundRule(ctx echo.Context, id string) error
	// Get a specific PeeringInboundRule
	// (GET /peeringinboundrules/{id})
	GetaspecificPeeringInboundRule(ctx echo.Context, id string) error
	// Change a specific PeeringInboundRule
	// (PATCH /peeringinboundrules/{id})
	ChangeaspecificPeeringInboundRule(ctx echo.Context, id string) error
	// Replace/change a specific PeeringInboundRule
	// (PUT /peeringinboundrules/{id})
	ReplacechangeaspecificPeeringInboundRule(ctx echo.Context, id string) error
	// Get PeeringRule items
	// (GET /peeringrules)
	GetPeeringRuleitems(ctx echo.Context, params GetPeeringRuleitemsParams) error
	// Create a new PeeringRule
	// (POST /peeringrules)
	CreateanewPeeringRule(ctx echo.Context) error
	// Delete a specific PeeringRule
	// (DELETE /peeringrules/{id})
	DeleteaspecificPeeringRule(ctx echo.Context, id string) error
	// Get a specific PeeringRule
	// (GET /peeringrules/{id})
	GetaspecificPeeringRule(ctx echo.Context, id string) error
	// Change a specific PeeringRule
	// (PATCH /peeringrules/{id})
	ChangeaspecificPeeringRule(ctx echo.Context, id string) error
	// Replace/change a specific PeeringRule
	// (PUT /peeringrules/{id})
	ReplacechangeaspecificPeeringRule(ctx echo.Context, id string) error
	// Get PeeringServerPreference items
	// (GET /peeringserverpreferences)
	GetPeeringServerPreferenceitems(ctx echo.Context, params GetPeeringServerPreferenceitemsParams) error
	// Get a specific PeeringServerPreference
	// (GET /peeringserverpreferences/{id})
	GetaspecificPeeringServerPreference(ctx echo.Context, id string) error
	// Change a specific PeeringServerPreference
	// (PATCH /peeringserverpreferences/{id})
	ChangeaspecificPeeringServerPreference(ctx echo.Context, id string) error
	// Replace/change a specific PeeringServerPreference
	// (PUT /peeringserverpreferences/{id})
	ReplacechangeaspecificPeeringServerPreference(ctx echo.Context, id string) error
	// Get PeeringServer items
	// (GET /peeringservers)
	GetPeeringServeritems(ctx echo.Context, params GetPeeringServeritemsParams) error
	// Create a new PeeringServer
	// (POST /peeringservers)
	CreateanewPeeringServer(ctx echo.Context) error
	// Delete a specific PeeringServer
	// (DELETE /peeringservers/{id})
	DeleteaspecificPeeringServer(ctx echo.Context, id string) error
	// Get a specific PeeringServer
	// (GET /peeringservers/{id})
	GetaspecificPeeringServer(ctx echo.Context, id string) error
	// Change a specific PeeringServer
	// (PATCH /peeringservers/{id})
	ChangeaspecificPeeringServer(ctx echo.Context, id string) error
	// Replace/change a specific PeeringServer
	// (PUT /peeringservers/{id})
	ReplacechangeaspecificPeeringServer(ctx echo.Context, id string) error
	// Get PhonebookEntry items
	// (GET /phonebookentries)
	GetPhonebookEntryitems(ctx echo.Context, params GetPhonebookEntryitemsParams) error
	// Create a new PhonebookEntry
	// (POST /phonebookentries)
	CreateanewPhonebookEntry(ctx echo.Context) error
	// Delete a specific PhonebookEntry
	// (DELETE /phonebookentries/{id})
	DeleteaspecificPhonebookEntry(ctx echo.Context, id string) error
	// Get a specific PhonebookEntry
	// (GET /phonebookentries/{id})
	GetaspecificPhonebookEntry(ctx echo.Context, id string) error
	// Change a specific PhonebookEntry
	// (PATCH /phonebookentries/{id})
	ChangeaspecificPhonebookEntry(ctx echo.Context, id string) error
	// Replace/change a specific PhonebookEntry
	// (PUT /phonebookentries/{id})
	ReplacechangeaspecificPhonebookEntry(ctx echo.Context, id string) error
	// Get PreferencesMetaEntry items
	// (GET /preferencesmetaentries)
	GetPreferencesMetaEntryitems(ctx echo.Context, params GetPreferencesMetaEntryitemsParams) error
	// Create a new PreferencesMetaEntry
	// (POST /preferencesmetaentries)
	CreateanewPreferencesMetaEntry(ctx echo.Context) error
	// Delete a specific PreferencesMetaEntry
	// (DELETE /preferencesmetaentries/{id})
	DeleteaspecificPreferencesMetaEntry(ctx echo.Context, id string) error
	// Get a specific PreferencesMetaEntry
	// (GET /preferencesmetaentries/{id})
	GetaspecificPreferencesMetaEntry(ctx echo.Context, id string) error
	// Change a specific PreferencesMetaEntry
	// (PATCH /preferencesmetaentries/{id})
	ChangeaspecificPreferencesMetaEntry(ctx echo.Context, id string) error
	// Replace/change a specific PreferencesMetaEntry
	// (PUT /preferencesmetaentries/{id})
	ReplacechangeaspecificPreferencesMetaEntry(ctx echo.Context, id string) error
	// Get ProfilePackage items
	// (GET /profilepackages)
	GetProfilePackageitems(ctx echo.Context, params GetProfilePackageitemsParams) error
	// Create a new ProfilePackage
	// (POST /profilepackages)
	CreateanewProfilePackage(ctx echo.Context) error
	// Delete a specific ProfilePackage
	// (DELETE /profilepackages/{id})
	DeleteaspecificProfilePackage(ctx echo.Context, id string) error
	// Get a specific ProfilePackage
	// (GET /profilepackages/{id})
	GetaspecificProfilePackage(ctx echo.Context, id string) error
	// Change a specific ProfilePackage
	// (PATCH /profilepackages/{id})
	ChangeaspecificProfilePackage(ctx echo.Context, id string) error
	// Replace/change a specific ProfilePackage
	// (PUT /profilepackages/{id})
	ReplacechangeaspecificProfilePackage(ctx echo.Context, id string) error
	// Get ProfilePreference items
	// (GET /profilepreferences)
	GetProfilePreferenceitems(ctx echo.Context, params GetProfilePreferenceitemsParams) error
	// Get a specific ProfilePreference
	// (GET /profilepreferences/{id})
	GetaspecificProfilePreference(ctx echo.Context, id string) error
	// Change a specific ProfilePreference
	// (PATCH /profilepreferences/{id})
	ChangeaspecificProfilePreference(ctx echo.Context, id string) error
	// Replace/change a specific ProfilePreference
	// (PUT /profilepreferences/{id})
	ReplacechangeaspecificProfilePreference(ctx echo.Context, id string) error
	// Get Reminder items
	// (GET /reminders)
	GetReminderitems(ctx echo.Context, params GetReminderitemsParams) error
	// Create a new Reminder
	// (POST /reminders)
	CreateanewReminder(ctx echo.Context) error
	// Delete a specific Reminder
	// (DELETE /reminders/{id})
	DeleteaspecificReminder(ctx echo.Context, id string) error
	// Get a specific Reminder
	// (GET /reminders/{id})
	GetaspecificReminder(ctx echo.Context, id string) error
	// Change a specific Reminder
	// (PATCH /reminders/{id})
	ChangeaspecificReminder(ctx echo.Context, id string) error
	// Replace/change a specific Reminder
	// (PUT /reminders/{id})
	ReplacechangeaspecificReminder(ctx echo.Context, id string) error
	// Get Reseller items
	// (GET /resellers)
	GetReselleritems(ctx echo.Context, params GetReselleritemsParams) error
	// Create a new Reseller
	// (POST /resellers)
	CreateanewReseller(ctx echo.Context) error
	// Get a specific Reseller
	// (GET /resellers/{id})
	GetaspecificReseller(ctx echo.Context, id string) error
	// Change a specific Reseller
	// (PATCH /resellers/{id})
	ChangeaspecificReseller(ctx echo.Context, id string) error
	// Replace/change a specific Reseller
	// (PUT /resellers/{id})
	ReplacechangeaspecificReseller(ctx echo.Context, id string) error
	// Get RewriteRule items
	// (GET /rewriterules)
	GetRewriteRuleitems(ctx echo.Context, params GetRewriteRuleitemsParams) error
	// Create a new RewriteRule
	// (POST /rewriterules)
	CreateanewRewriteRule(ctx echo.Context) error
	// Delete a specific RewriteRule
	// (DELETE /rewriterules/{id})
	DeleteaspecificRewriteRule(ctx echo.Context, id string) error
	// Get a specific RewriteRule
	// (GET /rewriterules/{id})
	GetaspecificRewriteRule(ctx echo.Context, id string) error
	// Change a specific RewriteRule
	// (PATCH /rewriterules/{id})
	ChangeaspecificRewriteRule(ctx echo.Context, id string) error
	// Replace/change a specific RewriteRule
	// (PUT /rewriterules/{id})
	ReplacechangeaspecificRewriteRule(ctx echo.Context, id string) error
	// Get RewriteRuleSet items
	// (GET /rewriterulesets)
	GetRewriteRuleSetitems(ctx echo.Context, params GetRewriteRuleSetitemsParams) error
	// Create a new RewriteRuleSet
	// (POST /rewriterulesets)
	CreateanewRewriteRuleSet(ctx echo.Context) error
	// Delete a specific RewriteRuleSet
	// (DELETE /rewriterulesets/{id})
	DeleteaspecificRewriteRuleSet(ctx echo.Context, id string) error
	// Get a specific RewriteRuleSet
	// (GET /rewriterulesets/{id})
	GetaspecificRewriteRuleSet(ctx echo.Context, id string) error
	// Change a specific RewriteRuleSet
	// (PATCH /rewriterulesets/{id})
	ChangeaspecificRewriteRuleSet(ctx echo.Context, id string) error
	// Replace/change a specific RewriteRuleSet
	// (PUT /rewriterulesets/{id})
	ReplacechangeaspecificRewriteRuleSet(ctx echo.Context, id string) error
	// Get RtcApp items
	// (GET /rtcapps)
	GetRtcAppitems(ctx echo.Context, params GetRtcAppitemsParams) error
	// Get a specific RtcApp
	// (GET /rtcapps/{id})
	GetaspecificRtcApp(ctx echo.Context, id string) error
	// Change a specific RtcApp
	// (PATCH /rtcapps/{id})
	ChangeaspecificRtcApp(ctx echo.Context, id string) error
	// Replace/change a specific RtcApp
	// (PUT /rtcapps/{id})
	ReplacechangeaspecificRtcApp(ctx echo.Context, id string) error
	// Get RtcNetwork items
	// (GET /rtcnetworks)
	GetRtcNetworkitems(ctx echo.Context, params GetRtcNetworkitemsParams) error
	// Get a specific RtcNetwork
	// (GET /rtcnetworks/{id})
	GetaspecificRtcNetwork(ctx echo.Context, id string) error
	// Change a specific RtcNetwork
	// (PATCH /rtcnetworks/{id})
	ChangeaspecificRtcNetwork(ctx echo.Context, id string) error
	// Replace/change a specific RtcNetwork
	// (PUT /rtcnetworks/{id})
	ReplacechangeaspecificRtcNetwork(ctx echo.Context, id string) error
	// Get RtcSession items
	// (GET /rtcsessions)
	GetRtcSessionitems(ctx echo.Context, params GetRtcSessionitemsParams) error
	// Create a new RtcSession
	// (POST /rtcsessions)
	CreateanewRtcSession(ctx echo.Context) error
	// Get a specific RtcSession
	// (GET /rtcsessions/{id})
	GetaspecificRtcSession(ctx echo.Context, id string) error
	// Get SIPCapture items
	// (GET /sipcaptures)
	GetSIPCaptureitems(ctx echo.Context, params GetSIPCaptureitemsParams) error
	// Get a specific SIPCapture
	// (GET /sipcaptures/{id})
	GetaspecificSIPCapture(ctx echo.Context, id string) error
	// Get SMS items
	// (GET /sms)
	GetSMSitems(ctx echo.Context, params GetSMSitemsParams) error
	// Create a new SMS
	// (POST /sms)
	CreateanewSMS(ctx echo.Context) error
	// Get a specific SMS
	// (GET /sms/{id})
	GetaspecificSMS(ctx echo.Context, id string) error
	// Get a specific SoundFileRecording
	// (GET /soundfilerecordings/{id})
	GetaspecificSoundFileRecording(ctx echo.Context, id string) error
	// Get SoundFile items
	// (GET /soundfiles)
	GetSoundFileitems(ctx echo.Context, params GetSoundFileitemsParams) error
	// Create a new SoundFile
	// (POST /soundfiles)
	CreateanewSoundFile(ctx echo.Context) error
	// Delete a specific SoundFile
	// (DELETE /soundfiles/{id})
	DeleteaspecificSoundFile(ctx echo.Context, id string) error
	// Get a specific SoundFile
	// (GET /soundfiles/{id})
	GetaspecificSoundFile(ctx echo.Context, id string) error
	// Replace/change a specific SoundFile
	// (PUT /soundfiles/{id})
	ReplacechangeaspecificSoundFile(ctx echo.Context, id string) error
	// Get SoundGroup items
	// (GET /soundgroups)
	GetSoundGroupitems(ctx echo.Context, params GetSoundGroupitemsParams) error
	// Get a specific SoundGroup
	// (GET /soundgroups/{id})
	GetaspecificSoundGroup(ctx echo.Context, id string) error
	// Get SoundHandle items
	// (GET /soundhandles)
	GetSoundHandleitems(ctx echo.Context, params GetSoundHandleitemsParams) error
	// Get a specific SoundHandle
	// (GET /soundhandles/{id})
	GetaspecificSoundHandle(ctx echo.Context, id string) error
	// Get SoundSet items
	// (GET /soundsets)
	GetSoundSetitems(ctx echo.Context, params GetSoundSetitemsParams) error
	// Create a new SoundSet
	// (POST /soundsets)
	CreateanewSoundSet(ctx echo.Context) error
	// Delete a specific SoundSet
	// (DELETE /soundsets/{id})
	DeleteaspecificSoundSet(ctx echo.Context, id string) error
	// Get a specific SoundSet
	// (GET /soundsets/{id})
	GetaspecificSoundSet(ctx echo.Context, id string) error
	// Change a specific SoundSet
	// (PATCH /soundsets/{id})
	ChangeaspecificSoundSet(ctx echo.Context, id string) error
	// Replace/change a specific SoundSet
	// (PUT /soundsets/{id})
	ReplacechangeaspecificSoundSet(ctx echo.Context, id string) error
	// Get SpeedDial items
	// (GET /speeddials)
	GetSpeedDialitems(ctx echo.Context, params GetSpeedDialitemsParams) error
	// Get a specific SpeedDial
	// (GET /speeddials/{id})
	GetaspecificSpeedDial(ctx echo.Context, id string) error
	// Change a specific SpeedDial
	// (PATCH /speeddials/{id})
	ChangeaspecificSpeedDial(ctx echo.Context, id string) error
	// Replace/change a specific SpeedDial
	// (PUT /speeddials/{id})
	ReplacechangeaspecificSpeedDial(ctx echo.Context, id string) error
	// Get SubscriberPreference items
	// (GET /subscriberpreferences)
	GetSubscriberPreferenceitems(ctx echo.Context, params GetSubscriberPreferenceitemsParams) error
	// Get a specific SubscriberPreference
	// (GET /subscriberpreferences/{id})
	GetaspecificSubscriberPreference(ctx echo.Context, id string) error
	// Change a specific SubscriberPreference
	// (PATCH /subscriberpreferences/{id})
	ChangeaspecificSubscriberPreference(ctx echo.Context, id string) error
	// Replace/change a specific SubscriberPreference
	// (PUT /subscriberpreferences/{id})
	ReplacechangeaspecificSubscriberPreference(ctx echo.Context, id string) error
	// Get SubscriberProfile items
	// (GET /subscriberprofiles)
	GetSubscriberProfileitems(ctx echo.Context, params GetSubscriberProfileitemsParams) error
	// Create a new SubscriberProfile
	// (POST /subscriberprofiles)
	CreateanewSubscriberProfile(ctx echo.Context) error
	// Delete a specific SubscriberProfile
	// (DELETE /subscriberprofiles/{id})
	DeleteaspecificSubscriberProfile(ctx echo.Context, id string) error
	// Get a specific SubscriberProfile
	// (GET /subscriberprofiles/{id})
	GetaspecificSubscriberProfile(ctx echo.Context, id string) error
	// Change a specific SubscriberProfile
	// (PATCH /subscriberprofiles/{id})
	ChangeaspecificSubscriberProfile(ctx echo.Context, id string) error
	// Replace/change a specific SubscriberProfile
	// (PUT /subscriberprofiles/{id})
	ReplacechangeaspecificSubscriberProfile(ctx echo.Context, id string) error
	// Get SubscriberProfileSet items
	// (GET /subscriberprofilesets)
	GetSubscriberProfileSetitems(ctx echo.Context, params GetSubscriberProfileSetitemsParams) error
	// Create a new SubscriberProfileSet
	// (POST /subscriberprofilesets)
	CreateanewSubscriberProfileSet(ctx echo.Context) error
	// Delete a specific SubscriberProfileSet
	// (DELETE /subscriberprofilesets/{id})
	DeleteaspecificSubscriberProfileSet(ctx echo.Context, id string) error
	// Get a specific SubscriberProfileSet
	// (GET /subscriberprofilesets/{id})
	GetaspecificSubscriberProfileSet(ctx echo.Context, id string) error
	// Change a specific SubscriberProfileSet
	// (PATCH /subscriberprofilesets/{id})
	ChangeaspecificSubscriberProfileSet(ctx echo.Context, id string) error
	// Replace/change a specific SubscriberProfileSet
	// (PUT /subscriberprofilesets/{id})
	ReplacechangeaspecificSubscriberProfileSet(ctx echo.Context, id string) error
	// Get SubscriberRegistration items
	// (GET /subscriberregistrations)
	GetSubscriberRegistrationitems(ctx echo.Context, params GetSubscriberRegistrationitemsParams) error
	// Create a new SubscriberRegistration
	// (POST /subscriberregistrations)
	CreateanewSubscriberRegistration(ctx echo.Context) error
	// Delete a specific SubscriberRegistration
	// (DELETE /subscriberregistrations/{id})
	DeleteaspecificSubscriberRegistration(ctx echo.Context, id string) error
	// Get a specific SubscriberRegistration
	// (GET /subscriberregistrations/{id})
	GetaspecificSubscriberRegistration(ctx echo.Context, id string) error
	// Change a specific SubscriberRegistration
	// (PATCH /subscriberregistrations/{id})
	ChangeaspecificSubscriberRegistration(ctx echo.Context, id string) error
	// Replace/change a specific SubscriberRegistration
	// (PUT /subscriberregistrations/{id})
	ReplacechangeaspecificSubscriberRegistration(ctx echo.Context, id string) error
	// Get Subscriber items
	// (GET /subscribers)
	GetSubscriberitems(ctx echo.Context, params GetSubscriberitemsParams) error
	// Create a new Subscriber
	// (POST /subscribers)
	CreateanewSubscriber(ctx echo.Context) error
	// Delete a specific Subscriber
	// (DELETE /subscribers/{id})
	DeleteaspecificSubscriber(ctx echo.Context, id string) error
	// Get a specific Subscriber
	// (GET /subscribers/{id})
	GetaspecificSubscriber(ctx echo.Context, id string) error
	// Change a specific Subscriber
	// (PATCH /subscribers/{id})
	ChangeaspecificSubscriber(ctx echo.Context, id string) error
	// Replace/change a specific Subscriber
	// (PUT /subscribers/{id})
	ReplacechangeaspecificSubscriber(ctx echo.Context, id string) error
	// Get SystemContact items
	// (GET /systemcontacts)
	GetSystemContactitems(ctx echo.Context, params GetSystemContactitemsParams) error
	// Create a new SystemContact
	// (POST /systemcontacts)
	CreateanewSystemContact(ctx echo.Context) error
	// Delete a specific SystemContact
	// (DELETE /systemcontacts/{id})
	DeleteaspecificSystemContact(ctx echo.Context, id string) error
	// Get a specific SystemContact
	// (GET /systemcontacts/{id})
	GetaspecificSystemContact(ctx echo.Context, id string) error
	// Change a specific SystemContact
	// (PATCH /systemcontacts/{id})
	ChangeaspecificSystemContact(ctx echo.Context, id string) error
	// Replace/change a specific SystemContact
	// (PUT /systemcontacts/{id})
	ReplacechangeaspecificSystemContact(ctx echo.Context, id string) error
	// Create a new TopupCash
	// (POST /topupcash)
	CreateanewTopupCash(ctx echo.Context) error
	// Get TopupLog items
	// (GET /topuplogs)
	GetTopupLogitems(ctx echo.Context, params GetTopupLogitemsParams) error
	// Get a specific TopupLog
	// (GET /topuplogs/{id})
	GetaspecificTopupLog(ctx echo.Context, id string) error
	// Create a new TopupVoucher
	// (POST /topupvouchers)
	CreateanewTopupVoucher(ctx echo.Context) error
	// Get TrustedSource items
	// (GET /trustedsources)
	GetTrustedSourceitems(ctx echo.Context, params GetTrustedSourceitemsParams) error
	// Create a new TrustedSource
	// (POST /trustedsources)
	CreateanewTrustedSource(ctx echo.Context) error
	// Delete a specific TrustedSource
	// (DELETE /trustedsources/{id})
	DeleteaspecificTrustedSource(ctx echo.Context, id string) error
	// Get a specific TrustedSource
	// (GET /trustedsources/{id})
	GetaspecificTrustedSource(ctx echo.Context, id string) error
	// Change a specific TrustedSource
	// (PATCH /trustedsources/{id})
	ChangeaspecificTrustedSource(ctx echo.Context, id string) error
	// Replace/change a specific TrustedSource
	// (PUT /trustedsources/{id})
	ReplacechangeaspecificTrustedSource(ctx echo.Context, id string) error
	// Get UpnRewriteSet items
	// (GET /upnrewritesets)
	GetUpnRewriteSetitems(ctx echo.Context, params GetUpnRewriteSetitemsParams) error
	// Create a new UpnRewriteSet
	// (POST /upnrewritesets)
	CreateanewUpnRewriteSet(ctx echo.Context) error
	// Delete a specific UpnRewriteSet
	// (DELETE /upnrewritesets/{id})
	DeleteaspecificUpnRewriteSet(ctx echo.Context, id string) error
	// Get a specific UpnRewriteSet
	// (GET /upnrewritesets/{id})
	GetaspecificUpnRewriteSet(ctx echo.Context, id string) error
	// Change a specific UpnRewriteSet
	// (PATCH /upnrewritesets/{id})
	ChangeaspecificUpnRewriteSet(ctx echo.Context, id string) error
	// Replace/change a specific UpnRewriteSet
	// (PUT /upnrewritesets/{id})
	ReplacechangeaspecificUpnRewriteSet(ctx echo.Context, id string) error
	// Get VoicemailGreeting items
	// (GET /voicemailgreetings)
	GetVoicemailGreetingitems(ctx echo.Context, params GetVoicemailGreetingitemsParams) error
	// Create a new VoicemailGreeting
	// (POST /voicemailgreetings)
	CreateanewVoicemailGreeting(ctx echo.Context) error
	// Delete a specific VoicemailGreeting
	// (DELETE /voicemailgreetings/{id})
	DeleteaspecificVoicemailGreeting(ctx echo.Context, id string) error
	// Get a specific VoicemailGreeting
	// (GET /voicemailgreetings/{id})
	GetaspecificVoicemailGreeting(ctx echo.Context, id string) error
	// Replace/change a specific VoicemailGreeting
	// (PUT /voicemailgreetings/{id})
	ReplacechangeaspecificVoicemailGreeting(ctx echo.Context, id string) error
	// Get a specific VoicemailRecording
	// (GET /voicemailrecordings/{id})
	GetaspecificVoicemailRecording(ctx echo.Context, id string) error
	// Get Voicemail items
	// (GET /voicemails)
	GetVoicemailitems(ctx echo.Context, params GetVoicemailitemsParams) error
	// Delete a specific Voicemail
	// (DELETE /voicemails/{id})
	DeleteaspecificVoicemail(ctx echo.Context, id string) error
	// Get a specific Voicemail
	// (GET /voicemails/{id})
	GetaspecificVoicemail(ctx echo.Context, id string) error
	// Change a specific Voicemail
	// (PATCH /voicemails/{id})
	ChangeaspecificVoicemail(ctx echo.Context, id string) error
	// Replace/change a specific Voicemail
	// (PUT /voicemails/{id})
	ReplacechangeaspecificVoicemail(ctx echo.Context, id string) error
	// Get VoicemailSetting items
	// (GET /voicemailsettings)
	GetVoicemailSettingitems(ctx echo.Context, params GetVoicemailSettingitemsParams) error
	// Get a specific VoicemailSetting
	// (GET /voicemailsettings/{id})
	GetaspecificVoicemailSetting(ctx echo.Context, id string) error
	// Change a specific VoicemailSetting
	// (PATCH /voicemailsettings/{id})
	ChangeaspecificVoicemailSetting(ctx echo.Context, id string) error
	// Replace/change a specific VoicemailSetting
	// (PUT /voicemailsettings/{id})
	ReplacechangeaspecificVoicemailSetting(ctx echo.Context, id string) error
	// Get Voucher items
	// (GET /vouchers)
	GetVoucheritems(ctx echo.Context, params GetVoucheritemsParams) error
	// Create a new Voucher
	// (POST /vouchers)
	CreateanewVoucher(ctx echo.Context) error
	// Delete a specific Voucher
	// (DELETE /vouchers/{id})
	DeleteaspecificVoucher(ctx echo.Context, id string) error
	// Get a specific Voucher
	// (GET /vouchers/{id})
	GetaspecificVoucher(ctx echo.Context, id string) error
	// Change a specific Voucher
	// (PATCH /vouchers/{id})
	ChangeaspecificVoucher(ctx echo.Context, id string) error
	// Replace/change a specific Voucher
	// (PUT /vouchers/{id})
	ReplacechangeaspecificVoucher(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateanewAdminCert converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewAdminCert(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewAdminCert(ctx)
	return err
}

// GetAdminitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetAdminitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAdminitemsParams
	// ------------- Required query parameter "reseller_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "reseller_id", ctx.QueryParams(), &params.ResellerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reseller_id: %s", err))
	}

	// ------------- Required query parameter "login" -------------

	err = runtime.BindQueryParameter("form", true, true, "login", ctx.QueryParams(), &params.Login)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter login: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAdminitems(ctx, params)
	return err
}

// CreateanewAdmin converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewAdmin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewAdmin(ctx)
	return err
}

// DeleteaspecificAdmin converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificAdmin(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificAdmin(ctx, id)
	return err
}

// GetaspecificAdmin converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificAdmin(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificAdmin(ctx, id)
	return err
}

// CreateanewApplyRewrite converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewApplyRewrite(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewApplyRewrite(ctx)
	return err
}

// GetAutoAttendantitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetAutoAttendantitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAutoAttendantitemsParams
	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAutoAttendantitems(ctx, params)
	return err
}

// GetaspecificAutoAttendant converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificAutoAttendant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificAutoAttendant(ctx, id)
	return err
}

// ChangeaspecificAutoAttendant converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificAutoAttendant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificAutoAttendant(ctx, id)
	return err
}

// ReplacechangeaspecificAutoAttendant converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificAutoAttendant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificAutoAttendant(ctx, id)
	return err
}

// GetBalanceIntervalitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetBalanceIntervalitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBalanceIntervalitemsParams
	// ------------- Required query parameter "reseller_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "reseller_id", ctx.QueryParams(), &params.ResellerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reseller_id: %s", err))
	}

	// ------------- Required query parameter "contact_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "contact_id", ctx.QueryParams(), &params.ContactId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contact_id: %s", err))
	}

	// ------------- Required query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, true, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Required query parameter "external_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "external_id", ctx.QueryParams(), &params.ExternalId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter external_id: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBalanceIntervalitems(ctx, params)
	return err
}

// GetaspecificBalanceInterval converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificBalanceInterval(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificBalanceInterval(ctx, id)
	return err
}

// GetBannedIpitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetBannedIpitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBannedIpitemsParams
	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBannedIpitems(ctx, params)
	return err
}

// DeleteaspecificBannedIp converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificBannedIp(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificBannedIp(ctx, id)
	return err
}

// GetaspecificBannedIp converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificBannedIp(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificBannedIp(ctx, id)
	return err
}

// GetBannedUseritems converts echo context to params.
func (w *ServerInterfaceWrapper) GetBannedUseritems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBannedUseritemsParams
	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBannedUseritems(ctx, params)
	return err
}

// DeleteaspecificBannedUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificBannedUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificBannedUser(ctx, id)
	return err
}

// GetaspecificBannedUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificBannedUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificBannedUser(ctx, id)
	return err
}

// GetBillingFeeitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetBillingFeeitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBillingFeeitemsParams
	// ------------- Required query parameter "billing_profile_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "billing_profile_id", ctx.QueryParams(), &params.BillingProfileId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter billing_profile_id: %s", err))
	}

	// ------------- Required query parameter "billing_zone_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "billing_zone_id", ctx.QueryParams(), &params.BillingZoneId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter billing_zone_id: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBillingFeeitems(ctx, params)
	return err
}

// CreateanewBillingFee converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewBillingFee(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewBillingFee(ctx)
	return err
}

// DeleteaspecificBillingFee converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificBillingFee(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificBillingFee(ctx, id)
	return err
}

// GetaspecificBillingFee converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificBillingFee(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificBillingFee(ctx, id)
	return err
}

// ChangeaspecificBillingFee converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificBillingFee(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificBillingFee(ctx, id)
	return err
}

// ReplacechangeaspecificBillingFee converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificBillingFee(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificBillingFee(ctx, id)
	return err
}

// GetBillingNetworkitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetBillingNetworkitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBillingNetworkitemsParams
	// ------------- Required query parameter "reseller_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "reseller_id", ctx.QueryParams(), &params.ResellerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reseller_id: %s", err))
	}

	// ------------- Required query parameter "ip" -------------

	err = runtime.BindQueryParameter("form", true, true, "ip", ctx.QueryParams(), &params.Ip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ip: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBillingNetworkitems(ctx, params)
	return err
}

// CreateanewBillingNetwork converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewBillingNetwork(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewBillingNetwork(ctx)
	return err
}

// GetaspecificBillingNetwork converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificBillingNetwork(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificBillingNetwork(ctx, id)
	return err
}

// ChangeaspecificBillingNetwork converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificBillingNetwork(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificBillingNetwork(ctx, id)
	return err
}

// ReplacechangeaspecificBillingNetwork converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificBillingNetwork(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificBillingNetwork(ctx, id)
	return err
}

// GetBillingProfileitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetBillingProfileitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBillingProfileitemsParams
	// ------------- Required query parameter "reseller_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "reseller_id", ctx.QueryParams(), &params.ResellerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reseller_id: %s", err))
	}

	// ------------- Required query parameter "handle" -------------

	err = runtime.BindQueryParameter("form", true, true, "handle", ctx.QueryParams(), &params.Handle)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter handle: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBillingProfileitems(ctx, params)
	return err
}

// CreateanewBillingProfile converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewBillingProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewBillingProfile(ctx)
	return err
}

// GetaspecificBillingProfile converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificBillingProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificBillingProfile(ctx, id)
	return err
}

// ChangeaspecificBillingProfile converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificBillingProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificBillingProfile(ctx, id)
	return err
}

// ReplacechangeaspecificBillingProfile converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificBillingProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificBillingProfile(ctx, id)
	return err
}

// GetBillingZoneitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetBillingZoneitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBillingZoneitemsParams
	// ------------- Required query parameter "billing_profile_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "billing_profile_id", ctx.QueryParams(), &params.BillingProfileId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter billing_profile_id: %s", err))
	}

	// ------------- Required query parameter "zone" -------------

	err = runtime.BindQueryParameter("form", true, true, "zone", ctx.QueryParams(), &params.Zone)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter zone: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBillingZoneitems(ctx, params)
	return err
}

// CreateanewBillingZone converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewBillingZone(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewBillingZone(ctx)
	return err
}

// DeleteaspecificBillingZone converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificBillingZone(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificBillingZone(ctx, id)
	return err
}

// GetaspecificBillingZone converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificBillingZone(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificBillingZone(ctx, id)
	return err
}

// ChangeaspecificBillingZone converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificBillingZone(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificBillingZone(ctx, id)
	return err
}

// ReplacechangeaspecificBillingZone converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificBillingZone(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificBillingZone(ctx, id)
	return err
}

// CreateanewCallControl converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewCallControl(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewCallControl(ctx)
	return err
}

// GetCallForwarditems converts echo context to params.
func (w *ServerInterfaceWrapper) GetCallForwarditems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCallForwarditemsParams
	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCallForwarditems(ctx, params)
	return err
}

// DeleteaspecificCallForward converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificCallForward(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificCallForward(ctx, id)
	return err
}

// GetaspecificCallForward converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificCallForward(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificCallForward(ctx, id)
	return err
}

// ChangeaspecificCallForward converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificCallForward(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificCallForward(ctx, id)
	return err
}

// ReplacechangeaspecificCallForward converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificCallForward(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificCallForward(ctx, id)
	return err
}

// GetCallListitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetCallListitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCallListitemsParams
	// ------------- Required query parameter "tz" -------------

	err = runtime.BindQueryParameter("form", true, true, "tz", ctx.QueryParams(), &params.Tz)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tz: %s", err))
	}

	// ------------- Required query parameter "use_owner_tz" -------------

	err = runtime.BindQueryParameter("form", true, true, "use_owner_tz", ctx.QueryParams(), &params.UseOwnerTz)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter use_owner_tz: %s", err))
	}

	// ------------- Required query parameter "subscriber_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "subscriber_id", ctx.QueryParams(), &params.SubscriberId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subscriber_id: %s", err))
	}

	// ------------- Required query parameter "customer_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "customer_id", ctx.QueryParams(), &params.CustomerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter customer_id: %s", err))
	}

	// ------------- Required query parameter "alias_field" -------------

	err = runtime.BindQueryParameter("form", true, true, "alias_field", ctx.QueryParams(), &params.AliasField)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter alias_field: %s", err))
	}

	// ------------- Required query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, true, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Required query parameter "status_ne" -------------

	err = runtime.BindQueryParameter("form", true, true, "status_ne", ctx.QueryParams(), &params.StatusNe)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status_ne: %s", err))
	}

	// ------------- Required query parameter "rating_status" -------------

	err = runtime.BindQueryParameter("form", true, true, "rating_status", ctx.QueryParams(), &params.RatingStatus)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rating_status: %s", err))
	}

	// ------------- Required query parameter "rating_status_ne" -------------

	err = runtime.BindQueryParameter("form", true, true, "rating_status_ne", ctx.QueryParams(), &params.RatingStatusNe)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rating_status_ne: %s", err))
	}

	// ------------- Required query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, true, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// ------------- Required query parameter "type_ne" -------------

	err = runtime.BindQueryParameter("form", true, true, "type_ne", ctx.QueryParams(), &params.TypeNe)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type_ne: %s", err))
	}

	// ------------- Required query parameter "direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "direction", ctx.QueryParams(), &params.Direction)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter direction: %s", err))
	}

	// ------------- Required query parameter "start_ge" -------------

	err = runtime.BindQueryParameter("form", true, true, "start_ge", ctx.QueryParams(), &params.StartGe)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start_ge: %s", err))
	}

	// ------------- Required query parameter "start_le" -------------

	err = runtime.BindQueryParameter("form", true, true, "start_le", ctx.QueryParams(), &params.StartLe)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start_le: %s", err))
	}

	// ------------- Required query parameter "init_ge" -------------

	err = runtime.BindQueryParameter("form", true, true, "init_ge", ctx.QueryParams(), &params.InitGe)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter init_ge: %s", err))
	}

	// ------------- Required query parameter "init_le" -------------

	err = runtime.BindQueryParameter("form", true, true, "init_le", ctx.QueryParams(), &params.InitLe)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter init_le: %s", err))
	}

	// ------------- Required query parameter "call_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "call_id", ctx.QueryParams(), &params.CallId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter call_id: %s", err))
	}

	// ------------- Required query parameter "own_cli" -------------

	err = runtime.BindQueryParameter("form", true, true, "own_cli", ctx.QueryParams(), &params.OwnCli)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter own_cli: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCallListitems(ctx, params)
	return err
}

// GetaspecificCallList converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificCallList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificCallList(ctx, id)
	return err
}

// GetCallQueueitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetCallQueueitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCallQueueitemsParams
	// ------------- Required query parameter "reseller_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "reseller_id", ctx.QueryParams(), &params.ResellerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reseller_id: %s", err))
	}

	// ------------- Required query parameter "number" -------------

	err = runtime.BindQueryParameter("form", true, true, "number", ctx.QueryParams(), &params.Number)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter number: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCallQueueitems(ctx, params)
	return err
}

// GetaspecificCallQueue converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificCallQueue(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificCallQueue(ctx, id)
	return err
}

// GetaspecificCallRecordingFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificCallRecordingFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificCallRecordingFile(ctx, id)
	return err
}

// GetCallRecordingitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetCallRecordingitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCallRecordingitemsParams
	// ------------- Required query parameter "reseller_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "reseller_id", ctx.QueryParams(), &params.ResellerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reseller_id: %s", err))
	}

	// ------------- Required query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, true, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Required query parameter "subscriber_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "subscriber_id", ctx.QueryParams(), &params.SubscriberId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subscriber_id: %s", err))
	}

	// ------------- Required query parameter "tz" -------------

	err = runtime.BindQueryParameter("form", true, true, "tz", ctx.QueryParams(), &params.Tz)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tz: %s", err))
	}

	// ------------- Required query parameter "force_delete" -------------

	err = runtime.BindQueryParameter("form", true, true, "force_delete", ctx.QueryParams(), &params.ForceDelete)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter force_delete: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCallRecordingitems(ctx, params)
	return err
}

// DeleteaspecificCallRecording converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificCallRecording(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificCallRecording(ctx, id)
	return err
}

// GetaspecificCallRecording converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificCallRecording(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificCallRecording(ctx, id)
	return err
}

// GetCallRecordingStreamitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetCallRecordingStreamitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCallRecordingStreamitemsParams
	// ------------- Required query parameter "recording_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "recording_id", ctx.QueryParams(), &params.RecordingId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recording_id: %s", err))
	}

	// ------------- Required query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, true, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// ------------- Required query parameter "tz" -------------

	err = runtime.BindQueryParameter("form", true, true, "tz", ctx.QueryParams(), &params.Tz)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tz: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCallRecordingStreamitems(ctx, params)
	return err
}

// DeleteaspecificCallRecordingStream converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificCallRecordingStream(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificCallRecordingStream(ctx, id)
	return err
}

// GetaspecificCallRecordingStream converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificCallRecordingStream(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificCallRecordingStream(ctx, id)
	return err
}

// GetCallitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetCallitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCallitemsParams
	// ------------- Required query parameter "customer_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "customer_id", ctx.QueryParams(), &params.CustomerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter customer_id: %s", err))
	}

	// ------------- Required query parameter "subscriber_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "subscriber_id", ctx.QueryParams(), &params.SubscriberId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subscriber_id: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCallitems(ctx, params)
	return err
}

// GetaspecificCall converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificCall(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificCall(ctx, id)
	return err
}

// GetCapabilityitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetCapabilityitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCapabilityitemsParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCapabilityitems(ctx, params)
	return err
}

// GetaspecificCapability converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificCapability(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificCapability(ctx, id)
	return err
}

// GetCCMapEntryitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetCCMapEntryitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCCMapEntryitemsParams
	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCCMapEntryitems(ctx, params)
	return err
}

// DeleteaspecificCCMapEntry converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificCCMapEntry(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificCCMapEntry(ctx, id)
	return err
}

// GetaspecificCCMapEntry converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificCCMapEntry(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificCCMapEntry(ctx, id)
	return err
}

// ChangeaspecificCCMapEntry converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificCCMapEntry(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificCCMapEntry(ctx, id)
	return err
}

// ReplacechangeaspecificCCMapEntry converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificCCMapEntry(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificCCMapEntry(ctx, id)
	return err
}

// GetCFBNumberSetitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetCFBNumberSetitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCFBNumberSetitemsParams
	// ------------- Required query parameter "subscriber_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "subscriber_id", ctx.QueryParams(), &params.SubscriberId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subscriber_id: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCFBNumberSetitems(ctx, params)
	return err
}

// CreateanewCFBNumberSet converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewCFBNumberSet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewCFBNumberSet(ctx)
	return err
}

// DeleteaspecificCFBNumberSet converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificCFBNumberSet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificCFBNumberSet(ctx, id)
	return err
}

// GetaspecificCFBNumberSet converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificCFBNumberSet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificCFBNumberSet(ctx, id)
	return err
}

// ChangeaspecificCFBNumberSet converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificCFBNumberSet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificCFBNumberSet(ctx, id)
	return err
}

// ReplacechangeaspecificCFBNumberSet converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificCFBNumberSet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificCFBNumberSet(ctx, id)
	return err
}

// GetCFDestinationSetitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetCFDestinationSetitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCFDestinationSetitemsParams
	// ------------- Required query parameter "subscriber_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "subscriber_id", ctx.QueryParams(), &params.SubscriberId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subscriber_id: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCFDestinationSetitems(ctx, params)
	return err
}

// CreateanewCFDestinationSet converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewCFDestinationSet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewCFDestinationSet(ctx)
	return err
}

// DeleteaspecificCFDestinationSet converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificCFDestinationSet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificCFDestinationSet(ctx, id)
	return err
}

// GetaspecificCFDestinationSet converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificCFDestinationSet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificCFDestinationSet(ctx, id)
	return err
}

// ChangeaspecificCFDestinationSet converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificCFDestinationSet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificCFDestinationSet(ctx, id)
	return err
}

// ReplacechangeaspecificCFDestinationSet converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificCFDestinationSet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificCFDestinationSet(ctx, id)
	return err
}

// GetCFMappingitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetCFMappingitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCFMappingitemsParams
	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCFMappingitems(ctx, params)
	return err
}

// GetaspecificCFMapping converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificCFMapping(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificCFMapping(ctx, id)
	return err
}

// ChangeaspecificCFMapping converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificCFMapping(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificCFMapping(ctx, id)
	return err
}

// ReplacechangeaspecificCFMapping converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificCFMapping(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificCFMapping(ctx, id)
	return err
}

// GetCFSourceSetitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetCFSourceSetitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCFSourceSetitemsParams
	// ------------- Required query parameter "subscriber_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "subscriber_id", ctx.QueryParams(), &params.SubscriberId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subscriber_id: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCFSourceSetitems(ctx, params)
	return err
}

// CreateanewCFSourceSet converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewCFSourceSet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewCFSourceSet(ctx)
	return err
}

// DeleteaspecificCFSourceSet converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificCFSourceSet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificCFSourceSet(ctx, id)
	return err
}

// GetaspecificCFSourceSet converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificCFSourceSet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificCFSourceSet(ctx, id)
	return err
}

// ChangeaspecificCFSourceSet converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificCFSourceSet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificCFSourceSet(ctx, id)
	return err
}

// ReplacechangeaspecificCFSourceSet converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificCFSourceSet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificCFSourceSet(ctx, id)
	return err
}

// GetCFTimeSetitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetCFTimeSetitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCFTimeSetitemsParams
	// ------------- Required query parameter "subscriber_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "subscriber_id", ctx.QueryParams(), &params.SubscriberId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subscriber_id: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCFTimeSetitems(ctx, params)
	return err
}

// CreateanewCFTimeSet converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewCFTimeSet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewCFTimeSet(ctx)
	return err
}

// DeleteaspecificCFTimeSet converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificCFTimeSet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificCFTimeSet(ctx, id)
	return err
}

// GetaspecificCFTimeSet converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificCFTimeSet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificCFTimeSet(ctx, id)
	return err
}

// ChangeaspecificCFTimeSet converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificCFTimeSet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificCFTimeSet(ctx, id)
	return err
}

// ReplacechangeaspecificCFTimeSet converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificCFTimeSet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificCFTimeSet(ctx, id)
	return err
}

// GetContractitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetContractitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetContractitemsParams
	// ------------- Required query parameter "contact_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "contact_id", ctx.QueryParams(), &params.ContactId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contact_id: %s", err))
	}

	// ------------- Required query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, true, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Required query parameter "external_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "external_id", ctx.QueryParams(), &params.ExternalId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter external_id: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetContractitems(ctx, params)
	return err
}

// CreateanewContract converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewContract(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewContract(ctx)
	return err
}

// GetaspecificContract converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificContract(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificContract(ctx, id)
	return err
}

// ChangeaspecificContract converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificContract(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificContract(ctx, id)
	return err
}

// ReplacechangeaspecificContract converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificContract(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificContract(ctx, id)
	return err
}

// GetConversationitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetConversationitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConversationitemsParams
	// ------------- Required query parameter "tz" -------------

	err = runtime.BindQueryParameter("form", true, true, "tz", ctx.QueryParams(), &params.Tz)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tz: %s", err))
	}

	// ------------- Required query parameter "use_owner_tz" -------------

	err = runtime.BindQueryParameter("form", true, true, "use_owner_tz", ctx.QueryParams(), &params.UseOwnerTz)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter use_owner_tz: %s", err))
	}

	// ------------- Required query parameter "subscriber_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "subscriber_id", ctx.QueryParams(), &params.SubscriberId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subscriber_id: %s", err))
	}

	// ------------- Required query parameter "customer_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "customer_id", ctx.QueryParams(), &params.CustomerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter customer_id: %s", err))
	}

	// ------------- Required query parameter "direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "direction", ctx.QueryParams(), &params.Direction)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter direction: %s", err))
	}

	// ------------- Required query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, true, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Required query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, true, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// ------------- Required query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, true, "from", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter from: %s", err))
	}

	// ------------- Required query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, true, "to", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter to: %s", err))
	}

	// ------------- Required query parameter "fax_number_rewrite_mode" -------------

	err = runtime.BindQueryParameter("form", true, true, "fax_number_rewrite_mode", ctx.QueryParams(), &params.FaxNumberRewriteMode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fax_number_rewrite_mode: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConversationitems(ctx, params)
	return err
}

// GetaspecificConversation converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificConversation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificConversation(ctx, id)
	return err
}

// GetCustomerBalanceitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetCustomerBalanceitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCustomerBalanceitemsParams
	// ------------- Required query parameter "reseller_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "reseller_id", ctx.QueryParams(), &params.ResellerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reseller_id: %s", err))
	}

	// ------------- Required query parameter "contact_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "contact_id", ctx.QueryParams(), &params.ContactId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contact_id: %s", err))
	}

	// ------------- Required query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, true, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Required query parameter "external_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "external_id", ctx.QueryParams(), &params.ExternalId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter external_id: %s", err))
	}

	// ------------- Required query parameter "domain" -------------

	err = runtime.BindQueryParameter("form", true, true, "domain", ctx.QueryParams(), &params.Domain)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter domain: %s", err))
	}

	// ------------- Required query parameter "prepaid" -------------

	err = runtime.BindQueryParameter("form", true, true, "prepaid", ctx.QueryParams(), &params.Prepaid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prepaid: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCustomerBalanceitems(ctx, params)
	return err
}

// GetaspecificCustomerBalance converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificCustomerBalance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificCustomerBalance(ctx, id)
	return err
}

// ChangeaspecificCustomerBalance converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificCustomerBalance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificCustomerBalance(ctx, id)
	return err
}

// ReplacechangeaspecificCustomerBalance converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificCustomerBalance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificCustomerBalance(ctx, id)
	return err
}

// GetCustomerContactitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetCustomerContactitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCustomerContactitemsParams
	// ------------- Required query parameter "email" -------------

	err = runtime.BindQueryParameter("form", true, true, "email", ctx.QueryParams(), &params.Email)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter email: %s", err))
	}

	// ------------- Required query parameter "reseller_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "reseller_id", ctx.QueryParams(), &params.ResellerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reseller_id: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCustomerContactitems(ctx, params)
	return err
}

// CreateanewCustomerContact converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewCustomerContact(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewCustomerContact(ctx)
	return err
}

// DeleteaspecificCustomerContact converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificCustomerContact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificCustomerContact(ctx, id)
	return err
}

// GetaspecificCustomerContact converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificCustomerContact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificCustomerContact(ctx, id)
	return err
}

// ChangeaspecificCustomerContact converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificCustomerContact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificCustomerContact(ctx, id)
	return err
}

// ReplacechangeaspecificCustomerContact converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificCustomerContact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificCustomerContact(ctx, id)
	return err
}

// GetCustomerFraudEventitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetCustomerFraudEventitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCustomerFraudEventitemsParams
	// ------------- Required query parameter "reseller_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "reseller_id", ctx.QueryParams(), &params.ResellerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reseller_id: %s", err))
	}

	// ------------- Required query parameter "interval" -------------

	err = runtime.BindQueryParameter("form", true, true, "interval", ctx.QueryParams(), &params.Interval)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter interval: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCustomerFraudEventitems(ctx, params)
	return err
}

// GetaspecificCustomerFraudEvent converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificCustomerFraudEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificCustomerFraudEvent(ctx, id)
	return err
}

// GetCustomerFraudPreferenceitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetCustomerFraudPreferenceitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCustomerFraudPreferenceitemsParams
	// ------------- Required query parameter "reseller_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "reseller_id", ctx.QueryParams(), &params.ResellerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reseller_id: %s", err))
	}

	// ------------- Required query parameter "contact_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "contact_id", ctx.QueryParams(), &params.ContactId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contact_id: %s", err))
	}

	// ------------- Required query parameter "notify" -------------

	err = runtime.BindQueryParameter("form", true, true, "notify", ctx.QueryParams(), &params.Notify)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter notify: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCustomerFraudPreferenceitems(ctx, params)
	return err
}

// GetaspecificCustomerFraudPreference converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificCustomerFraudPreference(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificCustomerFraudPreference(ctx, id)
	return err
}

// ChangeaspecificCustomerFraudPreference converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificCustomerFraudPreference(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificCustomerFraudPreference(ctx, id)
	return err
}

// ReplacechangeaspecificCustomerFraudPreference converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificCustomerFraudPreference(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificCustomerFraudPreference(ctx, id)
	return err
}

// GetCustomerLocationitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetCustomerLocationitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCustomerLocationitemsParams
	// ------------- Required query parameter "ip" -------------

	err = runtime.BindQueryParameter("form", true, true, "ip", ctx.QueryParams(), &params.Ip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ip: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCustomerLocationitems(ctx, params)
	return err
}

// CreateanewCustomerLocation converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewCustomerLocation(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewCustomerLocation(ctx)
	return err
}

// DeleteaspecificCustomerLocation converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificCustomerLocation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificCustomerLocation(ctx, id)
	return err
}

// GetaspecificCustomerLocation converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificCustomerLocation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificCustomerLocation(ctx, id)
	return err
}

// ChangeaspecificCustomerLocation converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificCustomerLocation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificCustomerLocation(ctx, id)
	return err
}

// ReplacechangeaspecificCustomerLocation converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificCustomerLocation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificCustomerLocation(ctx, id)
	return err
}

// GetCustomerPreferenceitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetCustomerPreferenceitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCustomerPreferenceitemsParams
	// ------------- Required query parameter "location_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "location_id", ctx.QueryParams(), &params.LocationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter location_id: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCustomerPreferenceitems(ctx, params)
	return err
}

// GetaspecificCustomerPreference converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificCustomerPreference(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificCustomerPreference(ctx, id)
	return err
}

// ChangeaspecificCustomerPreference converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificCustomerPreference(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificCustomerPreference(ctx, id)
	return err
}

// ReplacechangeaspecificCustomerPreference converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificCustomerPreference(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificCustomerPreference(ctx, id)
	return err
}

// GetCustomeritems converts echo context to params.
func (w *ServerInterfaceWrapper) GetCustomeritems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCustomeritemsParams
	// ------------- Required query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, true, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Required query parameter "not_status" -------------

	err = runtime.BindQueryParameter("form", true, true, "not_status", ctx.QueryParams(), &params.NotStatus)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter not_status: %s", err))
	}

	// ------------- Required query parameter "reseller_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "reseller_id", ctx.QueryParams(), &params.ResellerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reseller_id: %s", err))
	}

	// ------------- Required query parameter "external_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "external_id", ctx.QueryParams(), &params.ExternalId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter external_id: %s", err))
	}

	// ------------- Required query parameter "contact_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "contact_id", ctx.QueryParams(), &params.ContactId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contact_id: %s", err))
	}

	// ------------- Required query parameter "package_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "package_id", ctx.QueryParams(), &params.PackageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter package_id: %s", err))
	}

	// ------------- Required query parameter "create_timestamp_gt" -------------

	err = runtime.BindQueryParameter("form", true, true, "create_timestamp_gt", ctx.QueryParams(), &params.CreateTimestampGt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter create_timestamp_gt: %s", err))
	}

	// ------------- Required query parameter "create_timestamp_lt" -------------

	err = runtime.BindQueryParameter("form", true, true, "create_timestamp_lt", ctx.QueryParams(), &params.CreateTimestampLt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter create_timestamp_lt: %s", err))
	}

	// ------------- Required query parameter "activate_timestamp_gt" -------------

	err = runtime.BindQueryParameter("form", true, true, "activate_timestamp_gt", ctx.QueryParams(), &params.ActivateTimestampGt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter activate_timestamp_gt: %s", err))
	}

	// ------------- Required query parameter "activate_timestamp_lt" -------------

	err = runtime.BindQueryParameter("form", true, true, "activate_timestamp_lt", ctx.QueryParams(), &params.ActivateTimestampLt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter activate_timestamp_lt: %s", err))
	}

	// ------------- Required query parameter "modify_timestamp_gt" -------------

	err = runtime.BindQueryParameter("form", true, true, "modify_timestamp_gt", ctx.QueryParams(), &params.ModifyTimestampGt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modify_timestamp_gt: %s", err))
	}

	// ------------- Required query parameter "modify_timestamp_lt" -------------

	err = runtime.BindQueryParameter("form", true, true, "modify_timestamp_lt", ctx.QueryParams(), &params.ModifyTimestampLt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modify_timestamp_lt: %s", err))
	}

	// ------------- Required query parameter "terminate_timestamp_gt" -------------

	err = runtime.BindQueryParameter("form", true, true, "terminate_timestamp_gt", ctx.QueryParams(), &params.TerminateTimestampGt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter terminate_timestamp_gt: %s", err))
	}

	// ------------- Required query parameter "terminate_timestamp_lt" -------------

	err = runtime.BindQueryParameter("form", true, true, "terminate_timestamp_lt", ctx.QueryParams(), &params.TerminateTimestampLt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter terminate_timestamp_lt: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCustomeritems(ctx, params)
	return err
}

// CreateanewCustomer converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewCustomer(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewCustomer(ctx)
	return err
}

// GetaspecificCustomer converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificCustomer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificCustomer(ctx, id)
	return err
}

// ChangeaspecificCustomer converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificCustomer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificCustomer(ctx, id)
	return err
}

// ReplacechangeaspecificCustomer converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificCustomer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificCustomer(ctx, id)
	return err
}

// GetCustomerZoneCostitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetCustomerZoneCostitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCustomerZoneCostitemsParams
	// ------------- Required query parameter "customer_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "customer_id", ctx.QueryParams(), &params.CustomerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter customer_id: %s", err))
	}

	// ------------- Required query parameter "start" -------------

	err = runtime.BindQueryParameter("form", true, true, "start", ctx.QueryParams(), &params.Start)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start: %s", err))
	}

	// ------------- Required query parameter "end" -------------

	err = runtime.BindQueryParameter("form", true, true, "end", ctx.QueryParams(), &params.End)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter end: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCustomerZoneCostitems(ctx, params)
	return err
}

// GetaspecificCustomerZoneCost converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificCustomerZoneCost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificCustomerZoneCost(ctx, id)
	return err
}

// GetDomainPreferenceitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetDomainPreferenceitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDomainPreferenceitemsParams
	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDomainPreferenceitems(ctx, params)
	return err
}

// GetaspecificDomainPreference converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificDomainPreference(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificDomainPreference(ctx, id)
	return err
}

// ChangeaspecificDomainPreference converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificDomainPreference(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificDomainPreference(ctx, id)
	return err
}

// ReplacechangeaspecificDomainPreference converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificDomainPreference(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificDomainPreference(ctx, id)
	return err
}

// GetDomainitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetDomainitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDomainitemsParams
	// ------------- Required query parameter "reseller_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "reseller_id", ctx.QueryParams(), &params.ResellerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reseller_id: %s", err))
	}

	// ------------- Required query parameter "domain" -------------

	err = runtime.BindQueryParameter("form", true, true, "domain", ctx.QueryParams(), &params.Domain)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter domain: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDomainitems(ctx, params)
	return err
}

// CreateanewDomain converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewDomain(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewDomain(ctx)
	return err
}

// DeleteaspecificDomain converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificDomain(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificDomain(ctx, id)
	return err
}

// GetaspecificDomain converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificDomain(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificDomain(ctx, id)
	return err
}

// GetEmailTemplateitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetEmailTemplateitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEmailTemplateitemsParams
	// ------------- Required query parameter "reseller_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "reseller_id", ctx.QueryParams(), &params.ResellerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reseller_id: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEmailTemplateitems(ctx, params)
	return err
}

// CreateanewEmailTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewEmailTemplate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewEmailTemplate(ctx)
	return err
}

// DeleteaspecificEmailTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificEmailTemplate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificEmailTemplate(ctx, id)
	return err
}

// GetaspecificEmailTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificEmailTemplate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificEmailTemplate(ctx, id)
	return err
}

// ChangeaspecificEmailTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificEmailTemplate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificEmailTemplate(ctx, id)
	return err
}

// ReplacechangeaspecificEmailTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificEmailTemplate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificEmailTemplate(ctx, id)
	return err
}

// GetEmergencyMappingContaineritems converts echo context to params.
func (w *ServerInterfaceWrapper) GetEmergencyMappingContaineritems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEmergencyMappingContaineritemsParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Required query parameter "reseller_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "reseller_id", ctx.QueryParams(), &params.ResellerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reseller_id: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEmergencyMappingContaineritems(ctx, params)
	return err
}

// CreateanewEmergencyMappingContainer converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewEmergencyMappingContainer(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewEmergencyMappingContainer(ctx)
	return err
}

// DeleteaspecificEmergencyMappingContainer converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificEmergencyMappingContainer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificEmergencyMappingContainer(ctx, id)
	return err
}

// GetaspecificEmergencyMappingContainer converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificEmergencyMappingContainer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificEmergencyMappingContainer(ctx, id)
	return err
}

// ChangeaspecificEmergencyMappingContainer converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificEmergencyMappingContainer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificEmergencyMappingContainer(ctx, id)
	return err
}

// ReplacechangeaspecificEmergencyMappingContainer converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificEmergencyMappingContainer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificEmergencyMappingContainer(ctx, id)
	return err
}

// GetEmergencyMappingitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetEmergencyMappingitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEmergencyMappingitemsParams
	// ------------- Required query parameter "emergency_container_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "emergency_container_id", ctx.QueryParams(), &params.EmergencyContainerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter emergency_container_id: %s", err))
	}

	// ------------- Required query parameter "reseller_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "reseller_id", ctx.QueryParams(), &params.ResellerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reseller_id: %s", err))
	}

	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEmergencyMappingitems(ctx, params)
	return err
}

// CreateanewEmergencyMapping converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewEmergencyMapping(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewEmergencyMapping(ctx)
	return err
}

// DeleteaspecificEmergencyMapping converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificEmergencyMapping(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificEmergencyMapping(ctx, id)
	return err
}

// GetaspecificEmergencyMapping converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificEmergencyMapping(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificEmergencyMapping(ctx, id)
	return err
}

// ChangeaspecificEmergencyMapping converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificEmergencyMapping(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificEmergencyMapping(ctx, id)
	return err
}

// ReplacechangeaspecificEmergencyMapping converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificEmergencyMapping(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificEmergencyMapping(ctx, id)
	return err
}

// GetEventitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetEventitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEventitemsParams
	// ------------- Required query parameter "subscriber_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "subscriber_id", ctx.QueryParams(), &params.SubscriberId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subscriber_id: %s", err))
	}

	// ------------- Required query parameter "reseller_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "reseller_id", ctx.QueryParams(), &params.ResellerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reseller_id: %s", err))
	}

	// ------------- Required query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, true, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// ------------- Required query parameter "timestamp_from" -------------

	err = runtime.BindQueryParameter("form", true, true, "timestamp_from", ctx.QueryParams(), &params.TimestampFrom)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timestamp_from: %s", err))
	}

	// ------------- Required query parameter "timestamp_to" -------------

	err = runtime.BindQueryParameter("form", true, true, "timestamp_to", ctx.QueryParams(), &params.TimestampTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timestamp_to: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetEventitems(ctx, params)
	return err
}

// GetaspecificEvent converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificEvent(ctx, id)
	return err
}

// GetFaxitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetFaxitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFaxitemsParams
	// ------------- Required query parameter "tz" -------------

	err = runtime.BindQueryParameter("form", true, true, "tz", ctx.QueryParams(), &params.Tz)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tz: %s", err))
	}

	// ------------- Required query parameter "use_owner_tz" -------------

	err = runtime.BindQueryParameter("form", true, true, "use_owner_tz", ctx.QueryParams(), &params.UseOwnerTz)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter use_owner_tz: %s", err))
	}

	// ------------- Required query parameter "subscriber_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "subscriber_id", ctx.QueryParams(), &params.SubscriberId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subscriber_id: %s", err))
	}

	// ------------- Required query parameter "time_from" -------------

	err = runtime.BindQueryParameter("form", true, true, "time_from", ctx.QueryParams(), &params.TimeFrom)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter time_from: %s", err))
	}

	// ------------- Required query parameter "time_to" -------------

	err = runtime.BindQueryParameter("form", true, true, "time_to", ctx.QueryParams(), &params.TimeTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter time_to: %s", err))
	}

	// ------------- Required query parameter "sid" -------------

	err = runtime.BindQueryParameter("form", true, true, "sid", ctx.QueryParams(), &params.Sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sid: %s", err))
	}

	// ------------- Required query parameter "number_rewrite_mode" -------------

	err = runtime.BindQueryParameter("form", true, true, "number_rewrite_mode", ctx.QueryParams(), &params.NumberRewriteMode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter number_rewrite_mode: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFaxitems(ctx, params)
	return err
}

// CreateanewFax converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewFax(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewFax(ctx)
	return err
}

// GetaspecificFax converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificFax(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificFax(ctx, id)
	return err
}

// GetaspecificFaxRecording converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificFaxRecording(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificFaxRecording(ctx, id)
	return err
}

// GetFaxserverSettingitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetFaxserverSettingitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFaxserverSettingitemsParams
	// ------------- Required query parameter "name_or_password" -------------

	err = runtime.BindQueryParameter("form", true, true, "name_or_password", ctx.QueryParams(), &params.NameOrPassword)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name_or_password: %s", err))
	}

	// ------------- Required query parameter "active" -------------

	err = runtime.BindQueryParameter("form", true, true, "active", ctx.QueryParams(), &params.Active)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter active: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFaxserverSettingitems(ctx, params)
	return err
}

// GetaspecificFaxserverSetting converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificFaxserverSetting(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificFaxserverSetting(ctx, id)
	return err
}

// ChangeaspecificFaxserverSetting converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificFaxserverSetting(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificFaxserverSetting(ctx, id)
	return err
}

// ReplacechangeaspecificFaxserverSetting converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificFaxserverSetting(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificFaxserverSetting(ctx, id)
	return err
}

// GetInterceptionitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetInterceptionitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInterceptionitemsParams
	// ------------- Required query parameter "liid" -------------

	err = runtime.BindQueryParameter("form", true, true, "liid", ctx.QueryParams(), &params.Liid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter liid: %s", err))
	}

	// ------------- Required query parameter "number" -------------

	err = runtime.BindQueryParameter("form", true, true, "number", ctx.QueryParams(), &params.Number)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter number: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInterceptionitems(ctx, params)
	return err
}

// CreateanewInterception converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewInterception(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewInterception(ctx)
	return err
}

// DeleteaspecificInterception converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificInterception(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificInterception(ctx, id)
	return err
}

// GetaspecificInterception converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificInterception(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificInterception(ctx, id)
	return err
}

// ChangeaspecificInterception converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificInterception(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificInterception(ctx, id)
	return err
}

// ReplacechangeaspecificInterception converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificInterception(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificInterception(ctx, id)
	return err
}

// GetInvoiceitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetInvoiceitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInvoiceitemsParams
	// ------------- Required query parameter "period_start_ge" -------------

	err = runtime.BindQueryParameter("form", true, true, "period_start_ge", ctx.QueryParams(), &params.PeriodStartGe)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter period_start_ge: %s", err))
	}

	// ------------- Required query parameter "period_end_le" -------------

	err = runtime.BindQueryParameter("form", true, true, "period_end_le", ctx.QueryParams(), &params.PeriodEndLe)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter period_end_le: %s", err))
	}

	// ------------- Required query parameter "reseller_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "reseller_id", ctx.QueryParams(), &params.ResellerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reseller_id: %s", err))
	}

	// ------------- Required query parameter "customer_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "customer_id", ctx.QueryParams(), &params.CustomerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter customer_id: %s", err))
	}

	// ------------- Required query parameter "serial" -------------

	err = runtime.BindQueryParameter("form", true, true, "serial", ctx.QueryParams(), &params.Serial)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter serial: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInvoiceitems(ctx, params)
	return err
}

// CreateanewInvoice converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewInvoice(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewInvoice(ctx)
	return err
}

// DeleteaspecificInvoice converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificInvoice(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificInvoice(ctx, id)
	return err
}

// GetaspecificInvoice converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificInvoice(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificInvoice(ctx, id)
	return err
}

// GetInvoiceTemplateitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetInvoiceTemplateitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInvoiceTemplateitemsParams
	// ------------- Required query parameter "reseller_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "reseller_id", ctx.QueryParams(), &params.ResellerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reseller_id: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInvoiceTemplateitems(ctx, params)
	return err
}

// GetaspecificInvoiceTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificInvoiceTemplate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificInvoiceTemplate(ctx, id)
	return err
}

// GetLnpCarrieritems converts echo context to params.
func (w *ServerInterfaceWrapper) GetLnpCarrieritems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLnpCarrieritemsParams
	// ------------- Required query parameter "prefix" -------------

	err = runtime.BindQueryParameter("form", true, true, "prefix", ctx.QueryParams(), &params.Prefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefix: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLnpCarrieritems(ctx, params)
	return err
}

// CreateanewLnpCarrier converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewLnpCarrier(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewLnpCarrier(ctx)
	return err
}

// DeleteaspecificLnpCarrier converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificLnpCarrier(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificLnpCarrier(ctx, id)
	return err
}

// GetaspecificLnpCarrier converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificLnpCarrier(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificLnpCarrier(ctx, id)
	return err
}

// ChangeaspecificLnpCarrier converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificLnpCarrier(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificLnpCarrier(ctx, id)
	return err
}

// ReplacechangeaspecificLnpCarrier converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificLnpCarrier(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificLnpCarrier(ctx, id)
	return err
}

// GetLnpNumberitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetLnpNumberitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLnpNumberitemsParams
	// ------------- Required query parameter "carrier_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "carrier_id", ctx.QueryParams(), &params.CarrierId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter carrier_id: %s", err))
	}

	// ------------- Required query parameter "number" -------------

	err = runtime.BindQueryParameter("form", true, true, "number", ctx.QueryParams(), &params.Number)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter number: %s", err))
	}

	// ------------- Required query parameter "actual" -------------

	err = runtime.BindQueryParameter("form", true, true, "actual", ctx.QueryParams(), &params.Actual)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter actual: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLnpNumberitems(ctx, params)
	return err
}

// CreateanewLnpNumber converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewLnpNumber(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewLnpNumber(ctx)
	return err
}

// DeleteaspecificLnpNumber converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificLnpNumber(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificLnpNumber(ctx, id)
	return err
}

// GetaspecificLnpNumber converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificLnpNumber(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificLnpNumber(ctx, id)
	return err
}

// ChangeaspecificLnpNumber converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificLnpNumber(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificLnpNumber(ctx, id)
	return err
}

// ReplacechangeaspecificLnpNumber converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificLnpNumber(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificLnpNumber(ctx, id)
	return err
}

// GetMailToFaxSettingitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetMailToFaxSettingitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMailToFaxSettingitemsParams
	// ------------- Required query parameter "active" -------------

	err = runtime.BindQueryParameter("form", true, true, "active", ctx.QueryParams(), &params.Active)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter active: %s", err))
	}

	// ------------- Required query parameter "secret_key_renew" -------------

	err = runtime.BindQueryParameter("form", true, true, "secret_key_renew", ctx.QueryParams(), &params.SecretKeyRenew)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter secret_key_renew: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMailToFaxSettingitems(ctx, params)
	return err
}

// GetaspecificMailToFaxSetting converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificMailToFaxSetting(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificMailToFaxSetting(ctx, id)
	return err
}

// ChangeaspecificMailToFaxSetting converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificMailToFaxSetting(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificMailToFaxSetting(ctx, id)
	return err
}

// ReplacechangeaspecificMailToFaxSetting converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificMailToFaxSetting(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificMailToFaxSetting(ctx, id)
	return err
}

// GetMaliciousCallitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetMaliciousCallitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMaliciousCallitemsParams
	// ------------- Required query parameter "reseller_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "reseller_id", ctx.QueryParams(), &params.ResellerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reseller_id: %s", err))
	}

	// ------------- Required query parameter "callid" -------------

	err = runtime.BindQueryParameter("form", true, true, "callid", ctx.QueryParams(), &params.Callid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter callid: %s", err))
	}

	// ------------- Required query parameter "caller" -------------

	err = runtime.BindQueryParameter("form", true, true, "caller", ctx.QueryParams(), &params.Caller)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter caller: %s", err))
	}

	// ------------- Required query parameter "callee" -------------

	err = runtime.BindQueryParameter("form", true, true, "callee", ctx.QueryParams(), &params.Callee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter callee: %s", err))
	}

	// ------------- Required query parameter "start_le" -------------

	err = runtime.BindQueryParameter("form", true, true, "start_le", ctx.QueryParams(), &params.StartLe)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start_le: %s", err))
	}

	// ------------- Required query parameter "start_ge" -------------

	err = runtime.BindQueryParameter("form", true, true, "start_ge", ctx.QueryParams(), &params.StartGe)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start_ge: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMaliciousCallitems(ctx, params)
	return err
}

// DeleteaspecificMaliciousCall converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificMaliciousCall(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificMaliciousCall(ctx, id)
	return err
}

// GetaspecificMaliciousCall converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificMaliciousCall(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificMaliciousCall(ctx, id)
	return err
}

// GetManagerSecretaryitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetManagerSecretaryitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetManagerSecretaryitemsParams
	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetManagerSecretaryitems(ctx, params)
	return err
}

// DeleteaspecificManagerSecretary converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificManagerSecretary(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificManagerSecretary(ctx, id)
	return err
}

// GetaspecificManagerSecretary converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificManagerSecretary(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificManagerSecretary(ctx, id)
	return err
}

// ReplacechangeaspecificManagerSecretary converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificManagerSecretary(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificManagerSecretary(ctx, id)
	return err
}

// GetNcosLevelitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetNcosLevelitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNcosLevelitemsParams
	// ------------- Required query parameter "reseller_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "reseller_id", ctx.QueryParams(), &params.ResellerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reseller_id: %s", err))
	}

	// ------------- Required query parameter "level" -------------

	err = runtime.BindQueryParameter("form", true, true, "level", ctx.QueryParams(), &params.Level)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter level: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNcosLevelitems(ctx, params)
	return err
}

// CreateanewNcosLevel converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewNcosLevel(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewNcosLevel(ctx)
	return err
}

// DeleteaspecificNcosLevel converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificNcosLevel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificNcosLevel(ctx, id)
	return err
}

// GetaspecificNcosLevel converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificNcosLevel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificNcosLevel(ctx, id)
	return err
}

// ChangeaspecificNcosLevel converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificNcosLevel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificNcosLevel(ctx, id)
	return err
}

// ReplacechangeaspecificNcosLevel converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificNcosLevel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificNcosLevel(ctx, id)
	return err
}

// GetNcosLnpCarrieritems converts echo context to params.
func (w *ServerInterfaceWrapper) GetNcosLnpCarrieritems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNcosLnpCarrieritemsParams
	// ------------- Required query parameter "ncos_level_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "ncos_level_id", ctx.QueryParams(), &params.NcosLevelId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ncos_level_id: %s", err))
	}

	// ------------- Required query parameter "carrier_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "carrier_id", ctx.QueryParams(), &params.CarrierId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter carrier_id: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNcosLnpCarrieritems(ctx, params)
	return err
}

// CreateanewNcosLnpCarrier converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewNcosLnpCarrier(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewNcosLnpCarrier(ctx)
	return err
}

// DeleteaspecificNcosLnpCarrier converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificNcosLnpCarrier(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificNcosLnpCarrier(ctx, id)
	return err
}

// GetaspecificNcosLnpCarrier converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificNcosLnpCarrier(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificNcosLnpCarrier(ctx, id)
	return err
}

// ChangeaspecificNcosLnpCarrier converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificNcosLnpCarrier(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificNcosLnpCarrier(ctx, id)
	return err
}

// ReplacechangeaspecificNcosLnpCarrier converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificNcosLnpCarrier(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificNcosLnpCarrier(ctx, id)
	return err
}

// GetNcosPatternitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetNcosPatternitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNcosPatternitemsParams
	// ------------- Required query parameter "ncos_level_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "ncos_level_id", ctx.QueryParams(), &params.NcosLevelId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ncos_level_id: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNcosPatternitems(ctx, params)
	return err
}

// CreateanewNcosPattern converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewNcosPattern(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewNcosPattern(ctx)
	return err
}

// DeleteaspecificNcosPattern converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificNcosPattern(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificNcosPattern(ctx, id)
	return err
}

// GetaspecificNcosPattern converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificNcosPattern(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificNcosPattern(ctx, id)
	return err
}

// ChangeaspecificNcosPattern converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificNcosPattern(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificNcosPattern(ctx, id)
	return err
}

// ReplacechangeaspecificNcosPattern converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificNcosPattern(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificNcosPattern(ctx, id)
	return err
}

// GetNumberitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetNumberitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNumberitemsParams
	// ------------- Required query parameter "reseller_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "reseller_id", ctx.QueryParams(), &params.ResellerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reseller_id: %s", err))
	}

	// ------------- Required query parameter "customer_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "customer_id", ctx.QueryParams(), &params.CustomerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter customer_id: %s", err))
	}

	// ------------- Required query parameter "subscriber_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "subscriber_id", ctx.QueryParams(), &params.SubscriberId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subscriber_id: %s", err))
	}

	// ------------- Required query parameter "ac" -------------

	err = runtime.BindQueryParameter("form", true, true, "ac", ctx.QueryParams(), &params.Ac)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ac: %s", err))
	}

	// ------------- Required query parameter "cc" -------------

	err = runtime.BindQueryParameter("form", true, true, "cc", ctx.QueryParams(), &params.Cc)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cc: %s", err))
	}

	// ------------- Required query parameter "sn" -------------

	err = runtime.BindQueryParameter("form", true, true, "sn", ctx.QueryParams(), &params.Sn)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sn: %s", err))
	}

	// ------------- Required query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, true, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNumberitems(ctx, params)
	return err
}

// GetaspecificNumber converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificNumber(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificNumber(ctx, id)
	return err
}

// ChangeaspecificNumber converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificNumber(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificNumber(ctx, id)
	return err
}

// ReplacechangeaspecificNumber converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificNumber(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificNumber(ctx, id)
	return err
}

// CreateanewPartyCallControl converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewPartyCallControl(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewPartyCallControl(ctx)
	return err
}

// GetaspecificPbxDeviceConfigFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificPbxDeviceConfigFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificPbxDeviceConfigFile(ctx, id)
	return err
}

// GetPbxDeviceConfigitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetPbxDeviceConfigitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPbxDeviceConfigitemsParams
	// ------------- Required query parameter "device_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "device_id", ctx.QueryParams(), &params.DeviceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter device_id: %s", err))
	}

	// ------------- Required query parameter "version" -------------

	err = runtime.BindQueryParameter("form", true, true, "version", ctx.QueryParams(), &params.Version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Required query parameter "content_type" -------------

	err = runtime.BindQueryParameter("form", true, true, "content_type", ctx.QueryParams(), &params.ContentType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter content_type: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPbxDeviceConfigitems(ctx, params)
	return err
}

// CreateanewPbxDeviceConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewPbxDeviceConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewPbxDeviceConfig(ctx)
	return err
}

// GetaspecificPbxDeviceConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificPbxDeviceConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificPbxDeviceConfig(ctx, id)
	return err
}

// ReplacechangeaspecificPbxDeviceConfig converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificPbxDeviceConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificPbxDeviceConfig(ctx, id)
	return err
}

// GetaspecificPbxDeviceFirmwareBinary converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificPbxDeviceFirmwareBinary(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificPbxDeviceFirmwareBinary(ctx, id)
	return err
}

// GetPbxDeviceFirmwareitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetPbxDeviceFirmwareitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPbxDeviceFirmwareitemsParams
	// ------------- Required query parameter "device_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "device_id", ctx.QueryParams(), &params.DeviceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter device_id: %s", err))
	}

	// ------------- Required query parameter "version" -------------

	err = runtime.BindQueryParameter("form", true, true, "version", ctx.QueryParams(), &params.Version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	// ------------- Required query parameter "filename" -------------

	err = runtime.BindQueryParameter("form", true, true, "filename", ctx.QueryParams(), &params.Filename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filename: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPbxDeviceFirmwareitems(ctx, params)
	return err
}

// CreateanewPbxDeviceFirmware converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewPbxDeviceFirmware(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewPbxDeviceFirmware(ctx)
	return err
}

// GetaspecificPbxDeviceFirmware converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificPbxDeviceFirmware(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificPbxDeviceFirmware(ctx, id)
	return err
}

// ReplacechangeaspecificPbxDeviceFirmware converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificPbxDeviceFirmware(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificPbxDeviceFirmware(ctx, id)
	return err
}

// GetaspecificPbxDeviceModelImage converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificPbxDeviceModelImage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificPbxDeviceModelImage(ctx, id)
	return err
}

// GetPbxDeviceModelitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetPbxDeviceModelitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPbxDeviceModelitemsParams
	// ------------- Required query parameter "reseller_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "reseller_id", ctx.QueryParams(), &params.ResellerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reseller_id: %s", err))
	}

	// ------------- Required query parameter "vendor" -------------

	err = runtime.BindQueryParameter("form", true, true, "vendor", ctx.QueryParams(), &params.Vendor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vendor: %s", err))
	}

	// ------------- Required query parameter "model" -------------

	err = runtime.BindQueryParameter("form", true, true, "model", ctx.QueryParams(), &params.Model)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter model: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPbxDeviceModelitems(ctx, params)
	return err
}

// CreateanewPbxDeviceModel converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewPbxDeviceModel(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewPbxDeviceModel(ctx)
	return err
}

// GetaspecificPbxDeviceModel converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificPbxDeviceModel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificPbxDeviceModel(ctx, id)
	return err
}

// ChangeaspecificPbxDeviceModel converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificPbxDeviceModel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificPbxDeviceModel(ctx, id)
	return err
}

// ReplacechangeaspecificPbxDeviceModel converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificPbxDeviceModel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificPbxDeviceModel(ctx, id)
	return err
}

// GetPbxDevicePreferenceitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetPbxDevicePreferenceitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPbxDevicePreferenceitemsParams
	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPbxDevicePreferenceitems(ctx, params)
	return err
}

// GetaspecificPbxDevicePreference converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificPbxDevicePreference(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificPbxDevicePreference(ctx, id)
	return err
}

// ChangeaspecificPbxDevicePreference converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificPbxDevicePreference(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificPbxDevicePreference(ctx, id)
	return err
}

// ReplacechangeaspecificPbxDevicePreference converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificPbxDevicePreference(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificPbxDevicePreference(ctx, id)
	return err
}

// GetPbxDeviceProfilePreferenceitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetPbxDeviceProfilePreferenceitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPbxDeviceProfilePreferenceitemsParams
	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPbxDeviceProfilePreferenceitems(ctx, params)
	return err
}

// GetaspecificPbxDeviceProfilePreference converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificPbxDeviceProfilePreference(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificPbxDeviceProfilePreference(ctx, id)
	return err
}

// ChangeaspecificPbxDeviceProfilePreference converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificPbxDeviceProfilePreference(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificPbxDeviceProfilePreference(ctx, id)
	return err
}

// ReplacechangeaspecificPbxDeviceProfilePreference converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificPbxDeviceProfilePreference(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificPbxDeviceProfilePreference(ctx, id)
	return err
}

// GetPbxDeviceProfileitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetPbxDeviceProfileitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPbxDeviceProfileitemsParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Required query parameter "config_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "config_id", ctx.QueryParams(), &params.ConfigId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter config_id: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPbxDeviceProfileitems(ctx, params)
	return err
}

// CreateanewPbxDeviceProfile converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewPbxDeviceProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewPbxDeviceProfile(ctx)
	return err
}

// GetaspecificPbxDeviceProfile converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificPbxDeviceProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificPbxDeviceProfile(ctx, id)
	return err
}

// ChangeaspecificPbxDeviceProfile converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificPbxDeviceProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificPbxDeviceProfile(ctx, id)
	return err
}

// ReplacechangeaspecificPbxDeviceProfile converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificPbxDeviceProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificPbxDeviceProfile(ctx, id)
	return err
}

// GetPbxDeviceitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetPbxDeviceitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPbxDeviceitemsParams
	// ------------- Required query parameter "customer_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "customer_id", ctx.QueryParams(), &params.CustomerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter customer_id: %s", err))
	}

	// ------------- Required query parameter "profile_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "profile_id", ctx.QueryParams(), &params.ProfileId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter profile_id: %s", err))
	}

	// ------------- Required query parameter "identifier" -------------

	err = runtime.BindQueryParameter("form", true, true, "identifier", ctx.QueryParams(), &params.Identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	// ------------- Required query parameter "station_name" -------------

	err = runtime.BindQueryParameter("form", true, true, "station_name", ctx.QueryParams(), &params.StationName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter station_name: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPbxDeviceitems(ctx, params)
	return err
}

// CreateanewPbxDevice converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewPbxDevice(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewPbxDevice(ctx)
	return err
}

// DeleteaspecificPbxDevice converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificPbxDevice(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificPbxDevice(ctx, id)
	return err
}

// GetaspecificPbxDevice converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificPbxDevice(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificPbxDevice(ctx, id)
	return err
}

// ChangeaspecificPbxDevice converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificPbxDevice(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificPbxDevice(ctx, id)
	return err
}

// ReplacechangeaspecificPbxDevice converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificPbxDevice(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificPbxDevice(ctx, id)
	return err
}

// GetPbxFieldDevicePreferenceitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetPbxFieldDevicePreferenceitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPbxFieldDevicePreferenceitemsParams
	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPbxFieldDevicePreferenceitems(ctx, params)
	return err
}

// GetaspecificPbxFieldDevicePreference converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificPbxFieldDevicePreference(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificPbxFieldDevicePreference(ctx, id)
	return err
}

// ChangeaspecificPbxFieldDevicePreference converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificPbxFieldDevicePreference(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificPbxFieldDevicePreference(ctx, id)
	return err
}

// ReplacechangeaspecificPbxFieldDevicePreference converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificPbxFieldDevicePreference(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificPbxFieldDevicePreference(ctx, id)
	return err
}

// GetPeeringGroupitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetPeeringGroupitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPeeringGroupitemsParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Required query parameter "description" -------------

	err = runtime.BindQueryParameter("form", true, true, "description", ctx.QueryParams(), &params.Description)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter description: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPeeringGroupitems(ctx, params)
	return err
}

// CreateanewPeeringGroup converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewPeeringGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewPeeringGroup(ctx)
	return err
}

// DeleteaspecificPeeringGroup converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificPeeringGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificPeeringGroup(ctx, id)
	return err
}

// GetaspecificPeeringGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificPeeringGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificPeeringGroup(ctx, id)
	return err
}

// ChangeaspecificPeeringGroup converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificPeeringGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificPeeringGroup(ctx, id)
	return err
}

// ReplacechangeaspecificPeeringGroup converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificPeeringGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificPeeringGroup(ctx, id)
	return err
}

// GetPeeringInboundRuleitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetPeeringInboundRuleitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPeeringInboundRuleitemsParams
	// ------------- Required query parameter "group_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "group_id", ctx.QueryParams(), &params.GroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter group_id: %s", err))
	}

	// ------------- Required query parameter "field" -------------

	err = runtime.BindQueryParameter("form", true, true, "field", ctx.QueryParams(), &params.Field)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter field: %s", err))
	}

	// ------------- Required query parameter "enabled" -------------

	err = runtime.BindQueryParameter("form", true, true, "enabled", ctx.QueryParams(), &params.Enabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enabled: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPeeringInboundRuleitems(ctx, params)
	return err
}

// CreateanewPeeringInboundRule converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewPeeringInboundRule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewPeeringInboundRule(ctx)
	return err
}

// DeleteaspecificPeeringInboundRule converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificPeeringInboundRule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificPeeringInboundRule(ctx, id)
	return err
}

// GetaspecificPeeringInboundRule converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificPeeringInboundRule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificPeeringInboundRule(ctx, id)
	return err
}

// ChangeaspecificPeeringInboundRule converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificPeeringInboundRule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificPeeringInboundRule(ctx, id)
	return err
}

// ReplacechangeaspecificPeeringInboundRule converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificPeeringInboundRule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificPeeringInboundRule(ctx, id)
	return err
}

// GetPeeringRuleitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetPeeringRuleitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPeeringRuleitemsParams
	// ------------- Required query parameter "group_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "group_id", ctx.QueryParams(), &params.GroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter group_id: %s", err))
	}

	// ------------- Required query parameter "description" -------------

	err = runtime.BindQueryParameter("form", true, true, "description", ctx.QueryParams(), &params.Description)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter description: %s", err))
	}

	// ------------- Required query parameter "enabled" -------------

	err = runtime.BindQueryParameter("form", true, true, "enabled", ctx.QueryParams(), &params.Enabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enabled: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPeeringRuleitems(ctx, params)
	return err
}

// CreateanewPeeringRule converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewPeeringRule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewPeeringRule(ctx)
	return err
}

// DeleteaspecificPeeringRule converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificPeeringRule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificPeeringRule(ctx, id)
	return err
}

// GetaspecificPeeringRule converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificPeeringRule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificPeeringRule(ctx, id)
	return err
}

// ChangeaspecificPeeringRule converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificPeeringRule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificPeeringRule(ctx, id)
	return err
}

// ReplacechangeaspecificPeeringRule converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificPeeringRule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificPeeringRule(ctx, id)
	return err
}

// GetPeeringServerPreferenceitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetPeeringServerPreferenceitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPeeringServerPreferenceitemsParams
	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPeeringServerPreferenceitems(ctx, params)
	return err
}

// GetaspecificPeeringServerPreference converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificPeeringServerPreference(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificPeeringServerPreference(ctx, id)
	return err
}

// ChangeaspecificPeeringServerPreference converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificPeeringServerPreference(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificPeeringServerPreference(ctx, id)
	return err
}

// ReplacechangeaspecificPeeringServerPreference converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificPeeringServerPreference(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificPeeringServerPreference(ctx, id)
	return err
}

// GetPeeringServeritems converts echo context to params.
func (w *ServerInterfaceWrapper) GetPeeringServeritems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPeeringServeritemsParams
	// ------------- Required query parameter "group_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "group_id", ctx.QueryParams(), &params.GroupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter group_id: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Required query parameter "host" -------------

	err = runtime.BindQueryParameter("form", true, true, "host", ctx.QueryParams(), &params.Host)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter host: %s", err))
	}

	// ------------- Required query parameter "ip" -------------

	err = runtime.BindQueryParameter("form", true, true, "ip", ctx.QueryParams(), &params.Ip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ip: %s", err))
	}

	// ------------- Required query parameter "enabled" -------------

	err = runtime.BindQueryParameter("form", true, true, "enabled", ctx.QueryParams(), &params.Enabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter enabled: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPeeringServeritems(ctx, params)
	return err
}

// CreateanewPeeringServer converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewPeeringServer(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewPeeringServer(ctx)
	return err
}

// DeleteaspecificPeeringServer converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificPeeringServer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificPeeringServer(ctx, id)
	return err
}

// GetaspecificPeeringServer converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificPeeringServer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificPeeringServer(ctx, id)
	return err
}

// ChangeaspecificPeeringServer converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificPeeringServer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificPeeringServer(ctx, id)
	return err
}

// ReplacechangeaspecificPeeringServer converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificPeeringServer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificPeeringServer(ctx, id)
	return err
}

// GetPhonebookEntryitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetPhonebookEntryitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPhonebookEntryitemsParams
	// ------------- Required query parameter "reseller_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "reseller_id", ctx.QueryParams(), &params.ResellerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reseller_id: %s", err))
	}

	// ------------- Required query parameter "customer_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "customer_id", ctx.QueryParams(), &params.CustomerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter customer_id: %s", err))
	}

	// ------------- Required query parameter "subscriber_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "subscriber_id", ctx.QueryParams(), &params.SubscriberId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subscriber_id: %s", err))
	}

	// ------------- Required query parameter "number" -------------

	err = runtime.BindQueryParameter("form", true, true, "number", ctx.QueryParams(), &params.Number)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter number: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPhonebookEntryitems(ctx, params)
	return err
}

// CreateanewPhonebookEntry converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewPhonebookEntry(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewPhonebookEntry(ctx)
	return err
}

// DeleteaspecificPhonebookEntry converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificPhonebookEntry(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificPhonebookEntry(ctx, id)
	return err
}

// GetaspecificPhonebookEntry converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificPhonebookEntry(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificPhonebookEntry(ctx, id)
	return err
}

// ChangeaspecificPhonebookEntry converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificPhonebookEntry(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificPhonebookEntry(ctx, id)
	return err
}

// ReplacechangeaspecificPhonebookEntry converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificPhonebookEntry(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificPhonebookEntry(ctx, id)
	return err
}

// GetPreferencesMetaEntryitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetPreferencesMetaEntryitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPreferencesMetaEntryitemsParams
	// ------------- Required query parameter "attribute" -------------

	err = runtime.BindQueryParameter("form", true, true, "attribute", ctx.QueryParams(), &params.Attribute)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter attribute: %s", err))
	}

	// ------------- Required query parameter "model_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "model_id", ctx.QueryParams(), &params.ModelId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter model_id: %s", err))
	}

	// ------------- Required query parameter "reseller_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "reseller_id", ctx.QueryParams(), &params.ResellerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reseller_id: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPreferencesMetaEntryitems(ctx, params)
	return err
}

// CreateanewPreferencesMetaEntry converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewPreferencesMetaEntry(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewPreferencesMetaEntry(ctx)
	return err
}

// DeleteaspecificPreferencesMetaEntry converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificPreferencesMetaEntry(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificPreferencesMetaEntry(ctx, id)
	return err
}

// GetaspecificPreferencesMetaEntry converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificPreferencesMetaEntry(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificPreferencesMetaEntry(ctx, id)
	return err
}

// ChangeaspecificPreferencesMetaEntry converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificPreferencesMetaEntry(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificPreferencesMetaEntry(ctx, id)
	return err
}

// ReplacechangeaspecificPreferencesMetaEntry converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificPreferencesMetaEntry(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificPreferencesMetaEntry(ctx, id)
	return err
}

// GetProfilePackageitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetProfilePackageitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProfilePackageitemsParams
	// ------------- Required query parameter "reseller_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "reseller_id", ctx.QueryParams(), &params.ResellerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reseller_id: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Required query parameter "profile_name" -------------

	err = runtime.BindQueryParameter("form", true, true, "profile_name", ctx.QueryParams(), &params.ProfileName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter profile_name: %s", err))
	}

	// ------------- Required query parameter "network_name" -------------

	err = runtime.BindQueryParameter("form", true, true, "network_name", ctx.QueryParams(), &params.NetworkName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter network_name: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProfilePackageitems(ctx, params)
	return err
}

// CreateanewProfilePackage converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewProfilePackage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewProfilePackage(ctx)
	return err
}

// DeleteaspecificProfilePackage converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificProfilePackage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificProfilePackage(ctx, id)
	return err
}

// GetaspecificProfilePackage converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificProfilePackage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificProfilePackage(ctx, id)
	return err
}

// ChangeaspecificProfilePackage converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificProfilePackage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificProfilePackage(ctx, id)
	return err
}

// ReplacechangeaspecificProfilePackage converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificProfilePackage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificProfilePackage(ctx, id)
	return err
}

// GetProfilePreferenceitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetProfilePreferenceitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProfilePreferenceitemsParams
	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetProfilePreferenceitems(ctx, params)
	return err
}

// GetaspecificProfilePreference converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificProfilePreference(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificProfilePreference(ctx, id)
	return err
}

// ChangeaspecificProfilePreference converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificProfilePreference(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificProfilePreference(ctx, id)
	return err
}

// ReplacechangeaspecificProfilePreference converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificProfilePreference(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificProfilePreference(ctx, id)
	return err
}

// GetReminderitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetReminderitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetReminderitemsParams
	// ------------- Required query parameter "subscriber_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "subscriber_id", ctx.QueryParams(), &params.SubscriberId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subscriber_id: %s", err))
	}

	// ------------- Required query parameter "active" -------------

	err = runtime.BindQueryParameter("form", true, true, "active", ctx.QueryParams(), &params.Active)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter active: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReminderitems(ctx, params)
	return err
}

// CreateanewReminder converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewReminder(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewReminder(ctx)
	return err
}

// DeleteaspecificReminder converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificReminder(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificReminder(ctx, id)
	return err
}

// GetaspecificReminder converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificReminder(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificReminder(ctx, id)
	return err
}

// ChangeaspecificReminder converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificReminder(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificReminder(ctx, id)
	return err
}

// ReplacechangeaspecificReminder converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificReminder(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificReminder(ctx, id)
	return err
}

// GetReselleritems converts echo context to params.
func (w *ServerInterfaceWrapper) GetReselleritems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetReselleritemsParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReselleritems(ctx, params)
	return err
}

// CreateanewReseller converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewReseller(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewReseller(ctx)
	return err
}

// GetaspecificReseller converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificReseller(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificReseller(ctx, id)
	return err
}

// ChangeaspecificReseller converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificReseller(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificReseller(ctx, id)
	return err
}

// ReplacechangeaspecificReseller converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificReseller(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificReseller(ctx, id)
	return err
}

// GetRewriteRuleitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetRewriteRuleitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRewriteRuleitemsParams
	// ------------- Required query parameter "description" -------------

	err = runtime.BindQueryParameter("form", true, true, "description", ctx.QueryParams(), &params.Description)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter description: %s", err))
	}

	// ------------- Required query parameter "set_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "set_id", ctx.QueryParams(), &params.SetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter set_id: %s", err))
	}

	// ------------- Required query parameter "reseller_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "reseller_id", ctx.QueryParams(), &params.ResellerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reseller_id: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRewriteRuleitems(ctx, params)
	return err
}

// CreateanewRewriteRule converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewRewriteRule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewRewriteRule(ctx)
	return err
}

// DeleteaspecificRewriteRule converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificRewriteRule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificRewriteRule(ctx, id)
	return err
}

// GetaspecificRewriteRule converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificRewriteRule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificRewriteRule(ctx, id)
	return err
}

// ChangeaspecificRewriteRule converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificRewriteRule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificRewriteRule(ctx, id)
	return err
}

// ReplacechangeaspecificRewriteRule converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificRewriteRule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificRewriteRule(ctx, id)
	return err
}

// GetRewriteRuleSetitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetRewriteRuleSetitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRewriteRuleSetitemsParams
	// ------------- Required query parameter "reseller_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "reseller_id", ctx.QueryParams(), &params.ResellerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reseller_id: %s", err))
	}

	// ------------- Required query parameter "description" -------------

	err = runtime.BindQueryParameter("form", true, true, "description", ctx.QueryParams(), &params.Description)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter description: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRewriteRuleSetitems(ctx, params)
	return err
}

// CreateanewRewriteRuleSet converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewRewriteRuleSet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewRewriteRuleSet(ctx)
	return err
}

// DeleteaspecificRewriteRuleSet converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificRewriteRuleSet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificRewriteRuleSet(ctx, id)
	return err
}

// GetaspecificRewriteRuleSet converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificRewriteRuleSet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificRewriteRuleSet(ctx, id)
	return err
}

// ChangeaspecificRewriteRuleSet converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificRewriteRuleSet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificRewriteRuleSet(ctx, id)
	return err
}

// ReplacechangeaspecificRewriteRuleSet converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificRewriteRuleSet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificRewriteRuleSet(ctx, id)
	return err
}

// GetRtcAppitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetRtcAppitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRtcAppitemsParams
	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRtcAppitems(ctx, params)
	return err
}

// GetaspecificRtcApp converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificRtcApp(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificRtcApp(ctx, id)
	return err
}

// ChangeaspecificRtcApp converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificRtcApp(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificRtcApp(ctx, id)
	return err
}

// ReplacechangeaspecificRtcApp converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificRtcApp(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificRtcApp(ctx, id)
	return err
}

// GetRtcNetworkitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetRtcNetworkitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRtcNetworkitemsParams
	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRtcNetworkitems(ctx, params)
	return err
}

// GetaspecificRtcNetwork converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificRtcNetwork(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificRtcNetwork(ctx, id)
	return err
}

// ChangeaspecificRtcNetwork converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificRtcNetwork(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificRtcNetwork(ctx, id)
	return err
}

// ReplacechangeaspecificRtcNetwork converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificRtcNetwork(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificRtcNetwork(ctx, id)
	return err
}

// GetRtcSessionitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetRtcSessionitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRtcSessionitemsParams
	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRtcSessionitems(ctx, params)
	return err
}

// CreateanewRtcSession converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewRtcSession(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewRtcSession(ctx)
	return err
}

// GetaspecificRtcSession converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificRtcSession(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificRtcSession(ctx, id)
	return err
}

// GetSIPCaptureitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetSIPCaptureitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSIPCaptureitemsParams
	// ------------- Required query parameter "call_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "call_id", ctx.QueryParams(), &params.CallId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter call_id: %s", err))
	}

	// ------------- Required query parameter "start_ge" -------------

	err = runtime.BindQueryParameter("form", true, true, "start_ge", ctx.QueryParams(), &params.StartGe)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start_ge: %s", err))
	}

	// ------------- Required query parameter "start_le" -------------

	err = runtime.BindQueryParameter("form", true, true, "start_le", ctx.QueryParams(), &params.StartLe)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start_le: %s", err))
	}

	// ------------- Required query parameter "method" -------------

	err = runtime.BindQueryParameter("form", true, true, "method", ctx.QueryParams(), &params.Method)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter method: %s", err))
	}

	// ------------- Required query parameter "subscriber_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "subscriber_id", ctx.QueryParams(), &params.SubscriberId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subscriber_id: %s", err))
	}

	// ------------- Required query parameter "tz" -------------

	err = runtime.BindQueryParameter("form", true, true, "tz", ctx.QueryParams(), &params.Tz)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tz: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSIPCaptureitems(ctx, params)
	return err
}

// GetaspecificSIPCapture converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificSIPCapture(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificSIPCapture(ctx, id)
	return err
}

// GetSMSitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetSMSitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSMSitemsParams
	// ------------- Required query parameter "subscriber_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "subscriber_id", ctx.QueryParams(), &params.SubscriberId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subscriber_id: %s", err))
	}

	// ------------- Required query parameter "customer_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "customer_id", ctx.QueryParams(), &params.CustomerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter customer_id: %s", err))
	}

	// ------------- Required query parameter "reseller_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "reseller_id", ctx.QueryParams(), &params.ResellerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reseller_id: %s", err))
	}

	// ------------- Required query parameter "time_ge" -------------

	err = runtime.BindQueryParameter("form", true, true, "time_ge", ctx.QueryParams(), &params.TimeGe)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter time_ge: %s", err))
	}

	// ------------- Required query parameter "time_le" -------------

	err = runtime.BindQueryParameter("form", true, true, "time_le", ctx.QueryParams(), &params.TimeLe)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter time_le: %s", err))
	}

	// ------------- Required query parameter "direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "direction", ctx.QueryParams(), &params.Direction)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter direction: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSMSitems(ctx, params)
	return err
}

// CreateanewSMS converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewSMS(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewSMS(ctx)
	return err
}

// GetaspecificSMS converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificSMS(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificSMS(ctx, id)
	return err
}

// GetaspecificSoundFileRecording converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificSoundFileRecording(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificSoundFileRecording(ctx, id)
	return err
}

// GetSoundFileitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetSoundFileitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSoundFileitemsParams
	// ------------- Required query parameter "set_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "set_id", ctx.QueryParams(), &params.SetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter set_id: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSoundFileitems(ctx, params)
	return err
}

// CreateanewSoundFile converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewSoundFile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewSoundFile(ctx)
	return err
}

// DeleteaspecificSoundFile converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificSoundFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificSoundFile(ctx, id)
	return err
}

// GetaspecificSoundFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificSoundFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificSoundFile(ctx, id)
	return err
}

// ReplacechangeaspecificSoundFile converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificSoundFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificSoundFile(ctx, id)
	return err
}

// GetSoundGroupitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetSoundGroupitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSoundGroupitemsParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSoundGroupitems(ctx, params)
	return err
}

// GetaspecificSoundGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificSoundGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificSoundGroup(ctx, id)
	return err
}

// GetSoundHandleitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetSoundHandleitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSoundHandleitemsParams
	// ------------- Required query parameter "group" -------------

	err = runtime.BindQueryParameter("form", true, true, "group", ctx.QueryParams(), &params.Group)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter group: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSoundHandleitems(ctx, params)
	return err
}

// GetaspecificSoundHandle converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificSoundHandle(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificSoundHandle(ctx, id)
	return err
}

// GetSoundSetitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetSoundSetitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSoundSetitemsParams
	// ------------- Required query parameter "customer_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "customer_id", ctx.QueryParams(), &params.CustomerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter customer_id: %s", err))
	}

	// ------------- Required query parameter "reseller_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "reseller_id", ctx.QueryParams(), &params.ResellerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reseller_id: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSoundSetitems(ctx, params)
	return err
}

// CreateanewSoundSet converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewSoundSet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewSoundSet(ctx)
	return err
}

// DeleteaspecificSoundSet converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificSoundSet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificSoundSet(ctx, id)
	return err
}

// GetaspecificSoundSet converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificSoundSet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificSoundSet(ctx, id)
	return err
}

// ChangeaspecificSoundSet converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificSoundSet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificSoundSet(ctx, id)
	return err
}

// ReplacechangeaspecificSoundSet converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificSoundSet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificSoundSet(ctx, id)
	return err
}

// GetSpeedDialitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetSpeedDialitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSpeedDialitemsParams
	// ------------- Required query parameter "nonempty" -------------

	err = runtime.BindQueryParameter("form", true, true, "nonempty", ctx.QueryParams(), &params.Nonempty)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nonempty: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSpeedDialitems(ctx, params)
	return err
}

// GetaspecificSpeedDial converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificSpeedDial(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificSpeedDial(ctx, id)
	return err
}

// ChangeaspecificSpeedDial converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificSpeedDial(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificSpeedDial(ctx, id)
	return err
}

// ReplacechangeaspecificSpeedDial converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificSpeedDial(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificSpeedDial(ctx, id)
	return err
}

// GetSubscriberPreferenceitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetSubscriberPreferenceitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSubscriberPreferenceitemsParams
	// ------------- Required query parameter "reseller_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "reseller_id", ctx.QueryParams(), &params.ResellerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reseller_id: %s", err))
	}

	// ------------- Required query parameter "contact_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "contact_id", ctx.QueryParams(), &params.ContactId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contact_id: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSubscriberPreferenceitems(ctx, params)
	return err
}

// GetaspecificSubscriberPreference converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificSubscriberPreference(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificSubscriberPreference(ctx, id)
	return err
}

// ChangeaspecificSubscriberPreference converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificSubscriberPreference(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificSubscriberPreference(ctx, id)
	return err
}

// ReplacechangeaspecificSubscriberPreference converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificSubscriberPreference(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificSubscriberPreference(ctx, id)
	return err
}

// GetSubscriberProfileitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetSubscriberProfileitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSubscriberProfileitemsParams
	// ------------- Required query parameter "profile_set_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "profile_set_id", ctx.QueryParams(), &params.ProfileSetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter profile_set_id: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSubscriberProfileitems(ctx, params)
	return err
}

// CreateanewSubscriberProfile converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewSubscriberProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewSubscriberProfile(ctx)
	return err
}

// DeleteaspecificSubscriberProfile converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificSubscriberProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificSubscriberProfile(ctx, id)
	return err
}

// GetaspecificSubscriberProfile converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificSubscriberProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificSubscriberProfile(ctx, id)
	return err
}

// ChangeaspecificSubscriberProfile converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificSubscriberProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificSubscriberProfile(ctx, id)
	return err
}

// ReplacechangeaspecificSubscriberProfile converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificSubscriberProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificSubscriberProfile(ctx, id)
	return err
}

// GetSubscriberProfileSetitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetSubscriberProfileSetitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSubscriberProfileSetitemsParams
	// ------------- Required query parameter "reseller_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "reseller_id", ctx.QueryParams(), &params.ResellerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reseller_id: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSubscriberProfileSetitems(ctx, params)
	return err
}

// CreateanewSubscriberProfileSet converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewSubscriberProfileSet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewSubscriberProfileSet(ctx)
	return err
}

// DeleteaspecificSubscriberProfileSet converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificSubscriberProfileSet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificSubscriberProfileSet(ctx, id)
	return err
}

// GetaspecificSubscriberProfileSet converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificSubscriberProfileSet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificSubscriberProfileSet(ctx, id)
	return err
}

// ChangeaspecificSubscriberProfileSet converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificSubscriberProfileSet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificSubscriberProfileSet(ctx, id)
	return err
}

// ReplacechangeaspecificSubscriberProfileSet converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificSubscriberProfileSet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificSubscriberProfileSet(ctx, id)
	return err
}

// GetSubscriberRegistrationitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetSubscriberRegistrationitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSubscriberRegistrationitemsParams
	// ------------- Required query parameter "subscriber_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "subscriber_id", ctx.QueryParams(), &params.SubscriberId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subscriber_id: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSubscriberRegistrationitems(ctx, params)
	return err
}

// CreateanewSubscriberRegistration converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewSubscriberRegistration(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewSubscriberRegistration(ctx)
	return err
}

// DeleteaspecificSubscriberRegistration converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificSubscriberRegistration(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificSubscriberRegistration(ctx, id)
	return err
}

// GetaspecificSubscriberRegistration converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificSubscriberRegistration(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificSubscriberRegistration(ctx, id)
	return err
}

// ChangeaspecificSubscriberRegistration converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificSubscriberRegistration(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificSubscriberRegistration(ctx, id)
	return err
}

// ReplacechangeaspecificSubscriberRegistration converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificSubscriberRegistration(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificSubscriberRegistration(ctx, id)
	return err
}

// GetSubscriberitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetSubscriberitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSubscriberitemsParams
	// ------------- Required query parameter "profile_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "profile_id", ctx.QueryParams(), &params.ProfileId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter profile_id: %s", err))
	}

	// ------------- Required query parameter "username" -------------

	err = runtime.BindQueryParameter("form", true, true, "username", ctx.QueryParams(), &params.Username)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter username: %s", err))
	}

	// ------------- Required query parameter "webusername" -------------

	err = runtime.BindQueryParameter("form", true, true, "webusername", ctx.QueryParams(), &params.Webusername)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter webusername: %s", err))
	}

	// ------------- Required query parameter "webpassword" -------------

	err = runtime.BindQueryParameter("form", true, true, "webpassword", ctx.QueryParams(), &params.Webpassword)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter webpassword: %s", err))
	}

	// ------------- Required query parameter "domain" -------------

	err = runtime.BindQueryParameter("form", true, true, "domain", ctx.QueryParams(), &params.Domain)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter domain: %s", err))
	}

	// ------------- Required query parameter "customer_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "customer_id", ctx.QueryParams(), &params.CustomerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter customer_id: %s", err))
	}

	// ------------- Required query parameter "customer_external_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "customer_external_id", ctx.QueryParams(), &params.CustomerExternalId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter customer_external_id: %s", err))
	}

	// ------------- Required query parameter "subscriber_external_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "subscriber_external_id", ctx.QueryParams(), &params.SubscriberExternalId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subscriber_external_id: %s", err))
	}

	// ------------- Required query parameter "is_pbx_group" -------------

	err = runtime.BindQueryParameter("form", true, true, "is_pbx_group", ctx.QueryParams(), &params.IsPbxGroup)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_pbx_group: %s", err))
	}

	// ------------- Required query parameter "is_admin" -------------

	err = runtime.BindQueryParameter("form", true, true, "is_admin", ctx.QueryParams(), &params.IsAdmin)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_admin: %s", err))
	}

	// ------------- Required query parameter "is_pbx_pilot" -------------

	err = runtime.BindQueryParameter("form", true, true, "is_pbx_pilot", ctx.QueryParams(), &params.IsPbxPilot)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_pbx_pilot: %s", err))
	}

	// ------------- Required query parameter "alias" -------------

	err = runtime.BindQueryParameter("form", true, true, "alias", ctx.QueryParams(), &params.Alias)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter alias: %s", err))
	}

	// ------------- Required query parameter "reseller_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "reseller_id", ctx.QueryParams(), &params.ResellerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reseller_id: %s", err))
	}

	// ------------- Required query parameter "contact_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "contact_id", ctx.QueryParams(), &params.ContactId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contact_id: %s", err))
	}

	// ------------- Required query parameter "create_timestamp_gt" -------------

	err = runtime.BindQueryParameter("form", true, true, "create_timestamp_gt", ctx.QueryParams(), &params.CreateTimestampGt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter create_timestamp_gt: %s", err))
	}

	// ------------- Required query parameter "create_timestamp_lt" -------------

	err = runtime.BindQueryParameter("form", true, true, "create_timestamp_lt", ctx.QueryParams(), &params.CreateTimestampLt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter create_timestamp_lt: %s", err))
	}

	// ------------- Required query parameter "modify_timestamp_gt" -------------

	err = runtime.BindQueryParameter("form", true, true, "modify_timestamp_gt", ctx.QueryParams(), &params.ModifyTimestampGt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modify_timestamp_gt: %s", err))
	}

	// ------------- Required query parameter "modify_timestamp_lt" -------------

	err = runtime.BindQueryParameter("form", true, true, "modify_timestamp_lt", ctx.QueryParams(), &params.ModifyTimestampLt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter modify_timestamp_lt: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSubscriberitems(ctx, params)
	return err
}

// CreateanewSubscriber converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewSubscriber(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewSubscriber(ctx)
	return err
}

// DeleteaspecificSubscriber converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificSubscriber(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificSubscriber(ctx, id)
	return err
}

// GetaspecificSubscriber converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificSubscriber(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificSubscriber(ctx, id)
	return err
}

// ChangeaspecificSubscriber converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificSubscriber(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificSubscriber(ctx, id)
	return err
}

// ReplacechangeaspecificSubscriber converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificSubscriber(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificSubscriber(ctx, id)
	return err
}

// GetSystemContactitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetSystemContactitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSystemContactitemsParams
	// ------------- Required query parameter "email" -------------

	err = runtime.BindQueryParameter("form", true, true, "email", ctx.QueryParams(), &params.Email)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter email: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSystemContactitems(ctx, params)
	return err
}

// CreateanewSystemContact converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewSystemContact(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewSystemContact(ctx)
	return err
}

// DeleteaspecificSystemContact converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificSystemContact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificSystemContact(ctx, id)
	return err
}

// GetaspecificSystemContact converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificSystemContact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificSystemContact(ctx, id)
	return err
}

// ChangeaspecificSystemContact converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificSystemContact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificSystemContact(ctx, id)
	return err
}

// ReplacechangeaspecificSystemContact converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificSystemContact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificSystemContact(ctx, id)
	return err
}

// CreateanewTopupCash converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewTopupCash(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewTopupCash(ctx)
	return err
}

// GetTopupLogitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetTopupLogitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTopupLogitemsParams
	// ------------- Required query parameter "reseller_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "reseller_id", ctx.QueryParams(), &params.ResellerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reseller_id: %s", err))
	}

	// ------------- Required query parameter "request_token" -------------

	err = runtime.BindQueryParameter("form", true, true, "request_token", ctx.QueryParams(), &params.RequestToken)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter request_token: %s", err))
	}

	// ------------- Required query parameter "timestamp_from" -------------

	err = runtime.BindQueryParameter("form", true, true, "timestamp_from", ctx.QueryParams(), &params.TimestampFrom)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timestamp_from: %s", err))
	}

	// ------------- Required query parameter "timestamp_to" -------------

	err = runtime.BindQueryParameter("form", true, true, "timestamp_to", ctx.QueryParams(), &params.TimestampTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timestamp_to: %s", err))
	}

	// ------------- Required query parameter "contract_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "contract_id", ctx.QueryParams(), &params.ContractId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contract_id: %s", err))
	}

	// ------------- Required query parameter "subscriber_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "subscriber_id", ctx.QueryParams(), &params.SubscriberId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subscriber_id: %s", err))
	}

	// ------------- Required query parameter "voucher_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "voucher_id", ctx.QueryParams(), &params.VoucherId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter voucher_id: %s", err))
	}

	// ------------- Required query parameter "outcome" -------------

	err = runtime.BindQueryParameter("form", true, true, "outcome", ctx.QueryParams(), &params.Outcome)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter outcome: %s", err))
	}

	// ------------- Required query parameter "amount_above" -------------

	err = runtime.BindQueryParameter("form", true, true, "amount_above", ctx.QueryParams(), &params.AmountAbove)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter amount_above: %s", err))
	}

	// ------------- Required query parameter "amount_below" -------------

	err = runtime.BindQueryParameter("form", true, true, "amount_below", ctx.QueryParams(), &params.AmountBelow)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter amount_below: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTopupLogitems(ctx, params)
	return err
}

// GetaspecificTopupLog converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificTopupLog(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificTopupLog(ctx, id)
	return err
}

// CreateanewTopupVoucher converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewTopupVoucher(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewTopupVoucher(ctx)
	return err
}

// GetTrustedSourceitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetTrustedSourceitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTrustedSourceitemsParams
	// ------------- Required query parameter "subscriber_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "subscriber_id", ctx.QueryParams(), &params.SubscriberId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subscriber_id: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTrustedSourceitems(ctx, params)
	return err
}

// CreateanewTrustedSource converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewTrustedSource(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewTrustedSource(ctx)
	return err
}

// DeleteaspecificTrustedSource converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificTrustedSource(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificTrustedSource(ctx, id)
	return err
}

// GetaspecificTrustedSource converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificTrustedSource(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificTrustedSource(ctx, id)
	return err
}

// ChangeaspecificTrustedSource converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificTrustedSource(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificTrustedSource(ctx, id)
	return err
}

// ReplacechangeaspecificTrustedSource converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificTrustedSource(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificTrustedSource(ctx, id)
	return err
}

// GetUpnRewriteSetitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetUpnRewriteSetitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUpnRewriteSetitemsParams
	// ------------- Required query parameter "subscriber_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "subscriber_id", ctx.QueryParams(), &params.SubscriberId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subscriber_id: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUpnRewriteSetitems(ctx, params)
	return err
}

// CreateanewUpnRewriteSet converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewUpnRewriteSet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewUpnRewriteSet(ctx)
	return err
}

// DeleteaspecificUpnRewriteSet converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificUpnRewriteSet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificUpnRewriteSet(ctx, id)
	return err
}

// GetaspecificUpnRewriteSet converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificUpnRewriteSet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificUpnRewriteSet(ctx, id)
	return err
}

// ChangeaspecificUpnRewriteSet converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificUpnRewriteSet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificUpnRewriteSet(ctx, id)
	return err
}

// ReplacechangeaspecificUpnRewriteSet converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificUpnRewriteSet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificUpnRewriteSet(ctx, id)
	return err
}

// GetVoicemailGreetingitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetVoicemailGreetingitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVoicemailGreetingitemsParams
	// ------------- Required query parameter "subscriber_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "subscriber_id", ctx.QueryParams(), &params.SubscriberId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subscriber_id: %s", err))
	}

	// ------------- Required query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, true, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVoicemailGreetingitems(ctx, params)
	return err
}

// CreateanewVoicemailGreeting converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewVoicemailGreeting(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewVoicemailGreeting(ctx)
	return err
}

// DeleteaspecificVoicemailGreeting converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificVoicemailGreeting(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificVoicemailGreeting(ctx, id)
	return err
}

// GetaspecificVoicemailGreeting converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificVoicemailGreeting(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificVoicemailGreeting(ctx, id)
	return err
}

// ReplacechangeaspecificVoicemailGreeting converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificVoicemailGreeting(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificVoicemailGreeting(ctx, id)
	return err
}

// GetaspecificVoicemailRecording converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificVoicemailRecording(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificVoicemailRecording(ctx, id)
	return err
}

// GetVoicemailitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetVoicemailitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVoicemailitemsParams
	// ------------- Required query parameter "tz" -------------

	err = runtime.BindQueryParameter("form", true, true, "tz", ctx.QueryParams(), &params.Tz)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tz: %s", err))
	}

	// ------------- Required query parameter "use_owner_tz" -------------

	err = runtime.BindQueryParameter("form", true, true, "use_owner_tz", ctx.QueryParams(), &params.UseOwnerTz)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter use_owner_tz: %s", err))
	}

	// ------------- Required query parameter "subscriber_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "subscriber_id", ctx.QueryParams(), &params.SubscriberId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subscriber_id: %s", err))
	}

	// ------------- Required query parameter "folder" -------------

	err = runtime.BindQueryParameter("form", true, true, "folder", ctx.QueryParams(), &params.Folder)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter folder: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVoicemailitems(ctx, params)
	return err
}

// DeleteaspecificVoicemail converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificVoicemail(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificVoicemail(ctx, id)
	return err
}

// GetaspecificVoicemail converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificVoicemail(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificVoicemail(ctx, id)
	return err
}

// ChangeaspecificVoicemail converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificVoicemail(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificVoicemail(ctx, id)
	return err
}

// ReplacechangeaspecificVoicemail converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificVoicemail(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificVoicemail(ctx, id)
	return err
}

// GetVoicemailSettingitems converts echo context to params.
func (w *ServerInterfaceWrapper) GetVoicemailSettingitems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVoicemailSettingitemsParams
	// ------------- Required query parameter "subscriber_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "subscriber_id", ctx.QueryParams(), &params.SubscriberId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subscriber_id: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVoicemailSettingitems(ctx, params)
	return err
}

// GetaspecificVoicemailSetting converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificVoicemailSetting(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificVoicemailSetting(ctx, id)
	return err
}

// ChangeaspecificVoicemailSetting converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificVoicemailSetting(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificVoicemailSetting(ctx, id)
	return err
}

// ReplacechangeaspecificVoicemailSetting converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificVoicemailSetting(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificVoicemailSetting(ctx, id)
	return err
}

// GetVoucheritems converts echo context to params.
func (w *ServerInterfaceWrapper) GetVoucheritems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVoucheritemsParams
	// ------------- Required query parameter "reseller_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "reseller_id", ctx.QueryParams(), &params.ResellerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reseller_id: %s", err))
	}

	// ------------- Required query parameter "package_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "package_id", ctx.QueryParams(), &params.PackageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter package_id: %s", err))
	}

	// ------------- Required query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by: %s", err))
	}

	// ------------- Required query parameter "order_by_direction" -------------

	err = runtime.BindQueryParameter("form", true, true, "order_by_direction", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_by_direction: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "rows" -------------

	err = runtime.BindQueryParameter("form", true, true, "rows", ctx.QueryParams(), &params.Rows)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rows: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVoucheritems(ctx, params)
	return err
}

// CreateanewVoucher converts echo context to params.
func (w *ServerInterfaceWrapper) CreateanewVoucher(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateanewVoucher(ctx)
	return err
}

// DeleteaspecificVoucher converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteaspecificVoucher(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteaspecificVoucher(ctx, id)
	return err
}

// GetaspecificVoucher converts echo context to params.
func (w *ServerInterfaceWrapper) GetaspecificVoucher(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetaspecificVoucher(ctx, id)
	return err
}

// ChangeaspecificVoucher converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeaspecificVoucher(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeaspecificVoucher(ctx, id)
	return err
}

// ReplacechangeaspecificVoucher converts echo context to params.
func (w *ServerInterfaceWrapper) ReplacechangeaspecificVoucher(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReplacechangeaspecificVoucher(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/admincerts", wrapper.CreateanewAdminCert)
	router.GET("/admins", wrapper.GetAdminitems)
	router.POST("/admins", wrapper.CreateanewAdmin)
	router.DELETE("/admins/:id", wrapper.DeleteaspecificAdmin)
	router.GET("/admins/:id", wrapper.GetaspecificAdmin)
	router.POST("/applyrewrites", wrapper.CreateanewApplyRewrite)
	router.GET("/autoattendants", wrapper.GetAutoAttendantitems)
	router.GET("/autoattendants/:id", wrapper.GetaspecificAutoAttendant)
	router.PATCH("/autoattendants/:id", wrapper.ChangeaspecificAutoAttendant)
	router.PUT("/autoattendants/:id", wrapper.ReplacechangeaspecificAutoAttendant)
	router.GET("/balanceintervals", wrapper.GetBalanceIntervalitems)
	router.GET("/balanceintervals/:id", wrapper.GetaspecificBalanceInterval)
	router.GET("/bannedips", wrapper.GetBannedIpitems)
	router.DELETE("/bannedips/:id", wrapper.DeleteaspecificBannedIp)
	router.GET("/bannedips/:id", wrapper.GetaspecificBannedIp)
	router.GET("/bannedusers", wrapper.GetBannedUseritems)
	router.DELETE("/bannedusers/:id", wrapper.DeleteaspecificBannedUser)
	router.GET("/bannedusers/:id", wrapper.GetaspecificBannedUser)
	router.GET("/billingfees", wrapper.GetBillingFeeitems)
	router.POST("/billingfees", wrapper.CreateanewBillingFee)
	router.DELETE("/billingfees/:id", wrapper.DeleteaspecificBillingFee)
	router.GET("/billingfees/:id", wrapper.GetaspecificBillingFee)
	router.PATCH("/billingfees/:id", wrapper.ChangeaspecificBillingFee)
	router.PUT("/billingfees/:id", wrapper.ReplacechangeaspecificBillingFee)
	router.GET("/billingnetworks", wrapper.GetBillingNetworkitems)
	router.POST("/billingnetworks", wrapper.CreateanewBillingNetwork)
	router.GET("/billingnetworks/:id", wrapper.GetaspecificBillingNetwork)
	router.PATCH("/billingnetworks/:id", wrapper.ChangeaspecificBillingNetwork)
	router.PUT("/billingnetworks/:id", wrapper.ReplacechangeaspecificBillingNetwork)
	router.GET("/billingprofiles", wrapper.GetBillingProfileitems)
	router.POST("/billingprofiles", wrapper.CreateanewBillingProfile)
	router.GET("/billingprofiles/:id", wrapper.GetaspecificBillingProfile)
	router.PATCH("/billingprofiles/:id", wrapper.ChangeaspecificBillingProfile)
	router.PUT("/billingprofiles/:id", wrapper.ReplacechangeaspecificBillingProfile)
	router.GET("/billingzones", wrapper.GetBillingZoneitems)
	router.POST("/billingzones", wrapper.CreateanewBillingZone)
	router.DELETE("/billingzones/:id", wrapper.DeleteaspecificBillingZone)
	router.GET("/billingzones/:id", wrapper.GetaspecificBillingZone)
	router.PATCH("/billingzones/:id", wrapper.ChangeaspecificBillingZone)
	router.PUT("/billingzones/:id", wrapper.ReplacechangeaspecificBillingZone)
	router.POST("/callcontrols", wrapper.CreateanewCallControl)
	router.GET("/callforwards", wrapper.GetCallForwarditems)
	router.DELETE("/callforwards/:id", wrapper.DeleteaspecificCallForward)
	router.GET("/callforwards/:id", wrapper.GetaspecificCallForward)
	router.PATCH("/callforwards/:id", wrapper.ChangeaspecificCallForward)
	router.PUT("/callforwards/:id", wrapper.ReplacechangeaspecificCallForward)
	router.GET("/calllists", wrapper.GetCallListitems)
	router.GET("/calllists/:id", wrapper.GetaspecificCallList)
	router.GET("/callqueues", wrapper.GetCallQueueitems)
	router.GET("/callqueues/:id", wrapper.GetaspecificCallQueue)
	router.GET("/callrecordingfiles/:id", wrapper.GetaspecificCallRecordingFile)
	router.GET("/callrecordings", wrapper.GetCallRecordingitems)
	router.DELETE("/callrecordings/:id", wrapper.DeleteaspecificCallRecording)
	router.GET("/callrecordings/:id", wrapper.GetaspecificCallRecording)
	router.GET("/callrecordingstreams", wrapper.GetCallRecordingStreamitems)
	router.DELETE("/callrecordingstreams/:id", wrapper.DeleteaspecificCallRecordingStream)
	router.GET("/callrecordingstreams/:id", wrapper.GetaspecificCallRecordingStream)
	router.GET("/calls", wrapper.GetCallitems)
	router.GET("/calls/:id", wrapper.GetaspecificCall)
	router.GET("/capabilities", wrapper.GetCapabilityitems)
	router.GET("/capabilities/:id", wrapper.GetaspecificCapability)
	router.GET("/ccmapentries", wrapper.GetCCMapEntryitems)
	router.DELETE("/ccmapentries/:id", wrapper.DeleteaspecificCCMapEntry)
	router.GET("/ccmapentries/:id", wrapper.GetaspecificCCMapEntry)
	router.PATCH("/ccmapentries/:id", wrapper.ChangeaspecificCCMapEntry)
	router.PUT("/ccmapentries/:id", wrapper.ReplacechangeaspecificCCMapEntry)
	router.GET("/cfbnumbersets", wrapper.GetCFBNumberSetitems)
	router.POST("/cfbnumbersets", wrapper.CreateanewCFBNumberSet)
	router.DELETE("/cfbnumbersets/:id", wrapper.DeleteaspecificCFBNumberSet)
	router.GET("/cfbnumbersets/:id", wrapper.GetaspecificCFBNumberSet)
	router.PATCH("/cfbnumbersets/:id", wrapper.ChangeaspecificCFBNumberSet)
	router.PUT("/cfbnumbersets/:id", wrapper.ReplacechangeaspecificCFBNumberSet)
	router.GET("/cfdestinationsets", wrapper.GetCFDestinationSetitems)
	router.POST("/cfdestinationsets", wrapper.CreateanewCFDestinationSet)
	router.DELETE("/cfdestinationsets/:id", wrapper.DeleteaspecificCFDestinationSet)
	router.GET("/cfdestinationsets/:id", wrapper.GetaspecificCFDestinationSet)
	router.PATCH("/cfdestinationsets/:id", wrapper.ChangeaspecificCFDestinationSet)
	router.PUT("/cfdestinationsets/:id", wrapper.ReplacechangeaspecificCFDestinationSet)
	router.GET("/cfmappings", wrapper.GetCFMappingitems)
	router.GET("/cfmappings/:id", wrapper.GetaspecificCFMapping)
	router.PATCH("/cfmappings/:id", wrapper.ChangeaspecificCFMapping)
	router.PUT("/cfmappings/:id", wrapper.ReplacechangeaspecificCFMapping)
	router.GET("/cfsourcesets", wrapper.GetCFSourceSetitems)
	router.POST("/cfsourcesets", wrapper.CreateanewCFSourceSet)
	router.DELETE("/cfsourcesets/:id", wrapper.DeleteaspecificCFSourceSet)
	router.GET("/cfsourcesets/:id", wrapper.GetaspecificCFSourceSet)
	router.PATCH("/cfsourcesets/:id", wrapper.ChangeaspecificCFSourceSet)
	router.PUT("/cfsourcesets/:id", wrapper.ReplacechangeaspecificCFSourceSet)
	router.GET("/cftimesets", wrapper.GetCFTimeSetitems)
	router.POST("/cftimesets", wrapper.CreateanewCFTimeSet)
	router.DELETE("/cftimesets/:id", wrapper.DeleteaspecificCFTimeSet)
	router.GET("/cftimesets/:id", wrapper.GetaspecificCFTimeSet)
	router.PATCH("/cftimesets/:id", wrapper.ChangeaspecificCFTimeSet)
	router.PUT("/cftimesets/:id", wrapper.ReplacechangeaspecificCFTimeSet)
	router.GET("/contracts", wrapper.GetContractitems)
	router.POST("/contracts", wrapper.CreateanewContract)
	router.GET("/contracts/:id", wrapper.GetaspecificContract)
	router.PATCH("/contracts/:id", wrapper.ChangeaspecificContract)
	router.PUT("/contracts/:id", wrapper.ReplacechangeaspecificContract)
	router.GET("/conversations", wrapper.GetConversationitems)
	router.GET("/conversations/:id", wrapper.GetaspecificConversation)
	router.GET("/customerbalances", wrapper.GetCustomerBalanceitems)
	router.GET("/customerbalances/:id", wrapper.GetaspecificCustomerBalance)
	router.PATCH("/customerbalances/:id", wrapper.ChangeaspecificCustomerBalance)
	router.PUT("/customerbalances/:id", wrapper.ReplacechangeaspecificCustomerBalance)
	router.GET("/customercontacts", wrapper.GetCustomerContactitems)
	router.POST("/customercontacts", wrapper.CreateanewCustomerContact)
	router.DELETE("/customercontacts/:id", wrapper.DeleteaspecificCustomerContact)
	router.GET("/customercontacts/:id", wrapper.GetaspecificCustomerContact)
	router.PATCH("/customercontacts/:id", wrapper.ChangeaspecificCustomerContact)
	router.PUT("/customercontacts/:id", wrapper.ReplacechangeaspecificCustomerContact)
	router.GET("/customerfraudevents", wrapper.GetCustomerFraudEventitems)
	router.GET("/customerfraudevents/:id", wrapper.GetaspecificCustomerFraudEvent)
	router.GET("/customerfraudpreferences", wrapper.GetCustomerFraudPreferenceitems)
	router.GET("/customerfraudpreferences/:id", wrapper.GetaspecificCustomerFraudPreference)
	router.PATCH("/customerfraudpreferences/:id", wrapper.ChangeaspecificCustomerFraudPreference)
	router.PUT("/customerfraudpreferences/:id", wrapper.ReplacechangeaspecificCustomerFraudPreference)
	router.GET("/customerlocations", wrapper.GetCustomerLocationitems)
	router.POST("/customerlocations", wrapper.CreateanewCustomerLocation)
	router.DELETE("/customerlocations/:id", wrapper.DeleteaspecificCustomerLocation)
	router.GET("/customerlocations/:id", wrapper.GetaspecificCustomerLocation)
	router.PATCH("/customerlocations/:id", wrapper.ChangeaspecificCustomerLocation)
	router.PUT("/customerlocations/:id", wrapper.ReplacechangeaspecificCustomerLocation)
	router.GET("/customerpreferences", wrapper.GetCustomerPreferenceitems)
	router.GET("/customerpreferences/:id", wrapper.GetaspecificCustomerPreference)
	router.PATCH("/customerpreferences/:id", wrapper.ChangeaspecificCustomerPreference)
	router.PUT("/customerpreferences/:id", wrapper.ReplacechangeaspecificCustomerPreference)
	router.GET("/customers", wrapper.GetCustomeritems)
	router.POST("/customers", wrapper.CreateanewCustomer)
	router.GET("/customers/:id", wrapper.GetaspecificCustomer)
	router.PATCH("/customers/:id", wrapper.ChangeaspecificCustomer)
	router.PUT("/customers/:id", wrapper.ReplacechangeaspecificCustomer)
	router.GET("/customerzonecosts", wrapper.GetCustomerZoneCostitems)
	router.GET("/customerzonecosts/:id", wrapper.GetaspecificCustomerZoneCost)
	router.GET("/domainpreferences", wrapper.GetDomainPreferenceitems)
	router.GET("/domainpreferences/:id", wrapper.GetaspecificDomainPreference)
	router.PATCH("/domainpreferences/:id", wrapper.ChangeaspecificDomainPreference)
	router.PUT("/domainpreferences/:id", wrapper.ReplacechangeaspecificDomainPreference)
	router.GET("/domains", wrapper.GetDomainitems)
	router.POST("/domains", wrapper.CreateanewDomain)
	router.DELETE("/domains/:id", wrapper.DeleteaspecificDomain)
	router.GET("/domains/:id", wrapper.GetaspecificDomain)
	router.GET("/emailtemplates", wrapper.GetEmailTemplateitems)
	router.POST("/emailtemplates", wrapper.CreateanewEmailTemplate)
	router.DELETE("/emailtemplates/:id", wrapper.DeleteaspecificEmailTemplate)
	router.GET("/emailtemplates/:id", wrapper.GetaspecificEmailTemplate)
	router.PATCH("/emailtemplates/:id", wrapper.ChangeaspecificEmailTemplate)
	router.PUT("/emailtemplates/:id", wrapper.ReplacechangeaspecificEmailTemplate)
	router.GET("/emergencymappingcontainers", wrapper.GetEmergencyMappingContaineritems)
	router.POST("/emergencymappingcontainers", wrapper.CreateanewEmergencyMappingContainer)
	router.DELETE("/emergencymappingcontainers/:id", wrapper.DeleteaspecificEmergencyMappingContainer)
	router.GET("/emergencymappingcontainers/:id", wrapper.GetaspecificEmergencyMappingContainer)
	router.PATCH("/emergencymappingcontainers/:id", wrapper.ChangeaspecificEmergencyMappingContainer)
	router.PUT("/emergencymappingcontainers/:id", wrapper.ReplacechangeaspecificEmergencyMappingContainer)
	router.GET("/emergencymappings", wrapper.GetEmergencyMappingitems)
	router.POST("/emergencymappings", wrapper.CreateanewEmergencyMapping)
	router.DELETE("/emergencymappings/:id", wrapper.DeleteaspecificEmergencyMapping)
	router.GET("/emergencymappings/:id", wrapper.GetaspecificEmergencyMapping)
	router.PATCH("/emergencymappings/:id", wrapper.ChangeaspecificEmergencyMapping)
	router.PUT("/emergencymappings/:id", wrapper.ReplacechangeaspecificEmergencyMapping)
	router.GET("/events", wrapper.GetEventitems)
	router.GET("/events/:id", wrapper.GetaspecificEvent)
	router.GET("/faxes", wrapper.GetFaxitems)
	router.POST("/faxes", wrapper.CreateanewFax)
	router.GET("/faxes/:id", wrapper.GetaspecificFax)
	router.GET("/faxrecordings/:id", wrapper.GetaspecificFaxRecording)
	router.GET("/faxserversettings", wrapper.GetFaxserverSettingitems)
	router.GET("/faxserversettings/:id", wrapper.GetaspecificFaxserverSetting)
	router.PATCH("/faxserversettings/:id", wrapper.ChangeaspecificFaxserverSetting)
	router.PUT("/faxserversettings/:id", wrapper.ReplacechangeaspecificFaxserverSetting)
	router.GET("/interceptions", wrapper.GetInterceptionitems)
	router.POST("/interceptions", wrapper.CreateanewInterception)
	router.DELETE("/interceptions/:id", wrapper.DeleteaspecificInterception)
	router.GET("/interceptions/:id", wrapper.GetaspecificInterception)
	router.PATCH("/interceptions/:id", wrapper.ChangeaspecificInterception)
	router.PUT("/interceptions/:id", wrapper.ReplacechangeaspecificInterception)
	router.GET("/invoices", wrapper.GetInvoiceitems)
	router.POST("/invoices", wrapper.CreateanewInvoice)
	router.DELETE("/invoices/:id", wrapper.DeleteaspecificInvoice)
	router.GET("/invoices/:id", wrapper.GetaspecificInvoice)
	router.GET("/invoicetemplates", wrapper.GetInvoiceTemplateitems)
	router.GET("/invoicetemplates/:id", wrapper.GetaspecificInvoiceTemplate)
	router.GET("/lnpcarriers", wrapper.GetLnpCarrieritems)
	router.POST("/lnpcarriers", wrapper.CreateanewLnpCarrier)
	router.DELETE("/lnpcarriers/:id", wrapper.DeleteaspecificLnpCarrier)
	router.GET("/lnpcarriers/:id", wrapper.GetaspecificLnpCarrier)
	router.PATCH("/lnpcarriers/:id", wrapper.ChangeaspecificLnpCarrier)
	router.PUT("/lnpcarriers/:id", wrapper.ReplacechangeaspecificLnpCarrier)
	router.GET("/lnpnumbers", wrapper.GetLnpNumberitems)
	router.POST("/lnpnumbers", wrapper.CreateanewLnpNumber)
	router.DELETE("/lnpnumbers/:id", wrapper.DeleteaspecificLnpNumber)
	router.GET("/lnpnumbers/:id", wrapper.GetaspecificLnpNumber)
	router.PATCH("/lnpnumbers/:id", wrapper.ChangeaspecificLnpNumber)
	router.PUT("/lnpnumbers/:id", wrapper.ReplacechangeaspecificLnpNumber)
	router.GET("/mailtofaxsettings", wrapper.GetMailToFaxSettingitems)
	router.GET("/mailtofaxsettings/:id", wrapper.GetaspecificMailToFaxSetting)
	router.PATCH("/mailtofaxsettings/:id", wrapper.ChangeaspecificMailToFaxSetting)
	router.PUT("/mailtofaxsettings/:id", wrapper.ReplacechangeaspecificMailToFaxSetting)
	router.GET("/maliciouscalls", wrapper.GetMaliciousCallitems)
	router.DELETE("/maliciouscalls/:id", wrapper.DeleteaspecificMaliciousCall)
	router.GET("/maliciouscalls/:id", wrapper.GetaspecificMaliciousCall)
	router.GET("/managersecretary", wrapper.GetManagerSecretaryitems)
	router.DELETE("/managersecretary/:id", wrapper.DeleteaspecificManagerSecretary)
	router.GET("/managersecretary/:id", wrapper.GetaspecificManagerSecretary)
	router.PUT("/managersecretary/:id", wrapper.ReplacechangeaspecificManagerSecretary)
	router.GET("/ncoslevels", wrapper.GetNcosLevelitems)
	router.POST("/ncoslevels", wrapper.CreateanewNcosLevel)
	router.DELETE("/ncoslevels/:id", wrapper.DeleteaspecificNcosLevel)
	router.GET("/ncoslevels/:id", wrapper.GetaspecificNcosLevel)
	router.PATCH("/ncoslevels/:id", wrapper.ChangeaspecificNcosLevel)
	router.PUT("/ncoslevels/:id", wrapper.ReplacechangeaspecificNcosLevel)
	router.GET("/ncoslnpcarriers", wrapper.GetNcosLnpCarrieritems)
	router.POST("/ncoslnpcarriers", wrapper.CreateanewNcosLnpCarrier)
	router.DELETE("/ncoslnpcarriers/:id", wrapper.DeleteaspecificNcosLnpCarrier)
	router.GET("/ncoslnpcarriers/:id", wrapper.GetaspecificNcosLnpCarrier)
	router.PATCH("/ncoslnpcarriers/:id", wrapper.ChangeaspecificNcosLnpCarrier)
	router.PUT("/ncoslnpcarriers/:id", wrapper.ReplacechangeaspecificNcosLnpCarrier)
	router.GET("/ncospatterns", wrapper.GetNcosPatternitems)
	router.POST("/ncospatterns", wrapper.CreateanewNcosPattern)
	router.DELETE("/ncospatterns/:id", wrapper.DeleteaspecificNcosPattern)
	router.GET("/ncospatterns/:id", wrapper.GetaspecificNcosPattern)
	router.PATCH("/ncospatterns/:id", wrapper.ChangeaspecificNcosPattern)
	router.PUT("/ncospatterns/:id", wrapper.ReplacechangeaspecificNcosPattern)
	router.GET("/numbers", wrapper.GetNumberitems)
	router.GET("/numbers/:id", wrapper.GetaspecificNumber)
	router.PATCH("/numbers/:id", wrapper.ChangeaspecificNumber)
	router.PUT("/numbers/:id", wrapper.ReplacechangeaspecificNumber)
	router.POST("/partycallcontrols", wrapper.CreateanewPartyCallControl)
	router.GET("/pbxdeviceconfigfiles/:id", wrapper.GetaspecificPbxDeviceConfigFile)
	router.GET("/pbxdeviceconfigs", wrapper.GetPbxDeviceConfigitems)
	router.POST("/pbxdeviceconfigs", wrapper.CreateanewPbxDeviceConfig)
	router.GET("/pbxdeviceconfigs/:id", wrapper.GetaspecificPbxDeviceConfig)
	router.PUT("/pbxdeviceconfigs/:id", wrapper.ReplacechangeaspecificPbxDeviceConfig)
	router.GET("/pbxdevicefirmwarebinaries/:id", wrapper.GetaspecificPbxDeviceFirmwareBinary)
	router.GET("/pbxdevicefirmwares", wrapper.GetPbxDeviceFirmwareitems)
	router.POST("/pbxdevicefirmwares", wrapper.CreateanewPbxDeviceFirmware)
	router.GET("/pbxdevicefirmwares/:id", wrapper.GetaspecificPbxDeviceFirmware)
	router.PUT("/pbxdevicefirmwares/:id", wrapper.ReplacechangeaspecificPbxDeviceFirmware)
	router.GET("/pbxdevicemodelimages/:id", wrapper.GetaspecificPbxDeviceModelImage)
	router.GET("/pbxdevicemodels", wrapper.GetPbxDeviceModelitems)
	router.POST("/pbxdevicemodels", wrapper.CreateanewPbxDeviceModel)
	router.GET("/pbxdevicemodels/:id", wrapper.GetaspecificPbxDeviceModel)
	router.PATCH("/pbxdevicemodels/:id", wrapper.ChangeaspecificPbxDeviceModel)
	router.PUT("/pbxdevicemodels/:id", wrapper.ReplacechangeaspecificPbxDeviceModel)
	router.GET("/pbxdevicepreferences", wrapper.GetPbxDevicePreferenceitems)
	router.GET("/pbxdevicepreferences/:id", wrapper.GetaspecificPbxDevicePreference)
	router.PATCH("/pbxdevicepreferences/:id", wrapper.ChangeaspecificPbxDevicePreference)
	router.PUT("/pbxdevicepreferences/:id", wrapper.ReplacechangeaspecificPbxDevicePreference)
	router.GET("/pbxdeviceprofilepreferences", wrapper.GetPbxDeviceProfilePreferenceitems)
	router.GET("/pbxdeviceprofilepreferences/:id", wrapper.GetaspecificPbxDeviceProfilePreference)
	router.PATCH("/pbxdeviceprofilepreferences/:id", wrapper.ChangeaspecificPbxDeviceProfilePreference)
	router.PUT("/pbxdeviceprofilepreferences/:id", wrapper.ReplacechangeaspecificPbxDeviceProfilePreference)
	router.GET("/pbxdeviceprofiles", wrapper.GetPbxDeviceProfileitems)
	router.POST("/pbxdeviceprofiles", wrapper.CreateanewPbxDeviceProfile)
	router.GET("/pbxdeviceprofiles/:id", wrapper.GetaspecificPbxDeviceProfile)
	router.PATCH("/pbxdeviceprofiles/:id", wrapper.ChangeaspecificPbxDeviceProfile)
	router.PUT("/pbxdeviceprofiles/:id", wrapper.ReplacechangeaspecificPbxDeviceProfile)
	router.GET("/pbxdevices", wrapper.GetPbxDeviceitems)
	router.POST("/pbxdevices", wrapper.CreateanewPbxDevice)
	router.DELETE("/pbxdevices/:id", wrapper.DeleteaspecificPbxDevice)
	router.GET("/pbxdevices/:id", wrapper.GetaspecificPbxDevice)
	router.PATCH("/pbxdevices/:id", wrapper.ChangeaspecificPbxDevice)
	router.PUT("/pbxdevices/:id", wrapper.ReplacechangeaspecificPbxDevice)
	router.GET("/pbxfielddevicepreferences", wrapper.GetPbxFieldDevicePreferenceitems)
	router.GET("/pbxfielddevicepreferences/:id", wrapper.GetaspecificPbxFieldDevicePreference)
	router.PATCH("/pbxfielddevicepreferences/:id", wrapper.ChangeaspecificPbxFieldDevicePreference)
	router.PUT("/pbxfielddevicepreferences/:id", wrapper.ReplacechangeaspecificPbxFieldDevicePreference)
	router.GET("/peeringgroups", wrapper.GetPeeringGroupitems)
	router.POST("/peeringgroups", wrapper.CreateanewPeeringGroup)
	router.DELETE("/peeringgroups/:id", wrapper.DeleteaspecificPeeringGroup)
	router.GET("/peeringgroups/:id", wrapper.GetaspecificPeeringGroup)
	router.PATCH("/peeringgroups/:id", wrapper.ChangeaspecificPeeringGroup)
	router.PUT("/peeringgroups/:id", wrapper.ReplacechangeaspecificPeeringGroup)
	router.GET("/peeringinboundrules", wrapper.GetPeeringInboundRuleitems)
	router.POST("/peeringinboundrules", wrapper.CreateanewPeeringInboundRule)
	router.DELETE("/peeringinboundrules/:id", wrapper.DeleteaspecificPeeringInboundRule)
	router.GET("/peeringinboundrules/:id", wrapper.GetaspecificPeeringInboundRule)
	router.PATCH("/peeringinboundrules/:id", wrapper.ChangeaspecificPeeringInboundRule)
	router.PUT("/peeringinboundrules/:id", wrapper.ReplacechangeaspecificPeeringInboundRule)
	router.GET("/peeringrules", wrapper.GetPeeringRuleitems)
	router.POST("/peeringrules", wrapper.CreateanewPeeringRule)
	router.DELETE("/peeringrules/:id", wrapper.DeleteaspecificPeeringRule)
	router.GET("/peeringrules/:id", wrapper.GetaspecificPeeringRule)
	router.PATCH("/peeringrules/:id", wrapper.ChangeaspecificPeeringRule)
	router.PUT("/peeringrules/:id", wrapper.ReplacechangeaspecificPeeringRule)
	router.GET("/peeringserverpreferences", wrapper.GetPeeringServerPreferenceitems)
	router.GET("/peeringserverpreferences/:id", wrapper.GetaspecificPeeringServerPreference)
	router.PATCH("/peeringserverpreferences/:id", wrapper.ChangeaspecificPeeringServerPreference)
	router.PUT("/peeringserverpreferences/:id", wrapper.ReplacechangeaspecificPeeringServerPreference)
	router.GET("/peeringservers", wrapper.GetPeeringServeritems)
	router.POST("/peeringservers", wrapper.CreateanewPeeringServer)
	router.DELETE("/peeringservers/:id", wrapper.DeleteaspecificPeeringServer)
	router.GET("/peeringservers/:id", wrapper.GetaspecificPeeringServer)
	router.PATCH("/peeringservers/:id", wrapper.ChangeaspecificPeeringServer)
	router.PUT("/peeringservers/:id", wrapper.ReplacechangeaspecificPeeringServer)
	router.GET("/phonebookentries", wrapper.GetPhonebookEntryitems)
	router.POST("/phonebookentries", wrapper.CreateanewPhonebookEntry)
	router.DELETE("/phonebookentries/:id", wrapper.DeleteaspecificPhonebookEntry)
	router.GET("/phonebookentries/:id", wrapper.GetaspecificPhonebookEntry)
	router.PATCH("/phonebookentries/:id", wrapper.ChangeaspecificPhonebookEntry)
	router.PUT("/phonebookentries/:id", wrapper.ReplacechangeaspecificPhonebookEntry)
	router.GET("/preferencesmetaentries", wrapper.GetPreferencesMetaEntryitems)
	router.POST("/preferencesmetaentries", wrapper.CreateanewPreferencesMetaEntry)
	router.DELETE("/preferencesmetaentries/:id", wrapper.DeleteaspecificPreferencesMetaEntry)
	router.GET("/preferencesmetaentries/:id", wrapper.GetaspecificPreferencesMetaEntry)
	router.PATCH("/preferencesmetaentries/:id", wrapper.ChangeaspecificPreferencesMetaEntry)
	router.PUT("/preferencesmetaentries/:id", wrapper.ReplacechangeaspecificPreferencesMetaEntry)
	router.GET("/profilepackages", wrapper.GetProfilePackageitems)
	router.POST("/profilepackages", wrapper.CreateanewProfilePackage)
	router.DELETE("/profilepackages/:id", wrapper.DeleteaspecificProfilePackage)
	router.GET("/profilepackages/:id", wrapper.GetaspecificProfilePackage)
	router.PATCH("/profilepackages/:id", wrapper.ChangeaspecificProfilePackage)
	router.PUT("/profilepackages/:id", wrapper.ReplacechangeaspecificProfilePackage)
	router.GET("/profilepreferences", wrapper.GetProfilePreferenceitems)
	router.GET("/profilepreferences/:id", wrapper.GetaspecificProfilePreference)
	router.PATCH("/profilepreferences/:id", wrapper.ChangeaspecificProfilePreference)
	router.PUT("/profilepreferences/:id", wrapper.ReplacechangeaspecificProfilePreference)
	router.GET("/reminders", wrapper.GetReminderitems)
	router.POST("/reminders", wrapper.CreateanewReminder)
	router.DELETE("/reminders/:id", wrapper.DeleteaspecificReminder)
	router.GET("/reminders/:id", wrapper.GetaspecificReminder)
	router.PATCH("/reminders/:id", wrapper.ChangeaspecificReminder)
	router.PUT("/reminders/:id", wrapper.ReplacechangeaspecificReminder)
	router.GET("/resellers", wrapper.GetReselleritems)
	router.POST("/resellers", wrapper.CreateanewReseller)
	router.GET("/resellers/:id", wrapper.GetaspecificReseller)
	router.PATCH("/resellers/:id", wrapper.ChangeaspecificReseller)
	router.PUT("/resellers/:id", wrapper.ReplacechangeaspecificReseller)
	router.GET("/rewriterules", wrapper.GetRewriteRuleitems)
	router.POST("/rewriterules", wrapper.CreateanewRewriteRule)
	router.DELETE("/rewriterules/:id", wrapper.DeleteaspecificRewriteRule)
	router.GET("/rewriterules/:id", wrapper.GetaspecificRewriteRule)
	router.PATCH("/rewriterules/:id", wrapper.ChangeaspecificRewriteRule)
	router.PUT("/rewriterules/:id", wrapper.ReplacechangeaspecificRewriteRule)
	router.GET("/rewriterulesets", wrapper.GetRewriteRuleSetitems)
	router.POST("/rewriterulesets", wrapper.CreateanewRewriteRuleSet)
	router.DELETE("/rewriterulesets/:id", wrapper.DeleteaspecificRewriteRuleSet)
	router.GET("/rewriterulesets/:id", wrapper.GetaspecificRewriteRuleSet)
	router.PATCH("/rewriterulesets/:id", wrapper.ChangeaspecificRewriteRuleSet)
	router.PUT("/rewriterulesets/:id", wrapper.ReplacechangeaspecificRewriteRuleSet)
	router.GET("/rtcapps", wrapper.GetRtcAppitems)
	router.GET("/rtcapps/:id", wrapper.GetaspecificRtcApp)
	router.PATCH("/rtcapps/:id", wrapper.ChangeaspecificRtcApp)
	router.PUT("/rtcapps/:id", wrapper.ReplacechangeaspecificRtcApp)
	router.GET("/rtcnetworks", wrapper.GetRtcNetworkitems)
	router.GET("/rtcnetworks/:id", wrapper.GetaspecificRtcNetwork)
	router.PATCH("/rtcnetworks/:id", wrapper.ChangeaspecificRtcNetwork)
	router.PUT("/rtcnetworks/:id", wrapper.ReplacechangeaspecificRtcNetwork)
	router.GET("/rtcsessions", wrapper.GetRtcSessionitems)
	router.POST("/rtcsessions", wrapper.CreateanewRtcSession)
	router.GET("/rtcsessions/:id", wrapper.GetaspecificRtcSession)
	router.GET("/sipcaptures", wrapper.GetSIPCaptureitems)
	router.GET("/sipcaptures/:id", wrapper.GetaspecificSIPCapture)
	router.GET("/sms", wrapper.GetSMSitems)
	router.POST("/sms", wrapper.CreateanewSMS)
	router.GET("/sms/:id", wrapper.GetaspecificSMS)
	router.GET("/soundfilerecordings/:id", wrapper.GetaspecificSoundFileRecording)
	router.GET("/soundfiles", wrapper.GetSoundFileitems)
	router.POST("/soundfiles", wrapper.CreateanewSoundFile)
	router.DELETE("/soundfiles/:id", wrapper.DeleteaspecificSoundFile)
	router.GET("/soundfiles/:id", wrapper.GetaspecificSoundFile)
	router.PUT("/soundfiles/:id", wrapper.ReplacechangeaspecificSoundFile)
	router.GET("/soundgroups", wrapper.GetSoundGroupitems)
	router.GET("/soundgroups/:id", wrapper.GetaspecificSoundGroup)
	router.GET("/soundhandles", wrapper.GetSoundHandleitems)
	router.GET("/soundhandles/:id", wrapper.GetaspecificSoundHandle)
	router.GET("/soundsets", wrapper.GetSoundSetitems)
	router.POST("/soundsets", wrapper.CreateanewSoundSet)
	router.DELETE("/soundsets/:id", wrapper.DeleteaspecificSoundSet)
	router.GET("/soundsets/:id", wrapper.GetaspecificSoundSet)
	router.PATCH("/soundsets/:id", wrapper.ChangeaspecificSoundSet)
	router.PUT("/soundsets/:id", wrapper.ReplacechangeaspecificSoundSet)
	router.GET("/speeddials", wrapper.GetSpeedDialitems)
	router.GET("/speeddials/:id", wrapper.GetaspecificSpeedDial)
	router.PATCH("/speeddials/:id", wrapper.ChangeaspecificSpeedDial)
	router.PUT("/speeddials/:id", wrapper.ReplacechangeaspecificSpeedDial)
	router.GET("/subscriberpreferences", wrapper.GetSubscriberPreferenceitems)
	router.GET("/subscriberpreferences/:id", wrapper.GetaspecificSubscriberPreference)
	router.PATCH("/subscriberpreferences/:id", wrapper.ChangeaspecificSubscriberPreference)
	router.PUT("/subscriberpreferences/:id", wrapper.ReplacechangeaspecificSubscriberPreference)
	router.GET("/subscriberprofiles", wrapper.GetSubscriberProfileitems)
	router.POST("/subscriberprofiles", wrapper.CreateanewSubscriberProfile)
	router.DELETE("/subscriberprofiles/:id", wrapper.DeleteaspecificSubscriberProfile)
	router.GET("/subscriberprofiles/:id", wrapper.GetaspecificSubscriberProfile)
	router.PATCH("/subscriberprofiles/:id", wrapper.ChangeaspecificSubscriberProfile)
	router.PUT("/subscriberprofiles/:id", wrapper.ReplacechangeaspecificSubscriberProfile)
	router.GET("/subscriberprofilesets", wrapper.GetSubscriberProfileSetitems)
	router.POST("/subscriberprofilesets", wrapper.CreateanewSubscriberProfileSet)
	router.DELETE("/subscriberprofilesets/:id", wrapper.DeleteaspecificSubscriberProfileSet)
	router.GET("/subscriberprofilesets/:id", wrapper.GetaspecificSubscriberProfileSet)
	router.PATCH("/subscriberprofilesets/:id", wrapper.ChangeaspecificSubscriberProfileSet)
	router.PUT("/subscriberprofilesets/:id", wrapper.ReplacechangeaspecificSubscriberProfileSet)
	router.GET("/subscriberregistrations", wrapper.GetSubscriberRegistrationitems)
	router.POST("/subscriberregistrations", wrapper.CreateanewSubscriberRegistration)
	router.DELETE("/subscriberregistrations/:id", wrapper.DeleteaspecificSubscriberRegistration)
	router.GET("/subscriberregistrations/:id", wrapper.GetaspecificSubscriberRegistration)
	router.PATCH("/subscriberregistrations/:id", wrapper.ChangeaspecificSubscriberRegistration)
	router.PUT("/subscriberregistrations/:id", wrapper.ReplacechangeaspecificSubscriberRegistration)
	router.GET("/subscribers", wrapper.GetSubscriberitems)
	router.POST("/subscribers", wrapper.CreateanewSubscriber)
	router.DELETE("/subscribers/:id", wrapper.DeleteaspecificSubscriber)
	router.GET("/subscribers/:id", wrapper.GetaspecificSubscriber)
	router.PATCH("/subscribers/:id", wrapper.ChangeaspecificSubscriber)
	router.PUT("/subscribers/:id", wrapper.ReplacechangeaspecificSubscriber)
	router.GET("/systemcontacts", wrapper.GetSystemContactitems)
	router.POST("/systemcontacts", wrapper.CreateanewSystemContact)
	router.DELETE("/systemcontacts/:id", wrapper.DeleteaspecificSystemContact)
	router.GET("/systemcontacts/:id", wrapper.GetaspecificSystemContact)
	router.PATCH("/systemcontacts/:id", wrapper.ChangeaspecificSystemContact)
	router.PUT("/systemcontacts/:id", wrapper.ReplacechangeaspecificSystemContact)
	router.POST("/topupcash", wrapper.CreateanewTopupCash)
	router.GET("/topuplogs", wrapper.GetTopupLogitems)
	router.GET("/topuplogs/:id", wrapper.GetaspecificTopupLog)
	router.POST("/topupvouchers", wrapper.CreateanewTopupVoucher)
	router.GET("/trustedsources", wrapper.GetTrustedSourceitems)
	router.POST("/trustedsources", wrapper.CreateanewTrustedSource)
	router.DELETE("/trustedsources/:id", wrapper.DeleteaspecificTrustedSource)
	router.GET("/trustedsources/:id", wrapper.GetaspecificTrustedSource)
	router.PATCH("/trustedsources/:id", wrapper.ChangeaspecificTrustedSource)
	router.PUT("/trustedsources/:id", wrapper.ReplacechangeaspecificTrustedSource)
	router.GET("/upnrewritesets", wrapper.GetUpnRewriteSetitems)
	router.POST("/upnrewritesets", wrapper.CreateanewUpnRewriteSet)
	router.DELETE("/upnrewritesets/:id", wrapper.DeleteaspecificUpnRewriteSet)
	router.GET("/upnrewritesets/:id", wrapper.GetaspecificUpnRewriteSet)
	router.PATCH("/upnrewritesets/:id", wrapper.ChangeaspecificUpnRewriteSet)
	router.PUT("/upnrewritesets/:id", wrapper.ReplacechangeaspecificUpnRewriteSet)
	router.GET("/voicemailgreetings", wrapper.GetVoicemailGreetingitems)
	router.POST("/voicemailgreetings", wrapper.CreateanewVoicemailGreeting)
	router.DELETE("/voicemailgreetings/:id", wrapper.DeleteaspecificVoicemailGreeting)
	router.GET("/voicemailgreetings/:id", wrapper.GetaspecificVoicemailGreeting)
	router.PUT("/voicemailgreetings/:id", wrapper.ReplacechangeaspecificVoicemailGreeting)
	router.GET("/voicemailrecordings/:id", wrapper.GetaspecificVoicemailRecording)
	router.GET("/voicemails", wrapper.GetVoicemailitems)
	router.DELETE("/voicemails/:id", wrapper.DeleteaspecificVoicemail)
	router.GET("/voicemails/:id", wrapper.GetaspecificVoicemail)
	router.PATCH("/voicemails/:id", wrapper.ChangeaspecificVoicemail)
	router.PUT("/voicemails/:id", wrapper.ReplacechangeaspecificVoicemail)
	router.GET("/voicemailsettings", wrapper.GetVoicemailSettingitems)
	router.GET("/voicemailsettings/:id", wrapper.GetaspecificVoicemailSetting)
	router.PATCH("/voicemailsettings/:id", wrapper.ChangeaspecificVoicemailSetting)
	router.PUT("/voicemailsettings/:id", wrapper.ReplacechangeaspecificVoicemailSetting)
	router.GET("/vouchers", wrapper.GetVoucheritems)
	router.POST("/vouchers", wrapper.CreateanewVoucher)
	router.DELETE("/vouchers/:id", wrapper.DeleteaspecificVoucher)
	router.GET("/vouchers/:id", wrapper.GetaspecificVoucher)
	router.PATCH("/vouchers/:id", wrapper.ChangeaspecificVoucher)
	router.PUT("/vouchers/:id", wrapper.ReplacechangeaspecificVoucher)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"o6/Kh4736nEqvbjWIJsCAob7ap1RpzcXZfcWhgHbPsEmO9rw3+aElkHDcN+qSUI2HNdWsIc1mwzjVcqo",
	"LIOO3Zpkho6/Ntf0utRJ4QPWKh86zbjt36Z7gPX4qzqqtWeLtaoaLjqAvgM9BRZ2TSiL28qH+tFMAntH",
	"dTCJKCNIhJyKiGDKiMVje2r3yl5X9vo1sNdO317Z63L26sxe+vu9TOWHw+Mul3Ep90kpjzVlOpWPqy67",
	"6rKrLrvqsiuzXXXZldmeZ7YTnHQR3x3VNfVlEo0SUqs8l+nOywtv87jab/dxcnjcHpJj4u2d3hs4Ee1l",
	"j0tNsY2pkW33ohmrd2PPbqAdOmcPVSG3bQZZHpdWaPPwPqfrDbSrTrf2a4fd5lJud3FxP29kLzliQQfn",
	"k4zf1t9ui5PcqUSBf/xro3pM+RlhdvKHSl766RtrK217nifs5app8uPvnvdCMyuPvjzFib/kufl9e0hu",
	"8omEneWJlWPcd7H1Fu9d/HmM9OdG+VzELnT3Dhvi+oyB0+uOsNw70oXiywpNjHB7aoyF2GeHeZo+TeWg",
	"jPB5ZoDDL+bD38x3Lq/5GEEXTv6fBnOcLnmDM84IvAG+PDU1eIQnFla4cMAB8U749kCzG3Z9kDoBl2NQ",
	"cwKWE4wcsOF60u4lxvc+TKZuK6IM6ytMSSvLhJtoeeexJ2ejTXWTWNxX7AnZZN5OD5PtbayuDdPdpiZv",
	"fdkrgbWiwDDnbvK2lt3uyIuVHFRecRPXspe3qmen/7KHX/iRZzBSy2DnP+vLUvu4lH9PjtItTQ1+rUWx",
	"l13gTZujNJUwcz4n5kz6hH7RWQaeiQd0mnzGr3d+2Hzu/Ef9YZMbilzs2b7AC2IRp+Ld1B/O2gr8V+a8",
	"IMd1DEPSrCOZXbT7nIfHCw3kYBginhTbXN7JB6+eMJWEPtn/Q1URMvrTZOGiM7+/uSyFtjuY02a1XyjT",
	"tseZWz5IH8kBxQszaNtzdHsYJ0OaPsoLuCtaCDd4CDf7SzT9afP3cpbrwXR/23O/FXIRE9ZtGsblva4c",
	"hUknL3XZI5CRiKNUCP9bnCtP6e3GcbV5L3N/wqND9ml34jS4TxRPVHtwWXCbDZx7jHqCK7v0Z/PllbWt",
	"eQ9CFj4IHRanzLPj+U5xbQV9N+FsKuE/WzWB/q6WlpCfKhG/jJT19mFVdh9Ss3Y78x6NLnw0NhRls6ws",
	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

