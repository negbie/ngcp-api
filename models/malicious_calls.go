// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MaliciousCalls MaliciousCalls
//
// swagger:model MaliciousCalls
type MaliciousCalls struct {

	// call id
	// Required: true
	CallID *string `json:"call_id"`

	// callee
	// Required: true
	Callee *string `json:"callee"`

	// caller
	// Required: true
	Caller *string `json:"caller"`

	// duration
	// Required: true
	Duration *float64 `json:"duration"`

	// reported at
	// Required: true
	ReportedAt *string `json:"reported_at"`

	// reseller id
	// Required: true
	ResellerID *float64 `json:"reseller_id"`

	// source
	// Required: true
	Source *string `json:"source"`

	// start time
	// Required: true
	StartTime *string `json:"start_time"`
}

// Validate validates this malicious calls
func (m *MaliciousCalls) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCallID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCallee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCaller(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResellerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MaliciousCalls) validateCallID(formats strfmt.Registry) error {

	if err := validate.Required("call_id", "body", m.CallID); err != nil {
		return err
	}

	return nil
}

func (m *MaliciousCalls) validateCallee(formats strfmt.Registry) error {

	if err := validate.Required("callee", "body", m.Callee); err != nil {
		return err
	}

	return nil
}

func (m *MaliciousCalls) validateCaller(formats strfmt.Registry) error {

	if err := validate.Required("caller", "body", m.Caller); err != nil {
		return err
	}

	return nil
}

func (m *MaliciousCalls) validateDuration(formats strfmt.Registry) error {

	if err := validate.Required("duration", "body", m.Duration); err != nil {
		return err
	}

	return nil
}

func (m *MaliciousCalls) validateReportedAt(formats strfmt.Registry) error {

	if err := validate.Required("reported_at", "body", m.ReportedAt); err != nil {
		return err
	}

	return nil
}

func (m *MaliciousCalls) validateResellerID(formats strfmt.Registry) error {

	if err := validate.Required("reseller_id", "body", m.ResellerID); err != nil {
		return err
	}

	return nil
}

func (m *MaliciousCalls) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("source", "body", m.Source); err != nil {
		return err
	}

	return nil
}

func (m *MaliciousCalls) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("start_time", "body", m.StartTime); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MaliciousCalls) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MaliciousCalls) UnmarshalBinary(b []byte) error {
	var res MaliciousCalls
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
