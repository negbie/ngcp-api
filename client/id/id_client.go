// Code generated by go-swagger; DO NOT EDIT.

package id

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new id API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for id API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AdminsByIDDelete deletes a specific admin

TODO: Add Description
*/
func (a *Client) AdminsByIDDelete(params *AdminsByIDDeleteParams) (*AdminsByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminsByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AdminsByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/admins/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdminsByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminsByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AdminsByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AdminsByIDGet gets a specific admin

TODO: Add Description
*/
func (a *Client) AdminsByIDGet(params *AdminsByIDGetParams) (*AdminsByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminsByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AdminsByIdGet",
		Method:             "GET",
		PathPattern:        "/admins/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdminsByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminsByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AdminsByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AutoattendantsByIDGet gets a specific auto attendant

TODO: Add Description
*/
func (a *Client) AutoattendantsByIDGet(params *AutoattendantsByIDGetParams) (*AutoattendantsByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAutoattendantsByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AutoattendantsByIdGet",
		Method:             "GET",
		PathPattern:        "/autoattendants/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AutoattendantsByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AutoattendantsByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AutoattendantsByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AutoattendantsByIDPatch changes a specific auto attendant

TODO: Add Description
*/
func (a *Client) AutoattendantsByIDPatch(params *AutoattendantsByIDPatchParams) (*AutoattendantsByIDPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAutoattendantsByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AutoattendantsByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/autoattendants/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AutoattendantsByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AutoattendantsByIDPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AutoattendantsByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AutoattendantsByIDPut replaces change a specific auto attendant

TODO: Add Description
*/
func (a *Client) AutoattendantsByIDPut(params *AutoattendantsByIDPutParams) (*AutoattendantsByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAutoattendantsByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AutoattendantsByIdPut",
		Method:             "PUT",
		PathPattern:        "/autoattendants/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AutoattendantsByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AutoattendantsByIDPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AutoattendantsByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BannedipsByIDDelete deletes a specific banned Ip

TODO: Add Description
*/
func (a *Client) BannedipsByIDDelete(params *BannedipsByIDDeleteParams) (*BannedipsByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBannedipsByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BannedipsByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/bannedips/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BannedipsByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BannedipsByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BannedipsByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BannedipsByIDGet gets a specific banned Ip

TODO: Add Description
*/
func (a *Client) BannedipsByIDGet(params *BannedipsByIDGetParams) (*BannedipsByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBannedipsByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BannedipsByIdGet",
		Method:             "GET",
		PathPattern:        "/bannedips/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BannedipsByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BannedipsByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BannedipsByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BannedusersByIDDelete deletes a specific banned user

TODO: Add Description
*/
func (a *Client) BannedusersByIDDelete(params *BannedusersByIDDeleteParams) (*BannedusersByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBannedusersByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BannedusersByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/bannedusers/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BannedusersByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BannedusersByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BannedusersByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BannedusersByIDGet gets a specific banned user

TODO: Add Description
*/
func (a *Client) BannedusersByIDGet(params *BannedusersByIDGetParams) (*BannedusersByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBannedusersByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BannedusersByIdGet",
		Method:             "GET",
		PathPattern:        "/bannedusers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BannedusersByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BannedusersByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BannedusersByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BillingfeesByIDDelete deletes a specific billing fee

TODO: Add Description
*/
func (a *Client) BillingfeesByIDDelete(params *BillingfeesByIDDeleteParams) (*BillingfeesByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingfeesByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BillingfeesByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/billingfees/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingfeesByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillingfeesByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BillingfeesByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BillingfeesByIDGet gets a specific billing fee

TODO: Add Description
*/
func (a *Client) BillingfeesByIDGet(params *BillingfeesByIDGetParams) (*BillingfeesByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingfeesByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BillingfeesByIdGet",
		Method:             "GET",
		PathPattern:        "/billingfees/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingfeesByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillingfeesByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BillingfeesByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BillingfeesByIDPatch changes a specific billing fee

TODO: Add Description
*/
func (a *Client) BillingfeesByIDPatch(params *BillingfeesByIDPatchParams) (*BillingfeesByIDPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingfeesByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BillingfeesByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/billingfees/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingfeesByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillingfeesByIDPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BillingfeesByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BillingfeesByIDPut replaces change a specific billing fee

TODO: Add Description
*/
func (a *Client) BillingfeesByIDPut(params *BillingfeesByIDPutParams) (*BillingfeesByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingfeesByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BillingfeesByIdPut",
		Method:             "PUT",
		PathPattern:        "/billingfees/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingfeesByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillingfeesByIDPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BillingfeesByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BillingnetworksByIDGet gets a specific billing network

TODO: Add Description
*/
func (a *Client) BillingnetworksByIDGet(params *BillingnetworksByIDGetParams) (*BillingnetworksByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingnetworksByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BillingnetworksByIdGet",
		Method:             "GET",
		PathPattern:        "/billingnetworks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingnetworksByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillingnetworksByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BillingnetworksByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BillingnetworksByIDPatch changes a specific billing network

TODO: Add Description
*/
func (a *Client) BillingnetworksByIDPatch(params *BillingnetworksByIDPatchParams) (*BillingnetworksByIDPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingnetworksByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BillingnetworksByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/billingnetworks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingnetworksByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillingnetworksByIDPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BillingnetworksByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BillingnetworksByIDPut replaces change a specific billing network

TODO: Add Description
*/
func (a *Client) BillingnetworksByIDPut(params *BillingnetworksByIDPutParams) (*BillingnetworksByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingnetworksByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BillingnetworksByIdPut",
		Method:             "PUT",
		PathPattern:        "/billingnetworks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingnetworksByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillingnetworksByIDPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BillingnetworksByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BillingprofilesByIDGet gets a specific billing profile

TODO: Add Description
*/
func (a *Client) BillingprofilesByIDGet(params *BillingprofilesByIDGetParams) (*BillingprofilesByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingprofilesByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BillingprofilesByIdGet",
		Method:             "GET",
		PathPattern:        "/billingprofiles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingprofilesByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillingprofilesByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BillingprofilesByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BillingprofilesByIDPatch changes a specific billing profile

TODO: Add Description
*/
func (a *Client) BillingprofilesByIDPatch(params *BillingprofilesByIDPatchParams) (*BillingprofilesByIDPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingprofilesByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BillingprofilesByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/billingprofiles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingprofilesByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillingprofilesByIDPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BillingprofilesByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BillingprofilesByIDPut replaces change a specific billing profile

TODO: Add Description
*/
func (a *Client) BillingprofilesByIDPut(params *BillingprofilesByIDPutParams) (*BillingprofilesByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingprofilesByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BillingprofilesByIdPut",
		Method:             "PUT",
		PathPattern:        "/billingprofiles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingprofilesByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillingprofilesByIDPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BillingprofilesByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BillingzonesByIDDelete deletes a specific billing zone

TODO: Add Description
*/
func (a *Client) BillingzonesByIDDelete(params *BillingzonesByIDDeleteParams) (*BillingzonesByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingzonesByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BillingzonesByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/billingzones/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingzonesByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillingzonesByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BillingzonesByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BillingzonesByIDGet gets a specific billing zone

TODO: Add Description
*/
func (a *Client) BillingzonesByIDGet(params *BillingzonesByIDGetParams) (*BillingzonesByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingzonesByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BillingzonesByIdGet",
		Method:             "GET",
		PathPattern:        "/billingzones/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingzonesByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillingzonesByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BillingzonesByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BillingzonesByIDPatch changes a specific billing zone

TODO: Add Description
*/
func (a *Client) BillingzonesByIDPatch(params *BillingzonesByIDPatchParams) (*BillingzonesByIDPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingzonesByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BillingzonesByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/billingzones/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingzonesByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillingzonesByIDPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BillingzonesByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BillingzonesByIDPut replaces change a specific billing zone

TODO: Add Description
*/
func (a *Client) BillingzonesByIDPut(params *BillingzonesByIDPutParams) (*BillingzonesByIDPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillingzonesByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BillingzonesByIdPut",
		Method:             "PUT",
		PathPattern:        "/billingzones/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BillingzonesByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillingzonesByIDPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BillingzonesByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CallforwardsByIDDelete deletes a specific call forward

TODO: Add Description
*/
func (a *Client) CallforwardsByIDDelete(params *CallforwardsByIDDeleteParams) (*CallforwardsByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCallforwardsByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CallforwardsByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/callforwards/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CallforwardsByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CallforwardsByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CallforwardsByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CallforwardsByIDGet gets a specific call forward

TODO: Add Description
*/
func (a *Client) CallforwardsByIDGet(params *CallforwardsByIDGetParams) (*CallforwardsByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCallforwardsByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CallforwardsByIdGet",
		Method:             "GET",
		PathPattern:        "/callforwards/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CallforwardsByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CallforwardsByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CallforwardsByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CallforwardsByIDPatch changes a specific call forward

TODO: Add Description
*/
func (a *Client) CallforwardsByIDPatch(params *CallforwardsByIDPatchParams) (*CallforwardsByIDPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCallforwardsByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CallforwardsByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/callforwards/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CallforwardsByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CallforwardsByIDPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CallforwardsByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CallforwardsByIDPut replaces change a specific call forward

TODO: Add Description
*/
func (a *Client) CallforwardsByIDPut(params *CallforwardsByIDPutParams) (*CallforwardsByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCallforwardsByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CallforwardsByIdPut",
		Method:             "PUT",
		PathPattern:        "/callforwards/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CallforwardsByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CallforwardsByIDPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CallforwardsByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CallrecordingsByIDDelete deletes a specific call recording

TODO: Add Description
*/
func (a *Client) CallrecordingsByIDDelete(params *CallrecordingsByIDDeleteParams) (*CallrecordingsByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCallrecordingsByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CallrecordingsByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/callrecordings/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CallrecordingsByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CallrecordingsByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CallrecordingsByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CallrecordingsByIDGet gets a specific call recording

TODO: Add Description
*/
func (a *Client) CallrecordingsByIDGet(params *CallrecordingsByIDGetParams) (*CallrecordingsByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCallrecordingsByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CallrecordingsByIdGet",
		Method:             "GET",
		PathPattern:        "/callrecordings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CallrecordingsByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CallrecordingsByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CallrecordingsByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CallrecordingstreamsByIDDelete deletes a specific call recording stream

TODO: Add Description
*/
func (a *Client) CallrecordingstreamsByIDDelete(params *CallrecordingstreamsByIDDeleteParams) (*CallrecordingstreamsByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCallrecordingstreamsByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CallrecordingstreamsByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/callrecordingstreams/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CallrecordingstreamsByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CallrecordingstreamsByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CallrecordingstreamsByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CallrecordingstreamsByIDGet gets a specific call recording stream

TODO: Add Description
*/
func (a *Client) CallrecordingstreamsByIDGet(params *CallrecordingstreamsByIDGetParams) (*CallrecordingstreamsByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCallrecordingstreamsByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CallrecordingstreamsByIdGet",
		Method:             "GET",
		PathPattern:        "/callrecordingstreams/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CallrecordingstreamsByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CallrecordingstreamsByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CallrecordingstreamsByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CcmapentriesByIDDelete deletes a specific c c map entry

TODO: Add Description
*/
func (a *Client) CcmapentriesByIDDelete(params *CcmapentriesByIDDeleteParams) (*CcmapentriesByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCcmapentriesByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CcmapentriesByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/ccmapentries/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CcmapentriesByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CcmapentriesByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CcmapentriesByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CcmapentriesByIDGet gets a specific c c map entry

TODO: Add Description
*/
func (a *Client) CcmapentriesByIDGet(params *CcmapentriesByIDGetParams) (*CcmapentriesByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCcmapentriesByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CcmapentriesByIdGet",
		Method:             "GET",
		PathPattern:        "/ccmapentries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CcmapentriesByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CcmapentriesByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CcmapentriesByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CcmapentriesByIDPatch changes a specific c c map entry

TODO: Add Description
*/
func (a *Client) CcmapentriesByIDPatch(params *CcmapentriesByIDPatchParams) (*CcmapentriesByIDPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCcmapentriesByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CcmapentriesByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/ccmapentries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CcmapentriesByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CcmapentriesByIDPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CcmapentriesByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CcmapentriesByIDPut replaces change a specific c c map entry

TODO: Add Description
*/
func (a *Client) CcmapentriesByIDPut(params *CcmapentriesByIDPutParams) (*CcmapentriesByIDPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCcmapentriesByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CcmapentriesByIdPut",
		Method:             "PUT",
		PathPattern:        "/ccmapentries/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CcmapentriesByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CcmapentriesByIDPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CcmapentriesByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CfbnumbersetsByIDDelete deletes a specific c f b number set

TODO: Add Description
*/
func (a *Client) CfbnumbersetsByIDDelete(params *CfbnumbersetsByIDDeleteParams) (*CfbnumbersetsByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCfbnumbersetsByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CfbnumbersetsByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/cfbnumbersets/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CfbnumbersetsByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CfbnumbersetsByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CfbnumbersetsByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CfbnumbersetsByIDGet gets a specific c f b number set

TODO: Add Description
*/
func (a *Client) CfbnumbersetsByIDGet(params *CfbnumbersetsByIDGetParams) (*CfbnumbersetsByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCfbnumbersetsByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CfbnumbersetsByIdGet",
		Method:             "GET",
		PathPattern:        "/cfbnumbersets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CfbnumbersetsByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CfbnumbersetsByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CfbnumbersetsByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CfbnumbersetsByIDPatch changes a specific c f b number set

TODO: Add Description
*/
func (a *Client) CfbnumbersetsByIDPatch(params *CfbnumbersetsByIDPatchParams) (*CfbnumbersetsByIDPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCfbnumbersetsByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CfbnumbersetsByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/cfbnumbersets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CfbnumbersetsByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CfbnumbersetsByIDPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CfbnumbersetsByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CfbnumbersetsByIDPut replaces change a specific c f b number set

TODO: Add Description
*/
func (a *Client) CfbnumbersetsByIDPut(params *CfbnumbersetsByIDPutParams) (*CfbnumbersetsByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCfbnumbersetsByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CfbnumbersetsByIdPut",
		Method:             "PUT",
		PathPattern:        "/cfbnumbersets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CfbnumbersetsByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CfbnumbersetsByIDPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CfbnumbersetsByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CfdestinationsetsByIDDelete deletes a specific c f destination set

TODO: Add Description
*/
func (a *Client) CfdestinationsetsByIDDelete(params *CfdestinationsetsByIDDeleteParams) (*CfdestinationsetsByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCfdestinationsetsByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CfdestinationsetsByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/cfdestinationsets/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CfdestinationsetsByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CfdestinationsetsByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CfdestinationsetsByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CfdestinationsetsByIDGet gets a specific c f destination set

TODO: Add Description
*/
func (a *Client) CfdestinationsetsByIDGet(params *CfdestinationsetsByIDGetParams) (*CfdestinationsetsByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCfdestinationsetsByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CfdestinationsetsByIdGet",
		Method:             "GET",
		PathPattern:        "/cfdestinationsets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CfdestinationsetsByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CfdestinationsetsByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CfdestinationsetsByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CfdestinationsetsByIDPatch changes a specific c f destination set

TODO: Add Description
*/
func (a *Client) CfdestinationsetsByIDPatch(params *CfdestinationsetsByIDPatchParams) (*CfdestinationsetsByIDPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCfdestinationsetsByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CfdestinationsetsByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/cfdestinationsets/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CfdestinationsetsByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CfdestinationsetsByIDPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CfdestinationsetsByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CfdestinationsetsByIDPut replaces change a specific c f destination set

TODO: Add Description
*/
func (a *Client) CfdestinationsetsByIDPut(params *CfdestinationsetsByIDPutParams) (*CfdestinationsetsByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCfdestinationsetsByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CfdestinationsetsByIdPut",
		Method:             "PUT",
		PathPattern:        "/cfdestinationsets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CfdestinationsetsByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CfdestinationsetsByIDPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CfdestinationsetsByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CfmappingsByIDGet gets a specific c f mapping

TODO: Add Description
*/
func (a *Client) CfmappingsByIDGet(params *CfmappingsByIDGetParams) (*CfmappingsByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCfmappingsByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CfmappingsByIdGet",
		Method:             "GET",
		PathPattern:        "/cfmappings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CfmappingsByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CfmappingsByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CfmappingsByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CfmappingsByIDPatch changes a specific c f mapping

TODO: Add Description
*/
func (a *Client) CfmappingsByIDPatch(params *CfmappingsByIDPatchParams) (*CfmappingsByIDPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCfmappingsByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CfmappingsByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/cfmappings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CfmappingsByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CfmappingsByIDPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CfmappingsByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CfmappingsByIDPut replaces change a specific c f mapping

TODO: Add Description
*/
func (a *Client) CfmappingsByIDPut(params *CfmappingsByIDPutParams) (*CfmappingsByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCfmappingsByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CfmappingsByIdPut",
		Method:             "PUT",
		PathPattern:        "/cfmappings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CfmappingsByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CfmappingsByIDPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CfmappingsByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CfsourcesetsByIDDelete deletes a specific c f source set

TODO: Add Description
*/
func (a *Client) CfsourcesetsByIDDelete(params *CfsourcesetsByIDDeleteParams) (*CfsourcesetsByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCfsourcesetsByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CfsourcesetsByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/cfsourcesets/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CfsourcesetsByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CfsourcesetsByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CfsourcesetsByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CfsourcesetsByIDGet gets a specific c f source set

TODO: Add Description
*/
func (a *Client) CfsourcesetsByIDGet(params *CfsourcesetsByIDGetParams) (*CfsourcesetsByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCfsourcesetsByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CfsourcesetsByIdGet",
		Method:             "GET",
		PathPattern:        "/cfsourcesets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CfsourcesetsByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CfsourcesetsByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CfsourcesetsByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CfsourcesetsByIDPatch changes a specific c f source set

TODO: Add Description
*/
func (a *Client) CfsourcesetsByIDPatch(params *CfsourcesetsByIDPatchParams) (*CfsourcesetsByIDPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCfsourcesetsByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CfsourcesetsByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/cfsourcesets/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CfsourcesetsByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CfsourcesetsByIDPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CfsourcesetsByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CfsourcesetsByIDPut replaces change a specific c f source set

TODO: Add Description
*/
func (a *Client) CfsourcesetsByIDPut(params *CfsourcesetsByIDPutParams) (*CfsourcesetsByIDPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCfsourcesetsByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CfsourcesetsByIdPut",
		Method:             "PUT",
		PathPattern:        "/cfsourcesets/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CfsourcesetsByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CfsourcesetsByIDPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CfsourcesetsByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CftimesetsByIDDelete deletes a specific c f time set

TODO: Add Description
*/
func (a *Client) CftimesetsByIDDelete(params *CftimesetsByIDDeleteParams) (*CftimesetsByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCftimesetsByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CftimesetsByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/cftimesets/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CftimesetsByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CftimesetsByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CftimesetsByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CftimesetsByIDGet gets a specific c f time set

TODO: Add Description
*/
func (a *Client) CftimesetsByIDGet(params *CftimesetsByIDGetParams) (*CftimesetsByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCftimesetsByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CftimesetsByIdGet",
		Method:             "GET",
		PathPattern:        "/cftimesets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CftimesetsByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CftimesetsByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CftimesetsByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CftimesetsByIDPatch changes a specific c f time set

TODO: Add Description
*/
func (a *Client) CftimesetsByIDPatch(params *CftimesetsByIDPatchParams) (*CftimesetsByIDPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCftimesetsByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CftimesetsByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/cftimesets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CftimesetsByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CftimesetsByIDPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CftimesetsByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CftimesetsByIDPut replaces change a specific c f time set

TODO: Add Description
*/
func (a *Client) CftimesetsByIDPut(params *CftimesetsByIDPutParams) (*CftimesetsByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCftimesetsByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CftimesetsByIdPut",
		Method:             "PUT",
		PathPattern:        "/cftimesets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CftimesetsByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CftimesetsByIDPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CftimesetsByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContractsByIDGet gets a specific contract

TODO: Add Description
*/
func (a *Client) ContractsByIDGet(params *ContractsByIDGetParams) (*ContractsByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContractsByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ContractsByIdGet",
		Method:             "GET",
		PathPattern:        "/contracts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContractsByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContractsByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContractsByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContractsByIDPatch changes a specific contract

TODO: Add Description
*/
func (a *Client) ContractsByIDPatch(params *ContractsByIDPatchParams) (*ContractsByIDPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContractsByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ContractsByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/contracts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContractsByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContractsByIDPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContractsByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ContractsByIDPut replaces change a specific contract

TODO: Add Description
*/
func (a *Client) ContractsByIDPut(params *ContractsByIDPutParams) (*ContractsByIDPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContractsByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ContractsByIdPut",
		Method:             "PUT",
		PathPattern:        "/contracts/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContractsByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContractsByIDPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContractsByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomerbalancesByIDGet gets a specific customer balance

TODO: Add Description
*/
func (a *Client) CustomerbalancesByIDGet(params *CustomerbalancesByIDGetParams) (*CustomerbalancesByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerbalancesByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomerbalancesByIdGet",
		Method:             "GET",
		PathPattern:        "/customerbalances/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerbalancesByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerbalancesByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomerbalancesByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomerbalancesByIDPatch changes a specific customer balance

TODO: Add Description
*/
func (a *Client) CustomerbalancesByIDPatch(params *CustomerbalancesByIDPatchParams) (*CustomerbalancesByIDPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerbalancesByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomerbalancesByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/customerbalances/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerbalancesByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerbalancesByIDPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomerbalancesByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomerbalancesByIDPut replaces change a specific customer balance

TODO: Add Description
*/
func (a *Client) CustomerbalancesByIDPut(params *CustomerbalancesByIDPutParams) (*CustomerbalancesByIDPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerbalancesByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomerbalancesByIdPut",
		Method:             "PUT",
		PathPattern:        "/customerbalances/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerbalancesByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerbalancesByIDPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomerbalancesByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomercontactsByIDDelete deletes a specific customer contact

TODO: Add Description
*/
func (a *Client) CustomercontactsByIDDelete(params *CustomercontactsByIDDeleteParams) (*CustomercontactsByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomercontactsByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomercontactsByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/customercontacts/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomercontactsByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomercontactsByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomercontactsByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomercontactsByIDGet gets a specific customer contact

TODO: Add Description
*/
func (a *Client) CustomercontactsByIDGet(params *CustomercontactsByIDGetParams) (*CustomercontactsByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomercontactsByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomercontactsByIdGet",
		Method:             "GET",
		PathPattern:        "/customercontacts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomercontactsByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomercontactsByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomercontactsByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomercontactsByIDPatch changes a specific customer contact

TODO: Add Description
*/
func (a *Client) CustomercontactsByIDPatch(params *CustomercontactsByIDPatchParams) (*CustomercontactsByIDPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomercontactsByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomercontactsByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/customercontacts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomercontactsByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomercontactsByIDPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomercontactsByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomercontactsByIDPut replaces change a specific customer contact

TODO: Add Description
*/
func (a *Client) CustomercontactsByIDPut(params *CustomercontactsByIDPutParams) (*CustomercontactsByIDPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomercontactsByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomercontactsByIdPut",
		Method:             "PUT",
		PathPattern:        "/customercontacts/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomercontactsByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomercontactsByIDPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomercontactsByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomerfraudpreferencesByIDGet gets a specific customer fraud preference

TODO: Add Description
*/
func (a *Client) CustomerfraudpreferencesByIDGet(params *CustomerfraudpreferencesByIDGetParams) (*CustomerfraudpreferencesByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerfraudpreferencesByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomerfraudpreferencesByIdGet",
		Method:             "GET",
		PathPattern:        "/customerfraudpreferences/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerfraudpreferencesByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerfraudpreferencesByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomerfraudpreferencesByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomerfraudpreferencesByIDPatch changes a specific customer fraud preference

TODO: Add Description
*/
func (a *Client) CustomerfraudpreferencesByIDPatch(params *CustomerfraudpreferencesByIDPatchParams) (*CustomerfraudpreferencesByIDPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerfraudpreferencesByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomerfraudpreferencesByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/customerfraudpreferences/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerfraudpreferencesByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerfraudpreferencesByIDPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomerfraudpreferencesByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomerfraudpreferencesByIDPut replaces change a specific customer fraud preference

TODO: Add Description
*/
func (a *Client) CustomerfraudpreferencesByIDPut(params *CustomerfraudpreferencesByIDPutParams) (*CustomerfraudpreferencesByIDPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerfraudpreferencesByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomerfraudpreferencesByIdPut",
		Method:             "PUT",
		PathPattern:        "/customerfraudpreferences/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerfraudpreferencesByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerfraudpreferencesByIDPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomerfraudpreferencesByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomerlocationsByIDDelete deletes a specific customer location

TODO: Add Description
*/
func (a *Client) CustomerlocationsByIDDelete(params *CustomerlocationsByIDDeleteParams) (*CustomerlocationsByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerlocationsByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomerlocationsByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/customerlocations/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerlocationsByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerlocationsByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomerlocationsByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomerlocationsByIDGet gets a specific customer location

TODO: Add Description
*/
func (a *Client) CustomerlocationsByIDGet(params *CustomerlocationsByIDGetParams) (*CustomerlocationsByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerlocationsByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomerlocationsByIdGet",
		Method:             "GET",
		PathPattern:        "/customerlocations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerlocationsByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerlocationsByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomerlocationsByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomerlocationsByIDPatch changes a specific customer location

TODO: Add Description
*/
func (a *Client) CustomerlocationsByIDPatch(params *CustomerlocationsByIDPatchParams) (*CustomerlocationsByIDPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerlocationsByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomerlocationsByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/customerlocations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerlocationsByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerlocationsByIDPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomerlocationsByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomerlocationsByIDPut replaces change a specific customer location

TODO: Add Description
*/
func (a *Client) CustomerlocationsByIDPut(params *CustomerlocationsByIDPutParams) (*CustomerlocationsByIDPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerlocationsByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomerlocationsByIdPut",
		Method:             "PUT",
		PathPattern:        "/customerlocations/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerlocationsByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerlocationsByIDPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomerlocationsByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomerpreferencesByIDGet gets a specific customer preference

TODO: Add Description
*/
func (a *Client) CustomerpreferencesByIDGet(params *CustomerpreferencesByIDGetParams) (*CustomerpreferencesByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerpreferencesByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomerpreferencesByIdGet",
		Method:             "GET",
		PathPattern:        "/customerpreferences/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerpreferencesByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerpreferencesByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomerpreferencesByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomerpreferencesByIDPatch changes a specific customer preference

TODO: Add Description
*/
func (a *Client) CustomerpreferencesByIDPatch(params *CustomerpreferencesByIDPatchParams) (*CustomerpreferencesByIDPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerpreferencesByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomerpreferencesByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/customerpreferences/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerpreferencesByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerpreferencesByIDPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomerpreferencesByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomerpreferencesByIDPut replaces change a specific customer preference

TODO: Add Description
*/
func (a *Client) CustomerpreferencesByIDPut(params *CustomerpreferencesByIDPutParams) (*CustomerpreferencesByIDPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomerpreferencesByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomerpreferencesByIdPut",
		Method:             "PUT",
		PathPattern:        "/customerpreferences/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomerpreferencesByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomerpreferencesByIDPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomerpreferencesByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomersByIDGet gets a specific customer

TODO: Add Description
*/
func (a *Client) CustomersByIDGet(params *CustomersByIDGetParams) (*CustomersByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomersByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomersByIdGet",
		Method:             "GET",
		PathPattern:        "/customers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomersByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomersByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomersByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomersByIDPatch changes a specific customer

TODO: Add Description
*/
func (a *Client) CustomersByIDPatch(params *CustomersByIDPatchParams) (*CustomersByIDPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomersByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomersByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/customers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomersByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomersByIDPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomersByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CustomersByIDPut replaces change a specific customer

TODO: Add Description
*/
func (a *Client) CustomersByIDPut(params *CustomersByIDPutParams) (*CustomersByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCustomersByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CustomersByIdPut",
		Method:             "PUT",
		PathPattern:        "/customers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CustomersByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CustomersByIDPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CustomersByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainpreferencesByIDGet gets a specific domain preference

TODO: Add Description
*/
func (a *Client) DomainpreferencesByIDGet(params *DomainpreferencesByIDGetParams) (*DomainpreferencesByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainpreferencesByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DomainpreferencesByIdGet",
		Method:             "GET",
		PathPattern:        "/domainpreferences/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainpreferencesByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainpreferencesByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DomainpreferencesByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainpreferencesByIDPatch changes a specific domain preference

TODO: Add Description
*/
func (a *Client) DomainpreferencesByIDPatch(params *DomainpreferencesByIDPatchParams) (*DomainpreferencesByIDPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainpreferencesByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DomainpreferencesByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/domainpreferences/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainpreferencesByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainpreferencesByIDPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DomainpreferencesByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainpreferencesByIDPut replaces change a specific domain preference

TODO: Add Description
*/
func (a *Client) DomainpreferencesByIDPut(params *DomainpreferencesByIDPutParams) (*DomainpreferencesByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainpreferencesByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DomainpreferencesByIdPut",
		Method:             "PUT",
		PathPattern:        "/domainpreferences/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainpreferencesByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainpreferencesByIDPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DomainpreferencesByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainsByIDDelete deletes a specific domain

TODO: Add Description
*/
func (a *Client) DomainsByIDDelete(params *DomainsByIDDeleteParams) (*DomainsByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainsByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DomainsByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/domains/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainsByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainsByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DomainsByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DomainsByIDGet gets a specific domain

TODO: Add Description
*/
func (a *Client) DomainsByIDGet(params *DomainsByIDGetParams) (*DomainsByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDomainsByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DomainsByIdGet",
		Method:             "GET",
		PathPattern:        "/domains/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DomainsByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DomainsByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DomainsByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EmailtemplatesByIDDelete deletes a specific email template

TODO: Add Description
*/
func (a *Client) EmailtemplatesByIDDelete(params *EmailtemplatesByIDDeleteParams) (*EmailtemplatesByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmailtemplatesByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmailtemplatesByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/emailtemplates/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailtemplatesByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmailtemplatesByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmailtemplatesByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EmailtemplatesByIDGet gets a specific email template

TODO: Add Description
*/
func (a *Client) EmailtemplatesByIDGet(params *EmailtemplatesByIDGetParams) (*EmailtemplatesByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmailtemplatesByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmailtemplatesByIdGet",
		Method:             "GET",
		PathPattern:        "/emailtemplates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailtemplatesByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmailtemplatesByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmailtemplatesByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EmailtemplatesByIDPatch changes a specific email template

TODO: Add Description
*/
func (a *Client) EmailtemplatesByIDPatch(params *EmailtemplatesByIDPatchParams) (*EmailtemplatesByIDPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmailtemplatesByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmailtemplatesByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/emailtemplates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailtemplatesByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmailtemplatesByIDPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmailtemplatesByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EmailtemplatesByIDPut replaces change a specific email template

TODO: Add Description
*/
func (a *Client) EmailtemplatesByIDPut(params *EmailtemplatesByIDPutParams) (*EmailtemplatesByIDPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmailtemplatesByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmailtemplatesByIdPut",
		Method:             "PUT",
		PathPattern:        "/emailtemplates/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailtemplatesByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmailtemplatesByIDPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmailtemplatesByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EmergencymappingcontainersByIDDelete deletes a specific emergency mapping container

TODO: Add Description
*/
func (a *Client) EmergencymappingcontainersByIDDelete(params *EmergencymappingcontainersByIDDeleteParams) (*EmergencymappingcontainersByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmergencymappingcontainersByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmergencymappingcontainersByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/emergencymappingcontainers/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmergencymappingcontainersByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmergencymappingcontainersByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmergencymappingcontainersByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EmergencymappingcontainersByIDGet gets a specific emergency mapping container

TODO: Add Description
*/
func (a *Client) EmergencymappingcontainersByIDGet(params *EmergencymappingcontainersByIDGetParams) (*EmergencymappingcontainersByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmergencymappingcontainersByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmergencymappingcontainersByIdGet",
		Method:             "GET",
		PathPattern:        "/emergencymappingcontainers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmergencymappingcontainersByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmergencymappingcontainersByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmergencymappingcontainersByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EmergencymappingcontainersByIDPatch changes a specific emergency mapping container

TODO: Add Description
*/
func (a *Client) EmergencymappingcontainersByIDPatch(params *EmergencymappingcontainersByIDPatchParams) (*EmergencymappingcontainersByIDPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmergencymappingcontainersByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmergencymappingcontainersByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/emergencymappingcontainers/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmergencymappingcontainersByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmergencymappingcontainersByIDPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmergencymappingcontainersByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EmergencymappingcontainersByIDPut replaces change a specific emergency mapping container

TODO: Add Description
*/
func (a *Client) EmergencymappingcontainersByIDPut(params *EmergencymappingcontainersByIDPutParams) (*EmergencymappingcontainersByIDPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmergencymappingcontainersByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmergencymappingcontainersByIdPut",
		Method:             "PUT",
		PathPattern:        "/emergencymappingcontainers/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmergencymappingcontainersByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmergencymappingcontainersByIDPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmergencymappingcontainersByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EmergencymappingsByIDDelete deletes a specific emergency mapping

TODO: Add Description
*/
func (a *Client) EmergencymappingsByIDDelete(params *EmergencymappingsByIDDeleteParams) (*EmergencymappingsByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmergencymappingsByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmergencymappingsByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/emergencymappings/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmergencymappingsByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmergencymappingsByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmergencymappingsByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EmergencymappingsByIDGet gets a specific emergency mapping

TODO: Add Description
*/
func (a *Client) EmergencymappingsByIDGet(params *EmergencymappingsByIDGetParams) (*EmergencymappingsByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmergencymappingsByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmergencymappingsByIdGet",
		Method:             "GET",
		PathPattern:        "/emergencymappings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmergencymappingsByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmergencymappingsByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmergencymappingsByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EmergencymappingsByIDPatch changes a specific emergency mapping

TODO: Add Description
*/
func (a *Client) EmergencymappingsByIDPatch(params *EmergencymappingsByIDPatchParams) (*EmergencymappingsByIDPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmergencymappingsByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmergencymappingsByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/emergencymappings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmergencymappingsByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmergencymappingsByIDPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmergencymappingsByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EmergencymappingsByIDPut replaces change a specific emergency mapping

TODO: Add Description
*/
func (a *Client) EmergencymappingsByIDPut(params *EmergencymappingsByIDPutParams) (*EmergencymappingsByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmergencymappingsByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EmergencymappingsByIdPut",
		Method:             "PUT",
		PathPattern:        "/emergencymappings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmergencymappingsByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmergencymappingsByIDPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EmergencymappingsByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FaxserversettingsByIDGet gets a specific faxserver setting

TODO: Add Description
*/
func (a *Client) FaxserversettingsByIDGet(params *FaxserversettingsByIDGetParams) (*FaxserversettingsByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFaxserversettingsByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FaxserversettingsByIdGet",
		Method:             "GET",
		PathPattern:        "/faxserversettings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FaxserversettingsByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FaxserversettingsByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for FaxserversettingsByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FaxserversettingsByIDPatch changes a specific faxserver setting

TODO: Add Description
*/
func (a *Client) FaxserversettingsByIDPatch(params *FaxserversettingsByIDPatchParams) (*FaxserversettingsByIDPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFaxserversettingsByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FaxserversettingsByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/faxserversettings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FaxserversettingsByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FaxserversettingsByIDPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for FaxserversettingsByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FaxserversettingsByIDPut replaces change a specific faxserver setting

TODO: Add Description
*/
func (a *Client) FaxserversettingsByIDPut(params *FaxserversettingsByIDPutParams) (*FaxserversettingsByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFaxserversettingsByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FaxserversettingsByIdPut",
		Method:             "PUT",
		PathPattern:        "/faxserversettings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FaxserversettingsByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FaxserversettingsByIDPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for FaxserversettingsByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InterceptionsByIDDelete deletes a specific interception

TODO: Add Description
*/
func (a *Client) InterceptionsByIDDelete(params *InterceptionsByIDDeleteParams) (*InterceptionsByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInterceptionsByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "InterceptionsByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/interceptions/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InterceptionsByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InterceptionsByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InterceptionsByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InterceptionsByIDGet gets a specific interception

TODO: Add Description
*/
func (a *Client) InterceptionsByIDGet(params *InterceptionsByIDGetParams) (*InterceptionsByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInterceptionsByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "InterceptionsByIdGet",
		Method:             "GET",
		PathPattern:        "/interceptions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InterceptionsByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InterceptionsByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InterceptionsByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InterceptionsByIDPatch changes a specific interception

TODO: Add Description
*/
func (a *Client) InterceptionsByIDPatch(params *InterceptionsByIDPatchParams) (*InterceptionsByIDPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInterceptionsByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "InterceptionsByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/interceptions/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InterceptionsByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InterceptionsByIDPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InterceptionsByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InterceptionsByIDPut replaces change a specific interception

TODO: Add Description
*/
func (a *Client) InterceptionsByIDPut(params *InterceptionsByIDPutParams) (*InterceptionsByIDPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInterceptionsByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "InterceptionsByIdPut",
		Method:             "PUT",
		PathPattern:        "/interceptions/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InterceptionsByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InterceptionsByIDPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InterceptionsByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InvoicesByIDDelete deletes a specific invoice

TODO: Add Description
*/
func (a *Client) InvoicesByIDDelete(params *InvoicesByIDDeleteParams) (*InvoicesByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInvoicesByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "InvoicesByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/invoices/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InvoicesByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InvoicesByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InvoicesByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InvoicesByIDGet gets a specific invoice

TODO: Add Description
*/
func (a *Client) InvoicesByIDGet(params *InvoicesByIDGetParams) (*InvoicesByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInvoicesByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "InvoicesByIdGet",
		Method:             "GET",
		PathPattern:        "/invoices/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InvoicesByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InvoicesByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InvoicesByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LnpcarriersByIDDelete deletes a specific lnp carrier

TODO: Add Description
*/
func (a *Client) LnpcarriersByIDDelete(params *LnpcarriersByIDDeleteParams) (*LnpcarriersByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLnpcarriersByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LnpcarriersByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/lnpcarriers/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LnpcarriersByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LnpcarriersByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LnpcarriersByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LnpcarriersByIDGet gets a specific lnp carrier

TODO: Add Description
*/
func (a *Client) LnpcarriersByIDGet(params *LnpcarriersByIDGetParams) (*LnpcarriersByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLnpcarriersByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LnpcarriersByIdGet",
		Method:             "GET",
		PathPattern:        "/lnpcarriers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LnpcarriersByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LnpcarriersByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LnpcarriersByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LnpcarriersByIDPatch changes a specific lnp carrier

TODO: Add Description
*/
func (a *Client) LnpcarriersByIDPatch(params *LnpcarriersByIDPatchParams) (*LnpcarriersByIDPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLnpcarriersByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LnpcarriersByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/lnpcarriers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LnpcarriersByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LnpcarriersByIDPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LnpcarriersByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LnpcarriersByIDPut replaces change a specific lnp carrier

TODO: Add Description
*/
func (a *Client) LnpcarriersByIDPut(params *LnpcarriersByIDPutParams) (*LnpcarriersByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLnpcarriersByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LnpcarriersByIdPut",
		Method:             "PUT",
		PathPattern:        "/lnpcarriers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LnpcarriersByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LnpcarriersByIDPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LnpcarriersByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LnpnumbersByIDDelete deletes a specific lnp number

TODO: Add Description
*/
func (a *Client) LnpnumbersByIDDelete(params *LnpnumbersByIDDeleteParams) (*LnpnumbersByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLnpnumbersByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LnpnumbersByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/lnpnumbers/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LnpnumbersByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LnpnumbersByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LnpnumbersByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LnpnumbersByIDGet gets a specific lnp number

TODO: Add Description
*/
func (a *Client) LnpnumbersByIDGet(params *LnpnumbersByIDGetParams) (*LnpnumbersByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLnpnumbersByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LnpnumbersByIdGet",
		Method:             "GET",
		PathPattern:        "/lnpnumbers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LnpnumbersByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LnpnumbersByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LnpnumbersByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LnpnumbersByIDPatch changes a specific lnp number

TODO: Add Description
*/
func (a *Client) LnpnumbersByIDPatch(params *LnpnumbersByIDPatchParams) (*LnpnumbersByIDPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLnpnumbersByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LnpnumbersByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/lnpnumbers/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LnpnumbersByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LnpnumbersByIDPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LnpnumbersByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LnpnumbersByIDPut replaces change a specific lnp number

TODO: Add Description
*/
func (a *Client) LnpnumbersByIDPut(params *LnpnumbersByIDPutParams) (*LnpnumbersByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLnpnumbersByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "LnpnumbersByIdPut",
		Method:             "PUT",
		PathPattern:        "/lnpnumbers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LnpnumbersByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LnpnumbersByIDPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for LnpnumbersByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MailtofaxsettingsByIDGet gets a specific mail to fax setting

TODO: Add Description
*/
func (a *Client) MailtofaxsettingsByIDGet(params *MailtofaxsettingsByIDGetParams) (*MailtofaxsettingsByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMailtofaxsettingsByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MailtofaxsettingsByIdGet",
		Method:             "GET",
		PathPattern:        "/mailtofaxsettings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MailtofaxsettingsByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MailtofaxsettingsByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MailtofaxsettingsByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MailtofaxsettingsByIDPatch changes a specific mail to fax setting

TODO: Add Description
*/
func (a *Client) MailtofaxsettingsByIDPatch(params *MailtofaxsettingsByIDPatchParams) (*MailtofaxsettingsByIDPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMailtofaxsettingsByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MailtofaxsettingsByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/mailtofaxsettings/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MailtofaxsettingsByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MailtofaxsettingsByIDPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MailtofaxsettingsByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MailtofaxsettingsByIDPut replaces change a specific mail to fax setting

TODO: Add Description
*/
func (a *Client) MailtofaxsettingsByIDPut(params *MailtofaxsettingsByIDPutParams) (*MailtofaxsettingsByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMailtofaxsettingsByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MailtofaxsettingsByIdPut",
		Method:             "PUT",
		PathPattern:        "/mailtofaxsettings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MailtofaxsettingsByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MailtofaxsettingsByIDPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MailtofaxsettingsByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MaliciouscallsByIDDelete deletes a specific malicious call

TODO: Add Description
*/
func (a *Client) MaliciouscallsByIDDelete(params *MaliciouscallsByIDDeleteParams) (*MaliciouscallsByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMaliciouscallsByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MaliciouscallsByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/maliciouscalls/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MaliciouscallsByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MaliciouscallsByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MaliciouscallsByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MaliciouscallsByIDGet gets a specific malicious call

TODO: Add Description
*/
func (a *Client) MaliciouscallsByIDGet(params *MaliciouscallsByIDGetParams) (*MaliciouscallsByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMaliciouscallsByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "MaliciouscallsByIdGet",
		Method:             "GET",
		PathPattern:        "/maliciouscalls/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MaliciouscallsByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MaliciouscallsByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for MaliciouscallsByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ManagersecretaryByIDDelete deletes a specific manager secretary

TODO: Add Description
*/
func (a *Client) ManagersecretaryByIDDelete(params *ManagersecretaryByIDDeleteParams) (*ManagersecretaryByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewManagersecretaryByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ManagersecretaryByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/managersecretary/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ManagersecretaryByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ManagersecretaryByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ManagersecretaryByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ManagersecretaryByIDGet gets a specific manager secretary

TODO: Add Description
*/
func (a *Client) ManagersecretaryByIDGet(params *ManagersecretaryByIDGetParams) (*ManagersecretaryByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewManagersecretaryByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ManagersecretaryByIdGet",
		Method:             "GET",
		PathPattern:        "/managersecretary/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ManagersecretaryByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ManagersecretaryByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ManagersecretaryByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ManagersecretaryByIDPut replaces change a specific manager secretary

TODO: Add Description
*/
func (a *Client) ManagersecretaryByIDPut(params *ManagersecretaryByIDPutParams) (*ManagersecretaryByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewManagersecretaryByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ManagersecretaryByIdPut",
		Method:             "PUT",
		PathPattern:        "/managersecretary/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ManagersecretaryByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ManagersecretaryByIDPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ManagersecretaryByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
NcoslevelsByIDDelete deletes a specific ncos level

TODO: Add Description
*/
func (a *Client) NcoslevelsByIDDelete(params *NcoslevelsByIDDeleteParams) (*NcoslevelsByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNcoslevelsByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NcoslevelsByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/ncoslevels/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NcoslevelsByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NcoslevelsByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NcoslevelsByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
NcoslevelsByIDGet gets a specific ncos level

TODO: Add Description
*/
func (a *Client) NcoslevelsByIDGet(params *NcoslevelsByIDGetParams) (*NcoslevelsByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNcoslevelsByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NcoslevelsByIdGet",
		Method:             "GET",
		PathPattern:        "/ncoslevels/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NcoslevelsByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NcoslevelsByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NcoslevelsByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
NcoslevelsByIDPatch changes a specific ncos level

TODO: Add Description
*/
func (a *Client) NcoslevelsByIDPatch(params *NcoslevelsByIDPatchParams) (*NcoslevelsByIDPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNcoslevelsByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NcoslevelsByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/ncoslevels/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NcoslevelsByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NcoslevelsByIDPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NcoslevelsByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
NcoslevelsByIDPut replaces change a specific ncos level

TODO: Add Description
*/
func (a *Client) NcoslevelsByIDPut(params *NcoslevelsByIDPutParams) (*NcoslevelsByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNcoslevelsByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NcoslevelsByIdPut",
		Method:             "PUT",
		PathPattern:        "/ncoslevels/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NcoslevelsByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NcoslevelsByIDPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NcoslevelsByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
NcoslnpcarriersByIDDelete deletes a specific ncos lnp carrier

TODO: Add Description
*/
func (a *Client) NcoslnpcarriersByIDDelete(params *NcoslnpcarriersByIDDeleteParams) (*NcoslnpcarriersByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNcoslnpcarriersByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NcoslnpcarriersByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/ncoslnpcarriers/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NcoslnpcarriersByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NcoslnpcarriersByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NcoslnpcarriersByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
NcoslnpcarriersByIDGet gets a specific ncos lnp carrier

TODO: Add Description
*/
func (a *Client) NcoslnpcarriersByIDGet(params *NcoslnpcarriersByIDGetParams) (*NcoslnpcarriersByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNcoslnpcarriersByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NcoslnpcarriersByIdGet",
		Method:             "GET",
		PathPattern:        "/ncoslnpcarriers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NcoslnpcarriersByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NcoslnpcarriersByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NcoslnpcarriersByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
NcoslnpcarriersByIDPatch changes a specific ncos lnp carrier

TODO: Add Description
*/
func (a *Client) NcoslnpcarriersByIDPatch(params *NcoslnpcarriersByIDPatchParams) (*NcoslnpcarriersByIDPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNcoslnpcarriersByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NcoslnpcarriersByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/ncoslnpcarriers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NcoslnpcarriersByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NcoslnpcarriersByIDPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NcoslnpcarriersByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
NcoslnpcarriersByIDPut replaces change a specific ncos lnp carrier

TODO: Add Description
*/
func (a *Client) NcoslnpcarriersByIDPut(params *NcoslnpcarriersByIDPutParams) (*NcoslnpcarriersByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNcoslnpcarriersByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NcoslnpcarriersByIdPut",
		Method:             "PUT",
		PathPattern:        "/ncoslnpcarriers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NcoslnpcarriersByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NcoslnpcarriersByIDPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NcoslnpcarriersByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
NcospatternsByIDDelete deletes a specific ncos pattern

TODO: Add Description
*/
func (a *Client) NcospatternsByIDDelete(params *NcospatternsByIDDeleteParams) (*NcospatternsByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNcospatternsByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NcospatternsByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/ncospatterns/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NcospatternsByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NcospatternsByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NcospatternsByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
NcospatternsByIDGet gets a specific ncos pattern

TODO: Add Description
*/
func (a *Client) NcospatternsByIDGet(params *NcospatternsByIDGetParams) (*NcospatternsByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNcospatternsByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NcospatternsByIdGet",
		Method:             "GET",
		PathPattern:        "/ncospatterns/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NcospatternsByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NcospatternsByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NcospatternsByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
NcospatternsByIDPatch changes a specific ncos pattern

TODO: Add Description
*/
func (a *Client) NcospatternsByIDPatch(params *NcospatternsByIDPatchParams) (*NcospatternsByIDPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNcospatternsByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NcospatternsByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/ncospatterns/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NcospatternsByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NcospatternsByIDPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NcospatternsByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
NcospatternsByIDPut replaces change a specific ncos pattern

TODO: Add Description
*/
func (a *Client) NcospatternsByIDPut(params *NcospatternsByIDPutParams) (*NcospatternsByIDPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNcospatternsByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NcospatternsByIdPut",
		Method:             "PUT",
		PathPattern:        "/ncospatterns/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NcospatternsByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NcospatternsByIDPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NcospatternsByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
NumbersByIDGet gets a specific number

TODO: Add Description
*/
func (a *Client) NumbersByIDGet(params *NumbersByIDGetParams) (*NumbersByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNumbersByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NumbersByIdGet",
		Method:             "GET",
		PathPattern:        "/numbers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NumbersByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NumbersByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NumbersByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
NumbersByIDPatch changes a specific number

TODO: Add Description
*/
func (a *Client) NumbersByIDPatch(params *NumbersByIDPatchParams) (*NumbersByIDPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNumbersByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NumbersByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/numbers/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NumbersByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NumbersByIDPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NumbersByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
NumbersByIDPut replaces change a specific number

TODO: Add Description
*/
func (a *Client) NumbersByIDPut(params *NumbersByIDPutParams) (*NumbersByIDPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNumbersByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "NumbersByIdPut",
		Method:             "PUT",
		PathPattern:        "/numbers/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NumbersByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NumbersByIDPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for NumbersByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PbxdeviceconfigsByIDGet gets a specific pbx device config

TODO: Add Description
*/
func (a *Client) PbxdeviceconfigsByIDGet(params *PbxdeviceconfigsByIDGetParams) (*PbxdeviceconfigsByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPbxdeviceconfigsByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PbxdeviceconfigsByIdGet",
		Method:             "GET",
		PathPattern:        "/pbxdeviceconfigs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PbxdeviceconfigsByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PbxdeviceconfigsByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PbxdeviceconfigsByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PbxdeviceconfigsByIDPut replaces change a specific pbx device config

TODO: Add Description
*/
func (a *Client) PbxdeviceconfigsByIDPut(params *PbxdeviceconfigsByIDPutParams) (*PbxdeviceconfigsByIDPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPbxdeviceconfigsByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PbxdeviceconfigsByIdPut",
		Method:             "PUT",
		PathPattern:        "/pbxdeviceconfigs/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PbxdeviceconfigsByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PbxdeviceconfigsByIDPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PbxdeviceconfigsByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PbxdevicefirmwaresByIDGet gets a specific pbx device firmware

TODO: Add Description
*/
func (a *Client) PbxdevicefirmwaresByIDGet(params *PbxdevicefirmwaresByIDGetParams) (*PbxdevicefirmwaresByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPbxdevicefirmwaresByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PbxdevicefirmwaresByIdGet",
		Method:             "GET",
		PathPattern:        "/pbxdevicefirmwares/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PbxdevicefirmwaresByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PbxdevicefirmwaresByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PbxdevicefirmwaresByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PbxdevicefirmwaresByIDPut replaces change a specific pbx device firmware

TODO: Add Description
*/
func (a *Client) PbxdevicefirmwaresByIDPut(params *PbxdevicefirmwaresByIDPutParams) (*PbxdevicefirmwaresByIDPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPbxdevicefirmwaresByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PbxdevicefirmwaresByIdPut",
		Method:             "PUT",
		PathPattern:        "/pbxdevicefirmwares/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PbxdevicefirmwaresByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PbxdevicefirmwaresByIDPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PbxdevicefirmwaresByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PbxdevicemodelsByIDGet gets a specific pbx device model

TODO: Add Description
*/
func (a *Client) PbxdevicemodelsByIDGet(params *PbxdevicemodelsByIDGetParams) (*PbxdevicemodelsByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPbxdevicemodelsByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PbxdevicemodelsByIdGet",
		Method:             "GET",
		PathPattern:        "/pbxdevicemodels/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PbxdevicemodelsByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PbxdevicemodelsByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PbxdevicemodelsByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PbxdevicemodelsByIDPatch changes a specific pbx device model

TODO: Add Description
*/
func (a *Client) PbxdevicemodelsByIDPatch(params *PbxdevicemodelsByIDPatchParams) (*PbxdevicemodelsByIDPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPbxdevicemodelsByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PbxdevicemodelsByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/pbxdevicemodels/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PbxdevicemodelsByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PbxdevicemodelsByIDPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PbxdevicemodelsByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PbxdevicemodelsByIDPut replaces change a specific pbx device model

TODO: Add Description
*/
func (a *Client) PbxdevicemodelsByIDPut(params *PbxdevicemodelsByIDPutParams) (*PbxdevicemodelsByIDPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPbxdevicemodelsByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PbxdevicemodelsByIdPut",
		Method:             "PUT",
		PathPattern:        "/pbxdevicemodels/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PbxdevicemodelsByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PbxdevicemodelsByIDPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PbxdevicemodelsByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PbxdevicepreferencesByIDGet gets a specific pbx device preference

TODO: Add Description
*/
func (a *Client) PbxdevicepreferencesByIDGet(params *PbxdevicepreferencesByIDGetParams) (*PbxdevicepreferencesByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPbxdevicepreferencesByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PbxdevicepreferencesByIdGet",
		Method:             "GET",
		PathPattern:        "/pbxdevicepreferences/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PbxdevicepreferencesByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PbxdevicepreferencesByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PbxdevicepreferencesByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PbxdevicepreferencesByIDPatch changes a specific pbx device preference

TODO: Add Description
*/
func (a *Client) PbxdevicepreferencesByIDPatch(params *PbxdevicepreferencesByIDPatchParams) (*PbxdevicepreferencesByIDPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPbxdevicepreferencesByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PbxdevicepreferencesByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/pbxdevicepreferences/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PbxdevicepreferencesByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PbxdevicepreferencesByIDPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PbxdevicepreferencesByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PbxdevicepreferencesByIDPut replaces change a specific pbx device preference

TODO: Add Description
*/
func (a *Client) PbxdevicepreferencesByIDPut(params *PbxdevicepreferencesByIDPutParams) (*PbxdevicepreferencesByIDPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPbxdevicepreferencesByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PbxdevicepreferencesByIdPut",
		Method:             "PUT",
		PathPattern:        "/pbxdevicepreferences/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PbxdevicepreferencesByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PbxdevicepreferencesByIDPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PbxdevicepreferencesByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PbxdeviceprofilepreferencesByIDGet gets a specific pbx device profile preference

TODO: Add Description
*/
func (a *Client) PbxdeviceprofilepreferencesByIDGet(params *PbxdeviceprofilepreferencesByIDGetParams) (*PbxdeviceprofilepreferencesByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPbxdeviceprofilepreferencesByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PbxdeviceprofilepreferencesByIdGet",
		Method:             "GET",
		PathPattern:        "/pbxdeviceprofilepreferences/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PbxdeviceprofilepreferencesByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PbxdeviceprofilepreferencesByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PbxdeviceprofilepreferencesByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PbxdeviceprofilepreferencesByIDPatch changes a specific pbx device profile preference

TODO: Add Description
*/
func (a *Client) PbxdeviceprofilepreferencesByIDPatch(params *PbxdeviceprofilepreferencesByIDPatchParams) (*PbxdeviceprofilepreferencesByIDPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPbxdeviceprofilepreferencesByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PbxdeviceprofilepreferencesByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/pbxdeviceprofilepreferences/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PbxdeviceprofilepreferencesByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PbxdeviceprofilepreferencesByIDPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PbxdeviceprofilepreferencesByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PbxdeviceprofilepreferencesByIDPut replaces change a specific pbx device profile preference

TODO: Add Description
*/
func (a *Client) PbxdeviceprofilepreferencesByIDPut(params *PbxdeviceprofilepreferencesByIDPutParams) (*PbxdeviceprofilepreferencesByIDPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPbxdeviceprofilepreferencesByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PbxdeviceprofilepreferencesByIdPut",
		Method:             "PUT",
		PathPattern:        "/pbxdeviceprofilepreferences/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PbxdeviceprofilepreferencesByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PbxdeviceprofilepreferencesByIDPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PbxdeviceprofilepreferencesByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PbxdeviceprofilesByIDGet gets a specific pbx device profile

TODO: Add Description
*/
func (a *Client) PbxdeviceprofilesByIDGet(params *PbxdeviceprofilesByIDGetParams) (*PbxdeviceprofilesByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPbxdeviceprofilesByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PbxdeviceprofilesByIdGet",
		Method:             "GET",
		PathPattern:        "/pbxdeviceprofiles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PbxdeviceprofilesByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PbxdeviceprofilesByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PbxdeviceprofilesByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PbxdeviceprofilesByIDPatch changes a specific pbx device profile

TODO: Add Description
*/
func (a *Client) PbxdeviceprofilesByIDPatch(params *PbxdeviceprofilesByIDPatchParams) (*PbxdeviceprofilesByIDPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPbxdeviceprofilesByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PbxdeviceprofilesByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/pbxdeviceprofiles/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PbxdeviceprofilesByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PbxdeviceprofilesByIDPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PbxdeviceprofilesByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PbxdeviceprofilesByIDPut replaces change a specific pbx device profile

TODO: Add Description
*/
func (a *Client) PbxdeviceprofilesByIDPut(params *PbxdeviceprofilesByIDPutParams) (*PbxdeviceprofilesByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPbxdeviceprofilesByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PbxdeviceprofilesByIdPut",
		Method:             "PUT",
		PathPattern:        "/pbxdeviceprofiles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PbxdeviceprofilesByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PbxdeviceprofilesByIDPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PbxdeviceprofilesByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PbxdevicesByIDDelete deletes a specific pbx device

TODO: Add Description
*/
func (a *Client) PbxdevicesByIDDelete(params *PbxdevicesByIDDeleteParams) (*PbxdevicesByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPbxdevicesByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PbxdevicesByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/pbxdevices/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PbxdevicesByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PbxdevicesByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PbxdevicesByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PbxdevicesByIDGet gets a specific pbx device

TODO: Add Description
*/
func (a *Client) PbxdevicesByIDGet(params *PbxdevicesByIDGetParams) (*PbxdevicesByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPbxdevicesByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PbxdevicesByIdGet",
		Method:             "GET",
		PathPattern:        "/pbxdevices/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PbxdevicesByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PbxdevicesByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PbxdevicesByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PbxdevicesByIDPatch changes a specific pbx device

TODO: Add Description
*/
func (a *Client) PbxdevicesByIDPatch(params *PbxdevicesByIDPatchParams) (*PbxdevicesByIDPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPbxdevicesByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PbxdevicesByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/pbxdevices/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PbxdevicesByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PbxdevicesByIDPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PbxdevicesByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PbxdevicesByIDPut replaces change a specific pbx device

TODO: Add Description
*/
func (a *Client) PbxdevicesByIDPut(params *PbxdevicesByIDPutParams) (*PbxdevicesByIDPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPbxdevicesByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PbxdevicesByIdPut",
		Method:             "PUT",
		PathPattern:        "/pbxdevices/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PbxdevicesByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PbxdevicesByIDPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PbxdevicesByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PbxfielddevicepreferencesByIDGet gets a specific pbx field device preference

TODO: Add Description
*/
func (a *Client) PbxfielddevicepreferencesByIDGet(params *PbxfielddevicepreferencesByIDGetParams) (*PbxfielddevicepreferencesByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPbxfielddevicepreferencesByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PbxfielddevicepreferencesByIdGet",
		Method:             "GET",
		PathPattern:        "/pbxfielddevicepreferences/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PbxfielddevicepreferencesByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PbxfielddevicepreferencesByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PbxfielddevicepreferencesByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PbxfielddevicepreferencesByIDPatch changes a specific pbx field device preference

TODO: Add Description
*/
func (a *Client) PbxfielddevicepreferencesByIDPatch(params *PbxfielddevicepreferencesByIDPatchParams) (*PbxfielddevicepreferencesByIDPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPbxfielddevicepreferencesByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PbxfielddevicepreferencesByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/pbxfielddevicepreferences/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PbxfielddevicepreferencesByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PbxfielddevicepreferencesByIDPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PbxfielddevicepreferencesByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PbxfielddevicepreferencesByIDPut replaces change a specific pbx field device preference

TODO: Add Description
*/
func (a *Client) PbxfielddevicepreferencesByIDPut(params *PbxfielddevicepreferencesByIDPutParams) (*PbxfielddevicepreferencesByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPbxfielddevicepreferencesByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PbxfielddevicepreferencesByIdPut",
		Method:             "PUT",
		PathPattern:        "/pbxfielddevicepreferences/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PbxfielddevicepreferencesByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PbxfielddevicepreferencesByIDPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PbxfielddevicepreferencesByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PeeringgroupsByIDDelete deletes a specific peering group

TODO: Add Description
*/
func (a *Client) PeeringgroupsByIDDelete(params *PeeringgroupsByIDDeleteParams) (*PeeringgroupsByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeeringgroupsByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PeeringgroupsByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/peeringgroups/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PeeringgroupsByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeeringgroupsByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PeeringgroupsByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PeeringgroupsByIDGet gets a specific peering group

TODO: Add Description
*/
func (a *Client) PeeringgroupsByIDGet(params *PeeringgroupsByIDGetParams) (*PeeringgroupsByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeeringgroupsByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PeeringgroupsByIdGet",
		Method:             "GET",
		PathPattern:        "/peeringgroups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PeeringgroupsByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeeringgroupsByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PeeringgroupsByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PeeringgroupsByIDPatch changes a specific peering group

TODO: Add Description
*/
func (a *Client) PeeringgroupsByIDPatch(params *PeeringgroupsByIDPatchParams) (*PeeringgroupsByIDPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeeringgroupsByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PeeringgroupsByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/peeringgroups/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PeeringgroupsByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeeringgroupsByIDPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PeeringgroupsByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PeeringgroupsByIDPut replaces change a specific peering group

TODO: Add Description
*/
func (a *Client) PeeringgroupsByIDPut(params *PeeringgroupsByIDPutParams) (*PeeringgroupsByIDPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeeringgroupsByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PeeringgroupsByIdPut",
		Method:             "PUT",
		PathPattern:        "/peeringgroups/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PeeringgroupsByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeeringgroupsByIDPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PeeringgroupsByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PeeringinboundrulesByIDDelete deletes a specific peering inbound rule

TODO: Add Description
*/
func (a *Client) PeeringinboundrulesByIDDelete(params *PeeringinboundrulesByIDDeleteParams) (*PeeringinboundrulesByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeeringinboundrulesByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PeeringinboundrulesByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/peeringinboundrules/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PeeringinboundrulesByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeeringinboundrulesByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PeeringinboundrulesByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PeeringinboundrulesByIDGet gets a specific peering inbound rule

TODO: Add Description
*/
func (a *Client) PeeringinboundrulesByIDGet(params *PeeringinboundrulesByIDGetParams) (*PeeringinboundrulesByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeeringinboundrulesByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PeeringinboundrulesByIdGet",
		Method:             "GET",
		PathPattern:        "/peeringinboundrules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PeeringinboundrulesByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeeringinboundrulesByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PeeringinboundrulesByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PeeringinboundrulesByIDPatch changes a specific peering inbound rule

TODO: Add Description
*/
func (a *Client) PeeringinboundrulesByIDPatch(params *PeeringinboundrulesByIDPatchParams) (*PeeringinboundrulesByIDPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeeringinboundrulesByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PeeringinboundrulesByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/peeringinboundrules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PeeringinboundrulesByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeeringinboundrulesByIDPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PeeringinboundrulesByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PeeringinboundrulesByIDPut replaces change a specific peering inbound rule

TODO: Add Description
*/
func (a *Client) PeeringinboundrulesByIDPut(params *PeeringinboundrulesByIDPutParams) (*PeeringinboundrulesByIDPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeeringinboundrulesByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PeeringinboundrulesByIdPut",
		Method:             "PUT",
		PathPattern:        "/peeringinboundrules/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PeeringinboundrulesByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeeringinboundrulesByIDPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PeeringinboundrulesByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PeeringrulesByIDDelete deletes a specific peering rule

TODO: Add Description
*/
func (a *Client) PeeringrulesByIDDelete(params *PeeringrulesByIDDeleteParams) (*PeeringrulesByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeeringrulesByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PeeringrulesByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/peeringrules/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PeeringrulesByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeeringrulesByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PeeringrulesByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PeeringrulesByIDGet gets a specific peering rule

TODO: Add Description
*/
func (a *Client) PeeringrulesByIDGet(params *PeeringrulesByIDGetParams) (*PeeringrulesByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeeringrulesByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PeeringrulesByIdGet",
		Method:             "GET",
		PathPattern:        "/peeringrules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PeeringrulesByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeeringrulesByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PeeringrulesByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PeeringrulesByIDPatch changes a specific peering rule

TODO: Add Description
*/
func (a *Client) PeeringrulesByIDPatch(params *PeeringrulesByIDPatchParams) (*PeeringrulesByIDPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeeringrulesByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PeeringrulesByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/peeringrules/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PeeringrulesByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeeringrulesByIDPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PeeringrulesByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PeeringrulesByIDPut replaces change a specific peering rule

TODO: Add Description
*/
func (a *Client) PeeringrulesByIDPut(params *PeeringrulesByIDPutParams) (*PeeringrulesByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeeringrulesByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PeeringrulesByIdPut",
		Method:             "PUT",
		PathPattern:        "/peeringrules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PeeringrulesByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeeringrulesByIDPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PeeringrulesByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PeeringserverpreferencesByIDGet gets a specific peering server preference

TODO: Add Description
*/
func (a *Client) PeeringserverpreferencesByIDGet(params *PeeringserverpreferencesByIDGetParams) (*PeeringserverpreferencesByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeeringserverpreferencesByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PeeringserverpreferencesByIdGet",
		Method:             "GET",
		PathPattern:        "/peeringserverpreferences/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PeeringserverpreferencesByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeeringserverpreferencesByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PeeringserverpreferencesByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PeeringserverpreferencesByIDPatch changes a specific peering server preference

TODO: Add Description
*/
func (a *Client) PeeringserverpreferencesByIDPatch(params *PeeringserverpreferencesByIDPatchParams) (*PeeringserverpreferencesByIDPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeeringserverpreferencesByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PeeringserverpreferencesByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/peeringserverpreferences/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PeeringserverpreferencesByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeeringserverpreferencesByIDPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PeeringserverpreferencesByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PeeringserverpreferencesByIDPut replaces change a specific peering server preference

TODO: Add Description
*/
func (a *Client) PeeringserverpreferencesByIDPut(params *PeeringserverpreferencesByIDPutParams) (*PeeringserverpreferencesByIDPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeeringserverpreferencesByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PeeringserverpreferencesByIdPut",
		Method:             "PUT",
		PathPattern:        "/peeringserverpreferences/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PeeringserverpreferencesByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeeringserverpreferencesByIDPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PeeringserverpreferencesByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PeeringserversByIDDelete deletes a specific peering server

TODO: Add Description
*/
func (a *Client) PeeringserversByIDDelete(params *PeeringserversByIDDeleteParams) (*PeeringserversByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeeringserversByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PeeringserversByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/peeringservers/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PeeringserversByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeeringserversByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PeeringserversByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PeeringserversByIDGet gets a specific peering server

TODO: Add Description
*/
func (a *Client) PeeringserversByIDGet(params *PeeringserversByIDGetParams) (*PeeringserversByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeeringserversByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PeeringserversByIdGet",
		Method:             "GET",
		PathPattern:        "/peeringservers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PeeringserversByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeeringserversByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PeeringserversByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PeeringserversByIDPatch changes a specific peering server

TODO: Add Description
*/
func (a *Client) PeeringserversByIDPatch(params *PeeringserversByIDPatchParams) (*PeeringserversByIDPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeeringserversByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PeeringserversByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/peeringservers/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PeeringserversByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeeringserversByIDPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PeeringserversByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PeeringserversByIDPut replaces change a specific peering server

TODO: Add Description
*/
func (a *Client) PeeringserversByIDPut(params *PeeringserversByIDPutParams) (*PeeringserversByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeeringserversByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PeeringserversByIdPut",
		Method:             "PUT",
		PathPattern:        "/peeringservers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PeeringserversByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeeringserversByIDPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PeeringserversByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PhonebookentriesByIDDelete deletes a specific phonebook entry

TODO: Add Description
*/
func (a *Client) PhonebookentriesByIDDelete(params *PhonebookentriesByIDDeleteParams) (*PhonebookentriesByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPhonebookentriesByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PhonebookentriesByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/phonebookentries/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhonebookentriesByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhonebookentriesByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PhonebookentriesByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PhonebookentriesByIDGet gets a specific phonebook entry

TODO: Add Description
*/
func (a *Client) PhonebookentriesByIDGet(params *PhonebookentriesByIDGetParams) (*PhonebookentriesByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPhonebookentriesByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PhonebookentriesByIdGet",
		Method:             "GET",
		PathPattern:        "/phonebookentries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhonebookentriesByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhonebookentriesByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PhonebookentriesByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PhonebookentriesByIDPatch changes a specific phonebook entry

TODO: Add Description
*/
func (a *Client) PhonebookentriesByIDPatch(params *PhonebookentriesByIDPatchParams) (*PhonebookentriesByIDPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPhonebookentriesByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PhonebookentriesByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/phonebookentries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhonebookentriesByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhonebookentriesByIDPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PhonebookentriesByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PhonebookentriesByIDPut replaces change a specific phonebook entry

TODO: Add Description
*/
func (a *Client) PhonebookentriesByIDPut(params *PhonebookentriesByIDPutParams) (*PhonebookentriesByIDPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPhonebookentriesByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PhonebookentriesByIdPut",
		Method:             "PUT",
		PathPattern:        "/phonebookentries/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PhonebookentriesByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PhonebookentriesByIDPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PhonebookentriesByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PreferencesmetaentriesByIDDelete deletes a specific preferences meta entry

TODO: Add Description
*/
func (a *Client) PreferencesmetaentriesByIDDelete(params *PreferencesmetaentriesByIDDeleteParams) (*PreferencesmetaentriesByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPreferencesmetaentriesByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PreferencesmetaentriesByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/preferencesmetaentries/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PreferencesmetaentriesByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PreferencesmetaentriesByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PreferencesmetaentriesByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PreferencesmetaentriesByIDGet gets a specific preferences meta entry

TODO: Add Description
*/
func (a *Client) PreferencesmetaentriesByIDGet(params *PreferencesmetaentriesByIDGetParams) (*PreferencesmetaentriesByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPreferencesmetaentriesByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PreferencesmetaentriesByIdGet",
		Method:             "GET",
		PathPattern:        "/preferencesmetaentries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PreferencesmetaentriesByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PreferencesmetaentriesByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PreferencesmetaentriesByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PreferencesmetaentriesByIDPatch changes a specific preferences meta entry

TODO: Add Description
*/
func (a *Client) PreferencesmetaentriesByIDPatch(params *PreferencesmetaentriesByIDPatchParams) (*PreferencesmetaentriesByIDPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPreferencesmetaentriesByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PreferencesmetaentriesByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/preferencesmetaentries/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PreferencesmetaentriesByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PreferencesmetaentriesByIDPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PreferencesmetaentriesByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PreferencesmetaentriesByIDPut replaces change a specific preferences meta entry

TODO: Add Description
*/
func (a *Client) PreferencesmetaentriesByIDPut(params *PreferencesmetaentriesByIDPutParams) (*PreferencesmetaentriesByIDPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPreferencesmetaentriesByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PreferencesmetaentriesByIdPut",
		Method:             "PUT",
		PathPattern:        "/preferencesmetaentries/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PreferencesmetaentriesByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PreferencesmetaentriesByIDPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PreferencesmetaentriesByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProfilepackagesByIDDelete deletes a specific profile package

TODO: Add Description
*/
func (a *Client) ProfilepackagesByIDDelete(params *ProfilepackagesByIDDeleteParams) (*ProfilepackagesByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProfilepackagesByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProfilepackagesByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/profilepackages/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProfilepackagesByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProfilepackagesByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProfilepackagesByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProfilepackagesByIDGet gets a specific profile package

TODO: Add Description
*/
func (a *Client) ProfilepackagesByIDGet(params *ProfilepackagesByIDGetParams) (*ProfilepackagesByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProfilepackagesByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProfilepackagesByIdGet",
		Method:             "GET",
		PathPattern:        "/profilepackages/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProfilepackagesByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProfilepackagesByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProfilepackagesByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProfilepackagesByIDPatch changes a specific profile package

TODO: Add Description
*/
func (a *Client) ProfilepackagesByIDPatch(params *ProfilepackagesByIDPatchParams) (*ProfilepackagesByIDPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProfilepackagesByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProfilepackagesByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/profilepackages/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProfilepackagesByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProfilepackagesByIDPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProfilepackagesByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProfilepackagesByIDPut replaces change a specific profile package

TODO: Add Description
*/
func (a *Client) ProfilepackagesByIDPut(params *ProfilepackagesByIDPutParams) (*ProfilepackagesByIDPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProfilepackagesByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProfilepackagesByIdPut",
		Method:             "PUT",
		PathPattern:        "/profilepackages/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProfilepackagesByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProfilepackagesByIDPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProfilepackagesByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProfilepreferencesByIDGet gets a specific profile preference

TODO: Add Description
*/
func (a *Client) ProfilepreferencesByIDGet(params *ProfilepreferencesByIDGetParams) (*ProfilepreferencesByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProfilepreferencesByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProfilepreferencesByIdGet",
		Method:             "GET",
		PathPattern:        "/profilepreferences/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProfilepreferencesByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProfilepreferencesByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProfilepreferencesByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProfilepreferencesByIDPatch changes a specific profile preference

TODO: Add Description
*/
func (a *Client) ProfilepreferencesByIDPatch(params *ProfilepreferencesByIDPatchParams) (*ProfilepreferencesByIDPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProfilepreferencesByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProfilepreferencesByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/profilepreferences/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProfilepreferencesByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProfilepreferencesByIDPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProfilepreferencesByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProfilepreferencesByIDPut replaces change a specific profile preference

TODO: Add Description
*/
func (a *Client) ProfilepreferencesByIDPut(params *ProfilepreferencesByIDPutParams) (*ProfilepreferencesByIDPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProfilepreferencesByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProfilepreferencesByIdPut",
		Method:             "PUT",
		PathPattern:        "/profilepreferences/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProfilepreferencesByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProfilepreferencesByIDPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ProfilepreferencesByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemindersByIDDelete deletes a specific reminder

TODO: Add Description
*/
func (a *Client) RemindersByIDDelete(params *RemindersByIDDeleteParams) (*RemindersByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemindersByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RemindersByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/reminders/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemindersByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemindersByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RemindersByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemindersByIDGet gets a specific reminder

TODO: Add Description
*/
func (a *Client) RemindersByIDGet(params *RemindersByIDGetParams) (*RemindersByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemindersByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RemindersByIdGet",
		Method:             "GET",
		PathPattern:        "/reminders/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemindersByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemindersByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RemindersByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemindersByIDPatch changes a specific reminder

TODO: Add Description
*/
func (a *Client) RemindersByIDPatch(params *RemindersByIDPatchParams) (*RemindersByIDPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemindersByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RemindersByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/reminders/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemindersByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemindersByIDPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RemindersByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemindersByIDPut replaces change a specific reminder

TODO: Add Description
*/
func (a *Client) RemindersByIDPut(params *RemindersByIDPutParams) (*RemindersByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemindersByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RemindersByIdPut",
		Method:             "PUT",
		PathPattern:        "/reminders/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemindersByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemindersByIDPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RemindersByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResellersByIDGet gets a specific reseller

TODO: Add Description
*/
func (a *Client) ResellersByIDGet(params *ResellersByIDGetParams) (*ResellersByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResellersByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ResellersByIdGet",
		Method:             "GET",
		PathPattern:        "/resellers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResellersByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResellersByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ResellersByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResellersByIDPatch changes a specific reseller

TODO: Add Description
*/
func (a *Client) ResellersByIDPatch(params *ResellersByIDPatchParams) (*ResellersByIDPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResellersByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ResellersByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/resellers/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResellersByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResellersByIDPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ResellersByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResellersByIDPut replaces change a specific reseller

TODO: Add Description
*/
func (a *Client) ResellersByIDPut(params *ResellersByIDPutParams) (*ResellersByIDPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResellersByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ResellersByIdPut",
		Method:             "PUT",
		PathPattern:        "/resellers/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResellersByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResellersByIDPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ResellersByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RewriterulesByIDDelete deletes a specific rewrite rule

TODO: Add Description
*/
func (a *Client) RewriterulesByIDDelete(params *RewriterulesByIDDeleteParams) (*RewriterulesByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRewriterulesByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RewriterulesByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/rewriterules/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RewriterulesByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RewriterulesByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RewriterulesByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RewriterulesByIDGet gets a specific rewrite rule

TODO: Add Description
*/
func (a *Client) RewriterulesByIDGet(params *RewriterulesByIDGetParams) (*RewriterulesByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRewriterulesByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RewriterulesByIdGet",
		Method:             "GET",
		PathPattern:        "/rewriterules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RewriterulesByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RewriterulesByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RewriterulesByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RewriterulesByIDPatch changes a specific rewrite rule

TODO: Add Description
*/
func (a *Client) RewriterulesByIDPatch(params *RewriterulesByIDPatchParams) (*RewriterulesByIDPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRewriterulesByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RewriterulesByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/rewriterules/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RewriterulesByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RewriterulesByIDPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RewriterulesByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RewriterulesByIDPut replaces change a specific rewrite rule

TODO: Add Description
*/
func (a *Client) RewriterulesByIDPut(params *RewriterulesByIDPutParams) (*RewriterulesByIDPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRewriterulesByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RewriterulesByIdPut",
		Method:             "PUT",
		PathPattern:        "/rewriterules/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RewriterulesByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RewriterulesByIDPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RewriterulesByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RewriterulesetsByIDDelete deletes a specific rewrite rule set

TODO: Add Description
*/
func (a *Client) RewriterulesetsByIDDelete(params *RewriterulesetsByIDDeleteParams) (*RewriterulesetsByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRewriterulesetsByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RewriterulesetsByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/rewriterulesets/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RewriterulesetsByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RewriterulesetsByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RewriterulesetsByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RewriterulesetsByIDGet gets a specific rewrite rule set

TODO: Add Description
*/
func (a *Client) RewriterulesetsByIDGet(params *RewriterulesetsByIDGetParams) (*RewriterulesetsByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRewriterulesetsByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RewriterulesetsByIdGet",
		Method:             "GET",
		PathPattern:        "/rewriterulesets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RewriterulesetsByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RewriterulesetsByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RewriterulesetsByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RewriterulesetsByIDPatch changes a specific rewrite rule set

TODO: Add Description
*/
func (a *Client) RewriterulesetsByIDPatch(params *RewriterulesetsByIDPatchParams) (*RewriterulesetsByIDPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRewriterulesetsByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RewriterulesetsByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/rewriterulesets/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RewriterulesetsByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RewriterulesetsByIDPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RewriterulesetsByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RewriterulesetsByIDPut replaces change a specific rewrite rule set

TODO: Add Description
*/
func (a *Client) RewriterulesetsByIDPut(params *RewriterulesetsByIDPutParams) (*RewriterulesetsByIDPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRewriterulesetsByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RewriterulesetsByIdPut",
		Method:             "PUT",
		PathPattern:        "/rewriterulesets/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RewriterulesetsByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RewriterulesetsByIDPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RewriterulesetsByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RtcappsByIDGet gets a specific rtc app

TODO: Add Description
*/
func (a *Client) RtcappsByIDGet(params *RtcappsByIDGetParams) (*RtcappsByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRtcappsByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RtcappsByIdGet",
		Method:             "GET",
		PathPattern:        "/rtcapps/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RtcappsByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RtcappsByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RtcappsByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RtcappsByIDPatch changes a specific rtc app

TODO: Add Description
*/
func (a *Client) RtcappsByIDPatch(params *RtcappsByIDPatchParams) (*RtcappsByIDPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRtcappsByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RtcappsByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/rtcapps/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RtcappsByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RtcappsByIDPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RtcappsByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RtcappsByIDPut replaces change a specific rtc app

TODO: Add Description
*/
func (a *Client) RtcappsByIDPut(params *RtcappsByIDPutParams) (*RtcappsByIDPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRtcappsByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RtcappsByIdPut",
		Method:             "PUT",
		PathPattern:        "/rtcapps/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RtcappsByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RtcappsByIDPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RtcappsByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RtcnetworksByIDGet gets a specific rtc network

TODO: Add Description
*/
func (a *Client) RtcnetworksByIDGet(params *RtcnetworksByIDGetParams) (*RtcnetworksByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRtcnetworksByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RtcnetworksByIdGet",
		Method:             "GET",
		PathPattern:        "/rtcnetworks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RtcnetworksByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RtcnetworksByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RtcnetworksByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RtcnetworksByIDPatch changes a specific rtc network

TODO: Add Description
*/
func (a *Client) RtcnetworksByIDPatch(params *RtcnetworksByIDPatchParams) (*RtcnetworksByIDPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRtcnetworksByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RtcnetworksByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/rtcnetworks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RtcnetworksByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RtcnetworksByIDPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RtcnetworksByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RtcnetworksByIDPut replaces change a specific rtc network

TODO: Add Description
*/
func (a *Client) RtcnetworksByIDPut(params *RtcnetworksByIDPutParams) (*RtcnetworksByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRtcnetworksByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RtcnetworksByIdPut",
		Method:             "PUT",
		PathPattern:        "/rtcnetworks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RtcnetworksByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RtcnetworksByIDPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RtcnetworksByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SoundfilesByIDDelete deletes a specific sound file

TODO: Add Description
*/
func (a *Client) SoundfilesByIDDelete(params *SoundfilesByIDDeleteParams) (*SoundfilesByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSoundfilesByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SoundfilesByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/soundfiles/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SoundfilesByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SoundfilesByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SoundfilesByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SoundfilesByIDGet gets a specific sound file

TODO: Add Description
*/
func (a *Client) SoundfilesByIDGet(params *SoundfilesByIDGetParams) (*SoundfilesByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSoundfilesByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SoundfilesByIdGet",
		Method:             "GET",
		PathPattern:        "/soundfiles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SoundfilesByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SoundfilesByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SoundfilesByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SoundfilesByIDPut replaces change a specific sound file

TODO: Add Description
*/
func (a *Client) SoundfilesByIDPut(params *SoundfilesByIDPutParams) (*SoundfilesByIDPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSoundfilesByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SoundfilesByIdPut",
		Method:             "PUT",
		PathPattern:        "/soundfiles/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SoundfilesByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SoundfilesByIDPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SoundfilesByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SoundsetsByIDDelete deletes a specific sound set

TODO: Add Description
*/
func (a *Client) SoundsetsByIDDelete(params *SoundsetsByIDDeleteParams) (*SoundsetsByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSoundsetsByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SoundsetsByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/soundsets/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SoundsetsByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SoundsetsByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SoundsetsByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SoundsetsByIDGet gets a specific sound set

TODO: Add Description
*/
func (a *Client) SoundsetsByIDGet(params *SoundsetsByIDGetParams) (*SoundsetsByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSoundsetsByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SoundsetsByIdGet",
		Method:             "GET",
		PathPattern:        "/soundsets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SoundsetsByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SoundsetsByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SoundsetsByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SoundsetsByIDPatch changes a specific sound set

TODO: Add Description
*/
func (a *Client) SoundsetsByIDPatch(params *SoundsetsByIDPatchParams) (*SoundsetsByIDPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSoundsetsByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SoundsetsByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/soundsets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SoundsetsByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SoundsetsByIDPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SoundsetsByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SoundsetsByIDPut replaces change a specific sound set

TODO: Add Description
*/
func (a *Client) SoundsetsByIDPut(params *SoundsetsByIDPutParams) (*SoundsetsByIDPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSoundsetsByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SoundsetsByIdPut",
		Method:             "PUT",
		PathPattern:        "/soundsets/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SoundsetsByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SoundsetsByIDPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SoundsetsByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SpeeddialsByIDGet gets a specific speed dial

TODO: Add Description
*/
func (a *Client) SpeeddialsByIDGet(params *SpeeddialsByIDGetParams) (*SpeeddialsByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSpeeddialsByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SpeeddialsByIdGet",
		Method:             "GET",
		PathPattern:        "/speeddials/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SpeeddialsByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SpeeddialsByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SpeeddialsByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SpeeddialsByIDPatch changes a specific speed dial

TODO: Add Description
*/
func (a *Client) SpeeddialsByIDPatch(params *SpeeddialsByIDPatchParams) (*SpeeddialsByIDPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSpeeddialsByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SpeeddialsByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/speeddials/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SpeeddialsByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SpeeddialsByIDPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SpeeddialsByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SpeeddialsByIDPut replaces change a specific speed dial

TODO: Add Description
*/
func (a *Client) SpeeddialsByIDPut(params *SpeeddialsByIDPutParams) (*SpeeddialsByIDPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSpeeddialsByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SpeeddialsByIdPut",
		Method:             "PUT",
		PathPattern:        "/speeddials/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SpeeddialsByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SpeeddialsByIDPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SpeeddialsByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubscriberpreferencesByIDGet gets a specific subscriber preference

TODO: Add Description
*/
func (a *Client) SubscriberpreferencesByIDGet(params *SubscriberpreferencesByIDGetParams) (*SubscriberpreferencesByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriberpreferencesByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SubscriberpreferencesByIdGet",
		Method:             "GET",
		PathPattern:        "/subscriberpreferences/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubscriberpreferencesByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriberpreferencesByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SubscriberpreferencesByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubscriberpreferencesByIDPatch changes a specific subscriber preference

TODO: Add Description
*/
func (a *Client) SubscriberpreferencesByIDPatch(params *SubscriberpreferencesByIDPatchParams) (*SubscriberpreferencesByIDPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriberpreferencesByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SubscriberpreferencesByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/subscriberpreferences/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubscriberpreferencesByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriberpreferencesByIDPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SubscriberpreferencesByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubscriberpreferencesByIDPut replaces change a specific subscriber preference

TODO: Add Description
*/
func (a *Client) SubscriberpreferencesByIDPut(params *SubscriberpreferencesByIDPutParams) (*SubscriberpreferencesByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriberpreferencesByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SubscriberpreferencesByIdPut",
		Method:             "PUT",
		PathPattern:        "/subscriberpreferences/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubscriberpreferencesByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriberpreferencesByIDPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SubscriberpreferencesByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubscriberprofilesByIDDelete deletes a specific subscriber profile

TODO: Add Description
*/
func (a *Client) SubscriberprofilesByIDDelete(params *SubscriberprofilesByIDDeleteParams) (*SubscriberprofilesByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriberprofilesByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SubscriberprofilesByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/subscriberprofiles/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubscriberprofilesByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriberprofilesByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SubscriberprofilesByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubscriberprofilesByIDGet gets a specific subscriber profile

TODO: Add Description
*/
func (a *Client) SubscriberprofilesByIDGet(params *SubscriberprofilesByIDGetParams) (*SubscriberprofilesByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriberprofilesByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SubscriberprofilesByIdGet",
		Method:             "GET",
		PathPattern:        "/subscriberprofiles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubscriberprofilesByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriberprofilesByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SubscriberprofilesByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubscriberprofilesByIDPatch changes a specific subscriber profile

TODO: Add Description
*/
func (a *Client) SubscriberprofilesByIDPatch(params *SubscriberprofilesByIDPatchParams) (*SubscriberprofilesByIDPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriberprofilesByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SubscriberprofilesByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/subscriberprofiles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubscriberprofilesByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriberprofilesByIDPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SubscriberprofilesByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubscriberprofilesByIDPut replaces change a specific subscriber profile

TODO: Add Description
*/
func (a *Client) SubscriberprofilesByIDPut(params *SubscriberprofilesByIDPutParams) (*SubscriberprofilesByIDPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriberprofilesByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SubscriberprofilesByIdPut",
		Method:             "PUT",
		PathPattern:        "/subscriberprofiles/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubscriberprofilesByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriberprofilesByIDPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SubscriberprofilesByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubscriberprofilesetsByIDDelete deletes a specific subscriber profile set

TODO: Add Description
*/
func (a *Client) SubscriberprofilesetsByIDDelete(params *SubscriberprofilesetsByIDDeleteParams) (*SubscriberprofilesetsByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriberprofilesetsByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SubscriberprofilesetsByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/subscriberprofilesets/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubscriberprofilesetsByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriberprofilesetsByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SubscriberprofilesetsByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubscriberprofilesetsByIDGet gets a specific subscriber profile set

TODO: Add Description
*/
func (a *Client) SubscriberprofilesetsByIDGet(params *SubscriberprofilesetsByIDGetParams) (*SubscriberprofilesetsByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriberprofilesetsByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SubscriberprofilesetsByIdGet",
		Method:             "GET",
		PathPattern:        "/subscriberprofilesets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubscriberprofilesetsByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriberprofilesetsByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SubscriberprofilesetsByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubscriberprofilesetsByIDPatch changes a specific subscriber profile set

TODO: Add Description
*/
func (a *Client) SubscriberprofilesetsByIDPatch(params *SubscriberprofilesetsByIDPatchParams) (*SubscriberprofilesetsByIDPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriberprofilesetsByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SubscriberprofilesetsByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/subscriberprofilesets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubscriberprofilesetsByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriberprofilesetsByIDPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SubscriberprofilesetsByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubscriberprofilesetsByIDPut replaces change a specific subscriber profile set

TODO: Add Description
*/
func (a *Client) SubscriberprofilesetsByIDPut(params *SubscriberprofilesetsByIDPutParams) (*SubscriberprofilesetsByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriberprofilesetsByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SubscriberprofilesetsByIdPut",
		Method:             "PUT",
		PathPattern:        "/subscriberprofilesets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubscriberprofilesetsByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriberprofilesetsByIDPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SubscriberprofilesetsByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubscriberregistrationsByIDDelete deletes a specific subscriber registration

TODO: Add Description
*/
func (a *Client) SubscriberregistrationsByIDDelete(params *SubscriberregistrationsByIDDeleteParams) (*SubscriberregistrationsByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriberregistrationsByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SubscriberregistrationsByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/subscriberregistrations/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubscriberregistrationsByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriberregistrationsByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SubscriberregistrationsByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubscriberregistrationsByIDGet gets a specific subscriber registration

TODO: Add Description
*/
func (a *Client) SubscriberregistrationsByIDGet(params *SubscriberregistrationsByIDGetParams) (*SubscriberregistrationsByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriberregistrationsByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SubscriberregistrationsByIdGet",
		Method:             "GET",
		PathPattern:        "/subscriberregistrations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubscriberregistrationsByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriberregistrationsByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SubscriberregistrationsByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubscriberregistrationsByIDPatch changes a specific subscriber registration

TODO: Add Description
*/
func (a *Client) SubscriberregistrationsByIDPatch(params *SubscriberregistrationsByIDPatchParams) (*SubscriberregistrationsByIDPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriberregistrationsByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SubscriberregistrationsByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/subscriberregistrations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubscriberregistrationsByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriberregistrationsByIDPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SubscriberregistrationsByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubscriberregistrationsByIDPut replaces change a specific subscriber registration

TODO: Add Description
*/
func (a *Client) SubscriberregistrationsByIDPut(params *SubscriberregistrationsByIDPutParams) (*SubscriberregistrationsByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriberregistrationsByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SubscriberregistrationsByIdPut",
		Method:             "PUT",
		PathPattern:        "/subscriberregistrations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubscriberregistrationsByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriberregistrationsByIDPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SubscriberregistrationsByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubscribersByIDDelete deletes a specific subscriber

TODO: Add Description
*/
func (a *Client) SubscribersByIDDelete(params *SubscribersByIDDeleteParams) (*SubscribersByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscribersByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SubscribersByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/subscribers/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubscribersByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscribersByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SubscribersByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubscribersByIDGet gets a specific subscriber

TODO: Add Description
*/
func (a *Client) SubscribersByIDGet(params *SubscribersByIDGetParams) (*SubscribersByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscribersByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SubscribersByIdGet",
		Method:             "GET",
		PathPattern:        "/subscribers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubscribersByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscribersByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SubscribersByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubscribersByIDPatch changes a specific subscriber

TODO: Add Description
*/
func (a *Client) SubscribersByIDPatch(params *SubscribersByIDPatchParams) (*SubscribersByIDPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscribersByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SubscribersByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/subscribers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubscribersByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscribersByIDPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SubscribersByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubscribersByIDPut replaces change a specific subscriber

TODO: Add Description
*/
func (a *Client) SubscribersByIDPut(params *SubscribersByIDPutParams) (*SubscribersByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscribersByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SubscribersByIdPut",
		Method:             "PUT",
		PathPattern:        "/subscribers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubscribersByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscribersByIDPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SubscribersByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SystemcontactsByIDDelete deletes a specific system contact

TODO: Add Description
*/
func (a *Client) SystemcontactsByIDDelete(params *SystemcontactsByIDDeleteParams) (*SystemcontactsByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemcontactsByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SystemcontactsByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/systemcontacts/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SystemcontactsByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SystemcontactsByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SystemcontactsByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SystemcontactsByIDGet gets a specific system contact

TODO: Add Description
*/
func (a *Client) SystemcontactsByIDGet(params *SystemcontactsByIDGetParams) (*SystemcontactsByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemcontactsByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SystemcontactsByIdGet",
		Method:             "GET",
		PathPattern:        "/systemcontacts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SystemcontactsByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SystemcontactsByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SystemcontactsByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SystemcontactsByIDPatch changes a specific system contact

TODO: Add Description
*/
func (a *Client) SystemcontactsByIDPatch(params *SystemcontactsByIDPatchParams) (*SystemcontactsByIDPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemcontactsByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SystemcontactsByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/systemcontacts/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SystemcontactsByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SystemcontactsByIDPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SystemcontactsByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SystemcontactsByIDPut replaces change a specific system contact

TODO: Add Description
*/
func (a *Client) SystemcontactsByIDPut(params *SystemcontactsByIDPutParams) (*SystemcontactsByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemcontactsByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SystemcontactsByIdPut",
		Method:             "PUT",
		PathPattern:        "/systemcontacts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SystemcontactsByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SystemcontactsByIDPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SystemcontactsByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TrustedsourcesByIDDelete deletes a specific trusted source

TODO: Add Description
*/
func (a *Client) TrustedsourcesByIDDelete(params *TrustedsourcesByIDDeleteParams) (*TrustedsourcesByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTrustedsourcesByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TrustedsourcesByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/trustedsources/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TrustedsourcesByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TrustedsourcesByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TrustedsourcesByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TrustedsourcesByIDGet gets a specific trusted source

TODO: Add Description
*/
func (a *Client) TrustedsourcesByIDGet(params *TrustedsourcesByIDGetParams) (*TrustedsourcesByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTrustedsourcesByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TrustedsourcesByIdGet",
		Method:             "GET",
		PathPattern:        "/trustedsources/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TrustedsourcesByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TrustedsourcesByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TrustedsourcesByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TrustedsourcesByIDPatch changes a specific trusted source

TODO: Add Description
*/
func (a *Client) TrustedsourcesByIDPatch(params *TrustedsourcesByIDPatchParams) (*TrustedsourcesByIDPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTrustedsourcesByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TrustedsourcesByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/trustedsources/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TrustedsourcesByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TrustedsourcesByIDPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TrustedsourcesByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TrustedsourcesByIDPut replaces change a specific trusted source

TODO: Add Description
*/
func (a *Client) TrustedsourcesByIDPut(params *TrustedsourcesByIDPutParams) (*TrustedsourcesByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTrustedsourcesByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TrustedsourcesByIdPut",
		Method:             "PUT",
		PathPattern:        "/trustedsources/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TrustedsourcesByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TrustedsourcesByIDPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TrustedsourcesByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpnrewritesetsByIDDelete deletes a specific upn rewrite set

TODO: Add Description
*/
func (a *Client) UpnrewritesetsByIDDelete(params *UpnrewritesetsByIDDeleteParams) (*UpnrewritesetsByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpnrewritesetsByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpnrewritesetsByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/upnrewritesets/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpnrewritesetsByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpnrewritesetsByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpnrewritesetsByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpnrewritesetsByIDGet gets a specific upn rewrite set

TODO: Add Description
*/
func (a *Client) UpnrewritesetsByIDGet(params *UpnrewritesetsByIDGetParams) (*UpnrewritesetsByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpnrewritesetsByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpnrewritesetsByIdGet",
		Method:             "GET",
		PathPattern:        "/upnrewritesets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpnrewritesetsByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpnrewritesetsByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpnrewritesetsByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpnrewritesetsByIDPatch changes a specific upn rewrite set

TODO: Add Description
*/
func (a *Client) UpnrewritesetsByIDPatch(params *UpnrewritesetsByIDPatchParams) (*UpnrewritesetsByIDPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpnrewritesetsByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpnrewritesetsByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/upnrewritesets/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpnrewritesetsByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpnrewritesetsByIDPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpnrewritesetsByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpnrewritesetsByIDPut replaces change a specific upn rewrite set

TODO: Add Description
*/
func (a *Client) UpnrewritesetsByIDPut(params *UpnrewritesetsByIDPutParams) (*UpnrewritesetsByIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpnrewritesetsByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpnrewritesetsByIdPut",
		Method:             "PUT",
		PathPattern:        "/upnrewritesets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpnrewritesetsByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpnrewritesetsByIDPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpnrewritesetsByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VoicemailgreetingsByIDDelete deletes a specific voicemail greeting

TODO: Add Description
*/
func (a *Client) VoicemailgreetingsByIDDelete(params *VoicemailgreetingsByIDDeleteParams) (*VoicemailgreetingsByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVoicemailgreetingsByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VoicemailgreetingsByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/voicemailgreetings/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VoicemailgreetingsByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VoicemailgreetingsByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for VoicemailgreetingsByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VoicemailgreetingsByIDGet gets a specific voicemail greeting

TODO: Add Description
*/
func (a *Client) VoicemailgreetingsByIDGet(params *VoicemailgreetingsByIDGetParams) (*VoicemailgreetingsByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVoicemailgreetingsByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VoicemailgreetingsByIdGet",
		Method:             "GET",
		PathPattern:        "/voicemailgreetings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VoicemailgreetingsByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VoicemailgreetingsByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for VoicemailgreetingsByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VoicemailgreetingsByIDPut replaces change a specific voicemail greeting

TODO: Add Description
*/
func (a *Client) VoicemailgreetingsByIDPut(params *VoicemailgreetingsByIDPutParams) (*VoicemailgreetingsByIDPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVoicemailgreetingsByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VoicemailgreetingsByIdPut",
		Method:             "PUT",
		PathPattern:        "/voicemailgreetings/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VoicemailgreetingsByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VoicemailgreetingsByIDPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for VoicemailgreetingsByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VoicemailsByIDDelete deletes a specific voicemail

TODO: Add Description
*/
func (a *Client) VoicemailsByIDDelete(params *VoicemailsByIDDeleteParams) (*VoicemailsByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVoicemailsByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VoicemailsByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/voicemails/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VoicemailsByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VoicemailsByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for VoicemailsByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VoicemailsByIDGet gets a specific voicemail

TODO: Add Description
*/
func (a *Client) VoicemailsByIDGet(params *VoicemailsByIDGetParams) (*VoicemailsByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVoicemailsByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VoicemailsByIdGet",
		Method:             "GET",
		PathPattern:        "/voicemails/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VoicemailsByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VoicemailsByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for VoicemailsByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VoicemailsByIDPatch changes a specific voicemail

TODO: Add Description
*/
func (a *Client) VoicemailsByIDPatch(params *VoicemailsByIDPatchParams) (*VoicemailsByIDPatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVoicemailsByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VoicemailsByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/voicemails/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VoicemailsByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VoicemailsByIDPatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for VoicemailsByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VoicemailsByIDPut replaces change a specific voicemail

TODO: Add Description
*/
func (a *Client) VoicemailsByIDPut(params *VoicemailsByIDPutParams) (*VoicemailsByIDPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVoicemailsByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VoicemailsByIdPut",
		Method:             "PUT",
		PathPattern:        "/voicemails/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VoicemailsByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VoicemailsByIDPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for VoicemailsByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VoicemailsettingsByIDGet gets a specific voicemail setting

TODO: Add Description
*/
func (a *Client) VoicemailsettingsByIDGet(params *VoicemailsettingsByIDGetParams) (*VoicemailsettingsByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVoicemailsettingsByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VoicemailsettingsByIdGet",
		Method:             "GET",
		PathPattern:        "/voicemailsettings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VoicemailsettingsByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VoicemailsettingsByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for VoicemailsettingsByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VoicemailsettingsByIDPatch changes a specific voicemail setting

TODO: Add Description
*/
func (a *Client) VoicemailsettingsByIDPatch(params *VoicemailsettingsByIDPatchParams) (*VoicemailsettingsByIDPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVoicemailsettingsByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VoicemailsettingsByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/voicemailsettings/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VoicemailsettingsByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VoicemailsettingsByIDPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for VoicemailsettingsByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VoicemailsettingsByIDPut replaces change a specific voicemail setting

TODO: Add Description
*/
func (a *Client) VoicemailsettingsByIDPut(params *VoicemailsettingsByIDPutParams) (*VoicemailsettingsByIDPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVoicemailsettingsByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VoicemailsettingsByIdPut",
		Method:             "PUT",
		PathPattern:        "/voicemailsettings/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VoicemailsettingsByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VoicemailsettingsByIDPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for VoicemailsettingsByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VouchersByIDDelete deletes a specific voucher

TODO: Add Description
*/
func (a *Client) VouchersByIDDelete(params *VouchersByIDDeleteParams) (*VouchersByIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVouchersByIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VouchersByIdDelete",
		Method:             "DELETE",
		PathPattern:        "/vouchers/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VouchersByIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VouchersByIDDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for VouchersByIdDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VouchersByIDGet gets a specific voucher

TODO: Add Description
*/
func (a *Client) VouchersByIDGet(params *VouchersByIDGetParams) (*VouchersByIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVouchersByIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VouchersByIdGet",
		Method:             "GET",
		PathPattern:        "/vouchers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VouchersByIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VouchersByIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for VouchersByIdGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VouchersByIDPatch changes a specific voucher

TODO: Add Description
*/
func (a *Client) VouchersByIDPatch(params *VouchersByIDPatchParams) (*VouchersByIDPatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVouchersByIDPatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VouchersByIdPatch",
		Method:             "PATCH",
		PathPattern:        "/vouchers/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VouchersByIDPatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VouchersByIDPatchNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for VouchersByIdPatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VouchersByIDPut replaces change a specific voucher

TODO: Add Description
*/
func (a *Client) VouchersByIDPut(params *VouchersByIDPutParams) (*VouchersByIDPutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVouchersByIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VouchersByIdPut",
		Method:             "PUT",
		PathPattern:        "/vouchers/{id}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VouchersByIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VouchersByIDPutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for VouchersByIdPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
