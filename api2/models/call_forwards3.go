// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CallForwards3 CallForwards3
//
// swagger:model CallForwards3
type CallForwards3 struct {

	// cfb
	// Required: true
	Cfb *Cfb4 `json:"cfb"`

	// cfna
	// Required: true
	Cfna *Cfna4 `json:"cfna"`

	// cfr
	// Required: true
	Cfr *Cfr4 `json:"cfr"`

	// cfs
	// Required: true
	Cfs *Cfs4 `json:"cfs"`

	// cft
	// Required: true
	Cft *Cft4 `json:"cft"`

	// cfu
	// Required: true
	Cfu *Cfu4 `json:"cfu"`
}

// Validate validates this call forwards3
func (m *CallForwards3) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCfb(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCfna(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCfr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCfs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCft(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCfu(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CallForwards3) validateCfb(formats strfmt.Registry) error {

	if err := validate.Required("cfb", "body", m.Cfb); err != nil {
		return err
	}

	if m.Cfb != nil {
		if err := m.Cfb.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cfb")
			}
			return err
		}
	}

	return nil
}

func (m *CallForwards3) validateCfna(formats strfmt.Registry) error {

	if err := validate.Required("cfna", "body", m.Cfna); err != nil {
		return err
	}

	if m.Cfna != nil {
		if err := m.Cfna.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cfna")
			}
			return err
		}
	}

	return nil
}

func (m *CallForwards3) validateCfr(formats strfmt.Registry) error {

	if err := validate.Required("cfr", "body", m.Cfr); err != nil {
		return err
	}

	if m.Cfr != nil {
		if err := m.Cfr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cfr")
			}
			return err
		}
	}

	return nil
}

func (m *CallForwards3) validateCfs(formats strfmt.Registry) error {

	if err := validate.Required("cfs", "body", m.Cfs); err != nil {
		return err
	}

	if m.Cfs != nil {
		if err := m.Cfs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cfs")
			}
			return err
		}
	}

	return nil
}

func (m *CallForwards3) validateCft(formats strfmt.Registry) error {

	if err := validate.Required("cft", "body", m.Cft); err != nil {
		return err
	}

	if m.Cft != nil {
		if err := m.Cft.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cft")
			}
			return err
		}
	}

	return nil
}

func (m *CallForwards3) validateCfu(formats strfmt.Registry) error {

	if err := validate.Required("cfu", "body", m.Cfu); err != nil {
		return err
	}

	if m.Cfu != nil {
		if err := m.Cfu.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cfu")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CallForwards3) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CallForwards3) UnmarshalBinary(b []byte) error {
	var res CallForwards3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
