// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomerFraudEvent CustomerFraudEvent
//
// swagger:model CustomerFraudEvent
type CustomerFraudEvent struct {

	// id
	// Required: true
	ID *float64 `json:"id"`

	// interval
	// Required: true
	Interval *string `json:"interval"`

	// interval cost
	// Required: true
	IntervalCost *float64 `json:"interval_cost"`

	// interval limit
	// Required: true
	IntervalLimit *float64 `json:"interval_limit"`

	// interval lock
	// Required: true
	IntervalLock *float64 `json:"interval_lock"`

	// interval notify
	// Required: true
	IntervalNotify *string `json:"interval_notify"`

	// reseller id
	// Required: true
	ResellerID *float64 `json:"reseller_id"`

	// type
	// Required: true
	Type *string `json:"type"`

	// use reseller rates
	// Required: true
	UseResellerRates *float64 `json:"use_reseller_rates"`
}

// Validate validates this customer fraud event
func (m *CustomerFraudEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntervalCost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntervalLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntervalLock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntervalNotify(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResellerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUseResellerRates(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerFraudEvent) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *CustomerFraudEvent) validateInterval(formats strfmt.Registry) error {

	if err := validate.Required("interval", "body", m.Interval); err != nil {
		return err
	}

	return nil
}

func (m *CustomerFraudEvent) validateIntervalCost(formats strfmt.Registry) error {

	if err := validate.Required("interval_cost", "body", m.IntervalCost); err != nil {
		return err
	}

	return nil
}

func (m *CustomerFraudEvent) validateIntervalLimit(formats strfmt.Registry) error {

	if err := validate.Required("interval_limit", "body", m.IntervalLimit); err != nil {
		return err
	}

	return nil
}

func (m *CustomerFraudEvent) validateIntervalLock(formats strfmt.Registry) error {

	if err := validate.Required("interval_lock", "body", m.IntervalLock); err != nil {
		return err
	}

	return nil
}

func (m *CustomerFraudEvent) validateIntervalNotify(formats strfmt.Registry) error {

	if err := validate.Required("interval_notify", "body", m.IntervalNotify); err != nil {
		return err
	}

	return nil
}

func (m *CustomerFraudEvent) validateResellerID(formats strfmt.Registry) error {

	if err := validate.Required("reseller_id", "body", m.ResellerID); err != nil {
		return err
	}

	return nil
}

func (m *CustomerFraudEvent) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *CustomerFraudEvent) validateUseResellerRates(formats strfmt.Registry) error {

	if err := validate.Required("use_reseller_rates", "body", m.UseResellerRates); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomerFraudEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerFraudEvent) UnmarshalBinary(b []byte) error {
	var res CustomerFraudEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
