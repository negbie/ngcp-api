// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReplaceChangeaspecificSubscriberRegistrationRequest Replace/changeaspecificSubscriberRegistrationRequest
// swagger:model Replace/changeaspecificSubscriberRegistrationRequest
type ReplaceChangeaspecificSubscriberRegistrationRequest struct {

	// contact
	// Required: true
	Contact *string `json:"contact"`

	// expires
	// Required: true
	Expires *string `json:"expires"`

	// nat
	// Required: true
	Nat *string `json:"nat"`

	// path
	// Required: true
	Path *string `json:"path"`

	// q
	// Required: true
	Q *string `json:"q"`

	// socket
	// Required: true
	Socket *string `json:"socket"`

	// subscriber id
	// Required: true
	SubscriberID *string `json:"subscriber_id"`
}

// Validate validates this replace changeaspecific subscriber registration request
func (m *ReplaceChangeaspecificSubscriberRegistrationRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpires(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQ(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSocket(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriberID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReplaceChangeaspecificSubscriberRegistrationRequest) validateContact(formats strfmt.Registry) error {

	if err := validate.Required("contact", "body", m.Contact); err != nil {
		return err
	}

	return nil
}

func (m *ReplaceChangeaspecificSubscriberRegistrationRequest) validateExpires(formats strfmt.Registry) error {

	if err := validate.Required("expires", "body", m.Expires); err != nil {
		return err
	}

	return nil
}

func (m *ReplaceChangeaspecificSubscriberRegistrationRequest) validateNat(formats strfmt.Registry) error {

	if err := validate.Required("nat", "body", m.Nat); err != nil {
		return err
	}

	return nil
}

func (m *ReplaceChangeaspecificSubscriberRegistrationRequest) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	return nil
}

func (m *ReplaceChangeaspecificSubscriberRegistrationRequest) validateQ(formats strfmt.Registry) error {

	if err := validate.Required("q", "body", m.Q); err != nil {
		return err
	}

	return nil
}

func (m *ReplaceChangeaspecificSubscriberRegistrationRequest) validateSocket(formats strfmt.Registry) error {

	if err := validate.Required("socket", "body", m.Socket); err != nil {
		return err
	}

	return nil
}

func (m *ReplaceChangeaspecificSubscriberRegistrationRequest) validateSubscriberID(formats strfmt.Registry) error {

	if err := validate.Required("subscriber_id", "body", m.SubscriberID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReplaceChangeaspecificSubscriberRegistrationRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReplaceChangeaspecificSubscriberRegistrationRequest) UnmarshalBinary(b []byte) error {
	var res ReplaceChangeaspecificSubscriberRegistrationRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
