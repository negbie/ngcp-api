// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CallRecordingFiles CallRecordingFiles
//
// swagger:model CallRecordingFiles
type CallRecordingFiles struct {

	// channels
	// Required: true
	Channels *float64 `json:"channels"`

	// end time
	// Required: true
	EndTime *string `json:"end_time"`

	// format
	// Required: true
	Format *string `json:"format"`

	// recording id
	// Required: true
	RecordingID *float64 `json:"recording_id"`

	// sample rate
	// Required: true
	SampleRate *float64 `json:"sample_rate"`

	// start time
	// Required: true
	StartTime *string `json:"start_time"`

	// type
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this call recording files
func (m *CallRecordingFiles) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChannels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecordingID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSampleRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CallRecordingFiles) validateChannels(formats strfmt.Registry) error {

	if err := validate.Required("channels", "body", m.Channels); err != nil {
		return err
	}

	return nil
}

func (m *CallRecordingFiles) validateEndTime(formats strfmt.Registry) error {

	if err := validate.Required("end_time", "body", m.EndTime); err != nil {
		return err
	}

	return nil
}

func (m *CallRecordingFiles) validateFormat(formats strfmt.Registry) error {

	if err := validate.Required("format", "body", m.Format); err != nil {
		return err
	}

	return nil
}

func (m *CallRecordingFiles) validateRecordingID(formats strfmt.Registry) error {

	if err := validate.Required("recording_id", "body", m.RecordingID); err != nil {
		return err
	}

	return nil
}

func (m *CallRecordingFiles) validateSampleRate(formats strfmt.Registry) error {

	if err := validate.Required("sample_rate", "body", m.SampleRate); err != nil {
		return err
	}

	return nil
}

func (m *CallRecordingFiles) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("start_time", "body", m.StartTime); err != nil {
		return err
	}

	return nil
}

func (m *CallRecordingFiles) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CallRecordingFiles) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CallRecordingFiles) UnmarshalBinary(b []byte) error {
	var res CallRecordingFiles
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
