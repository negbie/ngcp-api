// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Attribute Attribute
//
// swagger:model Attribute
type Attribute struct {

	// accept auto answer
	// Required: true
	AcceptAutoAnswer *string `json:"accept_auto_answer"`

	// advice of charge
	// Required: true
	AdviceOfCharge *string `json:"advice_of_charge"`

	// auto attendant
	// Required: true
	AutoAttendant *string `json:"auto_attendant"`

	// block in clir
	// Required: true
	BlockInClir *string `json:"block_in_clir"`

	// block in list
	// Required: true
	BlockInList *string `json:"block_in_list"`

	// block in mode
	// Required: true
	BlockInMode *string `json:"block_in_mode"`

	// block out list
	// Required: true
	BlockOutList *string `json:"block_out_list"`

	// block out mode
	// Required: true
	BlockOutMode *string `json:"block_out_mode"`

	// block out override pin
	// Required: true
	BlockOutOverridePin *string `json:"block_out_override_pin"`

	// cfb
	// Required: true
	Cfb *string `json:"cfb"`

	// cfna
	// Required: true
	Cfna *string `json:"cfna"`

	// cfr
	// Required: true
	Cfr *string `json:"cfr"`

	// cfs
	// Required: true
	Cfs *string `json:"cfs"`

	// cft
	// Required: true
	Cft *string `json:"cft"`

	// cfu
	// Required: true
	Cfu *string `json:"cfu"`

	// clip no screening
	// Required: true
	ClipNoScreening *string `json:"clip_no_screening"`

	// clir
	// Required: true
	Clir *string `json:"clir"`

	// clir intrapbx
	// Required: true
	ClirIntrapbx *string `json:"clir_intrapbx"`

	// clir override
	// Required: true
	ClirOverride *string `json:"clir_override"`

	// cloud pbx callqueue
	// Required: true
	CloudPbxCallqueue *string `json:"cloud_pbx_callqueue"`

	// codecs filter
	// Required: true
	CodecsFilter *string `json:"codecs_filter"`

	// codecs list
	// Required: true
	CodecsList *string `json:"codecs_list"`

	// conference max participants
	// Required: true
	ConferenceMaxParticipants *string `json:"conference_max_participants"`

	// conference pin
	// Required: true
	ConferencePin *string `json:"conference_pin"`

	// contract sound set
	// Required: true
	ContractSoundSet *string `json:"contract_sound_set"`

	// csta client
	// Required: true
	CstaClient *string `json:"csta_client"`

	// csta controller
	// Required: true
	CstaController *string `json:"csta_controller"`

	// enable t38
	// Required: true
	EnableT38 *string `json:"enable_t38"`

	// extended dialing mode
	// Required: true
	ExtendedDialingMode *string `json:"extended_dialing_mode"`

	// fax server
	// Required: true
	FaxServer *string `json:"fax_server"`

	// language
	// Required: true
	Language *string `json:"language"`

	// manager secretary
	// Required: true
	ManagerSecretary *string `json:"manager_secretary"`

	// max call duration
	// Required: true
	MaxCallDuration *string `json:"max_call_duration"`

	// max queue length
	// Required: true
	MaxQueueLength *string `json:"max_queue_length"`

	// music on hold
	// Required: true
	MusicOnHold *string `json:"music_on_hold"`

	// ncos
	// Required: true
	Ncos *string `json:"ncos"`

	// pai clir
	// Required: true
	PaiClir *string `json:"pai_clir"`

	// queue wrap up time
	// Required: true
	QueueWrapUpTime *string `json:"queue_wrap_up_time"`

	// reminder
	// Required: true
	Reminder *string `json:"reminder"`

	// rerouting codes
	// Required: true
	ReroutingCodes *string `json:"rerouting_codes"`

	// rerouting mode
	// Required: true
	ReroutingMode *string `json:"rerouting_mode"`

	// secretary numbers
	// Required: true
	SecretaryNumbers *string `json:"secretary_numbers"`

	// set moh sendonly
	// Required: true
	SetMohSendonly *string `json:"set_moh_sendonly"`

	// set moh zeroconnection
	// Required: true
	SetMohZeroconnection *string `json:"set_moh_zeroconnection"`

	// softphone autoprov
	// Required: true
	SoftphoneAutoprov *string `json:"softphone_autoprov"`

	// speed dial
	// Required: true
	SpeedDial *string `json:"speed_dial"`

	// upn rewrite
	// Required: true
	UpnRewrite *string `json:"upn_rewrite"`

	// voice mail
	// Required: true
	VoiceMail *string `json:"voice_mail"`
}

// Validate validates this attribute
func (m *Attribute) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcceptAutoAnswer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdviceOfCharge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAutoAttendant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlockInClir(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlockInList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlockInMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlockOutList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlockOutMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlockOutOverridePin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCfb(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCfna(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCfr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCfs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCft(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCfu(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClipNoScreening(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClir(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClirIntrapbx(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClirOverride(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudPbxCallqueue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCodecsFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCodecsList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConferenceMaxParticipants(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConferencePin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContractSoundSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCstaClient(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCstaController(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnableT38(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtendedDialingMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFaxServer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManagerSecretary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxCallDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxQueueLength(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMusicOnHold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNcos(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaiClir(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueueWrapUpTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReminder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReroutingCodes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReroutingMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecretaryNumbers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSetMohSendonly(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSetMohZeroconnection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoftphoneAutoprov(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpeedDial(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpnRewrite(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVoiceMail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Attribute) validateAcceptAutoAnswer(formats strfmt.Registry) error {

	if err := validate.Required("accept_auto_answer", "body", m.AcceptAutoAnswer); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateAdviceOfCharge(formats strfmt.Registry) error {

	if err := validate.Required("advice_of_charge", "body", m.AdviceOfCharge); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateAutoAttendant(formats strfmt.Registry) error {

	if err := validate.Required("auto_attendant", "body", m.AutoAttendant); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateBlockInClir(formats strfmt.Registry) error {

	if err := validate.Required("block_in_clir", "body", m.BlockInClir); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateBlockInList(formats strfmt.Registry) error {

	if err := validate.Required("block_in_list", "body", m.BlockInList); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateBlockInMode(formats strfmt.Registry) error {

	if err := validate.Required("block_in_mode", "body", m.BlockInMode); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateBlockOutList(formats strfmt.Registry) error {

	if err := validate.Required("block_out_list", "body", m.BlockOutList); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateBlockOutMode(formats strfmt.Registry) error {

	if err := validate.Required("block_out_mode", "body", m.BlockOutMode); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateBlockOutOverridePin(formats strfmt.Registry) error {

	if err := validate.Required("block_out_override_pin", "body", m.BlockOutOverridePin); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateCfb(formats strfmt.Registry) error {

	if err := validate.Required("cfb", "body", m.Cfb); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateCfna(formats strfmt.Registry) error {

	if err := validate.Required("cfna", "body", m.Cfna); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateCfr(formats strfmt.Registry) error {

	if err := validate.Required("cfr", "body", m.Cfr); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateCfs(formats strfmt.Registry) error {

	if err := validate.Required("cfs", "body", m.Cfs); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateCft(formats strfmt.Registry) error {

	if err := validate.Required("cft", "body", m.Cft); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateCfu(formats strfmt.Registry) error {

	if err := validate.Required("cfu", "body", m.Cfu); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateClipNoScreening(formats strfmt.Registry) error {

	if err := validate.Required("clip_no_screening", "body", m.ClipNoScreening); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateClir(formats strfmt.Registry) error {

	if err := validate.Required("clir", "body", m.Clir); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateClirIntrapbx(formats strfmt.Registry) error {

	if err := validate.Required("clir_intrapbx", "body", m.ClirIntrapbx); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateClirOverride(formats strfmt.Registry) error {

	if err := validate.Required("clir_override", "body", m.ClirOverride); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateCloudPbxCallqueue(formats strfmt.Registry) error {

	if err := validate.Required("cloud_pbx_callqueue", "body", m.CloudPbxCallqueue); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateCodecsFilter(formats strfmt.Registry) error {

	if err := validate.Required("codecs_filter", "body", m.CodecsFilter); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateCodecsList(formats strfmt.Registry) error {

	if err := validate.Required("codecs_list", "body", m.CodecsList); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateConferenceMaxParticipants(formats strfmt.Registry) error {

	if err := validate.Required("conference_max_participants", "body", m.ConferenceMaxParticipants); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateConferencePin(formats strfmt.Registry) error {

	if err := validate.Required("conference_pin", "body", m.ConferencePin); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateContractSoundSet(formats strfmt.Registry) error {

	if err := validate.Required("contract_sound_set", "body", m.ContractSoundSet); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateCstaClient(formats strfmt.Registry) error {

	if err := validate.Required("csta_client", "body", m.CstaClient); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateCstaController(formats strfmt.Registry) error {

	if err := validate.Required("csta_controller", "body", m.CstaController); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateEnableT38(formats strfmt.Registry) error {

	if err := validate.Required("enable_t38", "body", m.EnableT38); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateExtendedDialingMode(formats strfmt.Registry) error {

	if err := validate.Required("extended_dialing_mode", "body", m.ExtendedDialingMode); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateFaxServer(formats strfmt.Registry) error {

	if err := validate.Required("fax_server", "body", m.FaxServer); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateLanguage(formats strfmt.Registry) error {

	if err := validate.Required("language", "body", m.Language); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateManagerSecretary(formats strfmt.Registry) error {

	if err := validate.Required("manager_secretary", "body", m.ManagerSecretary); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateMaxCallDuration(formats strfmt.Registry) error {

	if err := validate.Required("max_call_duration", "body", m.MaxCallDuration); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateMaxQueueLength(formats strfmt.Registry) error {

	if err := validate.Required("max_queue_length", "body", m.MaxQueueLength); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateMusicOnHold(formats strfmt.Registry) error {

	if err := validate.Required("music_on_hold", "body", m.MusicOnHold); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateNcos(formats strfmt.Registry) error {

	if err := validate.Required("ncos", "body", m.Ncos); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validatePaiClir(formats strfmt.Registry) error {

	if err := validate.Required("pai_clir", "body", m.PaiClir); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateQueueWrapUpTime(formats strfmt.Registry) error {

	if err := validate.Required("queue_wrap_up_time", "body", m.QueueWrapUpTime); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateReminder(formats strfmt.Registry) error {

	if err := validate.Required("reminder", "body", m.Reminder); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateReroutingCodes(formats strfmt.Registry) error {

	if err := validate.Required("rerouting_codes", "body", m.ReroutingCodes); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateReroutingMode(formats strfmt.Registry) error {

	if err := validate.Required("rerouting_mode", "body", m.ReroutingMode); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateSecretaryNumbers(formats strfmt.Registry) error {

	if err := validate.Required("secretary_numbers", "body", m.SecretaryNumbers); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateSetMohSendonly(formats strfmt.Registry) error {

	if err := validate.Required("set_moh_sendonly", "body", m.SetMohSendonly); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateSetMohZeroconnection(formats strfmt.Registry) error {

	if err := validate.Required("set_moh_zeroconnection", "body", m.SetMohZeroconnection); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateSoftphoneAutoprov(formats strfmt.Registry) error {

	if err := validate.Required("softphone_autoprov", "body", m.SoftphoneAutoprov); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateSpeedDial(formats strfmt.Registry) error {

	if err := validate.Required("speed_dial", "body", m.SpeedDial); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateUpnRewrite(formats strfmt.Registry) error {

	if err := validate.Required("upn_rewrite", "body", m.UpnRewrite); err != nil {
		return err
	}

	return nil
}

func (m *Attribute) validateVoiceMail(formats strfmt.Registry) error {

	if err := validate.Required("voice_mail", "body", m.VoiceMail); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Attribute) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Attribute) UnmarshalBinary(b []byte) error {
	var res Attribute
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
