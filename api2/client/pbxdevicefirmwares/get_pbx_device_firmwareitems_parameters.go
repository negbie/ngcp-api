// Code generated by go-swagger; DO NOT EDIT.

package pbxdevicefirmwares

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetPbxDeviceFirmwareitemsParams creates a new GetPbxDeviceFirmwareitemsParams object
// with the default values initialized.
func NewGetPbxDeviceFirmwareitemsParams() *GetPbxDeviceFirmwareitemsParams {
	var ()
	return &GetPbxDeviceFirmwareitemsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPbxDeviceFirmwareitemsParamsWithTimeout creates a new GetPbxDeviceFirmwareitemsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPbxDeviceFirmwareitemsParamsWithTimeout(timeout time.Duration) *GetPbxDeviceFirmwareitemsParams {
	var ()
	return &GetPbxDeviceFirmwareitemsParams{

		timeout: timeout,
	}
}

// NewGetPbxDeviceFirmwareitemsParamsWithContext creates a new GetPbxDeviceFirmwareitemsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPbxDeviceFirmwareitemsParamsWithContext(ctx context.Context) *GetPbxDeviceFirmwareitemsParams {
	var ()
	return &GetPbxDeviceFirmwareitemsParams{

		Context: ctx,
	}
}

// NewGetPbxDeviceFirmwareitemsParamsWithHTTPClient creates a new GetPbxDeviceFirmwareitemsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPbxDeviceFirmwareitemsParamsWithHTTPClient(client *http.Client) *GetPbxDeviceFirmwareitemsParams {
	var ()
	return &GetPbxDeviceFirmwareitemsParams{
		HTTPClient: client,
	}
}

/*GetPbxDeviceFirmwareitemsParams contains all the parameters to send to the API endpoint
for the get pbx device firmwareitems operation typically these are written to a http.Request
*/
type GetPbxDeviceFirmwareitemsParams struct {

	/*DeviceID
	  Filter for firmwares of a specific device model

	*/
	DeviceID string
	/*Filename
	  Filter for firmwares by a specific file name

	*/
	Filename string
	/*OrderBy
	  Order collection by a specific attribute.

	*/
	OrderBy string
	/*OrderByDirection
	  Direction which the collection should be ordered by. Possible values are: asc (default), desc.

	*/
	OrderByDirection string
	/*Page
	  Pagination page which should be displayed (default: 1)

	*/
	Page string
	/*Rows
	  Number of rows in one pagination page (default: 10)

	*/
	Rows string
	/*Version
	  Filter for firmwares by a specific version

	*/
	Version string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get pbx device firmwareitems params
func (o *GetPbxDeviceFirmwareitemsParams) WithTimeout(timeout time.Duration) *GetPbxDeviceFirmwareitemsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get pbx device firmwareitems params
func (o *GetPbxDeviceFirmwareitemsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get pbx device firmwareitems params
func (o *GetPbxDeviceFirmwareitemsParams) WithContext(ctx context.Context) *GetPbxDeviceFirmwareitemsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get pbx device firmwareitems params
func (o *GetPbxDeviceFirmwareitemsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get pbx device firmwareitems params
func (o *GetPbxDeviceFirmwareitemsParams) WithHTTPClient(client *http.Client) *GetPbxDeviceFirmwareitemsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get pbx device firmwareitems params
func (o *GetPbxDeviceFirmwareitemsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDeviceID adds the deviceID to the get pbx device firmwareitems params
func (o *GetPbxDeviceFirmwareitemsParams) WithDeviceID(deviceID string) *GetPbxDeviceFirmwareitemsParams {
	o.SetDeviceID(deviceID)
	return o
}

// SetDeviceID adds the deviceId to the get pbx device firmwareitems params
func (o *GetPbxDeviceFirmwareitemsParams) SetDeviceID(deviceID string) {
	o.DeviceID = deviceID
}

// WithFilename adds the filename to the get pbx device firmwareitems params
func (o *GetPbxDeviceFirmwareitemsParams) WithFilename(filename string) *GetPbxDeviceFirmwareitemsParams {
	o.SetFilename(filename)
	return o
}

// SetFilename adds the filename to the get pbx device firmwareitems params
func (o *GetPbxDeviceFirmwareitemsParams) SetFilename(filename string) {
	o.Filename = filename
}

// WithOrderBy adds the orderBy to the get pbx device firmwareitems params
func (o *GetPbxDeviceFirmwareitemsParams) WithOrderBy(orderBy string) *GetPbxDeviceFirmwareitemsParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the get pbx device firmwareitems params
func (o *GetPbxDeviceFirmwareitemsParams) SetOrderBy(orderBy string) {
	o.OrderBy = orderBy
}

// WithOrderByDirection adds the orderByDirection to the get pbx device firmwareitems params
func (o *GetPbxDeviceFirmwareitemsParams) WithOrderByDirection(orderByDirection string) *GetPbxDeviceFirmwareitemsParams {
	o.SetOrderByDirection(orderByDirection)
	return o
}

// SetOrderByDirection adds the orderByDirection to the get pbx device firmwareitems params
func (o *GetPbxDeviceFirmwareitemsParams) SetOrderByDirection(orderByDirection string) {
	o.OrderByDirection = orderByDirection
}

// WithPage adds the page to the get pbx device firmwareitems params
func (o *GetPbxDeviceFirmwareitemsParams) WithPage(page string) *GetPbxDeviceFirmwareitemsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get pbx device firmwareitems params
func (o *GetPbxDeviceFirmwareitemsParams) SetPage(page string) {
	o.Page = page
}

// WithRows adds the rows to the get pbx device firmwareitems params
func (o *GetPbxDeviceFirmwareitemsParams) WithRows(rows string) *GetPbxDeviceFirmwareitemsParams {
	o.SetRows(rows)
	return o
}

// SetRows adds the rows to the get pbx device firmwareitems params
func (o *GetPbxDeviceFirmwareitemsParams) SetRows(rows string) {
	o.Rows = rows
}

// WithVersion adds the version to the get pbx device firmwareitems params
func (o *GetPbxDeviceFirmwareitemsParams) WithVersion(version string) *GetPbxDeviceFirmwareitemsParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the get pbx device firmwareitems params
func (o *GetPbxDeviceFirmwareitemsParams) SetVersion(version string) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *GetPbxDeviceFirmwareitemsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param device_id
	qrDeviceID := o.DeviceID
	qDeviceID := qrDeviceID
	if qDeviceID != "" {
		if err := r.SetQueryParam("device_id", qDeviceID); err != nil {
			return err
		}
	}

	// query param filename
	qrFilename := o.Filename
	qFilename := qrFilename
	if qFilename != "" {
		if err := r.SetQueryParam("filename", qFilename); err != nil {
			return err
		}
	}

	// query param order_by
	qrOrderBy := o.OrderBy
	qOrderBy := qrOrderBy
	if qOrderBy != "" {
		if err := r.SetQueryParam("order_by", qOrderBy); err != nil {
			return err
		}
	}

	// query param order_by_direction
	qrOrderByDirection := o.OrderByDirection
	qOrderByDirection := qrOrderByDirection
	if qOrderByDirection != "" {
		if err := r.SetQueryParam("order_by_direction", qOrderByDirection); err != nil {
			return err
		}
	}

	// query param page
	qrPage := o.Page
	qPage := qrPage
	if qPage != "" {
		if err := r.SetQueryParam("page", qPage); err != nil {
			return err
		}
	}

	// query param rows
	qrRows := o.Rows
	qRows := qrRows
	if qRows != "" {
		if err := r.SetQueryParam("rows", qRows); err != nil {
			return err
		}
	}

	// query param version
	qrVersion := o.Version
	qVersion := qrVersion
	if qVersion != "" {
		if err := r.SetQueryParam("version", qVersion); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
