// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/negbie/ngcp-api/client/autoattendants"
	"github.com/negbie/ngcp-api/client/balanceintervals"
	"github.com/negbie/ngcp-api/client/bannedips"
	"github.com/negbie/ngcp-api/client/bannedusers"
	"github.com/negbie/ngcp-api/client/callforwards"
	"github.com/negbie/ngcp-api/client/calllists"
	"github.com/negbie/ngcp-api/client/callqueues"
	"github.com/negbie/ngcp-api/client/callrecordings"
	"github.com/negbie/ngcp-api/client/callrecordingstreams"
	"github.com/negbie/ngcp-api/client/calls"
	"github.com/negbie/ngcp-api/client/capabilities"
	"github.com/negbie/ngcp-api/client/ccmapentries"
	"github.com/negbie/ngcp-api/client/cfmappings"
	"github.com/negbie/ngcp-api/client/conversations"
	"github.com/negbie/ngcp-api/client/customerbalances"
	"github.com/negbie/ngcp-api/client/customerfraudevents"
	"github.com/negbie/ngcp-api/client/customerfraudpreferences"
	"github.com/negbie/ngcp-api/client/customerpreferences"
	"github.com/negbie/ngcp-api/client/customerzonecosts"
	"github.com/negbie/ngcp-api/client/domainpreferences"
	"github.com/negbie/ngcp-api/client/events"
	"github.com/negbie/ngcp-api/client/faxes"
	"github.com/negbie/ngcp-api/client/faxserversettings"
	"github.com/negbie/ngcp-api/client/id"
	"github.com/negbie/ngcp-api/client/invoicetemplates"
	"github.com/negbie/ngcp-api/client/mailtofaxsettings"
	"github.com/negbie/ngcp-api/client/maliciouscalls"
	"github.com/negbie/ngcp-api/client/managersecretary"
	"github.com/negbie/ngcp-api/client/misc"
	"github.com/negbie/ngcp-api/client/numbers"
	"github.com/negbie/ngcp-api/client/operations"
	"github.com/negbie/ngcp-api/client/pbxdevicepreferences"
	"github.com/negbie/ngcp-api/client/pbxdeviceprofilepreferences"
	"github.com/negbie/ngcp-api/client/pbxfielddevicepreferences"
	"github.com/negbie/ngcp-api/client/peeringserverpreferences"
	"github.com/negbie/ngcp-api/client/profilepreferences"
	"github.com/negbie/ngcp-api/client/rtcapps"
	"github.com/negbie/ngcp-api/client/rtcnetworks"
	"github.com/negbie/ngcp-api/client/rtcsessions"
	"github.com/negbie/ngcp-api/client/sipcaptures"
	"github.com/negbie/ngcp-api/client/sms"
	"github.com/negbie/ngcp-api/client/soundgroups"
	"github.com/negbie/ngcp-api/client/soundhandles"
	"github.com/negbie/ngcp-api/client/speeddials"
	"github.com/negbie/ngcp-api/client/subscriberpreferences"
	"github.com/negbie/ngcp-api/client/topuplogs"
	"github.com/negbie/ngcp-api/client/voicemails"
	"github.com/negbie/ngcp-api/client/voicemailsettings"
)

// Default ngcp HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "sipwise-lab2.nmc.netcologne.intern:1443"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/api"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"https"}

// NewHTTPClient creates a new ngcp HTTP client.
func NewHTTPClient(formats strfmt.Registry) *Ngcp {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new ngcp HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *Ngcp {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new ngcp client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Ngcp {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(Ngcp)
	cli.Transport = transport

	cli.Autoattendants = autoattendants.New(transport, formats)

	cli.Balanceintervals = balanceintervals.New(transport, formats)

	cli.Bannedips = bannedips.New(transport, formats)

	cli.Bannedusers = bannedusers.New(transport, formats)

	cli.Callforwards = callforwards.New(transport, formats)

	cli.Calllists = calllists.New(transport, formats)

	cli.Callqueues = callqueues.New(transport, formats)

	cli.Callrecordings = callrecordings.New(transport, formats)

	cli.Callrecordingstreams = callrecordingstreams.New(transport, formats)

	cli.Calls = calls.New(transport, formats)

	cli.Capabilities = capabilities.New(transport, formats)

	cli.Ccmapentries = ccmapentries.New(transport, formats)

	cli.Cfmappings = cfmappings.New(transport, formats)

	cli.Conversations = conversations.New(transport, formats)

	cli.Customerbalances = customerbalances.New(transport, formats)

	cli.Customerfraudevents = customerfraudevents.New(transport, formats)

	cli.Customerfraudpreferences = customerfraudpreferences.New(transport, formats)

	cli.Customerpreferences = customerpreferences.New(transport, formats)

	cli.Customerzonecosts = customerzonecosts.New(transport, formats)

	cli.Domainpreferences = domainpreferences.New(transport, formats)

	cli.Events = events.New(transport, formats)

	cli.Faxes = faxes.New(transport, formats)

	cli.Faxserversettings = faxserversettings.New(transport, formats)

	cli.ID = id.New(transport, formats)

	cli.Invoicetemplates = invoicetemplates.New(transport, formats)

	cli.Mailtofaxsettings = mailtofaxsettings.New(transport, formats)

	cli.Maliciouscalls = maliciouscalls.New(transport, formats)

	cli.Managersecretary = managersecretary.New(transport, formats)

	cli.Misc = misc.New(transport, formats)

	cli.Numbers = numbers.New(transport, formats)

	cli.Operations = operations.New(transport, formats)

	cli.Pbxdevicepreferences = pbxdevicepreferences.New(transport, formats)

	cli.Pbxdeviceprofilepreferences = pbxdeviceprofilepreferences.New(transport, formats)

	cli.Pbxfielddevicepreferences = pbxfielddevicepreferences.New(transport, formats)

	cli.Peeringserverpreferences = peeringserverpreferences.New(transport, formats)

	cli.Profilepreferences = profilepreferences.New(transport, formats)

	cli.Rtcapps = rtcapps.New(transport, formats)

	cli.Rtcnetworks = rtcnetworks.New(transport, formats)

	cli.Rtcsessions = rtcsessions.New(transport, formats)

	cli.Sipcaptures = sipcaptures.New(transport, formats)

	cli.Sms = sms.New(transport, formats)

	cli.Soundgroups = soundgroups.New(transport, formats)

	cli.Soundhandles = soundhandles.New(transport, formats)

	cli.Speeddials = speeddials.New(transport, formats)

	cli.Subscriberpreferences = subscriberpreferences.New(transport, formats)

	cli.Topuplogs = topuplogs.New(transport, formats)

	cli.Voicemails = voicemails.New(transport, formats)

	cli.Voicemailsettings = voicemailsettings.New(transport, formats)

	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// Ngcp is a client for ngcp
type Ngcp struct {
	Autoattendants *autoattendants.Client

	Balanceintervals *balanceintervals.Client

	Bannedips *bannedips.Client

	Bannedusers *bannedusers.Client

	Callforwards *callforwards.Client

	Calllists *calllists.Client

	Callqueues *callqueues.Client

	Callrecordings *callrecordings.Client

	Callrecordingstreams *callrecordingstreams.Client

	Calls *calls.Client

	Capabilities *capabilities.Client

	Ccmapentries *ccmapentries.Client

	Cfmappings *cfmappings.Client

	Conversations *conversations.Client

	Customerbalances *customerbalances.Client

	Customerfraudevents *customerfraudevents.Client

	Customerfraudpreferences *customerfraudpreferences.Client

	Customerpreferences *customerpreferences.Client

	Customerzonecosts *customerzonecosts.Client

	Domainpreferences *domainpreferences.Client

	Events *events.Client

	Faxes *faxes.Client

	Faxserversettings *faxserversettings.Client

	ID *id.Client

	Invoicetemplates *invoicetemplates.Client

	Mailtofaxsettings *mailtofaxsettings.Client

	Maliciouscalls *maliciouscalls.Client

	Managersecretary *managersecretary.Client

	Misc *misc.Client

	Numbers *numbers.Client

	Operations *operations.Client

	Pbxdevicepreferences *pbxdevicepreferences.Client

	Pbxdeviceprofilepreferences *pbxdeviceprofilepreferences.Client

	Pbxfielddevicepreferences *pbxfielddevicepreferences.Client

	Peeringserverpreferences *peeringserverpreferences.Client

	Profilepreferences *profilepreferences.Client

	Rtcapps *rtcapps.Client

	Rtcnetworks *rtcnetworks.Client

	Rtcsessions *rtcsessions.Client

	Sipcaptures *sipcaptures.Client

	Sms *sms.Client

	Soundgroups *soundgroups.Client

	Soundhandles *soundhandles.Client

	Speeddials *speeddials.Client

	Subscriberpreferences *subscriberpreferences.Client

	Topuplogs *topuplogs.Client

	Voicemails *voicemails.Client

	Voicemailsettings *voicemailsettings.Client

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *Ngcp) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport

	c.Autoattendants.SetTransport(transport)

	c.Balanceintervals.SetTransport(transport)

	c.Bannedips.SetTransport(transport)

	c.Bannedusers.SetTransport(transport)

	c.Callforwards.SetTransport(transport)

	c.Calllists.SetTransport(transport)

	c.Callqueues.SetTransport(transport)

	c.Callrecordings.SetTransport(transport)

	c.Callrecordingstreams.SetTransport(transport)

	c.Calls.SetTransport(transport)

	c.Capabilities.SetTransport(transport)

	c.Ccmapentries.SetTransport(transport)

	c.Cfmappings.SetTransport(transport)

	c.Conversations.SetTransport(transport)

	c.Customerbalances.SetTransport(transport)

	c.Customerfraudevents.SetTransport(transport)

	c.Customerfraudpreferences.SetTransport(transport)

	c.Customerpreferences.SetTransport(transport)

	c.Customerzonecosts.SetTransport(transport)

	c.Domainpreferences.SetTransport(transport)

	c.Events.SetTransport(transport)

	c.Faxes.SetTransport(transport)

	c.Faxserversettings.SetTransport(transport)

	c.ID.SetTransport(transport)

	c.Invoicetemplates.SetTransport(transport)

	c.Mailtofaxsettings.SetTransport(transport)

	c.Maliciouscalls.SetTransport(transport)

	c.Managersecretary.SetTransport(transport)

	c.Misc.SetTransport(transport)

	c.Numbers.SetTransport(transport)

	c.Operations.SetTransport(transport)

	c.Pbxdevicepreferences.SetTransport(transport)

	c.Pbxdeviceprofilepreferences.SetTransport(transport)

	c.Pbxfielddevicepreferences.SetTransport(transport)

	c.Peeringserverpreferences.SetTransport(transport)

	c.Profilepreferences.SetTransport(transport)

	c.Rtcapps.SetTransport(transport)

	c.Rtcnetworks.SetTransport(transport)

	c.Rtcsessions.SetTransport(transport)

	c.Sipcaptures.SetTransport(transport)

	c.Sms.SetTransport(transport)

	c.Soundgroups.SetTransport(transport)

	c.Soundhandles.SetTransport(transport)

	c.Speeddials.SetTransport(transport)

	c.Subscriberpreferences.SetTransport(transport)

	c.Topuplogs.SetTransport(transport)

	c.Voicemails.SetTransport(transport)

	c.Voicemailsettings.SetTransport(transport)

}
